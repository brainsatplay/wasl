var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require3() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to2, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// node_modules/blob-polyfill/Blob.js
var require_Blob = __commonJS({
  "node_modules/blob-polyfill/Blob.js"(exports) {
    (function(global2) {
      (function(factory) {
        if (typeof define === "function" && define.amd) {
          define(["exports"], factory);
        } else if (typeof exports === "object" && typeof exports.nodeName !== "string") {
          factory(exports);
        } else {
          factory(global2);
        }
      })(function(exports2) {
        "use strict";
        var BlobBuilder = global2.BlobBuilder || global2.WebKitBlobBuilder || global2.MSBlobBuilder || global2.MozBlobBuilder;
        var URL2 = global2.URL || global2.webkitURL || function(href, a) {
          a = document.createElement("a");
          a.href = href;
          return a;
        };
        var origBlob = global2.Blob;
        var createObjectURL = URL2.createObjectURL;
        var revokeObjectURL = URL2.revokeObjectURL;
        var strTag = global2.Symbol && global2.Symbol.toStringTag;
        var blobSupported = false;
        var blobSupportsArrayBufferView = false;
        var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;
        try {
          blobSupported = new Blob(["\xE4"]).size === 2;
          blobSupportsArrayBufferView = new Blob([new Uint8Array([1, 2])]).size === 2;
        } catch (e) {
        }
        function mapArrayBufferViews(ary) {
          return ary.map(function(chunk) {
            if (chunk.buffer instanceof ArrayBuffer) {
              var buf = chunk.buffer;
              if (chunk.byteLength !== buf.byteLength) {
                var copy = new Uint8Array(chunk.byteLength);
                copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
                buf = copy.buffer;
              }
              return buf;
            }
            return chunk;
          });
        }
        function BlobBuilderConstructor(ary, options2) {
          options2 = options2 || {};
          var bb = new BlobBuilder();
          mapArrayBufferViews(ary).forEach(function(part) {
            bb.append(part);
          });
          return options2.type ? bb.getBlob(options2.type) : bb.getBlob();
        }
        function BlobConstructor(ary, options2) {
          return new origBlob(mapArrayBufferViews(ary), options2 || {});
        }
        if (global2.Blob) {
          BlobBuilderConstructor.prototype = Blob.prototype;
          BlobConstructor.prototype = Blob.prototype;
        }
        function stringEncode(string) {
          var pos = 0;
          var len = string.length;
          var Arr = global2.Uint8Array || Array;
          var at = 0;
          var tlen = Math.max(32, len + (len >> 1) + 7);
          var target = new Arr(tlen >> 3 << 3);
          while (pos < len) {
            var value = string.charCodeAt(pos++);
            if (value >= 55296 && value <= 56319) {
              if (pos < len) {
                var extra = string.charCodeAt(pos);
                if ((extra & 64512) === 56320) {
                  ++pos;
                  value = ((value & 1023) << 10) + (extra & 1023) + 65536;
                }
              }
              if (value >= 55296 && value <= 56319) {
                continue;
              }
            }
            if (at + 4 > target.length) {
              tlen += 8;
              tlen *= 1 + pos / string.length * 2;
              tlen = tlen >> 3 << 3;
              var update = new Uint8Array(tlen);
              update.set(target);
              target = update;
            }
            if ((value & 4294967168) === 0) {
              target[at++] = value;
              continue;
            } else if ((value & 4294965248) === 0) {
              target[at++] = value >> 6 & 31 | 192;
            } else if ((value & 4294901760) === 0) {
              target[at++] = value >> 12 & 15 | 224;
              target[at++] = value >> 6 & 63 | 128;
            } else if ((value & 4292870144) === 0) {
              target[at++] = value >> 18 & 7 | 240;
              target[at++] = value >> 12 & 63 | 128;
              target[at++] = value >> 6 & 63 | 128;
            } else {
              continue;
            }
            target[at++] = value & 63 | 128;
          }
          return target.slice(0, at);
        }
        function stringDecode(buf) {
          var end = buf.length;
          var res = [];
          var i = 0;
          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;
              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 128) {
                    codePoint = firstByte;
                  }
                  break;
                case 2:
                  secondByte = buf[i + 1];
                  if ((secondByte & 192) === 128) {
                    tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                    if (tempCodePoint > 127) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                    tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                    if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];
                  if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                    tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                    if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                      codePoint = tempCodePoint;
                    }
                  }
              }
            }
            if (codePoint === null) {
              codePoint = 65533;
              bytesPerSequence = 1;
            } else if (codePoint > 65535) {
              codePoint -= 65536;
              res.push(codePoint >>> 10 & 1023 | 55296);
              codePoint = 56320 | codePoint & 1023;
            }
            res.push(codePoint);
            i += bytesPerSequence;
          }
          var len = res.length;
          var str2 = "";
          var j = 0;
          while (j < len) {
            str2 += String.fromCharCode.apply(String, res.slice(j, j += 4096));
          }
          return str2;
        }
        var textEncode = typeof TextEncoder === "function" ? TextEncoder.prototype.encode.bind(new TextEncoder()) : stringEncode;
        var textDecode = typeof TextDecoder === "function" ? TextDecoder.prototype.decode.bind(new TextDecoder()) : stringDecode;
        function FakeBlobBuilder() {
          function bufferClone(buf) {
            var view = new Array(buf.byteLength);
            var array = new Uint8Array(buf);
            var i = view.length;
            while (i--) {
              view[i] = array[i];
            }
            return view;
          }
          function array2base64(input) {
            var byteToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var output = [];
            for (var i = 0; i < input.length; i += 3) {
              var byte1 = input[i];
              var haveByte2 = i + 1 < input.length;
              var byte2 = haveByte2 ? input[i + 1] : 0;
              var haveByte3 = i + 2 < input.length;
              var byte3 = haveByte3 ? input[i + 2] : 0;
              var outByte1 = byte1 >> 2;
              var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
              var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
              var outByte4 = byte3 & 63;
              if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                  outByte3 = 64;
                }
              }
              output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join("");
          }
          var create = Object.create || function(a) {
            function c() {
            }
            c.prototype = a;
            return new c();
          };
          function getObjectTypeName(o) {
            return Object.prototype.toString.call(o).slice(8, -1);
          }
          function isPrototypeOf(c, o) {
            return typeof c === "object" && Object.prototype.isPrototypeOf.call(c.prototype, o);
          }
          function isDataView(o) {
            return getObjectTypeName(o) === "DataView" || isPrototypeOf(global2.DataView, o);
          }
          var arrayBufferClassNames = [
            "Int8Array",
            "Uint8Array",
            "Uint8ClampedArray",
            "Int16Array",
            "Uint16Array",
            "Int32Array",
            "Uint32Array",
            "Float32Array",
            "Float64Array",
            "ArrayBuffer"
          ];
          function includes(a, v) {
            return a.indexOf(v) !== -1;
          }
          function isArrayBuffer(o) {
            return includes(arrayBufferClassNames, getObjectTypeName(o)) || isPrototypeOf(global2.ArrayBuffer, o);
          }
          function concatTypedarrays(chunks) {
            var size = 0;
            var j = chunks.length;
            while (j--) {
              size += chunks[j].length;
            }
            var b = new Uint8Array(size);
            var offset = 0;
            for (var i = 0; i < chunks.length; i++) {
              var chunk = chunks[i];
              b.set(chunk, offset);
              offset += chunk.byteLength || chunk.length;
            }
            return b;
          }
          function Blob3(chunks, opts) {
            chunks = chunks || [];
            opts = opts == null ? {} : opts;
            for (var i = 0, len = chunks.length; i < len; i++) {
              var chunk = chunks[i];
              if (chunk instanceof Blob3) {
                chunks[i] = chunk._buffer;
              } else if (typeof chunk === "string") {
                chunks[i] = textEncode(chunk);
              } else if (isDataView(chunk)) {
                chunks[i] = bufferClone(chunk.buffer);
              } else if (isArrayBuffer(chunk)) {
                chunks[i] = bufferClone(chunk);
              } else {
                chunks[i] = textEncode(String(chunk));
              }
            }
            this._buffer = global2.Uint8Array ? concatTypedarrays(chunks) : [].concat.apply([], chunks);
            this.size = this._buffer.length;
            this.type = opts.type || "";
            if (/[^\u0020-\u007E]/.test(this.type)) {
              this.type = "";
            } else {
              this.type = this.type.toLowerCase();
            }
          }
          Blob3.prototype.arrayBuffer = function() {
            return Promise.resolve(this._buffer.buffer || this._buffer);
          };
          Blob3.prototype.text = function() {
            return Promise.resolve(textDecode(this._buffer));
          };
          Blob3.prototype.slice = function(start, end, type) {
            var slice = this._buffer.slice(start || 0, end || this._buffer.length);
            return new Blob3([slice], { type });
          };
          Blob3.prototype.toString = function() {
            return "[object Blob]";
          };
          function File2(chunks, name2, opts) {
            opts = opts || {};
            var a = Blob3.call(this, chunks, opts) || this;
            a.name = name2.replace(/\//g, ":");
            a.lastModifiedDate = opts.lastModified ? new Date(opts.lastModified) : new Date();
            a.lastModified = +a.lastModifiedDate;
            return a;
          }
          File2.prototype = create(Blob3.prototype);
          File2.prototype.constructor = File2;
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(File2, Blob3);
          } else {
            try {
              File2.__proto__ = Blob3;
            } catch (e) {
            }
          }
          File2.prototype.toString = function() {
            return "[object File]";
          };
          function FileReader2() {
            if (!(this instanceof FileReader2)) {
              throw new TypeError("Failed to construct 'FileReader': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
            }
            var delegate = document.createDocumentFragment();
            this.addEventListener = delegate.addEventListener;
            this.dispatchEvent = function(evt) {
              var local = this["on" + evt.type];
              if (typeof local === "function")
                local(evt);
              delegate.dispatchEvent(evt);
            };
            this.removeEventListener = delegate.removeEventListener;
          }
          function _read(fr, blob2, kind) {
            if (!(blob2 instanceof Blob3)) {
              throw new TypeError("Failed to execute '" + kind + "' on 'FileReader': parameter 1 is not of type 'Blob'.");
            }
            fr.result = "";
            setTimeout(function() {
              this.readyState = FileReader2.LOADING;
              fr.dispatchEvent(new Event("load"));
              fr.dispatchEvent(new Event("loadend"));
            });
          }
          FileReader2.EMPTY = 0;
          FileReader2.LOADING = 1;
          FileReader2.DONE = 2;
          FileReader2.prototype.error = null;
          FileReader2.prototype.onabort = null;
          FileReader2.prototype.onerror = null;
          FileReader2.prototype.onload = null;
          FileReader2.prototype.onloadend = null;
          FileReader2.prototype.onloadstart = null;
          FileReader2.prototype.onprogress = null;
          FileReader2.prototype.readAsDataURL = function(blob2) {
            _read(this, blob2, "readAsDataURL");
            this.result = "data:" + blob2.type + ";base64," + array2base64(blob2._buffer);
          };
          FileReader2.prototype.readAsText = function(blob2) {
            _read(this, blob2, "readAsText");
            this.result = textDecode(blob2._buffer);
          };
          FileReader2.prototype.readAsArrayBuffer = function(blob2) {
            _read(this, blob2, "readAsText");
            this.result = (blob2._buffer.buffer || blob2._buffer).slice();
          };
          FileReader2.prototype.abort = function() {
          };
          URL2.createObjectURL = function(blob2) {
            return blob2 instanceof Blob3 ? "data:" + blob2.type + ";base64," + array2base64(blob2._buffer) : createObjectURL.call(URL2, blob2);
          };
          URL2.revokeObjectURL = function(url2) {
            revokeObjectURL && revokeObjectURL.call(URL2, url2);
          };
          var _send = global2.XMLHttpRequest && global2.XMLHttpRequest.prototype.send;
          if (_send) {
            XMLHttpRequest.prototype.send = function(data) {
              if (data instanceof Blob3) {
                this.setRequestHeader("Content-Type", data.type);
                _send.call(this, textDecode(data._buffer));
              } else {
                _send.call(this, data);
              }
            };
          }
          exports2.Blob = Blob3;
          exports2.File = File2;
          exports2.FileReader = FileReader2;
          exports2.URL = URL2;
        }
        function fixFileAndXHR() {
          var isIE = !!global2.ActiveXObject || "-ms-scroll-limit" in document.documentElement.style && "-ms-ime-align" in document.documentElement.style;
          var _send = global2.XMLHttpRequest && global2.XMLHttpRequest.prototype.send;
          if (isIE && _send) {
            XMLHttpRequest.prototype.send = function(data) {
              if (data instanceof Blob) {
                this.setRequestHeader("Content-Type", data.type);
                _send.call(this, data);
              } else {
                _send.call(this, data);
              }
            };
          }
          try {
            new File([], "");
            exports2.File = global2.File;
            exports2.FileReader = global2.FileReader;
          } catch (e) {
            try {
              exports2.File = new Function('class File extends Blob {constructor(chunks, name, opts) {opts = opts || {};super(chunks, opts || {});this.name = name.replace(/\\//g, ":");this.lastModifiedDate = opts.lastModified ? new Date(opts.lastModified) : new Date();this.lastModified = +this.lastModifiedDate;}};return new File([], ""), File')();
            } catch (e2) {
              exports2.File = function(b, d2, c) {
                var blob2 = new Blob(b, c);
                var t = c && void 0 !== c.lastModified ? new Date(c.lastModified) : new Date();
                blob2.name = d2.replace(/\//g, ":");
                blob2.lastModifiedDate = t;
                blob2.lastModified = +t;
                blob2.toString = function() {
                  return "[object File]";
                };
                if (strTag) {
                  blob2[strTag] = "File";
                }
                return blob2;
              };
            }
          }
        }
        if (blobSupported) {
          fixFileAndXHR();
          exports2.Blob = blobSupportsArrayBufferView ? global2.Blob : BlobConstructor;
        } else if (blobBuilderSupported) {
          fixFileAndXHR();
          exports2.Blob = BlobBuilderConstructor;
        } else {
          FakeBlobBuilder();
        }
        if (strTag) {
          if (!exports2.File.prototype[strTag])
            exports2.File.prototype[strTag] = "File";
          if (!exports2.Blob.prototype[strTag])
            exports2.Blob.prototype[strTag] = "Blob";
          if (!exports2.FileReader.prototype[strTag])
            exports2.FileReader.prototype[strTag] = "FileReader";
        }
        var blob = exports2.Blob.prototype;
        var stream;
        try {
          new ReadableStream({ type: "bytes" });
          stream = function stream2() {
            var position = 0;
            var blob2 = this;
            return new ReadableStream({
              type: "bytes",
              autoAllocateChunkSize: 524288,
              pull: function(controller) {
                var v = controller.byobRequest.view;
                var chunk = blob2.slice(position, position + v.byteLength);
                return chunk.arrayBuffer().then(function(buffer) {
                  var uint8array = new Uint8Array(buffer);
                  var bytesRead = uint8array.byteLength;
                  position += bytesRead;
                  v.set(uint8array);
                  controller.byobRequest.respond(bytesRead);
                  if (position >= blob2.size)
                    controller.close();
                });
              }
            });
          };
        } catch (e) {
          try {
            new ReadableStream({});
            stream = function stream2(blob2) {
              var position = 0;
              return new ReadableStream({
                pull: function(controller) {
                  var chunk = blob2.slice(position, position + 524288);
                  return chunk.arrayBuffer().then(function(buffer) {
                    position += buffer.byteLength;
                    var uint8array = new Uint8Array(buffer);
                    controller.enqueue(uint8array);
                    if (position == blob2.size)
                      controller.close();
                  });
                }
              });
            };
          } catch (e2) {
            try {
              new Response("").body.getReader().read();
              stream = function stream2() {
                return new Response(this).body;
              };
            } catch (e3) {
              stream = function stream2() {
                throw new Error("Include https://github.com/MattiasBuelens/web-streams-polyfill");
              };
            }
          }
        }
        function promisify(obj) {
          return new Promise(function(resolve2, reject) {
            obj.onload = obj.onerror = function(evt) {
              obj.onload = obj.onerror = null;
              evt.type === "load" ? resolve2(obj.result || obj) : reject(new Error("Failed to read the blob/file"));
            };
          });
        }
        if (!blob.arrayBuffer) {
          blob.arrayBuffer = function arrayBuffer() {
            var fr = new FileReader();
            fr.readAsArrayBuffer(this);
            return promisify(fr);
          };
        }
        if (!blob.text) {
          blob.text = function text() {
            var fr = new FileReader();
            fr.readAsText(this);
            return promisify(fr);
          };
        }
        if (!blob.stream) {
          blob.stream = stream;
        }
      });
    })(typeof self !== "undefined" && self || typeof window !== "undefined" && window || typeof global !== "undefined" && global || exports);
  }
});

// node_modules/cross-blob/browser.js
var browser_exports = {};
__export(browser_exports, {
  default: () => browser_default
});
var import_blob_polyfill, browser_default;
var init_browser = __esm({
  "node_modules/cross-blob/browser.js"() {
    import_blob_polyfill = __toESM(require_Blob(), 1);
    browser_default = import_blob_polyfill.Blob;
  }
});

// node_modules/ajv/dist/compile/codegen/code.js
var require_code = __commonJS({
  "node_modules/ajv/dist/compile/codegen/code.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
    var _CodeOrName = class {
    };
    exports._CodeOrName = _CodeOrName;
    exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    var Name = class extends _CodeOrName {
      constructor(s) {
        super();
        if (!exports.IDENTIFIER.test(s))
          throw new Error("CodeGen: name must be a valid identifier");
        this.str = s;
      }
      toString() {
        return this.str;
      }
      emptyStr() {
        return false;
      }
      get names() {
        return { [this.str]: 1 };
      }
    };
    exports.Name = Name;
    var _Code = class extends _CodeOrName {
      constructor(code) {
        super();
        this._items = typeof code === "string" ? [code] : code;
      }
      toString() {
        return this.str;
      }
      emptyStr() {
        if (this._items.length > 1)
          return false;
        const item = this._items[0];
        return item === "" || item === '""';
      }
      get str() {
        var _a;
        return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c) => `${s}${c}`, "");
      }
      get names() {
        var _a;
        return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c) => {
          if (c instanceof Name)
            names[c.str] = (names[c.str] || 0) + 1;
          return names;
        }, {});
      }
    };
    exports._Code = _Code;
    exports.nil = new _Code("");
    function _2(strs, ...args) {
      const code = [strs[0]];
      let i = 0;
      while (i < args.length) {
        addCodeArg(code, args[i]);
        code.push(strs[++i]);
      }
      return new _Code(code);
    }
    exports._ = _2;
    var plus = new _Code("+");
    function str2(strs, ...args) {
      const expr = [safeStringify(strs[0])];
      let i = 0;
      while (i < args.length) {
        expr.push(plus);
        addCodeArg(expr, args[i]);
        expr.push(plus, safeStringify(strs[++i]));
      }
      optimize(expr);
      return new _Code(expr);
    }
    exports.str = str2;
    function addCodeArg(code, arg) {
      if (arg instanceof _Code)
        code.push(...arg._items);
      else if (arg instanceof Name)
        code.push(arg);
      else
        code.push(interpolate(arg));
    }
    exports.addCodeArg = addCodeArg;
    function optimize(expr) {
      let i = 1;
      while (i < expr.length - 1) {
        if (expr[i] === plus) {
          const res = mergeExprItems(expr[i - 1], expr[i + 1]);
          if (res !== void 0) {
            expr.splice(i - 1, 3, res);
            continue;
          }
          expr[i++] = "+";
        }
        i++;
      }
    }
    function mergeExprItems(a, b) {
      if (b === '""')
        return a;
      if (a === '""')
        return b;
      if (typeof a == "string") {
        if (b instanceof Name || a[a.length - 1] !== '"')
          return;
        if (typeof b != "string")
          return `${a.slice(0, -1)}${b}"`;
        if (b[0] === '"')
          return a.slice(0, -1) + b.slice(1);
        return;
      }
      if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
        return `"${a}${b.slice(1)}`;
      return;
    }
    function strConcat(c1, c2) {
      return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str2`${c1}${c2}`;
    }
    exports.strConcat = strConcat;
    function interpolate(x) {
      return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
    }
    function stringify(x) {
      return new _Code(safeStringify(x));
    }
    exports.stringify = stringify;
    function safeStringify(x) {
      return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    }
    exports.safeStringify = safeStringify;
    function getProperty(key) {
      return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _2`[${key}]`;
    }
    exports.getProperty = getProperty;
    function getEsmExportName(key) {
      if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
        return new _Code(`${key}`);
      }
      throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
    }
    exports.getEsmExportName = getEsmExportName;
    function regexpCode(rx) {
      return new _Code(rx.toString());
    }
    exports.regexpCode = regexpCode;
  }
});

// node_modules/ajv/dist/compile/codegen/scope.js
var require_scope = __commonJS({
  "node_modules/ajv/dist/compile/codegen/scope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
    var code_1 = require_code();
    var ValueError = class extends Error {
      constructor(name2) {
        super(`CodeGen: "code" for ${name2} not defined`);
        this.value = name2.value;
      }
    };
    var UsedValueState;
    (function(UsedValueState2) {
      UsedValueState2[UsedValueState2["Started"] = 0] = "Started";
      UsedValueState2[UsedValueState2["Completed"] = 1] = "Completed";
    })(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
    exports.varKinds = {
      const: new code_1.Name("const"),
      let: new code_1.Name("let"),
      var: new code_1.Name("var")
    };
    var Scope = class {
      constructor({ prefixes, parent } = {}) {
        this._names = {};
        this._prefixes = prefixes;
        this._parent = parent;
      }
      toName(nameOrPrefix) {
        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
      }
      name(prefix) {
        return new code_1.Name(this._newName(prefix));
      }
      _newName(prefix) {
        const ng = this._names[prefix] || this._nameGroup(prefix);
        return `${prefix}${ng.index++}`;
      }
      _nameGroup(prefix) {
        var _a, _b;
        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
          throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
        }
        return this._names[prefix] = { prefix, index: 0 };
      }
    };
    exports.Scope = Scope;
    var ValueScopeName = class extends code_1.Name {
      constructor(prefix, nameStr) {
        super(nameStr);
        this.prefix = prefix;
      }
      setValue(value, { property, itemIndex }) {
        this.value = value;
        this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;
      }
    };
    exports.ValueScopeName = ValueScopeName;
    var line = (0, code_1._)`\n`;
    var ValueScope = class extends Scope {
      constructor(opts) {
        super(opts);
        this._values = {};
        this._scope = opts.scope;
        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
      }
      get() {
        return this._scope;
      }
      name(prefix) {
        return new ValueScopeName(prefix, this._newName(prefix));
      }
      value(nameOrPrefix, value) {
        var _a;
        if (value.ref === void 0)
          throw new Error("CodeGen: ref must be passed in value");
        const name2 = this.toName(nameOrPrefix);
        const { prefix } = name2;
        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
        let vs = this._values[prefix];
        if (vs) {
          const _name = vs.get(valueKey);
          if (_name)
            return _name;
        } else {
          vs = this._values[prefix] = /* @__PURE__ */ new Map();
        }
        vs.set(valueKey, name2);
        const s = this._scope[prefix] || (this._scope[prefix] = []);
        const itemIndex = s.length;
        s[itemIndex] = value.ref;
        name2.setValue(value, { property: prefix, itemIndex });
        return name2;
      }
      getValue(prefix, keyOrRef) {
        const vs = this._values[prefix];
        if (!vs)
          return;
        return vs.get(keyOrRef);
      }
      scopeRefs(scopeName, values = this._values) {
        return this._reduceValues(values, (name2) => {
          if (name2.scopePath === void 0)
            throw new Error(`CodeGen: name "${name2}" has no value`);
          return (0, code_1._)`${scopeName}${name2.scopePath}`;
        });
      }
      scopeCode(values = this._values, usedValues, getCode) {
        return this._reduceValues(values, (name2) => {
          if (name2.value === void 0)
            throw new Error(`CodeGen: name "${name2}" has no value`);
          return name2.value.code;
        }, usedValues, getCode);
      }
      _reduceValues(values, valueCode, usedValues = {}, getCode) {
        let code = code_1.nil;
        for (const prefix in values) {
          const vs = values[prefix];
          if (!vs)
            continue;
          const nameSet = usedValues[prefix] = usedValues[prefix] || /* @__PURE__ */ new Map();
          vs.forEach((name2) => {
            if (nameSet.has(name2))
              return;
            nameSet.set(name2, UsedValueState.Started);
            let c = valueCode(name2);
            if (c) {
              const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
              code = (0, code_1._)`${code}${def} ${name2} = ${c};${this.opts._n}`;
            } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name2)) {
              code = (0, code_1._)`${code}${c}${this.opts._n}`;
            } else {
              throw new ValueError(name2);
            }
            nameSet.set(name2, UsedValueState.Completed);
          });
        }
        return code;
      }
    };
    exports.ValueScope = ValueScope;
  }
});

// node_modules/ajv/dist/compile/codegen/index.js
var require_codegen = __commonJS({
  "node_modules/ajv/dist/compile/codegen/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
    var code_1 = require_code();
    var scope_1 = require_scope();
    var code_2 = require_code();
    Object.defineProperty(exports, "_", { enumerable: true, get: function() {
      return code_2._;
    } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function() {
      return code_2.str;
    } });
    Object.defineProperty(exports, "strConcat", { enumerable: true, get: function() {
      return code_2.strConcat;
    } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
      return code_2.nil;
    } });
    Object.defineProperty(exports, "getProperty", { enumerable: true, get: function() {
      return code_2.getProperty;
    } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return code_2.stringify;
    } });
    Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function() {
      return code_2.regexpCode;
    } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
      return code_2.Name;
    } });
    var scope_2 = require_scope();
    Object.defineProperty(exports, "Scope", { enumerable: true, get: function() {
      return scope_2.Scope;
    } });
    Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function() {
      return scope_2.ValueScope;
    } });
    Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function() {
      return scope_2.ValueScopeName;
    } });
    Object.defineProperty(exports, "varKinds", { enumerable: true, get: function() {
      return scope_2.varKinds;
    } });
    exports.operators = {
      GT: new code_1._Code(">"),
      GTE: new code_1._Code(">="),
      LT: new code_1._Code("<"),
      LTE: new code_1._Code("<="),
      EQ: new code_1._Code("==="),
      NEQ: new code_1._Code("!=="),
      NOT: new code_1._Code("!"),
      OR: new code_1._Code("||"),
      AND: new code_1._Code("&&"),
      ADD: new code_1._Code("+")
    };
    var Node = class {
      optimizeNodes() {
        return this;
      }
      optimizeNames(_names, _constants) {
        return this;
      }
    };
    var Def = class extends Node {
      constructor(varKind, name2, rhs) {
        super();
        this.varKind = varKind;
        this.name = name2;
        this.rhs = rhs;
      }
      render({ es5, _n }) {
        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
        const rhs = this.rhs === void 0 ? "" : ` = ${this.rhs}`;
        return `${varKind} ${this.name}${rhs};` + _n;
      }
      optimizeNames(names, constants) {
        if (!names[this.name.str])
          return;
        if (this.rhs)
          this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
      }
      get names() {
        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
      }
    };
    var Assign = class extends Node {
      constructor(lhs, rhs, sideEffects) {
        super();
        this.lhs = lhs;
        this.rhs = rhs;
        this.sideEffects = sideEffects;
      }
      render({ _n }) {
        return `${this.lhs} = ${this.rhs};` + _n;
      }
      optimizeNames(names, constants) {
        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
          return;
        this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
      }
      get names() {
        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
        return addExprNames(names, this.rhs);
      }
    };
    var AssignOp = class extends Assign {
      constructor(lhs, op, rhs, sideEffects) {
        super(lhs, rhs, sideEffects);
        this.op = op;
      }
      render({ _n }) {
        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
      }
    };
    var Label = class extends Node {
      constructor(label) {
        super();
        this.label = label;
        this.names = {};
      }
      render({ _n }) {
        return `${this.label}:` + _n;
      }
    };
    var Break = class extends Node {
      constructor(label) {
        super();
        this.label = label;
        this.names = {};
      }
      render({ _n }) {
        const label = this.label ? ` ${this.label}` : "";
        return `break${label};` + _n;
      }
    };
    var Throw = class extends Node {
      constructor(error) {
        super();
        this.error = error;
      }
      render({ _n }) {
        return `throw ${this.error};` + _n;
      }
      get names() {
        return this.error.names;
      }
    };
    var AnyCode = class extends Node {
      constructor(code) {
        super();
        this.code = code;
      }
      render({ _n }) {
        return `${this.code};` + _n;
      }
      optimizeNodes() {
        return `${this.code}` ? this : void 0;
      }
      optimizeNames(names, constants) {
        this.code = optimizeExpr(this.code, names, constants);
        return this;
      }
      get names() {
        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
      }
    };
    var ParentNode = class extends Node {
      constructor(nodes = []) {
        super();
        this.nodes = nodes;
      }
      render(opts) {
        return this.nodes.reduce((code, n) => code + n.render(opts), "");
      }
      optimizeNodes() {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
          const n = nodes[i].optimizeNodes();
          if (Array.isArray(n))
            nodes.splice(i, 1, ...n);
          else if (n)
            nodes[i] = n;
          else
            nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : void 0;
      }
      optimizeNames(names, constants) {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
          const n = nodes[i];
          if (n.optimizeNames(names, constants))
            continue;
          subtractNames(names, n.names);
          nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : void 0;
      }
      get names() {
        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
      }
    };
    var BlockNode = class extends ParentNode {
      render(opts) {
        return "{" + opts._n + super.render(opts) + "}" + opts._n;
      }
    };
    var Root = class extends ParentNode {
    };
    var Else = class extends BlockNode {
    };
    Else.kind = "else";
    var If = class extends BlockNode {
      constructor(condition, nodes) {
        super(nodes);
        this.condition = condition;
      }
      render(opts) {
        let code = `if(${this.condition})` + super.render(opts);
        if (this.else)
          code += "else " + this.else.render(opts);
        return code;
      }
      optimizeNodes() {
        super.optimizeNodes();
        const cond = this.condition;
        if (cond === true)
          return this.nodes;
        let e = this.else;
        if (e) {
          const ns = e.optimizeNodes();
          e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
        }
        if (e) {
          if (cond === false)
            return e instanceof If ? e : e.nodes;
          if (this.nodes.length)
            return this;
          return new If(not(cond), e instanceof If ? [e] : e.nodes);
        }
        if (cond === false || !this.nodes.length)
          return void 0;
        return this;
      }
      optimizeNames(names, constants) {
        var _a;
        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        if (!(super.optimizeNames(names, constants) || this.else))
          return;
        this.condition = optimizeExpr(this.condition, names, constants);
        return this;
      }
      get names() {
        const names = super.names;
        addExprNames(names, this.condition);
        if (this.else)
          addNames(names, this.else.names);
        return names;
      }
    };
    If.kind = "if";
    var For = class extends BlockNode {
    };
    For.kind = "for";
    var ForLoop = class extends For {
      constructor(iteration) {
        super();
        this.iteration = iteration;
      }
      render(opts) {
        return `for(${this.iteration})` + super.render(opts);
      }
      optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
          return;
        this.iteration = optimizeExpr(this.iteration, names, constants);
        return this;
      }
      get names() {
        return addNames(super.names, this.iteration.names);
      }
    };
    var ForRange = class extends For {
      constructor(varKind, name2, from2, to2) {
        super();
        this.varKind = varKind;
        this.name = name2;
        this.from = from2;
        this.to = to2;
      }
      render(opts) {
        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
        const { name: name2, from: from2, to: to2 } = this;
        return `for(${varKind} ${name2}=${from2}; ${name2}<${to2}; ${name2}++)` + super.render(opts);
      }
      get names() {
        const names = addExprNames(super.names, this.from);
        return addExprNames(names, this.to);
      }
    };
    var ForIter = class extends For {
      constructor(loop, varKind, name2, iterable) {
        super();
        this.loop = loop;
        this.varKind = varKind;
        this.name = name2;
        this.iterable = iterable;
      }
      render(opts) {
        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
      }
      optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
          return;
        this.iterable = optimizeExpr(this.iterable, names, constants);
        return this;
      }
      get names() {
        return addNames(super.names, this.iterable.names);
      }
    };
    var Func = class extends BlockNode {
      constructor(name2, args, async) {
        super();
        this.name = name2;
        this.args = args;
        this.async = async;
      }
      render(opts) {
        const _async = this.async ? "async " : "";
        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
      }
    };
    Func.kind = "func";
    var Return = class extends ParentNode {
      render(opts) {
        return "return " + super.render(opts);
      }
    };
    Return.kind = "return";
    var Try = class extends BlockNode {
      render(opts) {
        let code = "try" + super.render(opts);
        if (this.catch)
          code += this.catch.render(opts);
        if (this.finally)
          code += this.finally.render(opts);
        return code;
      }
      optimizeNodes() {
        var _a, _b;
        super.optimizeNodes();
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
        return this;
      }
      optimizeNames(names, constants) {
        var _a, _b;
        super.optimizeNames(names, constants);
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
        return this;
      }
      get names() {
        const names = super.names;
        if (this.catch)
          addNames(names, this.catch.names);
        if (this.finally)
          addNames(names, this.finally.names);
        return names;
      }
    };
    var Catch = class extends BlockNode {
      constructor(error) {
        super();
        this.error = error;
      }
      render(opts) {
        return `catch(${this.error})` + super.render(opts);
      }
    };
    Catch.kind = "catch";
    var Finally = class extends BlockNode {
      render(opts) {
        return "finally" + super.render(opts);
      }
    };
    Finally.kind = "finally";
    var CodeGen = class {
      constructor(extScope, opts = {}) {
        this._values = {};
        this._blockStarts = [];
        this._constants = {};
        this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
        this._extScope = extScope;
        this._scope = new scope_1.Scope({ parent: extScope });
        this._nodes = [new Root()];
      }
      toString() {
        return this._root.render(this.opts);
      }
      name(prefix) {
        return this._scope.name(prefix);
      }
      scopeName(prefix) {
        return this._extScope.name(prefix);
      }
      scopeValue(prefixOrName, value) {
        const name2 = this._extScope.value(prefixOrName, value);
        const vs = this._values[name2.prefix] || (this._values[name2.prefix] = /* @__PURE__ */ new Set());
        vs.add(name2);
        return name2;
      }
      getScopeValue(prefix, keyOrRef) {
        return this._extScope.getValue(prefix, keyOrRef);
      }
      scopeRefs(scopeName) {
        return this._extScope.scopeRefs(scopeName, this._values);
      }
      scopeCode() {
        return this._extScope.scopeCode(this._values);
      }
      _def(varKind, nameOrPrefix, rhs, constant) {
        const name2 = this._scope.toName(nameOrPrefix);
        if (rhs !== void 0 && constant)
          this._constants[name2.str] = rhs;
        this._leafNode(new Def(varKind, name2, rhs));
        return name2;
      }
      const(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
      }
      let(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
      }
      var(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
      }
      assign(lhs, rhs, sideEffects) {
        return this._leafNode(new Assign(lhs, rhs, sideEffects));
      }
      add(lhs, rhs) {
        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
      }
      code(c) {
        if (typeof c == "function")
          c();
        else if (c !== code_1.nil)
          this._leafNode(new AnyCode(c));
        return this;
      }
      object(...keyValues) {
        const code = ["{"];
        for (const [key, value] of keyValues) {
          if (code.length > 1)
            code.push(",");
          code.push(key);
          if (key !== value || this.opts.es5) {
            code.push(":");
            (0, code_1.addCodeArg)(code, value);
          }
        }
        code.push("}");
        return new code_1._Code(code);
      }
      if(condition, thenBody, elseBody) {
        this._blockNode(new If(condition));
        if (thenBody && elseBody) {
          this.code(thenBody).else().code(elseBody).endIf();
        } else if (thenBody) {
          this.code(thenBody).endIf();
        } else if (elseBody) {
          throw new Error('CodeGen: "else" body without "then" body');
        }
        return this;
      }
      elseIf(condition) {
        return this._elseNode(new If(condition));
      }
      else() {
        return this._elseNode(new Else());
      }
      endIf() {
        return this._endBlockNode(If, Else);
      }
      _for(node, forBody) {
        this._blockNode(node);
        if (forBody)
          this.code(forBody).endFor();
        return this;
      }
      for(iteration, forBody) {
        return this._for(new ForLoop(iteration), forBody);
      }
      forRange(nameOrPrefix, from2, to2, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
        const name2 = this._scope.toName(nameOrPrefix);
        return this._for(new ForRange(varKind, name2, from2, to2), () => forBody(name2));
      }
      forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
        const name2 = this._scope.toName(nameOrPrefix);
        if (this.opts.es5) {
          const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
          return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, (i) => {
            this.var(name2, (0, code_1._)`${arr}[${i}]`);
            forBody(name2);
          });
        }
        return this._for(new ForIter("of", varKind, name2, iterable), () => forBody(name2));
      }
      forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
        if (this.opts.ownProperties) {
          return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
        }
        const name2 = this._scope.toName(nameOrPrefix);
        return this._for(new ForIter("in", varKind, name2, obj), () => forBody(name2));
      }
      endFor() {
        return this._endBlockNode(For);
      }
      label(label) {
        return this._leafNode(new Label(label));
      }
      break(label) {
        return this._leafNode(new Break(label));
      }
      return(value) {
        const node = new Return();
        this._blockNode(node);
        this.code(value);
        if (node.nodes.length !== 1)
          throw new Error('CodeGen: "return" should have one node');
        return this._endBlockNode(Return);
      }
      try(tryBody, catchCode, finallyCode) {
        if (!catchCode && !finallyCode)
          throw new Error('CodeGen: "try" without "catch" and "finally"');
        const node = new Try();
        this._blockNode(node);
        this.code(tryBody);
        if (catchCode) {
          const error = this.name("e");
          this._currNode = node.catch = new Catch(error);
          catchCode(error);
        }
        if (finallyCode) {
          this._currNode = node.finally = new Finally();
          this.code(finallyCode);
        }
        return this._endBlockNode(Catch, Finally);
      }
      throw(error) {
        return this._leafNode(new Throw(error));
      }
      block(body, nodeCount) {
        this._blockStarts.push(this._nodes.length);
        if (body)
          this.code(body).endBlock(nodeCount);
        return this;
      }
      endBlock(nodeCount) {
        const len = this._blockStarts.pop();
        if (len === void 0)
          throw new Error("CodeGen: not in self-balancing block");
        const toClose = this._nodes.length - len;
        if (toClose < 0 || nodeCount !== void 0 && toClose !== nodeCount) {
          throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
        }
        this._nodes.length = len;
        return this;
      }
      func(name2, args = code_1.nil, async, funcBody) {
        this._blockNode(new Func(name2, args, async));
        if (funcBody)
          this.code(funcBody).endFunc();
        return this;
      }
      endFunc() {
        return this._endBlockNode(Func);
      }
      optimize(n = 1) {
        while (n-- > 0) {
          this._root.optimizeNodes();
          this._root.optimizeNames(this._root.names, this._constants);
        }
      }
      _leafNode(node) {
        this._currNode.nodes.push(node);
        return this;
      }
      _blockNode(node) {
        this._currNode.nodes.push(node);
        this._nodes.push(node);
      }
      _endBlockNode(N1, N2) {
        const n = this._currNode;
        if (n instanceof N1 || N2 && n instanceof N2) {
          this._nodes.pop();
          return this;
        }
        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
      }
      _elseNode(node) {
        const n = this._currNode;
        if (!(n instanceof If)) {
          throw new Error('CodeGen: "else" without "if"');
        }
        this._currNode = n.else = node;
        return this;
      }
      get _root() {
        return this._nodes[0];
      }
      get _currNode() {
        const ns = this._nodes;
        return ns[ns.length - 1];
      }
      set _currNode(node) {
        const ns = this._nodes;
        ns[ns.length - 1] = node;
      }
    };
    exports.CodeGen = CodeGen;
    function addNames(names, from2) {
      for (const n in from2)
        names[n] = (names[n] || 0) + (from2[n] || 0);
      return names;
    }
    function addExprNames(names, from2) {
      return from2 instanceof code_1._CodeOrName ? addNames(names, from2.names) : names;
    }
    function optimizeExpr(expr, names, constants) {
      if (expr instanceof code_1.Name)
        return replaceName(expr);
      if (!canOptimize(expr))
        return expr;
      return new code_1._Code(expr._items.reduce((items, c) => {
        if (c instanceof code_1.Name)
          c = replaceName(c);
        if (c instanceof code_1._Code)
          items.push(...c._items);
        else
          items.push(c);
        return items;
      }, []));
      function replaceName(n) {
        const c = constants[n.str];
        if (c === void 0 || names[n.str] !== 1)
          return n;
        delete names[n.str];
        return c;
      }
      function canOptimize(e) {
        return e instanceof code_1._Code && e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== void 0);
      }
    }
    function subtractNames(names, from2) {
      for (const n in from2)
        names[n] = (names[n] || 0) - (from2[n] || 0);
    }
    function not(x) {
      return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._)`!${par(x)}`;
    }
    exports.not = not;
    var andCode = mappend(exports.operators.AND);
    function and(...args) {
      return args.reduce(andCode);
    }
    exports.and = and;
    var orCode = mappend(exports.operators.OR);
    function or(...args) {
      return args.reduce(orCode);
    }
    exports.or = or;
    function mappend(op) {
      return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;
    }
    function par(x) {
      return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;
    }
  }
});

// node_modules/ajv/dist/compile/util.js
var require_util = __commonJS({
  "node_modules/ajv/dist/compile/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
    var codegen_1 = require_codegen();
    var code_1 = require_code();
    function toHash(arr) {
      const hash = {};
      for (const item of arr)
        hash[item] = true;
      return hash;
    }
    exports.toHash = toHash;
    function alwaysValidSchema(it, schema) {
      if (typeof schema == "boolean")
        return schema;
      if (Object.keys(schema).length === 0)
        return true;
      checkUnknownRules(it, schema);
      return !schemaHasRules(schema, it.self.RULES.all);
    }
    exports.alwaysValidSchema = alwaysValidSchema;
    function checkUnknownRules(it, schema = it.schema) {
      const { opts, self: self2 } = it;
      if (!opts.strictSchema)
        return;
      if (typeof schema === "boolean")
        return;
      const rules = self2.RULES.keywords;
      for (const key in schema) {
        if (!rules[key])
          checkStrictMode(it, `unknown keyword: "${key}"`);
      }
    }
    exports.checkUnknownRules = checkUnknownRules;
    function schemaHasRules(schema, rules) {
      if (typeof schema == "boolean")
        return !schema;
      for (const key in schema)
        if (rules[key])
          return true;
      return false;
    }
    exports.schemaHasRules = schemaHasRules;
    function schemaHasRulesButRef(schema, RULES) {
      if (typeof schema == "boolean")
        return !schema;
      for (const key in schema)
        if (key !== "$ref" && RULES.all[key])
          return true;
      return false;
    }
    exports.schemaHasRulesButRef = schemaHasRulesButRef;
    function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
      if (!$data) {
        if (typeof schema == "number" || typeof schema == "boolean")
          return schema;
        if (typeof schema == "string")
          return (0, codegen_1._)`${schema}`;
      }
      return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
    }
    exports.schemaRefOrVal = schemaRefOrVal;
    function unescapeFragment(str2) {
      return unescapeJsonPointer(decodeURIComponent(str2));
    }
    exports.unescapeFragment = unescapeFragment;
    function escapeFragment(str2) {
      return encodeURIComponent(escapeJsonPointer(str2));
    }
    exports.escapeFragment = escapeFragment;
    function escapeJsonPointer(str2) {
      if (typeof str2 == "number")
        return `${str2}`;
      return str2.replace(/~/g, "~0").replace(/\//g, "~1");
    }
    exports.escapeJsonPointer = escapeJsonPointer;
    function unescapeJsonPointer(str2) {
      return str2.replace(/~1/g, "/").replace(/~0/g, "~");
    }
    exports.unescapeJsonPointer = unescapeJsonPointer;
    function eachItem(xs, f) {
      if (Array.isArray(xs)) {
        for (const x of xs)
          f(x);
      } else {
        f(xs);
      }
    }
    exports.eachItem = eachItem;
    function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
      return (gen, from2, to2, toName) => {
        const res = to2 === void 0 ? from2 : to2 instanceof codegen_1.Name ? (from2 instanceof codegen_1.Name ? mergeNames(gen, from2, to2) : mergeToName(gen, from2, to2), to2) : from2 instanceof codegen_1.Name ? (mergeToName(gen, to2, from2), from2) : mergeValues(from2, to2);
        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
      };
    }
    exports.mergeEvaluated = {
      props: makeMergeEvaluated({
        mergeNames: (gen, from2, to2) => gen.if((0, codegen_1._)`${to2} !== true && ${from2} !== undefined`, () => {
          gen.if((0, codegen_1._)`${from2} === true`, () => gen.assign(to2, true), () => gen.assign(to2, (0, codegen_1._)`${to2} || {}`).code((0, codegen_1._)`Object.assign(${to2}, ${from2})`));
        }),
        mergeToName: (gen, from2, to2) => gen.if((0, codegen_1._)`${to2} !== true`, () => {
          if (from2 === true) {
            gen.assign(to2, true);
          } else {
            gen.assign(to2, (0, codegen_1._)`${to2} || {}`);
            setEvaluated(gen, to2, from2);
          }
        }),
        mergeValues: (from2, to2) => from2 === true ? true : { ...from2, ...to2 },
        resultToName: evaluatedPropsToName
      }),
      items: makeMergeEvaluated({
        mergeNames: (gen, from2, to2) => gen.if((0, codegen_1._)`${to2} !== true && ${from2} !== undefined`, () => gen.assign(to2, (0, codegen_1._)`${from2} === true ? true : ${to2} > ${from2} ? ${to2} : ${from2}`)),
        mergeToName: (gen, from2, to2) => gen.if((0, codegen_1._)`${to2} !== true`, () => gen.assign(to2, from2 === true ? true : (0, codegen_1._)`${to2} > ${from2} ? ${to2} : ${from2}`)),
        mergeValues: (from2, to2) => from2 === true ? true : Math.max(from2, to2),
        resultToName: (gen, items) => gen.var("items", items)
      })
    };
    function evaluatedPropsToName(gen, ps) {
      if (ps === true)
        return gen.var("props", true);
      const props = gen.var("props", (0, codegen_1._)`{}`);
      if (ps !== void 0)
        setEvaluated(gen, props, ps);
      return props;
    }
    exports.evaluatedPropsToName = evaluatedPropsToName;
    function setEvaluated(gen, props, ps) {
      Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));
    }
    exports.setEvaluated = setEvaluated;
    var snippets = {};
    function useFunc(gen, f) {
      return gen.scopeValue("func", {
        ref: f,
        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))
      });
    }
    exports.useFunc = useFunc;
    var Type;
    (function(Type2) {
      Type2[Type2["Num"] = 0] = "Num";
      Type2[Type2["Str"] = 1] = "Str";
    })(Type = exports.Type || (exports.Type = {}));
    function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
      if (dataProp instanceof codegen_1.Name) {
        const isNumber = dataPropType === Type.Num;
        return jsPropertySyntax ? isNumber ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
      }
      return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
    }
    exports.getErrorPath = getErrorPath;
    function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
      if (!mode)
        return;
      msg = `strict mode: ${msg}`;
      if (mode === true)
        throw new Error(msg);
      it.self.logger.warn(msg);
    }
    exports.checkStrictMode = checkStrictMode;
  }
});

// node_modules/ajv/dist/compile/names.js
var require_names = __commonJS({
  "node_modules/ajv/dist/compile/names.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var names = {
      data: new codegen_1.Name("data"),
      valCxt: new codegen_1.Name("valCxt"),
      instancePath: new codegen_1.Name("instancePath"),
      parentData: new codegen_1.Name("parentData"),
      parentDataProperty: new codegen_1.Name("parentDataProperty"),
      rootData: new codegen_1.Name("rootData"),
      dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
      vErrors: new codegen_1.Name("vErrors"),
      errors: new codegen_1.Name("errors"),
      this: new codegen_1.Name("this"),
      self: new codegen_1.Name("self"),
      scope: new codegen_1.Name("scope"),
      json: new codegen_1.Name("json"),
      jsonPos: new codegen_1.Name("jsonPos"),
      jsonLen: new codegen_1.Name("jsonLen"),
      jsonPart: new codegen_1.Name("jsonPart")
    };
    exports.default = names;
  }
});

// node_modules/ajv/dist/compile/errors.js
var require_errors = __commonJS({
  "node_modules/ajv/dist/compile/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var names_1 = require_names();
    exports.keywordError = {
      message: ({ keyword }) => (0, codegen_1.str)`must pass "${keyword}" keyword validation`
    };
    exports.keyword$DataError = {
      message: ({ keyword, schemaType }) => schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
    };
    function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
      const { it } = cxt;
      const { gen, compositeRule, allErrors } = it;
      const errObj = errorObjectCode(cxt, error, errorPaths);
      if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
        addError(gen, errObj);
      } else {
        returnErrors(it, (0, codegen_1._)`[${errObj}]`);
      }
    }
    exports.reportError = reportError;
    function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
      const { it } = cxt;
      const { gen, compositeRule, allErrors } = it;
      const errObj = errorObjectCode(cxt, error, errorPaths);
      addError(gen, errObj);
      if (!(compositeRule || allErrors)) {
        returnErrors(it, names_1.default.vErrors);
      }
    }
    exports.reportExtraError = reportExtraError;
    function resetErrorsCount(gen, errsCount) {
      gen.assign(names_1.default.errors, errsCount);
      gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
    }
    exports.resetErrorsCount = resetErrorsCount;
    function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
      if (errsCount === void 0)
        throw new Error("ajv implementation error");
      const err = gen.name("err");
      gen.forRange("i", errsCount, names_1.default.errors, (i) => {
        gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
        gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
        gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
        if (it.opts.verbose) {
          gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
          gen.assign((0, codegen_1._)`${err}.data`, data);
        }
      });
    }
    exports.extendErrors = extendErrors;
    function addError(gen, errObj) {
      const err = gen.const("err", errObj);
      gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
      gen.code((0, codegen_1._)`${names_1.default.errors}++`);
    }
    function returnErrors(it, errs) {
      const { gen, validateName, schemaEnv } = it;
      if (schemaEnv.$async) {
        gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
      } else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
        gen.return(false);
      }
    }
    var E = {
      keyword: new codegen_1.Name("keyword"),
      schemaPath: new codegen_1.Name("schemaPath"),
      params: new codegen_1.Name("params"),
      propertyName: new codegen_1.Name("propertyName"),
      message: new codegen_1.Name("message"),
      schema: new codegen_1.Name("schema"),
      parentSchema: new codegen_1.Name("parentSchema")
    };
    function errorObjectCode(cxt, error, errorPaths) {
      const { createErrors } = cxt.it;
      if (createErrors === false)
        return (0, codegen_1._)`{}`;
      return errorObject(cxt, error, errorPaths);
    }
    function errorObject(cxt, error, errorPaths = {}) {
      const { gen, it } = cxt;
      const keyValues = [
        errorInstancePath(it, errorPaths),
        errorSchemaPath(cxt, errorPaths)
      ];
      extraErrorProps(cxt, error, keyValues);
      return gen.object(...keyValues);
    }
    function errorInstancePath({ errorPath }, { instancePath }) {
      const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
      return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
    }
    function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
      let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
      if (schemaPath) {
        schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
      }
      return [E.schemaPath, schPath];
    }
    function extraErrorProps(cxt, { params, message }, keyValues) {
      const { keyword, data, schemaValue, it } = cxt;
      const { opts, propertyName, topSchemaRef, schemaPath } = it;
      keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`]);
      if (opts.messages) {
        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
      }
      if (opts.verbose) {
        keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
      }
      if (propertyName)
        keyValues.push([E.propertyName, propertyName]);
    }
  }
});

// node_modules/ajv/dist/compile/validate/boolSchema.js
var require_boolSchema = __commonJS({
  "node_modules/ajv/dist/compile/validate/boolSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
    var errors_1 = require_errors();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var boolError = {
      message: "boolean schema is false"
    };
    function topBoolOrEmptySchema(it) {
      const { gen, schema, validateName } = it;
      if (schema === false) {
        falseSchemaError(it, false);
      } else if (typeof schema == "object" && schema.$async === true) {
        gen.return(names_1.default.data);
      } else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, null);
        gen.return(true);
      }
    }
    exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
    function boolOrEmptySchema(it, valid2) {
      const { gen, schema } = it;
      if (schema === false) {
        gen.var(valid2, false);
        falseSchemaError(it);
      } else {
        gen.var(valid2, true);
      }
    }
    exports.boolOrEmptySchema = boolOrEmptySchema;
    function falseSchemaError(it, overrideAllErrors) {
      const { gen, data } = it;
      const cxt = {
        gen,
        keyword: "false schema",
        data,
        schema: false,
        schemaCode: false,
        schemaValue: false,
        params: {},
        it
      };
      (0, errors_1.reportError)(cxt, boolError, void 0, overrideAllErrors);
    }
  }
});

// node_modules/ajv/dist/compile/rules.js
var require_rules = __commonJS({
  "node_modules/ajv/dist/compile/rules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRules = exports.isJSONType = void 0;
    var _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
    var jsonTypes = new Set(_jsonTypes);
    function isJSONType(x) {
      return typeof x == "string" && jsonTypes.has(x);
    }
    exports.isJSONType = isJSONType;
    function getRules() {
      const groups = {
        number: { type: "number", rules: [] },
        string: { type: "string", rules: [] },
        array: { type: "array", rules: [] },
        object: { type: "object", rules: [] }
      };
      return {
        types: { ...groups, integer: true, boolean: true, null: true },
        rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
        post: { rules: [] },
        all: {},
        keywords: {}
      };
    }
    exports.getRules = getRules;
  }
});

// node_modules/ajv/dist/compile/validate/applicability.js
var require_applicability = __commonJS({
  "node_modules/ajv/dist/compile/validate/applicability.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
    function schemaHasRulesForType({ schema, self: self2 }, type) {
      const group = self2.RULES.types[type];
      return group && group !== true && shouldUseGroup(schema, group);
    }
    exports.schemaHasRulesForType = schemaHasRulesForType;
    function shouldUseGroup(schema, group) {
      return group.rules.some((rule) => shouldUseRule(schema, rule));
    }
    exports.shouldUseGroup = shouldUseGroup;
    function shouldUseRule(schema, rule) {
      var _a;
      return schema[rule.keyword] !== void 0 || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== void 0));
    }
    exports.shouldUseRule = shouldUseRule;
  }
});

// node_modules/ajv/dist/compile/validate/dataType.js
var require_dataType = __commonJS({
  "node_modules/ajv/dist/compile/validate/dataType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
    var rules_1 = require_rules();
    var applicability_1 = require_applicability();
    var errors_1 = require_errors();
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var DataType;
    (function(DataType2) {
      DataType2[DataType2["Correct"] = 0] = "Correct";
      DataType2[DataType2["Wrong"] = 1] = "Wrong";
    })(DataType = exports.DataType || (exports.DataType = {}));
    function getSchemaTypes(schema) {
      const types = getJSONTypes(schema.type);
      const hasNull = types.includes("null");
      if (hasNull) {
        if (schema.nullable === false)
          throw new Error("type: null contradicts nullable: false");
      } else {
        if (!types.length && schema.nullable !== void 0) {
          throw new Error('"nullable" cannot be used without "type"');
        }
        if (schema.nullable === true)
          types.push("null");
      }
      return types;
    }
    exports.getSchemaTypes = getSchemaTypes;
    function getJSONTypes(ts) {
      const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
      if (types.every(rules_1.isJSONType))
        return types;
      throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
    }
    exports.getJSONTypes = getJSONTypes;
    function coerceAndCheckDataType(it, types) {
      const { gen, data, opts } = it;
      const coerceTo = coerceToTypes(types, opts.coerceTypes);
      const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
      if (checkTypes) {
        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
        gen.if(wrongType, () => {
          if (coerceTo.length)
            coerceData(it, types, coerceTo);
          else
            reportTypeError(it);
        });
      }
      return checkTypes;
    }
    exports.coerceAndCheckDataType = coerceAndCheckDataType;
    var COERCIBLE = /* @__PURE__ */ new Set(["string", "number", "integer", "boolean", "null"]);
    function coerceToTypes(types, coerceTypes) {
      return coerceTypes ? types.filter((t) => COERCIBLE.has(t) || coerceTypes === "array" && t === "array") : [];
    }
    function coerceData(it, types, coerceTo) {
      const { gen, data, opts } = it;
      const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
      const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
      if (opts.coerceTypes === "array") {
        gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
      }
      gen.if((0, codegen_1._)`${coerced} !== undefined`);
      for (const t of coerceTo) {
        if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") {
          coerceSpecificType(t);
        }
      }
      gen.else();
      reportTypeError(it);
      gen.endIf();
      gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
        gen.assign(data, coerced);
        assignParentData(it, coerced);
      });
      function coerceSpecificType(t) {
        switch (t) {
          case "string":
            gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
            return;
          case "number":
            gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
            return;
          case "integer":
            gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
            return;
          case "boolean":
            gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
            return;
          case "null":
            gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
            gen.assign(coerced, null);
            return;
          case "array":
            gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
        }
      }
    }
    function assignParentData({ gen, parentData, parentDataProperty }, expr) {
      gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
    }
    function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
      const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
      let cond;
      switch (dataType) {
        case "null":
          return (0, codegen_1._)`${data} ${EQ} null`;
        case "array":
          cond = (0, codegen_1._)`Array.isArray(${data})`;
          break;
        case "object":
          cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
          break;
        case "integer":
          cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
          break;
        case "number":
          cond = numCond();
          break;
        default:
          return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
      }
      return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
      function numCond(_cond = codegen_1.nil) {
        return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
      }
    }
    exports.checkDataType = checkDataType;
    function checkDataTypes(dataTypes, data, strictNums, correct) {
      if (dataTypes.length === 1) {
        return checkDataType(dataTypes[0], data, strictNums, correct);
      }
      let cond;
      const types = (0, util_1.toHash)(dataTypes);
      if (types.array && types.object) {
        const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
        cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
        delete types.null;
        delete types.array;
        delete types.object;
      } else {
        cond = codegen_1.nil;
      }
      if (types.number)
        delete types.integer;
      for (const t in types)
        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
      return cond;
    }
    exports.checkDataTypes = checkDataTypes;
    var typeError = {
      message: ({ schema }) => `must be ${schema}`,
      params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`
    };
    function reportTypeError(it) {
      const cxt = getTypeErrorContext(it);
      (0, errors_1.reportError)(cxt, typeError);
    }
    exports.reportTypeError = reportTypeError;
    function getTypeErrorContext(it) {
      const { gen, data, schema } = it;
      const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
      return {
        gen,
        keyword: "type",
        data,
        schema: schema.type,
        schemaCode,
        schemaValue: schemaCode,
        parentSchema: schema,
        params: {},
        it
      };
    }
  }
});

// node_modules/ajv/dist/compile/validate/defaults.js
var require_defaults = __commonJS({
  "node_modules/ajv/dist/compile/validate/defaults.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assignDefaults = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    function assignDefaults(it, ty) {
      const { properties, items } = it.schema;
      if (ty === "object" && properties) {
        for (const key in properties) {
          assignDefault(it, key, properties[key].default);
        }
      } else if (ty === "array" && Array.isArray(items)) {
        items.forEach((sch, i) => assignDefault(it, i, sch.default));
      }
    }
    exports.assignDefaults = assignDefaults;
    function assignDefault(it, prop, defaultValue) {
      const { gen, compositeRule, data, opts } = it;
      if (defaultValue === void 0)
        return;
      const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
      if (compositeRule) {
        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
        return;
      }
      let condition = (0, codegen_1._)`${childData} === undefined`;
      if (opts.useDefaults === "empty") {
        condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
      }
      gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
    }
  }
});

// node_modules/ajv/dist/vocabularies/code.js
var require_code2 = __commonJS({
  "node_modules/ajv/dist/vocabularies/code.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var names_1 = require_names();
    var util_2 = require_util();
    function checkReportMissingProp(cxt, prop) {
      const { gen, data, it } = cxt;
      gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
        cxt.setParams({ missingProperty: (0, codegen_1._)`${prop}` }, true);
        cxt.error();
      });
    }
    exports.checkReportMissingProp = checkReportMissingProp;
    function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
      return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
    }
    exports.checkMissingProp = checkMissingProp;
    function reportMissingProp(cxt, missing) {
      cxt.setParams({ missingProperty: missing }, true);
      cxt.error();
    }
    exports.reportMissingProp = reportMissingProp;
    function hasPropFunc(gen) {
      return gen.scopeValue("func", {
        ref: Object.prototype.hasOwnProperty,
        code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
      });
    }
    exports.hasPropFunc = hasPropFunc;
    function isOwnProperty(gen, data, property) {
      return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
    }
    exports.isOwnProperty = isOwnProperty;
    function propertyInData(gen, data, property, ownProperties) {
      const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
      return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;
    }
    exports.propertyInData = propertyInData;
    function noPropertyInData(gen, data, property, ownProperties) {
      const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;
      return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
    }
    exports.noPropertyInData = noPropertyInData;
    function allSchemaProperties(schemaMap) {
      return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
    }
    exports.allSchemaProperties = allSchemaProperties;
    function schemaProperties(it, schemaMap) {
      return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
    }
    exports.schemaProperties = schemaProperties;
    function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
      const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
      const valCxt = [
        [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
        [names_1.default.parentData, it.parentData],
        [names_1.default.parentDataProperty, it.parentDataProperty],
        [names_1.default.rootData, names_1.default.rootData]
      ];
      if (it.opts.dynamicRef)
        valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
      const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
      return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
    }
    exports.callValidateCode = callValidateCode;
    var newRegExp = (0, codegen_1._)`new RegExp`;
    function usePattern({ gen, it: { opts } }, pattern) {
      const u = opts.unicodeRegExp ? "u" : "";
      const { regExp } = opts.code;
      const rx = regExp(pattern, u);
      return gen.scopeValue("pattern", {
        key: rx.toString(),
        ref: rx,
        code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`
      });
    }
    exports.usePattern = usePattern;
    function validateArray(cxt) {
      const { gen, data, keyword, it } = cxt;
      const valid2 = gen.name("valid");
      if (it.allErrors) {
        const validArr = gen.let("valid", true);
        validateItems(() => gen.assign(validArr, false));
        return validArr;
      }
      gen.var(valid2, true);
      validateItems(() => gen.break());
      return valid2;
      function validateItems(notValid) {
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        gen.forRange("i", 0, len, (i) => {
          cxt.subschema({
            keyword,
            dataProp: i,
            dataPropType: util_1.Type.Num
          }, valid2);
          gen.if((0, codegen_1.not)(valid2), notValid);
        });
      }
    }
    exports.validateArray = validateArray;
    function validateUnion(cxt) {
      const { gen, schema, keyword, it } = cxt;
      if (!Array.isArray(schema))
        throw new Error("ajv implementation error");
      const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
      if (alwaysValid && !it.opts.unevaluated)
        return;
      const valid2 = gen.let("valid", false);
      const schValid = gen.name("_valid");
      gen.block(() => schema.forEach((_sch, i) => {
        const schCxt = cxt.subschema({
          keyword,
          schemaProp: i,
          compositeRule: true
        }, schValid);
        gen.assign(valid2, (0, codegen_1._)`${valid2} || ${schValid}`);
        const merged = cxt.mergeValidEvaluated(schCxt, schValid);
        if (!merged)
          gen.if((0, codegen_1.not)(valid2));
      }));
      cxt.result(valid2, () => cxt.reset(), () => cxt.error(true));
    }
    exports.validateUnion = validateUnion;
  }
});

// node_modules/ajv/dist/compile/validate/keyword.js
var require_keyword = __commonJS({
  "node_modules/ajv/dist/compile/validate/keyword.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var code_1 = require_code2();
    var errors_1 = require_errors();
    function macroKeywordCode(cxt, def) {
      const { gen, keyword, schema, parentSchema, it } = cxt;
      const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
      const schemaRef = useKeyword(gen, keyword, macroSchema);
      if (it.opts.validateSchema !== false)
        it.self.validateSchema(macroSchema, true);
      const valid2 = gen.name("valid");
      cxt.subschema({
        schema: macroSchema,
        schemaPath: codegen_1.nil,
        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
        topSchemaRef: schemaRef,
        compositeRule: true
      }, valid2);
      cxt.pass(valid2, () => cxt.error(true));
    }
    exports.macroKeywordCode = macroKeywordCode;
    function funcKeywordCode(cxt, def) {
      var _a;
      const { gen, keyword, schema, parentSchema, $data, it } = cxt;
      checkAsyncKeyword(it, def);
      const validate2 = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
      const validateRef = useKeyword(gen, keyword, validate2);
      const valid2 = gen.let("valid");
      cxt.block$data(valid2, validateKeyword);
      cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid2);
      function validateKeyword() {
        if (def.errors === false) {
          assignValid();
          if (def.modifying)
            modifyData(cxt);
          reportErrs(() => cxt.error());
        } else {
          const ruleErrs = def.async ? validateAsync() : validateSync();
          if (def.modifying)
            modifyData(cxt);
          reportErrs(() => addErrs(cxt, ruleErrs));
        }
      }
      function validateAsync() {
        const ruleErrs = gen.let("ruleErrs", null);
        gen.try(() => assignValid((0, codegen_1._)`await `), (e) => gen.assign(valid2, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), () => gen.throw(e)));
        return ruleErrs;
      }
      function validateSync() {
        const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
        gen.assign(validateErrs, null);
        assignValid(codegen_1.nil);
        return validateErrs;
      }
      function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
        const passSchema = !("compile" in def && !$data || def.schema === false);
        gen.assign(valid2, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
      }
      function reportErrs(errors) {
        var _a2;
        gen.if((0, codegen_1.not)((_a2 = def.valid) !== null && _a2 !== void 0 ? _a2 : valid2), errors);
      }
    }
    exports.funcKeywordCode = funcKeywordCode;
    function modifyData(cxt) {
      const { gen, data, it } = cxt;
      gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
    }
    function addErrs(cxt, errs) {
      const { gen } = cxt;
      gen.if((0, codegen_1._)`Array.isArray(${errs})`, () => {
        gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
        (0, errors_1.extendErrors)(cxt);
      }, () => cxt.error());
    }
    function checkAsyncKeyword({ schemaEnv }, def) {
      if (def.async && !schemaEnv.$async)
        throw new Error("async keyword in sync schema");
    }
    function useKeyword(gen, keyword, result) {
      if (result === void 0)
        throw new Error(`keyword "${keyword}" failed to compile`);
      return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
    }
    function validSchemaType(schema, schemaType, allowUndefined = false) {
      return !schemaType.length || schemaType.some((st) => st === "array" ? Array.isArray(schema) : st === "object" ? schema && typeof schema == "object" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == "undefined");
    }
    exports.validSchemaType = validSchemaType;
    function validateKeywordUsage({ schema, opts, self: self2, errSchemaPath }, def, keyword) {
      if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
        throw new Error("ajv implementation error");
      }
      const deps = def.dependencies;
      if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
      }
      if (def.validateSchema) {
        const valid2 = def.validateSchema(schema[keyword]);
        if (!valid2) {
          const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self2.errorsText(def.validateSchema.errors);
          if (opts.validateSchema === "log")
            self2.logger.error(msg);
          else
            throw new Error(msg);
        }
      }
    }
    exports.validateKeywordUsage = validateKeywordUsage;
  }
});

// node_modules/ajv/dist/compile/validate/subschema.js
var require_subschema = __commonJS({
  "node_modules/ajv/dist/compile/validate/subschema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
      if (keyword !== void 0 && schema !== void 0) {
        throw new Error('both "keyword" and "schema" passed, only one allowed');
      }
      if (keyword !== void 0) {
        const sch = it.schema[keyword];
        return schemaProp === void 0 ? {
          schema: sch,
          schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
          errSchemaPath: `${it.errSchemaPath}/${keyword}`
        } : {
          schema: sch[schemaProp],
          schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
          errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
        };
      }
      if (schema !== void 0) {
        if (schemaPath === void 0 || errSchemaPath === void 0 || topSchemaRef === void 0) {
          throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
        }
        return {
          schema,
          schemaPath,
          topSchemaRef,
          errSchemaPath
        };
      }
      throw new Error('either "keyword" or "schema" must be passed');
    }
    exports.getSubschema = getSubschema;
    function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
      if (data !== void 0 && dataProp !== void 0) {
        throw new Error('both "data" and "dataProp" passed, only one allowed');
      }
      const { gen } = it;
      if (dataProp !== void 0) {
        const { errorPath, dataPathArr, opts } = it;
        const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
        dataContextProps(nextData);
        subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
        subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
      }
      if (data !== void 0) {
        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true);
        dataContextProps(nextData);
        if (propertyName !== void 0)
          subschema.propertyName = propertyName;
      }
      if (dataTypes)
        subschema.dataTypes = dataTypes;
      function dataContextProps(_nextData) {
        subschema.data = _nextData;
        subschema.dataLevel = it.dataLevel + 1;
        subschema.dataTypes = [];
        it.definedProperties = /* @__PURE__ */ new Set();
        subschema.parentData = it.data;
        subschema.dataNames = [...it.dataNames, _nextData];
      }
    }
    exports.extendSubschemaData = extendSubschemaData;
    function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
      if (compositeRule !== void 0)
        subschema.compositeRule = compositeRule;
      if (createErrors !== void 0)
        subschema.createErrors = createErrors;
      if (allErrors !== void 0)
        subschema.allErrors = allErrors;
      subschema.jtdDiscriminator = jtdDiscriminator;
      subschema.jtdMetadata = jtdMetadata;
    }
    exports.extendSubschemaMode = extendSubschemaMode;
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal(a[key], b[key]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/json-schema-traverse/index.js
var require_json_schema_traverse = __commonJS({
  "node_modules/json-schema-traverse/index.js"(exports, module) {
    "use strict";
    var traverse = module.exports = function(schema, opts, cb) {
      if (typeof opts == "function") {
        cb = opts;
        opts = {};
      }
      cb = opts.cb || cb;
      var pre = typeof cb == "function" ? cb : cb.pre || function() {
      };
      var post = cb.post || function() {
      };
      _traverse(opts, pre, post, schema, "", schema);
    };
    traverse.keywords = {
      additionalItems: true,
      items: true,
      contains: true,
      additionalProperties: true,
      propertyNames: true,
      not: true,
      if: true,
      then: true,
      else: true
    };
    traverse.arrayKeywords = {
      items: true,
      allOf: true,
      anyOf: true,
      oneOf: true
    };
    traverse.propsKeywords = {
      $defs: true,
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true
    };
    traverse.skipKeywords = {
      default: true,
      enum: true,
      const: true,
      required: true,
      maximum: true,
      minimum: true,
      exclusiveMaximum: true,
      exclusiveMinimum: true,
      multipleOf: true,
      maxLength: true,
      minLength: true,
      pattern: true,
      format: true,
      maxItems: true,
      minItems: true,
      uniqueItems: true,
      maxProperties: true,
      minProperties: true
    };
    function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (schema && typeof schema == "object" && !Array.isArray(schema)) {
        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        for (var key in schema) {
          var sch = schema[key];
          if (Array.isArray(sch)) {
            if (key in traverse.arrayKeywords) {
              for (var i = 0; i < sch.length; i++)
                _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema, i);
            }
          } else if (key in traverse.propsKeywords) {
            if (sch && typeof sch == "object") {
              for (var prop in sch)
                _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
            }
          } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
            _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
          }
        }
        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      }
    }
    function escapeJsonPtr(str2) {
      return str2.replace(/~/g, "~0").replace(/\//g, "~1");
    }
  }
});

// node_modules/ajv/dist/compile/resolve.js
var require_resolve = __commonJS({
  "node_modules/ajv/dist/compile/resolve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
    var util_1 = require_util();
    var equal = require_fast_deep_equal();
    var traverse = require_json_schema_traverse();
    var SIMPLE_INLINED = /* @__PURE__ */ new Set([
      "type",
      "format",
      "pattern",
      "maxLength",
      "minLength",
      "maxProperties",
      "minProperties",
      "maxItems",
      "minItems",
      "maximum",
      "minimum",
      "uniqueItems",
      "multipleOf",
      "required",
      "enum",
      "const"
    ]);
    function inlineRef(schema, limit = true) {
      if (typeof schema == "boolean")
        return true;
      if (limit === true)
        return !hasRef(schema);
      if (!limit)
        return false;
      return countKeys(schema) <= limit;
    }
    exports.inlineRef = inlineRef;
    var REF_KEYWORDS = /* @__PURE__ */ new Set([
      "$ref",
      "$recursiveRef",
      "$recursiveAnchor",
      "$dynamicRef",
      "$dynamicAnchor"
    ]);
    function hasRef(schema) {
      for (const key in schema) {
        if (REF_KEYWORDS.has(key))
          return true;
        const sch = schema[key];
        if (Array.isArray(sch) && sch.some(hasRef))
          return true;
        if (typeof sch == "object" && hasRef(sch))
          return true;
      }
      return false;
    }
    function countKeys(schema) {
      let count = 0;
      for (const key in schema) {
        if (key === "$ref")
          return Infinity;
        count++;
        if (SIMPLE_INLINED.has(key))
          continue;
        if (typeof schema[key] == "object") {
          (0, util_1.eachItem)(schema[key], (sch) => count += countKeys(sch));
        }
        if (count === Infinity)
          return Infinity;
      }
      return count;
    }
    function getFullPath(resolver, id = "", normalize) {
      if (normalize !== false)
        id = normalizeId(id);
      const p = resolver.parse(id);
      return _getFullPath(resolver, p);
    }
    exports.getFullPath = getFullPath;
    function _getFullPath(resolver, p) {
      const serialized = resolver.serialize(p);
      return serialized.split("#")[0] + "#";
    }
    exports._getFullPath = _getFullPath;
    var TRAILING_SLASH_HASH = /#\/?$/;
    function normalizeId(id) {
      return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
    }
    exports.normalizeId = normalizeId;
    function resolveUrl(resolver, baseId, id) {
      id = normalizeId(id);
      return resolver.resolve(baseId, id);
    }
    exports.resolveUrl = resolveUrl;
    var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
    function getSchemaRefs(schema, baseId) {
      if (typeof schema == "boolean")
        return {};
      const { schemaId, uriResolver } = this.opts;
      const schId = normalizeId(schema[schemaId] || baseId);
      const baseIds = { "": schId };
      const pathPrefix = getFullPath(uriResolver, schId, false);
      const localRefs = {};
      const schemaRefs = /* @__PURE__ */ new Set();
      traverse(schema, { allKeys: true }, (sch, jsonPtr, _2, parentJsonPtr) => {
        if (parentJsonPtr === void 0)
          return;
        const fullPath = pathPrefix + jsonPtr;
        let baseId2 = baseIds[parentJsonPtr];
        if (typeof sch[schemaId] == "string")
          baseId2 = addRef.call(this, sch[schemaId]);
        addAnchor.call(this, sch.$anchor);
        addAnchor.call(this, sch.$dynamicAnchor);
        baseIds[jsonPtr] = baseId2;
        function addRef(ref) {
          const _resolve = this.opts.uriResolver.resolve;
          ref = normalizeId(baseId2 ? _resolve(baseId2, ref) : ref);
          if (schemaRefs.has(ref))
            throw ambiguos(ref);
          schemaRefs.add(ref);
          let schOrRef = this.refs[ref];
          if (typeof schOrRef == "string")
            schOrRef = this.refs[schOrRef];
          if (typeof schOrRef == "object") {
            checkAmbiguosRef(sch, schOrRef.schema, ref);
          } else if (ref !== normalizeId(fullPath)) {
            if (ref[0] === "#") {
              checkAmbiguosRef(sch, localRefs[ref], ref);
              localRefs[ref] = sch;
            } else {
              this.refs[ref] = fullPath;
            }
          }
          return ref;
        }
        function addAnchor(anchor) {
          if (typeof anchor == "string") {
            if (!ANCHOR.test(anchor))
              throw new Error(`invalid anchor "${anchor}"`);
            addRef.call(this, `#${anchor}`);
          }
        }
      });
      return localRefs;
      function checkAmbiguosRef(sch1, sch2, ref) {
        if (sch2 !== void 0 && !equal(sch1, sch2))
          throw ambiguos(ref);
      }
      function ambiguos(ref) {
        return new Error(`reference "${ref}" resolves to more than one schema`);
      }
    }
    exports.getSchemaRefs = getSchemaRefs;
  }
});

// node_modules/ajv/dist/compile/validate/index.js
var require_validate = __commonJS({
  "node_modules/ajv/dist/compile/validate/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;
    var boolSchema_1 = require_boolSchema();
    var dataType_1 = require_dataType();
    var applicability_1 = require_applicability();
    var dataType_2 = require_dataType();
    var defaults_1 = require_defaults();
    var keyword_1 = require_keyword();
    var subschema_1 = require_subschema();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var resolve_1 = require_resolve();
    var util_1 = require_util();
    var errors_1 = require_errors();
    function validateFunctionCode(it) {
      if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
          topSchemaObjCode(it);
          return;
        }
      }
      validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
    }
    exports.validateFunctionCode = validateFunctionCode;
    function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
      if (opts.code.es5) {
        gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
          gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema, opts)}`);
          destructureValCxtES5(gen, opts);
          gen.code(body);
        });
      } else {
        gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
      }
    }
    function destructureValCxt(opts) {
      return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
    }
    function destructureValCxtES5(gen, opts) {
      gen.if(names_1.default.valCxt, () => {
        gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
        gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
        gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
        if (opts.dynamicRef)
          gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
      }, () => {
        gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
        gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
        gen.var(names_1.default.rootData, names_1.default.data);
        if (opts.dynamicRef)
          gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
      });
    }
    function topSchemaObjCode(it) {
      const { schema, opts, gen } = it;
      validateFunction(it, () => {
        if (opts.$comment && schema.$comment)
          commentKeyword(it);
        checkNoDefault(it);
        gen.let(names_1.default.vErrors, null);
        gen.let(names_1.default.errors, 0);
        if (opts.unevaluated)
          resetEvaluated(it);
        typeAndKeywords(it);
        returnResults(it);
      });
      return;
    }
    function resetEvaluated(it) {
      const { gen, validateName } = it;
      it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
      gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
      gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
    }
    function funcSourceUrl(schema, opts) {
      const schId = typeof schema == "object" && schema[opts.schemaId];
      return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
    }
    function subschemaCode(it, valid2) {
      if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
          subSchemaObjCode(it, valid2);
          return;
        }
      }
      (0, boolSchema_1.boolOrEmptySchema)(it, valid2);
    }
    function schemaCxtHasRules({ schema, self: self2 }) {
      if (typeof schema == "boolean")
        return !schema;
      for (const key in schema)
        if (self2.RULES.all[key])
          return true;
      return false;
    }
    function isSchemaObj(it) {
      return typeof it.schema != "boolean";
    }
    function subSchemaObjCode(it, valid2) {
      const { schema, gen, opts } = it;
      if (opts.$comment && schema.$comment)
        commentKeyword(it);
      updateContext(it);
      checkAsyncSchema(it);
      const errsCount = gen.const("_errs", names_1.default.errors);
      typeAndKeywords(it, errsCount);
      gen.var(valid2, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
    }
    function checkKeywords(it) {
      (0, util_1.checkUnknownRules)(it);
      checkRefsAndKeywords(it);
    }
    function typeAndKeywords(it, errsCount) {
      if (it.opts.jtd)
        return schemaKeywords(it, [], false, errsCount);
      const types = (0, dataType_1.getSchemaTypes)(it.schema);
      const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
      schemaKeywords(it, types, !checkedTypes, errsCount);
    }
    function checkRefsAndKeywords(it) {
      const { schema, errSchemaPath, opts, self: self2 } = it;
      if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self2.RULES)) {
        self2.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
      }
    }
    function checkNoDefault(it) {
      const { schema, opts } = it;
      if (schema.default !== void 0 && opts.useDefaults && opts.strictSchema) {
        (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
      }
    }
    function updateContext(it) {
      const schId = it.schema[it.opts.schemaId];
      if (schId)
        it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
    }
    function checkAsyncSchema(it) {
      if (it.schema.$async && !it.schemaEnv.$async)
        throw new Error("async schema in sync schema");
    }
    function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
      const msg = schema.$comment;
      if (opts.$comment === true) {
        gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
      } else if (typeof opts.$comment == "function") {
        const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
        const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
        gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
      }
    }
    function returnResults(it) {
      const { gen, schemaEnv, validateName, ValidationError, opts } = it;
      if (schemaEnv.$async) {
        gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
      } else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
        if (opts.unevaluated)
          assignEvaluated(it);
        gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
      }
    }
    function assignEvaluated({ gen, evaluated, props, items }) {
      if (props instanceof codegen_1.Name)
        gen.assign((0, codegen_1._)`${evaluated}.props`, props);
      if (items instanceof codegen_1.Name)
        gen.assign((0, codegen_1._)`${evaluated}.items`, items);
    }
    function schemaKeywords(it, types, typeErrors, errsCount) {
      const { gen, schema, data, allErrors, opts, self: self2 } = it;
      const { RULES } = self2;
      if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
        gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition));
        return;
      }
      if (!opts.jtd)
        checkStrictTypes(it, types);
      gen.block(() => {
        for (const group of RULES.rules)
          groupKeywords(group);
        groupKeywords(RULES.post);
      });
      function groupKeywords(group) {
        if (!(0, applicability_1.shouldUseGroup)(schema, group))
          return;
        if (group.type) {
          gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
          iterateKeywords(it, group);
          if (types.length === 1 && types[0] === group.type && typeErrors) {
            gen.else();
            (0, dataType_2.reportTypeError)(it);
          }
          gen.endIf();
        } else {
          iterateKeywords(it, group);
        }
        if (!allErrors)
          gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
      }
    }
    function iterateKeywords(it, group) {
      const { gen, schema, opts: { useDefaults } } = it;
      if (useDefaults)
        (0, defaults_1.assignDefaults)(it, group.type);
      gen.block(() => {
        for (const rule of group.rules) {
          if ((0, applicability_1.shouldUseRule)(schema, rule)) {
            keywordCode(it, rule.keyword, rule.definition, group.type);
          }
        }
      });
    }
    function checkStrictTypes(it, types) {
      if (it.schemaEnv.meta || !it.opts.strictTypes)
        return;
      checkContextTypes(it, types);
      if (!it.opts.allowUnionTypes)
        checkMultipleTypes(it, types);
      checkKeywordTypes(it, it.dataTypes);
    }
    function checkContextTypes(it, types) {
      if (!types.length)
        return;
      if (!it.dataTypes.length) {
        it.dataTypes = types;
        return;
      }
      types.forEach((t) => {
        if (!includesType(it.dataTypes, t)) {
          strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
        }
      });
      it.dataTypes = it.dataTypes.filter((t) => includesType(types, t));
    }
    function checkMultipleTypes(it, ts) {
      if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
        strictTypesError(it, "use allowUnionTypes to allow union type keyword");
      }
    }
    function checkKeywordTypes(it, ts) {
      const rules = it.self.RULES.all;
      for (const keyword in rules) {
        const rule = rules[keyword];
        if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
          const { type } = rule.definition;
          if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
            strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
          }
        }
      }
    }
    function hasApplicableType(schTs, kwdT) {
      return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
    }
    function includesType(ts, t) {
      return ts.includes(t) || t === "integer" && ts.includes("number");
    }
    function strictTypesError(it, msg) {
      const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
      msg += ` at "${schemaPath}" (strictTypes)`;
      (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
    }
    var KeywordCxt = class {
      constructor(it, def, keyword) {
        (0, keyword_1.validateKeywordUsage)(it, def, keyword);
        this.gen = it.gen;
        this.allErrors = it.allErrors;
        this.keyword = keyword;
        this.data = it.data;
        this.schema = it.schema[keyword];
        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
        this.schemaType = def.schemaType;
        this.parentSchema = it.schema;
        this.params = {};
        this.it = it;
        this.def = def;
        if (this.$data) {
          this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
        } else {
          this.schemaCode = this.schemaValue;
          if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
            throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
          }
        }
        if ("code" in def ? def.trackErrors : def.errors !== false) {
          this.errsCount = it.gen.const("_errs", names_1.default.errors);
        }
      }
      result(condition, successAction, failAction) {
        this.failResult((0, codegen_1.not)(condition), successAction, failAction);
      }
      failResult(condition, successAction, failAction) {
        this.gen.if(condition);
        if (failAction)
          failAction();
        else
          this.error();
        if (successAction) {
          this.gen.else();
          successAction();
          if (this.allErrors)
            this.gen.endIf();
        } else {
          if (this.allErrors)
            this.gen.endIf();
          else
            this.gen.else();
        }
      }
      pass(condition, failAction) {
        this.failResult((0, codegen_1.not)(condition), void 0, failAction);
      }
      fail(condition) {
        if (condition === void 0) {
          this.error();
          if (!this.allErrors)
            this.gen.if(false);
          return;
        }
        this.gen.if(condition);
        this.error();
        if (this.allErrors)
          this.gen.endIf();
        else
          this.gen.else();
      }
      fail$data(condition) {
        if (!this.$data)
          return this.fail(condition);
        const { schemaCode } = this;
        this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
      }
      error(append, errorParams, errorPaths) {
        if (errorParams) {
          this.setParams(errorParams);
          this._error(append, errorPaths);
          this.setParams({});
          return;
        }
        this._error(append, errorPaths);
      }
      _error(append, errorPaths) {
        ;
        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
      }
      $dataError() {
        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
      }
      reset() {
        if (this.errsCount === void 0)
          throw new Error('add "trackErrors" to keyword definition');
        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
      }
      ok(cond) {
        if (!this.allErrors)
          this.gen.if(cond);
      }
      setParams(obj, assign) {
        if (assign)
          Object.assign(this.params, obj);
        else
          this.params = obj;
      }
      block$data(valid2, codeBlock, $dataValid = codegen_1.nil) {
        this.gen.block(() => {
          this.check$data(valid2, $dataValid);
          codeBlock();
        });
      }
      check$data(valid2 = codegen_1.nil, $dataValid = codegen_1.nil) {
        if (!this.$data)
          return;
        const { gen, schemaCode, schemaType, def } = this;
        gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
        if (valid2 !== codegen_1.nil)
          gen.assign(valid2, true);
        if (schemaType.length || def.validateSchema) {
          gen.elseIf(this.invalid$data());
          this.$dataError();
          if (valid2 !== codegen_1.nil)
            gen.assign(valid2, false);
        }
        gen.else();
      }
      invalid$data() {
        const { gen, schemaCode, schemaType, def, it } = this;
        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
        function wrong$DataType() {
          if (schemaType.length) {
            if (!(schemaCode instanceof codegen_1.Name))
              throw new Error("ajv implementation error");
            const st = Array.isArray(schemaType) ? schemaType : [schemaType];
            return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
          }
          return codegen_1.nil;
        }
        function invalid$DataSchema() {
          if (def.validateSchema) {
            const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema });
            return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
          }
          return codegen_1.nil;
        }
      }
      subschema(appl, valid2) {
        const subschema = (0, subschema_1.getSubschema)(this.it, appl);
        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
        (0, subschema_1.extendSubschemaMode)(subschema, appl);
        const nextContext = { ...this.it, ...subschema, items: void 0, props: void 0 };
        subschemaCode(nextContext, valid2);
        return nextContext;
      }
      mergeEvaluated(schemaCxt, toName) {
        const { it, gen } = this;
        if (!it.opts.unevaluated)
          return;
        if (it.props !== true && schemaCxt.props !== void 0) {
          it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
        }
        if (it.items !== true && schemaCxt.items !== void 0) {
          it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
        }
      }
      mergeValidEvaluated(schemaCxt, valid2) {
        const { it, gen } = this;
        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
          gen.if(valid2, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
          return true;
        }
      }
    };
    exports.KeywordCxt = KeywordCxt;
    function keywordCode(it, keyword, def, ruleType) {
      const cxt = new KeywordCxt(it, def, keyword);
      if ("code" in def) {
        def.code(cxt, ruleType);
      } else if (cxt.$data && def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
      } else if ("macro" in def) {
        (0, keyword_1.macroKeywordCode)(cxt, def);
      } else if (def.compile || def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
      }
    }
    var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
    var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    function getData($data, { dataLevel, dataNames, dataPathArr }) {
      let jsonPointer;
      let data;
      if ($data === "")
        return names_1.default.rootData;
      if ($data[0] === "/") {
        if (!JSON_POINTER.test($data))
          throw new Error(`Invalid JSON-pointer: ${$data}`);
        jsonPointer = $data;
        data = names_1.default.rootData;
      } else {
        const matches = RELATIVE_JSON_POINTER.exec($data);
        if (!matches)
          throw new Error(`Invalid JSON-pointer: ${$data}`);
        const up = +matches[1];
        jsonPointer = matches[2];
        if (jsonPointer === "#") {
          if (up >= dataLevel)
            throw new Error(errorMsg("property/index", up));
          return dataPathArr[dataLevel - up];
        }
        if (up > dataLevel)
          throw new Error(errorMsg("data", up));
        data = dataNames[dataLevel - up];
        if (!jsonPointer)
          return data;
      }
      let expr = data;
      const segments = jsonPointer.split("/");
      for (const segment of segments) {
        if (segment) {
          data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
          expr = (0, codegen_1._)`${expr} && ${data}`;
        }
      }
      return expr;
      function errorMsg(pointerType, up) {
        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
      }
    }
    exports.getData = getData;
  }
});

// node_modules/ajv/dist/runtime/validation_error.js
var require_validation_error = __commonJS({
  "node_modules/ajv/dist/runtime/validation_error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ValidationError = class extends Error {
      constructor(errors) {
        super("validation failed");
        this.errors = errors;
        this.ajv = this.validation = true;
      }
    };
    exports.default = ValidationError;
  }
});

// node_modules/ajv/dist/compile/ref_error.js
var require_ref_error = __commonJS({
  "node_modules/ajv/dist/compile/ref_error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var resolve_1 = require_resolve();
    var MissingRefError = class extends Error {
      constructor(resolver, baseId, ref, msg) {
        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
      }
    };
    exports.default = MissingRefError;
  }
});

// node_modules/ajv/dist/compile/index.js
var require_compile = __commonJS({
  "node_modules/ajv/dist/compile/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
    var codegen_1 = require_codegen();
    var validation_error_1 = require_validation_error();
    var names_1 = require_names();
    var resolve_1 = require_resolve();
    var util_1 = require_util();
    var validate_1 = require_validate();
    var SchemaEnv = class {
      constructor(env) {
        var _a;
        this.refs = {};
        this.dynamicAnchors = {};
        let schema;
        if (typeof env.schema == "object")
          schema = env.schema;
        this.schema = env.schema;
        this.schemaId = env.schemaId;
        this.root = env.root || this;
        this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
        this.schemaPath = env.schemaPath;
        this.localRefs = env.localRefs;
        this.meta = env.meta;
        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
        this.refs = {};
      }
    };
    exports.SchemaEnv = SchemaEnv;
    function compileSchema(sch) {
      const _sch = getCompilingSchema.call(this, sch);
      if (_sch)
        return _sch;
      const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId);
      const { es5, lines } = this.opts.code;
      const { ownProperties } = this.opts;
      const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
      let _ValidationError;
      if (sch.$async) {
        _ValidationError = gen.scopeValue("Error", {
          ref: validation_error_1.default,
          code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
        });
      }
      const validateName = gen.scopeName("validate");
      sch.validateName = validateName;
      const schemaCxt = {
        gen,
        allErrors: this.opts.allErrors,
        data: names_1.default.data,
        parentData: names_1.default.parentData,
        parentDataProperty: names_1.default.parentDataProperty,
        dataNames: [names_1.default.data],
        dataPathArr: [codegen_1.nil],
        dataLevel: 0,
        dataTypes: [],
        definedProperties: /* @__PURE__ */ new Set(),
        topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) } : { ref: sch.schema }),
        validateName,
        ValidationError: _ValidationError,
        schema: sch.schema,
        schemaEnv: sch,
        rootId,
        baseId: sch.baseId || rootId,
        schemaPath: codegen_1.nil,
        errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
        errorPath: (0, codegen_1._)`""`,
        opts: this.opts,
        self: this
      };
      let sourceCode;
      try {
        this._compilations.add(sch);
        (0, validate_1.validateFunctionCode)(schemaCxt);
        gen.optimize(this.opts.code.optimize);
        const validateCode = gen.toString();
        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
        if (this.opts.code.process)
          sourceCode = this.opts.code.process(sourceCode, sch);
        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
        const validate2 = makeValidate(this, this.scope.get());
        this.scope.value(validateName, { ref: validate2 });
        validate2.errors = null;
        validate2.schema = sch.schema;
        validate2.schemaEnv = sch;
        if (sch.$async)
          validate2.$async = true;
        if (this.opts.code.source === true) {
          validate2.source = { validateName, validateCode, scopeValues: gen._values };
        }
        if (this.opts.unevaluated) {
          const { props, items } = schemaCxt;
          validate2.evaluated = {
            props: props instanceof codegen_1.Name ? void 0 : props,
            items: items instanceof codegen_1.Name ? void 0 : items,
            dynamicProps: props instanceof codegen_1.Name,
            dynamicItems: items instanceof codegen_1.Name
          };
          if (validate2.source)
            validate2.source.evaluated = (0, codegen_1.stringify)(validate2.evaluated);
        }
        sch.validate = validate2;
        return sch;
      } catch (e) {
        delete sch.validate;
        delete sch.validateName;
        if (sourceCode)
          this.logger.error("Error compiling schema, function code:", sourceCode);
        throw e;
      } finally {
        this._compilations.delete(sch);
      }
    }
    exports.compileSchema = compileSchema;
    function resolveRef(root, baseId, ref) {
      var _a;
      ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
      const schOrFunc = root.refs[ref];
      if (schOrFunc)
        return schOrFunc;
      let _sch = resolve2.call(this, root, ref);
      if (_sch === void 0) {
        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref];
        const { schemaId } = this.opts;
        if (schema)
          _sch = new SchemaEnv({ schema, schemaId, root, baseId });
      }
      if (_sch === void 0)
        return;
      return root.refs[ref] = inlineOrCompile.call(this, _sch);
    }
    exports.resolveRef = resolveRef;
    function inlineOrCompile(sch) {
      if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
        return sch.schema;
      return sch.validate ? sch : compileSchema.call(this, sch);
    }
    function getCompilingSchema(schEnv) {
      for (const sch of this._compilations) {
        if (sameSchemaEnv(sch, schEnv))
          return sch;
      }
    }
    exports.getCompilingSchema = getCompilingSchema;
    function sameSchemaEnv(s1, s2) {
      return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
    }
    function resolve2(root, ref) {
      let sch;
      while (typeof (sch = this.refs[ref]) == "string")
        ref = sch;
      return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
    }
    function resolveSchema(root, ref) {
      const p = this.opts.uriResolver.parse(ref);
      const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
      let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, void 0);
      if (Object.keys(root.schema).length > 0 && refPath === baseId) {
        return getJsonPointer.call(this, p, root);
      }
      const id = (0, resolve_1.normalizeId)(refPath);
      const schOrRef = this.refs[id] || this.schemas[id];
      if (typeof schOrRef == "string") {
        const sch = resolveSchema.call(this, root, schOrRef);
        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
          return;
        return getJsonPointer.call(this, p, sch);
      }
      if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
        return;
      if (!schOrRef.validate)
        compileSchema.call(this, schOrRef);
      if (id === (0, resolve_1.normalizeId)(ref)) {
        const { schema } = schOrRef;
        const { schemaId } = this.opts;
        const schId = schema[schemaId];
        if (schId)
          baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
        return new SchemaEnv({ schema, schemaId, root, baseId });
      }
      return getJsonPointer.call(this, p, schOrRef);
    }
    exports.resolveSchema = resolveSchema;
    var PREVENT_SCOPE_CHANGE = /* @__PURE__ */ new Set([
      "properties",
      "patternProperties",
      "enum",
      "dependencies",
      "definitions"
    ]);
    function getJsonPointer(parsedRef, { baseId, schema, root }) {
      var _a;
      if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
        return;
      for (const part of parsedRef.fragment.slice(1).split("/")) {
        if (typeof schema === "boolean")
          return;
        const partSchema = schema[(0, util_1.unescapeFragment)(part)];
        if (partSchema === void 0)
          return;
        schema = partSchema;
        const schId = typeof schema === "object" && schema[this.opts.schemaId];
        if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
          baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
        }
      }
      let env;
      if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
        const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
        env = resolveSchema.call(this, root, $ref);
      }
      const { schemaId } = this.opts;
      env = env || new SchemaEnv({ schema, schemaId, root, baseId });
      if (env.schema !== env.root.schema)
        return env;
      return void 0;
    }
  }
});

// node_modules/ajv/dist/refs/data.json
var require_data = __commonJS({
  "node_modules/ajv/dist/refs/data.json"(exports, module) {
    module.exports = {
      $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
      description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
      type: "object",
      required: ["$data"],
      properties: {
        $data: {
          type: "string",
          anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }]
        }
      },
      additionalProperties: false
    };
  }
});

// node_modules/uri-js/dist/es5/uri.all.js
var require_uri_all = __commonJS({
  "node_modules/uri-js/dist/es5/uri.all.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.URI = global2.URI || {});
    })(exports, function(exports2) {
      "use strict";
      function merge2() {
        for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
          sets[_key] = arguments[_key];
        }
        if (sets.length > 1) {
          sets[0] = sets[0].slice(0, -1);
          var xl2 = sets.length - 1;
          for (var x = 1; x < xl2; ++x) {
            sets[x] = sets[x].slice(1, -1);
          }
          sets[xl2] = sets[xl2].slice(1);
          return sets.join("");
        } else {
          return sets[0];
        }
      }
      function subexp(str2) {
        return "(?:" + str2 + ")";
      }
      function typeOf(o) {
        return o === void 0 ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
      }
      function toUpperCase(str2) {
        return str2.toUpperCase();
      }
      function toArray(obj) {
        return obj !== void 0 && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
      }
      function assign(target, source) {
        var obj = target;
        if (source) {
          for (var key in source) {
            obj[key] = source[key];
          }
        }
        return obj;
      }
      function buildExps(isIRI2) {
        var ALPHA$$ = "[A-Za-z]", CR$ = "[\\x0D]", DIGIT$$ = "[0-9]", DQUOTE$$ = "[\\x22]", HEXDIG$$2 = merge2(DIGIT$$, "[A-Fa-f]"), LF$$ = "[\\x0A]", SP$$ = "[\\x20]", PCT_ENCODED$2 = subexp(subexp("%[EFef]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%" + HEXDIG$$2 + HEXDIG$$2)), GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge2(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI2 ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", IPRIVATE$$ = isIRI2 ? "[\\uE000-\\uF8FF]" : "[]", UNRESERVED$$2 = merge2(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$), SCHEME$ = subexp(ALPHA$$ + merge2(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"), USERINFO$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge2(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]")) + "*"), DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$), DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$2 + "{1,4}"), LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$), IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = subexp(subexp(UNRESERVED$$2 + "|" + PCT_ENCODED$2) + "+"), IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$), IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + ZONEID$), IPVFUTURE$ = subexp("[vV]" + HEXDIG$$2 + "+\\." + merge2(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]") + "+"), IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"), REG_NAME$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge2(UNRESERVED$$2, SUB_DELIMS$$)) + "*"), HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")|" + REG_NAME$), PORT$ = subexp(DIGIT$$ + "*"), AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"), PCHAR$ = subexp(PCT_ENCODED$2 + "|" + merge2(UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@]")), SEGMENT$ = subexp(PCHAR$ + "*"), SEGMENT_NZ$ = subexp(PCHAR$ + "+"), SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge2(UNRESERVED$$2, SUB_DELIMS$$, "[\\@]")) + "+"), PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"), PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"), PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$), PATH_EMPTY$ = "(?!" + PCHAR$ + ")", PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), QUERY$ = subexp(subexp(PCHAR$ + "|" + merge2("[\\/\\?]", IPRIVATE$$)) + "*"), FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"), HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$), RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$), ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"), GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$", SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
        return {
          NOT_SCHEME: new RegExp(merge2("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
          NOT_USERINFO: new RegExp(merge2("[^\\%\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_HOST: new RegExp(merge2("[^\\%\\[\\]\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_PATH: new RegExp(merge2("[^\\%\\/\\:\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_PATH_NOSCHEME: new RegExp(merge2("[^\\%\\/\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_QUERY: new RegExp(merge2("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
          NOT_FRAGMENT: new RegExp(merge2("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
          ESCAPE: new RegExp(merge2("[^]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          UNRESERVED: new RegExp(UNRESERVED$$2, "g"),
          OTHER_CHARS: new RegExp(merge2("[^\\%]", UNRESERVED$$2, RESERVED$$), "g"),
          PCT_ENCODED: new RegExp(PCT_ENCODED$2, "g"),
          IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
          IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$")
        };
      }
      var URI_PROTOCOL = buildExps(false);
      var IRI_PROTOCOL = buildExps(true);
      var slicedToArray = function() {
        function sliceIterator(arr, i) {
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e2 = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i && _arr.length === i)
                break;
            }
          } catch (err) {
            _d = true;
            _e2 = err;
          } finally {
            try {
              if (!_n && _i["return"])
                _i["return"]();
            } finally {
              if (_d)
                throw _e2;
            }
          }
          return _arr;
        }
        return function(arr, i) {
          if (Array.isArray(arr)) {
            return arr;
          } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
          } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }
        };
      }();
      var toConsumableArray = function(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
            arr2[i] = arr[i];
          return arr2;
        } else {
          return Array.from(arr);
        }
      };
      var maxInt = 2147483647;
      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128;
      var delimiter = "-";
      var regexPunycode = /^xn--/;
      var regexNonASCII = /[^\0-\x7E]/;
      var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
      var errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      };
      var baseMinusTMin = base - tMin;
      var floor = Math.floor;
      var stringFromCharCode = String.fromCharCode;
      function error$1(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        var result = [];
        var length = array.length;
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        while (counter < length) {
          var value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            var extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      var ucs2encode = function ucs2encode2(array) {
        return String.fromCodePoint.apply(String, toConsumableArray(array));
      };
      var basicToDigit = function basicToDigit2(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      };
      var digitToBasic = function digitToBasic2(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      };
      var adapt = function adapt2(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      var decode = function decode2(input) {
        var output = [];
        var inputLength = input.length;
        var i = 0;
        var n = initialN;
        var bias = initialBias;
        var basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (var j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error$1("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (var index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          var oldi = i;
          for (var w2 = 1, k = base; ; k += base) {
            if (index >= inputLength) {
              error$1("invalid-input");
            }
            var digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w2)) {
              error$1("overflow");
            }
            i += digit * w2;
            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            var baseMinusT = base - t;
            if (w2 > floor(maxInt / baseMinusT)) {
              error$1("overflow");
            }
            w2 *= baseMinusT;
          }
          var out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error$1("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return String.fromCodePoint.apply(String, output);
      };
      var encode = function encode2(input) {
        var output = [];
        input = ucs2decode(input);
        var inputLength = input.length;
        var n = initialN;
        var delta = 0;
        var bias = initialBias;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _currentValue2 = _step.value;
            if (_currentValue2 < 128) {
              output.push(stringFromCharCode(_currentValue2));
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        var basicLength = output.length;
        var handledCPCount = basicLength;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          var m = maxInt;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = void 0;
          try {
            for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var currentValue = _step2.value;
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
          var handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error$1("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = void 0;
          try {
            for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _currentValue = _step3.value;
              if (_currentValue < n && ++delta > maxInt) {
                error$1("overflow");
              }
              if (_currentValue == n) {
                var q2 = delta;
                for (var k = base; ; k += base) {
                  var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q2 < t) {
                    break;
                  }
                  var qMinusT = q2 - t;
                  var baseMinusT = base - t;
                  output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                  q2 = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q2, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      };
      var toUnicode = function toUnicode2(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      };
      var toASCII = function toASCII2(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      };
      var punycode = {
        "version": "2.1.0",
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      var SCHEMES = {};
      function pctEncChar(chr) {
        var c = chr.charCodeAt(0);
        var e = void 0;
        if (c < 16)
          e = "%0" + c.toString(16).toUpperCase();
        else if (c < 128)
          e = "%" + c.toString(16).toUpperCase();
        else if (c < 2048)
          e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
        else
          e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
        return e;
      }
      function pctDecChars(str2) {
        var newStr = "";
        var i = 0;
        var il = str2.length;
        while (i < il) {
          var c = parseInt(str2.substr(i + 1, 2), 16);
          if (c < 128) {
            newStr += String.fromCharCode(c);
            i += 3;
          } else if (c >= 194 && c < 224) {
            if (il - i >= 6) {
              var c2 = parseInt(str2.substr(i + 4, 2), 16);
              newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
            } else {
              newStr += str2.substr(i, 6);
            }
            i += 6;
          } else if (c >= 224) {
            if (il - i >= 9) {
              var _c = parseInt(str2.substr(i + 4, 2), 16);
              var c3 = parseInt(str2.substr(i + 7, 2), 16);
              newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
            } else {
              newStr += str2.substr(i, 9);
            }
            i += 9;
          } else {
            newStr += str2.substr(i, 3);
            i += 3;
          }
        }
        return newStr;
      }
      function _normalizeComponentEncoding(components, protocol) {
        function decodeUnreserved2(str2) {
          var decStr = pctDecChars(str2);
          return !decStr.match(protocol.UNRESERVED) ? str2 : decStr;
        }
        if (components.scheme)
          components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_SCHEME, "");
        if (components.userinfo !== void 0)
          components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.host !== void 0)
          components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.path !== void 0)
          components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.query !== void 0)
          components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.fragment !== void 0)
          components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        return components;
      }
      function _stripLeadingZeros(str2) {
        return str2.replace(/^0*(.*)/, "$1") || "0";
      }
      function _normalizeIPv4(host, protocol) {
        var matches = host.match(protocol.IPV4ADDRESS) || [];
        var _matches = slicedToArray(matches, 2), address = _matches[1];
        if (address) {
          return address.split(".").map(_stripLeadingZeros).join(".");
        } else {
          return host;
        }
      }
      function _normalizeIPv6(host, protocol) {
        var matches = host.match(protocol.IPV6ADDRESS) || [];
        var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];
        if (address) {
          var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];
          var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
          var lastFields = last.split(":").map(_stripLeadingZeros);
          var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
          var fieldCount = isLastFieldIPv4Address ? 7 : 8;
          var lastFieldsStart = lastFields.length - fieldCount;
          var fields = Array(fieldCount);
          for (var x = 0; x < fieldCount; ++x) {
            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || "";
          }
          if (isLastFieldIPv4Address) {
            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
          }
          var allZeroFields = fields.reduce(function(acc, field, index) {
            if (!field || field === "0") {
              var lastLongest = acc[acc.length - 1];
              if (lastLongest && lastLongest.index + lastLongest.length === index) {
                lastLongest.length++;
              } else {
                acc.push({ index, length: 1 });
              }
            }
            return acc;
          }, []);
          var longestZeroFields = allZeroFields.sort(function(a, b) {
            return b.length - a.length;
          })[0];
          var newHost = void 0;
          if (longestZeroFields && longestZeroFields.length > 1) {
            var newFirst = fields.slice(0, longestZeroFields.index);
            var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
            newHost = newFirst.join(":") + "::" + newLast.join(":");
          } else {
            newHost = fields.join(":");
          }
          if (zone) {
            newHost += "%" + zone;
          }
          return newHost;
        } else {
          return host;
        }
      }
      var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
      var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === void 0;
      function parse(uriString) {
        var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var components = {};
        var protocol = options2.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        if (options2.reference === "suffix")
          uriString = (options2.scheme ? options2.scheme + ":" : "") + "//" + uriString;
        var matches = uriString.match(URI_PARSE);
        if (matches) {
          if (NO_MATCH_IS_UNDEFINED) {
            components.scheme = matches[1];
            components.userinfo = matches[3];
            components.host = matches[4];
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = matches[7];
            components.fragment = matches[8];
            if (isNaN(components.port)) {
              components.port = matches[5];
            }
          } else {
            components.scheme = matches[1] || void 0;
            components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : void 0;
            components.host = uriString.indexOf("//") !== -1 ? matches[4] : void 0;
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = uriString.indexOf("?") !== -1 ? matches[7] : void 0;
            components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : void 0;
            if (isNaN(components.port)) {
              components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : void 0;
            }
          }
          if (components.host) {
            components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
          }
          if (components.scheme === void 0 && components.userinfo === void 0 && components.host === void 0 && components.port === void 0 && !components.path && components.query === void 0) {
            components.reference = "same-document";
          } else if (components.scheme === void 0) {
            components.reference = "relative";
          } else if (components.fragment === void 0) {
            components.reference = "absolute";
          } else {
            components.reference = "uri";
          }
          if (options2.reference && options2.reference !== "suffix" && options2.reference !== components.reference) {
            components.error = components.error || "URI is not a " + options2.reference + " reference.";
          }
          var schemeHandler = SCHEMES[(options2.scheme || components.scheme || "").toLowerCase()];
          if (!options2.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
            if (components.host && (options2.domainHost || schemeHandler && schemeHandler.domainHost)) {
              try {
                components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
              } catch (e) {
                components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
              }
            }
            _normalizeComponentEncoding(components, URI_PROTOCOL);
          } else {
            _normalizeComponentEncoding(components, protocol);
          }
          if (schemeHandler && schemeHandler.parse) {
            schemeHandler.parse(components, options2);
          }
        } else {
          components.error = components.error || "URI can not be parsed.";
        }
        return components;
      }
      function _recomposeAuthority(components, options2) {
        var protocol = options2.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        if (components.userinfo !== void 0) {
          uriTokens.push(components.userinfo);
          uriTokens.push("@");
        }
        if (components.host !== void 0) {
          uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function(_2, $1, $2) {
            return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
          }));
        }
        if (typeof components.port === "number" || typeof components.port === "string") {
          uriTokens.push(":");
          uriTokens.push(String(components.port));
        }
        return uriTokens.length ? uriTokens.join("") : void 0;
      }
      var RDS1 = /^\.\.?\//;
      var RDS2 = /^\/\.(\/|$)/;
      var RDS3 = /^\/\.\.(\/|$)/;
      var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
      function removeDotSegments(input) {
        var output = [];
        while (input.length) {
          if (input.match(RDS1)) {
            input = input.replace(RDS1, "");
          } else if (input.match(RDS2)) {
            input = input.replace(RDS2, "/");
          } else if (input.match(RDS3)) {
            input = input.replace(RDS3, "/");
            output.pop();
          } else if (input === "." || input === "..") {
            input = "";
          } else {
            var im = input.match(RDS5);
            if (im) {
              var s = im[0];
              input = input.slice(s.length);
              output.push(s);
            } else {
              throw new Error("Unexpected dot segment condition");
            }
          }
        }
        return output.join("");
      }
      function serialize(components) {
        var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var protocol = options2.iri ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        var schemeHandler = SCHEMES[(options2.scheme || components.scheme || "").toLowerCase()];
        if (schemeHandler && schemeHandler.serialize)
          schemeHandler.serialize(components, options2);
        if (components.host) {
          if (protocol.IPV6ADDRESS.test(components.host)) {
          } else if (options2.domainHost || schemeHandler && schemeHandler.domainHost) {
            try {
              components.host = !options2.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
            } catch (e) {
              components.error = components.error || "Host's domain name can not be converted to " + (!options2.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
            }
          }
        }
        _normalizeComponentEncoding(components, protocol);
        if (options2.reference !== "suffix" && components.scheme) {
          uriTokens.push(components.scheme);
          uriTokens.push(":");
        }
        var authority = _recomposeAuthority(components, options2);
        if (authority !== void 0) {
          if (options2.reference !== "suffix") {
            uriTokens.push("//");
          }
          uriTokens.push(authority);
          if (components.path && components.path.charAt(0) !== "/") {
            uriTokens.push("/");
          }
        }
        if (components.path !== void 0) {
          var s = components.path;
          if (!options2.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
            s = removeDotSegments(s);
          }
          if (authority === void 0) {
            s = s.replace(/^\/\//, "/%2F");
          }
          uriTokens.push(s);
        }
        if (components.query !== void 0) {
          uriTokens.push("?");
          uriTokens.push(components.query);
        }
        if (components.fragment !== void 0) {
          uriTokens.push("#");
          uriTokens.push(components.fragment);
        }
        return uriTokens.join("");
      }
      function resolveComponents(base2, relative) {
        var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var skipNormalization = arguments[3];
        var target = {};
        if (!skipNormalization) {
          base2 = parse(serialize(base2, options2), options2);
          relative = parse(serialize(relative, options2), options2);
        }
        options2 = options2 || {};
        if (!options2.tolerant && relative.scheme) {
          target.scheme = relative.scheme;
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || "");
          target.query = relative.query;
        } else {
          if (relative.userinfo !== void 0 || relative.host !== void 0 || relative.port !== void 0) {
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
          } else {
            if (!relative.path) {
              target.path = base2.path;
              if (relative.query !== void 0) {
                target.query = relative.query;
              } else {
                target.query = base2.query;
              }
            } else {
              if (relative.path.charAt(0) === "/") {
                target.path = removeDotSegments(relative.path);
              } else {
                if ((base2.userinfo !== void 0 || base2.host !== void 0 || base2.port !== void 0) && !base2.path) {
                  target.path = "/" + relative.path;
                } else if (!base2.path) {
                  target.path = relative.path;
                } else {
                  target.path = base2.path.slice(0, base2.path.lastIndexOf("/") + 1) + relative.path;
                }
                target.path = removeDotSegments(target.path);
              }
              target.query = relative.query;
            }
            target.userinfo = base2.userinfo;
            target.host = base2.host;
            target.port = base2.port;
          }
          target.scheme = base2.scheme;
        }
        target.fragment = relative.fragment;
        return target;
      }
      function resolve2(baseURI, relativeURI, options2) {
        var schemelessOptions = assign({ scheme: "null" }, options2);
        return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
      }
      function normalize(uri, options2) {
        if (typeof uri === "string") {
          uri = serialize(parse(uri, options2), options2);
        } else if (typeOf(uri) === "object") {
          uri = parse(serialize(uri, options2), options2);
        }
        return uri;
      }
      function equal(uriA, uriB, options2) {
        if (typeof uriA === "string") {
          uriA = serialize(parse(uriA, options2), options2);
        } else if (typeOf(uriA) === "object") {
          uriA = serialize(uriA, options2);
        }
        if (typeof uriB === "string") {
          uriB = serialize(parse(uriB, options2), options2);
        } else if (typeOf(uriB) === "object") {
          uriB = serialize(uriB, options2);
        }
        return uriA === uriB;
      }
      function escapeComponent(str2, options2) {
        return str2 && str2.toString().replace(!options2 || !options2.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
      }
      function unescapeComponent(str2, options2) {
        return str2 && str2.toString().replace(!options2 || !options2.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
      }
      var handler = {
        scheme: "http",
        domainHost: true,
        parse: function parse2(components, options2) {
          if (!components.host) {
            components.error = components.error || "HTTP URIs must have a host.";
          }
          return components;
        },
        serialize: function serialize2(components, options2) {
          var secure = String(components.scheme).toLowerCase() === "https";
          if (components.port === (secure ? 443 : 80) || components.port === "") {
            components.port = void 0;
          }
          if (!components.path) {
            components.path = "/";
          }
          return components;
        }
      };
      var handler$1 = {
        scheme: "https",
        domainHost: handler.domainHost,
        parse: handler.parse,
        serialize: handler.serialize
      };
      function isSecure(wsComponents) {
        return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
      }
      var handler$2 = {
        scheme: "ws",
        domainHost: true,
        parse: function parse2(components, options2) {
          var wsComponents = components;
          wsComponents.secure = isSecure(wsComponents);
          wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
          wsComponents.path = void 0;
          wsComponents.query = void 0;
          return wsComponents;
        },
        serialize: function serialize2(wsComponents, options2) {
          if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
            wsComponents.port = void 0;
          }
          if (typeof wsComponents.secure === "boolean") {
            wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
            wsComponents.secure = void 0;
          }
          if (wsComponents.resourceName) {
            var _wsComponents$resourc = wsComponents.resourceName.split("?"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path2 = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];
            wsComponents.path = path2 && path2 !== "/" ? path2 : void 0;
            wsComponents.query = query;
            wsComponents.resourceName = void 0;
          }
          wsComponents.fragment = void 0;
          return wsComponents;
        }
      };
      var handler$3 = {
        scheme: "wss",
        domainHost: handler$2.domainHost,
        parse: handler$2.parse,
        serialize: handler$2.serialize
      };
      var O2 = {};
      var isIRI = true;
      var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
      var HEXDIG$$ = "[0-9A-Fa-f]";
      var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$));
      var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
      var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
      var VCHAR$$ = merge2(QTEXT$$, '[\\"\\\\]');
      var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
      var UNRESERVED = new RegExp(UNRESERVED$$, "g");
      var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
      var NOT_LOCAL_PART = new RegExp(merge2("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
      var NOT_HFNAME = new RegExp(merge2("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
      var NOT_HFVALUE = NOT_HFNAME;
      function decodeUnreserved(str2) {
        var decStr = pctDecChars(str2);
        return !decStr.match(UNRESERVED) ? str2 : decStr;
      }
      var handler$4 = {
        scheme: "mailto",
        parse: function parse$$1(components, options2) {
          var mailtoComponents = components;
          var to2 = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
          mailtoComponents.path = void 0;
          if (mailtoComponents.query) {
            var unknownHeaders = false;
            var headers = {};
            var hfields = mailtoComponents.query.split("&");
            for (var x = 0, xl2 = hfields.length; x < xl2; ++x) {
              var hfield = hfields[x].split("=");
              switch (hfield[0]) {
                case "to":
                  var toAddrs = hfield[1].split(",");
                  for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                    to2.push(toAddrs[_x]);
                  }
                  break;
                case "subject":
                  mailtoComponents.subject = unescapeComponent(hfield[1], options2);
                  break;
                case "body":
                  mailtoComponents.body = unescapeComponent(hfield[1], options2);
                  break;
                default:
                  unknownHeaders = true;
                  headers[unescapeComponent(hfield[0], options2)] = unescapeComponent(hfield[1], options2);
                  break;
              }
            }
            if (unknownHeaders)
              mailtoComponents.headers = headers;
          }
          mailtoComponents.query = void 0;
          for (var _x2 = 0, _xl2 = to2.length; _x2 < _xl2; ++_x2) {
            var addr = to2[_x2].split("@");
            addr[0] = unescapeComponent(addr[0]);
            if (!options2.unicodeSupport) {
              try {
                addr[1] = punycode.toASCII(unescapeComponent(addr[1], options2).toLowerCase());
              } catch (e) {
                mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
              }
            } else {
              addr[1] = unescapeComponent(addr[1], options2).toLowerCase();
            }
            to2[_x2] = addr.join("@");
          }
          return mailtoComponents;
        },
        serialize: function serialize$$1(mailtoComponents, options2) {
          var components = mailtoComponents;
          var to2 = toArray(mailtoComponents.to);
          if (to2) {
            for (var x = 0, xl2 = to2.length; x < xl2; ++x) {
              var toAddr = String(to2[x]);
              var atIdx = toAddr.lastIndexOf("@");
              var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
              var domain = toAddr.slice(atIdx + 1);
              try {
                domain = !options2.iri ? punycode.toASCII(unescapeComponent(domain, options2).toLowerCase()) : punycode.toUnicode(domain);
              } catch (e) {
                components.error = components.error || "Email address's domain name can not be converted to " + (!options2.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
              }
              to2[x] = localPart + "@" + domain;
            }
            components.path = to2.join(",");
          }
          var headers = mailtoComponents.headers = mailtoComponents.headers || {};
          if (mailtoComponents.subject)
            headers["subject"] = mailtoComponents.subject;
          if (mailtoComponents.body)
            headers["body"] = mailtoComponents.body;
          var fields = [];
          for (var name2 in headers) {
            if (headers[name2] !== O2[name2]) {
              fields.push(name2.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name2].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
            }
          }
          if (fields.length) {
            components.query = fields.join("&");
          }
          return components;
        }
      };
      var URN_PARSE = /^([^\:]+)\:(.*)/;
      var handler$5 = {
        scheme: "urn",
        parse: function parse$$1(components, options2) {
          var matches = components.path && components.path.match(URN_PARSE);
          var urnComponents = components;
          if (matches) {
            var scheme = options2.scheme || urnComponents.scheme || "urn";
            var nid = matches[1].toLowerCase();
            var nss = matches[2];
            var urnScheme = scheme + ":" + (options2.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            urnComponents.nid = nid;
            urnComponents.nss = nss;
            urnComponents.path = void 0;
            if (schemeHandler) {
              urnComponents = schemeHandler.parse(urnComponents, options2);
            }
          } else {
            urnComponents.error = urnComponents.error || "URN can not be parsed.";
          }
          return urnComponents;
        },
        serialize: function serialize$$1(urnComponents, options2) {
          var scheme = options2.scheme || urnComponents.scheme || "urn";
          var nid = urnComponents.nid;
          var urnScheme = scheme + ":" + (options2.nid || nid);
          var schemeHandler = SCHEMES[urnScheme];
          if (schemeHandler) {
            urnComponents = schemeHandler.serialize(urnComponents, options2);
          }
          var uriComponents = urnComponents;
          var nss = urnComponents.nss;
          uriComponents.path = (nid || options2.nid) + ":" + nss;
          return uriComponents;
        }
      };
      var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
      var handler$6 = {
        scheme: "urn:uuid",
        parse: function parse2(urnComponents, options2) {
          var uuidComponents = urnComponents;
          uuidComponents.uuid = uuidComponents.nss;
          uuidComponents.nss = void 0;
          if (!options2.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
            uuidComponents.error = uuidComponents.error || "UUID is not valid.";
          }
          return uuidComponents;
        },
        serialize: function serialize2(uuidComponents, options2) {
          var urnComponents = uuidComponents;
          urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
          return urnComponents;
        }
      };
      SCHEMES[handler.scheme] = handler;
      SCHEMES[handler$1.scheme] = handler$1;
      SCHEMES[handler$2.scheme] = handler$2;
      SCHEMES[handler$3.scheme] = handler$3;
      SCHEMES[handler$4.scheme] = handler$4;
      SCHEMES[handler$5.scheme] = handler$5;
      SCHEMES[handler$6.scheme] = handler$6;
      exports2.SCHEMES = SCHEMES;
      exports2.pctEncChar = pctEncChar;
      exports2.pctDecChars = pctDecChars;
      exports2.parse = parse;
      exports2.removeDotSegments = removeDotSegments;
      exports2.serialize = serialize;
      exports2.resolveComponents = resolveComponents;
      exports2.resolve = resolve2;
      exports2.normalize = normalize;
      exports2.equal = equal;
      exports2.escapeComponent = escapeComponent;
      exports2.unescapeComponent = unescapeComponent;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/ajv/dist/runtime/uri.js
var require_uri = __commonJS({
  "node_modules/ajv/dist/runtime/uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var uri = require_uri_all();
    uri.code = 'require("ajv/dist/runtime/uri").default';
    exports.default = uri;
  }
});

// node_modules/ajv/dist/core.js
var require_core = __commonJS({
  "node_modules/ajv/dist/core.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    var validate_1 = require_validate();
    Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
      return validate_1.KeywordCxt;
    } });
    var codegen_1 = require_codegen();
    Object.defineProperty(exports, "_", { enumerable: true, get: function() {
      return codegen_1._;
    } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function() {
      return codegen_1.str;
    } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return codegen_1.stringify;
    } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
      return codegen_1.nil;
    } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
      return codegen_1.Name;
    } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
      return codegen_1.CodeGen;
    } });
    var validation_error_1 = require_validation_error();
    var ref_error_1 = require_ref_error();
    var rules_1 = require_rules();
    var compile_1 = require_compile();
    var codegen_2 = require_codegen();
    var resolve_1 = require_resolve();
    var dataType_1 = require_dataType();
    var util_1 = require_util();
    var $dataRefSchema = require_data();
    var uri_1 = require_uri();
    var defaultRegExp = (str2, flags) => new RegExp(str2, flags);
    defaultRegExp.code = "new RegExp";
    var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
    var EXT_SCOPE_NAMES = /* @__PURE__ */ new Set([
      "validate",
      "serialize",
      "parse",
      "wrapper",
      "root",
      "schema",
      "keyword",
      "pattern",
      "formats",
      "validate$data",
      "func",
      "obj",
      "Error"
    ]);
    var removedOptions = {
      errorDataPath: "",
      format: "`validateFormats: false` can be used instead.",
      nullable: '"nullable" keyword is supported by default.',
      jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
      extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
      missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
      processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
      sourceCode: "Use option `code: {source: true}`",
      strictDefaults: "It is default now, see option `strict`.",
      strictKeywords: "It is default now, see option `strict`.",
      uniqueItems: '"uniqueItems" keyword is always validated.',
      unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
      cache: "Map is used as cache, schema object as key.",
      serialize: "Map is used as cache, schema object as key.",
      ajvErrors: "It is default now."
    };
    var deprecatedOptions = {
      ignoreKeywordsWithRef: "",
      jsPropertySyntax: "",
      unicode: '"minLength"/"maxLength" account for unicode characters by default.'
    };
    var MAX_EXPRESSION = 200;
    function requiredOptions(o) {
      var _a, _b, _c, _d, _e2, _f, _g, _h, _j, _k, _l, _m, _o2, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
      const s = o.strict;
      const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
      const optimize = _optz === true || _optz === void 0 ? 1 : _optz || 0;
      const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
      const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
      return {
        strictSchema: (_f = (_e2 = o.strictSchema) !== null && _e2 !== void 0 ? _e2 : s) !== null && _f !== void 0 ? _f : true,
        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
        strictRequired: (_p = (_o2 = o.strictRequired) !== null && _o2 !== void 0 ? _o2 : s) !== null && _p !== void 0 ? _p : false,
        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
        uriResolver
      };
    }
    var Ajv2 = class {
      constructor(opts = {}) {
        this.schemas = {};
        this.refs = {};
        this.formats = {};
        this._compilations = /* @__PURE__ */ new Set();
        this._loading = {};
        this._cache = /* @__PURE__ */ new Map();
        opts = this.opts = { ...opts, ...requiredOptions(opts) };
        const { es5, lines } = this.opts.code;
        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
        this.logger = getLogger(opts.logger);
        const formatOpt = opts.validateFormats;
        opts.validateFormats = false;
        this.RULES = (0, rules_1.getRules)();
        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
        this._metaOpts = getMetaSchemaOptions.call(this);
        if (opts.formats)
          addInitialFormats.call(this);
        this._addVocabularies();
        this._addDefaultMetaSchema();
        if (opts.keywords)
          addInitialKeywords.call(this, opts.keywords);
        if (typeof opts.meta == "object")
          this.addMetaSchema(opts.meta);
        addInitialSchemas.call(this);
        opts.validateFormats = formatOpt;
      }
      _addVocabularies() {
        this.addKeyword("$async");
      }
      _addDefaultMetaSchema() {
        const { $data, meta, schemaId } = this.opts;
        let _dataRefSchema = $dataRefSchema;
        if (schemaId === "id") {
          _dataRefSchema = { ...$dataRefSchema };
          _dataRefSchema.id = _dataRefSchema.$id;
          delete _dataRefSchema.$id;
        }
        if (meta && $data)
          this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
      }
      defaultMeta() {
        const { meta, schemaId } = this.opts;
        return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : void 0;
      }
      validate(schemaKeyRef, data) {
        let v;
        if (typeof schemaKeyRef == "string") {
          v = this.getSchema(schemaKeyRef);
          if (!v)
            throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
        } else {
          v = this.compile(schemaKeyRef);
        }
        const valid2 = v(data);
        if (!("$async" in v))
          this.errors = v.errors;
        return valid2;
      }
      compile(schema, _meta) {
        const sch = this._addSchema(schema, _meta);
        return sch.validate || this._compileSchemaEnv(sch);
      }
      compileAsync(schema, meta) {
        if (typeof this.opts.loadSchema != "function") {
          throw new Error("options.loadSchema should be a function");
        }
        const { loadSchema } = this.opts;
        return runCompileAsync.call(this, schema, meta);
        async function runCompileAsync(_schema, _meta) {
          await loadMetaSchema.call(this, _schema.$schema);
          const sch = this._addSchema(_schema, _meta);
          return sch.validate || _compileAsync.call(this, sch);
        }
        async function loadMetaSchema($ref) {
          if ($ref && !this.getSchema($ref)) {
            await runCompileAsync.call(this, { $ref }, true);
          }
        }
        async function _compileAsync(sch) {
          try {
            return this._compileSchemaEnv(sch);
          } catch (e) {
            if (!(e instanceof ref_error_1.default))
              throw e;
            checkLoaded.call(this, e);
            await loadMissingSchema.call(this, e.missingSchema);
            return _compileAsync.call(this, sch);
          }
        }
        function checkLoaded({ missingSchema: ref, missingRef }) {
          if (this.refs[ref]) {
            throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
          }
        }
        async function loadMissingSchema(ref) {
          const _schema = await _loadSchema.call(this, ref);
          if (!this.refs[ref])
            await loadMetaSchema.call(this, _schema.$schema);
          if (!this.refs[ref])
            this.addSchema(_schema, ref, meta);
        }
        async function _loadSchema(ref) {
          const p = this._loading[ref];
          if (p)
            return p;
          try {
            return await (this._loading[ref] = loadSchema(ref));
          } finally {
            delete this._loading[ref];
          }
        }
      }
      addSchema(schema, key, _meta, _validateSchema = this.opts.validateSchema) {
        if (Array.isArray(schema)) {
          for (const sch of schema)
            this.addSchema(sch, void 0, _meta, _validateSchema);
          return this;
        }
        let id;
        if (typeof schema === "object") {
          const { schemaId } = this.opts;
          id = schema[schemaId];
          if (id !== void 0 && typeof id != "string") {
            throw new Error(`schema ${schemaId} must be string`);
          }
        }
        key = (0, resolve_1.normalizeId)(key || id);
        this._checkUnique(key);
        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
        return this;
      }
      addMetaSchema(schema, key, _validateSchema = this.opts.validateSchema) {
        this.addSchema(schema, key, true, _validateSchema);
        return this;
      }
      validateSchema(schema, throwOrLogError) {
        if (typeof schema == "boolean")
          return true;
        let $schema;
        $schema = schema.$schema;
        if ($schema !== void 0 && typeof $schema != "string") {
          throw new Error("$schema must be a string");
        }
        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
        if (!$schema) {
          this.logger.warn("meta-schema not available");
          this.errors = null;
          return true;
        }
        const valid2 = this.validate($schema, schema);
        if (!valid2 && throwOrLogError) {
          const message = "schema is invalid: " + this.errorsText();
          if (this.opts.validateSchema === "log")
            this.logger.error(message);
          else
            throw new Error(message);
        }
        return valid2;
      }
      getSchema(keyRef) {
        let sch;
        while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
          keyRef = sch;
        if (sch === void 0) {
          const { schemaId } = this.opts;
          const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
          sch = compile_1.resolveSchema.call(this, root, keyRef);
          if (!sch)
            return;
          this.refs[keyRef] = sch;
        }
        return sch.validate || this._compileSchemaEnv(sch);
      }
      removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
          this._removeAllSchemas(this.schemas, schemaKeyRef);
          this._removeAllSchemas(this.refs, schemaKeyRef);
          return this;
        }
        switch (typeof schemaKeyRef) {
          case "undefined":
            this._removeAllSchemas(this.schemas);
            this._removeAllSchemas(this.refs);
            this._cache.clear();
            return this;
          case "string": {
            const sch = getSchEnv.call(this, schemaKeyRef);
            if (typeof sch == "object")
              this._cache.delete(sch.schema);
            delete this.schemas[schemaKeyRef];
            delete this.refs[schemaKeyRef];
            return this;
          }
          case "object": {
            const cacheKey = schemaKeyRef;
            this._cache.delete(cacheKey);
            let id = schemaKeyRef[this.opts.schemaId];
            if (id) {
              id = (0, resolve_1.normalizeId)(id);
              delete this.schemas[id];
              delete this.refs[id];
            }
            return this;
          }
          default:
            throw new Error("ajv.removeSchema: invalid parameter");
        }
      }
      addVocabulary(definitions) {
        for (const def of definitions)
          this.addKeyword(def);
        return this;
      }
      addKeyword(kwdOrDef, def) {
        let keyword;
        if (typeof kwdOrDef == "string") {
          keyword = kwdOrDef;
          if (typeof def == "object") {
            this.logger.warn("these parameters are deprecated, see docs for addKeyword");
            def.keyword = keyword;
          }
        } else if (typeof kwdOrDef == "object" && def === void 0) {
          def = kwdOrDef;
          keyword = def.keyword;
          if (Array.isArray(keyword) && !keyword.length) {
            throw new Error("addKeywords: keyword must be string or non-empty array");
          }
        } else {
          throw new Error("invalid addKeywords parameters");
        }
        checkKeyword.call(this, keyword, def);
        if (!def) {
          (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
          return this;
        }
        keywordMetaschema.call(this, def);
        const definition = {
          ...def,
          type: (0, dataType_1.getJSONTypes)(def.type),
          schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
        };
        (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k) => addRule.call(this, k, definition) : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
        return this;
      }
      getKeyword(keyword) {
        const rule = this.RULES.all[keyword];
        return typeof rule == "object" ? rule.definition : !!rule;
      }
      removeKeyword(keyword) {
        const { RULES } = this;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        for (const group of RULES.rules) {
          const i = group.rules.findIndex((rule) => rule.keyword === keyword);
          if (i >= 0)
            group.rules.splice(i, 1);
        }
        return this;
      }
      addFormat(name2, format) {
        if (typeof format == "string")
          format = new RegExp(format);
        this.formats[name2] = format;
        return this;
      }
      errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {}) {
        if (!errors || errors.length === 0)
          return "No errors";
        return errors.map((e) => `${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg) => text + separator + msg);
      }
      $dataMetaSchema(metaSchema, keywordsJsonPointers) {
        const rules = this.RULES.all;
        metaSchema = JSON.parse(JSON.stringify(metaSchema));
        for (const jsonPointer of keywordsJsonPointers) {
          const segments = jsonPointer.split("/").slice(1);
          let keywords = metaSchema;
          for (const seg of segments)
            keywords = keywords[seg];
          for (const key in rules) {
            const rule = rules[key];
            if (typeof rule != "object")
              continue;
            const { $data } = rule.definition;
            const schema = keywords[key];
            if ($data && schema)
              keywords[key] = schemaOrData(schema);
          }
        }
        return metaSchema;
      }
      _removeAllSchemas(schemas, regex) {
        for (const keyRef in schemas) {
          const sch = schemas[keyRef];
          if (!regex || regex.test(keyRef)) {
            if (typeof sch == "string") {
              delete schemas[keyRef];
            } else if (sch && !sch.meta) {
              this._cache.delete(sch.schema);
              delete schemas[keyRef];
            }
          }
        }
      }
      _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
        let id;
        const { schemaId } = this.opts;
        if (typeof schema == "object") {
          id = schema[schemaId];
        } else {
          if (this.opts.jtd)
            throw new Error("schema must be object");
          else if (typeof schema != "boolean")
            throw new Error("schema must be object or boolean");
        }
        let sch = this._cache.get(schema);
        if (sch !== void 0)
          return sch;
        baseId = (0, resolve_1.normalizeId)(id || baseId);
        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
        this._cache.set(sch.schema, sch);
        if (addSchema && !baseId.startsWith("#")) {
          if (baseId)
            this._checkUnique(baseId);
          this.refs[baseId] = sch;
        }
        if (validateSchema)
          this.validateSchema(schema, true);
        return sch;
      }
      _checkUnique(id) {
        if (this.schemas[id] || this.refs[id]) {
          throw new Error(`schema with key or id "${id}" already exists`);
        }
      }
      _compileSchemaEnv(sch) {
        if (sch.meta)
          this._compileMetaSchema(sch);
        else
          compile_1.compileSchema.call(this, sch);
        if (!sch.validate)
          throw new Error("ajv implementation error");
        return sch.validate;
      }
      _compileMetaSchema(sch) {
        const currentOpts = this.opts;
        this.opts = this._metaOpts;
        try {
          compile_1.compileSchema.call(this, sch);
        } finally {
          this.opts = currentOpts;
        }
      }
    };
    exports.default = Ajv2;
    Ajv2.ValidationError = validation_error_1.default;
    Ajv2.MissingRefError = ref_error_1.default;
    function checkOptions(checkOpts, options2, msg, log = "error") {
      for (const key in checkOpts) {
        const opt = key;
        if (opt in options2)
          this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
      }
    }
    function getSchEnv(keyRef) {
      keyRef = (0, resolve_1.normalizeId)(keyRef);
      return this.schemas[keyRef] || this.refs[keyRef];
    }
    function addInitialSchemas() {
      const optsSchemas = this.opts.schemas;
      if (!optsSchemas)
        return;
      if (Array.isArray(optsSchemas))
        this.addSchema(optsSchemas);
      else
        for (const key in optsSchemas)
          this.addSchema(optsSchemas[key], key);
    }
    function addInitialFormats() {
      for (const name2 in this.opts.formats) {
        const format = this.opts.formats[name2];
        if (format)
          this.addFormat(name2, format);
      }
    }
    function addInitialKeywords(defs) {
      if (Array.isArray(defs)) {
        this.addVocabulary(defs);
        return;
      }
      this.logger.warn("keywords option as map is deprecated, pass array");
      for (const keyword in defs) {
        const def = defs[keyword];
        if (!def.keyword)
          def.keyword = keyword;
        this.addKeyword(def);
      }
    }
    function getMetaSchemaOptions() {
      const metaOpts = { ...this.opts };
      for (const opt of META_IGNORE_OPTIONS)
        delete metaOpts[opt];
      return metaOpts;
    }
    var noLogs = { log() {
    }, warn() {
    }, error() {
    } };
    function getLogger(logger) {
      if (logger === false)
        return noLogs;
      if (logger === void 0)
        return console;
      if (logger.log && logger.warn && logger.error)
        return logger;
      throw new Error("logger must implement log, warn and error methods");
    }
    var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
    function checkKeyword(keyword, def) {
      const { RULES } = this;
      (0, util_1.eachItem)(keyword, (kwd) => {
        if (RULES.keywords[kwd])
          throw new Error(`Keyword ${kwd} is already defined`);
        if (!KEYWORD_NAME.test(kwd))
          throw new Error(`Keyword ${kwd} has invalid name`);
      });
      if (!def)
        return;
      if (def.$data && !("code" in def || "validate" in def)) {
        throw new Error('$data keyword must have "code" or "validate" function');
      }
    }
    function addRule(keyword, definition, dataType) {
      var _a;
      const post = definition === null || definition === void 0 ? void 0 : definition.post;
      if (dataType && post)
        throw new Error('keyword with "post" flag cannot have "type"');
      const { RULES } = this;
      let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
      if (!ruleGroup) {
        ruleGroup = { type: dataType, rules: [] };
        RULES.rules.push(ruleGroup);
      }
      RULES.keywords[keyword] = true;
      if (!definition)
        return;
      const rule = {
        keyword,
        definition: {
          ...definition,
          type: (0, dataType_1.getJSONTypes)(definition.type),
          schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
        }
      };
      if (definition.before)
        addBeforeRule.call(this, ruleGroup, rule, definition.before);
      else
        ruleGroup.rules.push(rule);
      RULES.all[keyword] = rule;
      (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
    }
    function addBeforeRule(ruleGroup, rule, before) {
      const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
      if (i >= 0) {
        ruleGroup.rules.splice(i, 0, rule);
      } else {
        ruleGroup.rules.push(rule);
        this.logger.warn(`rule ${before} is not defined`);
      }
    }
    function keywordMetaschema(def) {
      let { metaSchema } = def;
      if (metaSchema === void 0)
        return;
      if (def.$data && this.opts.$data)
        metaSchema = schemaOrData(metaSchema);
      def.validateSchema = this.compile(metaSchema, true);
    }
    var $dataRef = {
      $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
    };
    function schemaOrData(schema) {
      return { anyOf: [schema, $dataRef] };
    }
  }
});

// node_modules/ajv/dist/vocabularies/core/id.js
var require_id = __commonJS({
  "node_modules/ajv/dist/vocabularies/core/id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var def = {
      keyword: "id",
      code() {
        throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/core/ref.js
var require_ref = __commonJS({
  "node_modules/ajv/dist/vocabularies/core/ref.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callRef = exports.getValidate = void 0;
    var ref_error_1 = require_ref_error();
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var compile_1 = require_compile();
    var util_1 = require_util();
    var def = {
      keyword: "$ref",
      schemaType: "string",
      code(cxt) {
        const { gen, schema: $ref, it } = cxt;
        const { baseId, schemaEnv: env, validateName, opts, self: self2 } = it;
        const { root } = env;
        if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
          return callRootRef();
        const schOrEnv = compile_1.resolveRef.call(self2, root, baseId, $ref);
        if (schOrEnv === void 0)
          throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
        if (schOrEnv instanceof compile_1.SchemaEnv)
          return callValidate(schOrEnv);
        return inlineRefSchema(schOrEnv);
        function callRootRef() {
          if (env === root)
            return callRef(cxt, validateName, env, env.$async);
          const rootName = gen.scopeValue("root", { ref: root });
          return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);
        }
        function callValidate(sch) {
          const v = getValidate(cxt, sch);
          callRef(cxt, v, sch, sch.$async);
        }
        function inlineRefSchema(sch) {
          const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
          const valid2 = gen.name("valid");
          const schCxt = cxt.subschema({
            schema: sch,
            dataTypes: [],
            schemaPath: codegen_1.nil,
            topSchemaRef: schName,
            errSchemaPath: $ref
          }, valid2);
          cxt.mergeEvaluated(schCxt);
          cxt.ok(valid2);
        }
      }
    };
    function getValidate(cxt, sch) {
      const { gen } = cxt;
      return sch.validate ? gen.scopeValue("validate", { ref: sch.validate }) : (0, codegen_1._)`${gen.scopeValue("wrapper", { ref: sch })}.validate`;
    }
    exports.getValidate = getValidate;
    function callRef(cxt, v, sch, $async) {
      const { gen, it } = cxt;
      const { allErrors, schemaEnv: env, opts } = it;
      const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
      if ($async)
        callAsyncRef();
      else
        callSyncRef();
      function callAsyncRef() {
        if (!env.$async)
          throw new Error("async schema referenced by sync schema");
        const valid2 = gen.let("valid");
        gen.try(() => {
          gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
          addEvaluatedFrom(v);
          if (!allErrors)
            gen.assign(valid2, true);
        }, (e) => {
          gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
          addErrorsFrom(e);
          if (!allErrors)
            gen.assign(valid2, false);
        });
        cxt.ok(valid2);
      }
      function callSyncRef() {
        cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
      }
      function addErrorsFrom(source) {
        const errs = (0, codegen_1._)`${source}.errors`;
        gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`);
        gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
      }
      function addEvaluatedFrom(source) {
        var _a;
        if (!it.opts.unevaluated)
          return;
        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
        if (it.props !== true) {
          if (schEvaluated && !schEvaluated.dynamicProps) {
            if (schEvaluated.props !== void 0) {
              it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
            }
          } else {
            const props = gen.var("props", (0, codegen_1._)`${source}.evaluated.props`);
            it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
          }
        }
        if (it.items !== true) {
          if (schEvaluated && !schEvaluated.dynamicItems) {
            if (schEvaluated.items !== void 0) {
              it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
            }
          } else {
            const items = gen.var("items", (0, codegen_1._)`${source}.evaluated.items`);
            it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
          }
        }
      }
    }
    exports.callRef = callRef;
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/core/index.js
var require_core2 = __commonJS({
  "node_modules/ajv/dist/vocabularies/core/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var id_1 = require_id();
    var ref_1 = require_ref();
    var core = [
      "$schema",
      "$id",
      "$defs",
      "$vocabulary",
      { keyword: "$comment" },
      "definitions",
      id_1.default,
      ref_1.default
    ];
    exports.default = core;
  }
});

// node_modules/ajv/dist/vocabularies/validation/limitNumber.js
var require_limitNumber = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/limitNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var ops = codegen_1.operators;
    var KWDs = {
      maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
      minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
      exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
      exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
    };
    var error = {
      message: ({ keyword, schemaCode }) => (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
      params: ({ keyword, schemaCode }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
    };
    var def = {
      keyword: Object.keys(KWDs),
      type: "number",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/multipleOf.js
var require_multipleOf = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/multipleOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,
      params: ({ schemaCode }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`
    };
    var def = {
      keyword: "multipleOf",
      type: "number",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, schemaCode, it } = cxt;
        const prec = it.opts.multipleOfPrecision;
        const res = gen.let("res");
        const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
        cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/runtime/ucs2length.js
var require_ucs2length = __commonJS({
  "node_modules/ajv/dist/runtime/ucs2length.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function ucs2length(str2) {
      const len = str2.length;
      let length = 0;
      let pos = 0;
      let value;
      while (pos < len) {
        length++;
        value = str2.charCodeAt(pos++);
        if (value >= 55296 && value <= 56319 && pos < len) {
          value = str2.charCodeAt(pos);
          if ((value & 64512) === 56320)
            pos++;
        }
      }
      return length;
    }
    exports.default = ucs2length;
    ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
  }
});

// node_modules/ajv/dist/vocabularies/validation/limitLength.js
var require_limitLength = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/limitLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var ucs2length_1 = require_ucs2length();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === "maxLength" ? "more" : "fewer";
        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
      },
      params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
    };
    var def = {
      keyword: ["maxLength", "minLength"],
      type: "string",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode, it } = cxt;
        const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
        const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
        cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/pattern.js
var require_pattern = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/pattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) => (0, codegen_1.str)`must match pattern "${schemaCode}"`,
      params: ({ schemaCode }) => (0, codegen_1._)`{pattern: ${schemaCode}}`
    };
    var def = {
      keyword: "pattern",
      type: "string",
      schemaType: "string",
      $data: true,
      error,
      code(cxt) {
        const { data, $data, schema, schemaCode, it } = cxt;
        const u = it.opts.unicodeRegExp ? "u" : "";
        const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);
        cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/limitProperties.js
var require_limitProperties = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/limitProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === "maxProperties" ? "more" : "fewer";
        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
      },
      params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
    };
    var def = {
      keyword: ["maxProperties", "minProperties"],
      type: "object",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/required.js
var require_required = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/required.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: ({ params: { missingProperty } }) => (0, codegen_1.str)`must have required property '${missingProperty}'`,
      params: ({ params: { missingProperty } }) => (0, codegen_1._)`{missingProperty: ${missingProperty}}`
    };
    var def = {
      keyword: "required",
      type: "object",
      schemaType: "array",
      $data: true,
      error,
      code(cxt) {
        const { gen, schema, schemaCode, data, $data, it } = cxt;
        const { opts } = it;
        if (!$data && schema.length === 0)
          return;
        const useLoop = schema.length >= opts.loopRequired;
        if (it.allErrors)
          allErrorsMode();
        else
          exitOnErrorMode();
        if (opts.strictRequired) {
          const props = cxt.parentSchema.properties;
          const { definedProperties } = cxt.it;
          for (const requiredKey of schema) {
            if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === void 0 && !definedProperties.has(requiredKey)) {
              const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
              const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
              (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
            }
          }
        }
        function allErrorsMode() {
          if (useLoop || $data) {
            cxt.block$data(codegen_1.nil, loopAllRequired);
          } else {
            for (const prop of schema) {
              (0, code_1.checkReportMissingProp)(cxt, prop);
            }
          }
        }
        function exitOnErrorMode() {
          const missing = gen.let("missing");
          if (useLoop || $data) {
            const valid2 = gen.let("valid", true);
            cxt.block$data(valid2, () => loopUntilMissing(missing, valid2));
            cxt.ok(valid2);
          } else {
            gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
          }
        }
        function loopAllRequired() {
          gen.forOf("prop", schemaCode, (prop) => {
            cxt.setParams({ missingProperty: prop });
            gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
          });
        }
        function loopUntilMissing(missing, valid2) {
          cxt.setParams({ missingProperty: missing });
          gen.forOf(missing, schemaCode, () => {
            gen.assign(valid2, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
            gen.if((0, codegen_1.not)(valid2), () => {
              cxt.error();
              gen.break();
            });
          }, codegen_1.nil);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/limitItems.js
var require_limitItems = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/limitItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === "maxItems" ? "more" : "fewer";
        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
      },
      params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
    };
    var def = {
      keyword: ["maxItems", "minItems"],
      type: "array",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/runtime/equal.js
var require_equal = __commonJS({
  "node_modules/ajv/dist/runtime/equal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var equal = require_fast_deep_equal();
    equal.code = 'require("ajv/dist/runtime/equal").default';
    exports.default = equal;
  }
});

// node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
var require_uniqueItems = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/uniqueItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var dataType_1 = require_dataType();
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var equal_1 = require_equal();
    var error = {
      message: ({ params: { i, j } }) => (0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
      params: ({ params: { i, j } }) => (0, codegen_1._)`{i: ${i}, j: ${j}}`
    };
    var def = {
      keyword: "uniqueItems",
      type: "array",
      schemaType: "boolean",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
        if (!$data && !schema)
          return;
        const valid2 = gen.let("valid");
        const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
        cxt.block$data(valid2, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
        cxt.ok(valid2);
        function validateUniqueItems() {
          const i = gen.let("i", (0, codegen_1._)`${data}.length`);
          const j = gen.let("j");
          cxt.setParams({ i, j });
          gen.assign(valid2, true);
          gen.if((0, codegen_1._)`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
        }
        function canOptimize() {
          return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
        }
        function loopN(i, j) {
          const item = gen.name("item");
          const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
          const indices = gen.const("indices", (0, codegen_1._)`{}`);
          gen.for((0, codegen_1._)`;${i}--;`, () => {
            gen.let(item, (0, codegen_1._)`${data}[${i}]`);
            gen.if(wrongType, (0, codegen_1._)`continue`);
            if (itemTypes.length > 1)
              gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
            gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, () => {
              gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);
              cxt.error();
              gen.assign(valid2, false).break();
            }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);
          });
        }
        function loopN2(i, j) {
          const eql = (0, util_1.useFunc)(gen, equal_1.default);
          const outer = gen.name("outer");
          gen.label(outer).for((0, codegen_1._)`;${i}--;`, () => gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, () => {
            cxt.error();
            gen.assign(valid2, false).break(outer);
          })));
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/const.js
var require_const = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/const.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var equal_1 = require_equal();
    var error = {
      message: "must be equal to constant",
      params: ({ schemaCode }) => (0, codegen_1._)`{allowedValue: ${schemaCode}}`
    };
    var def = {
      keyword: "const",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schemaCode, schema } = cxt;
        if ($data || schema && typeof schema == "object") {
          cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
        } else {
          cxt.fail((0, codegen_1._)`${schema} !== ${data}`);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/enum.js
var require_enum = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/enum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var equal_1 = require_equal();
    var error = {
      message: "must be equal to one of the allowed values",
      params: ({ schemaCode }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`
    };
    var def = {
      keyword: "enum",
      schemaType: "array",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        if (!$data && schema.length === 0)
          throw new Error("enum must have non-empty array");
        const useLoop = schema.length >= it.opts.loopEnum;
        let eql;
        const getEql = () => eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);
        let valid2;
        if (useLoop || $data) {
          valid2 = gen.let("valid");
          cxt.block$data(valid2, loopEnum);
        } else {
          if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
          const vSchema = gen.const("vSchema", schemaCode);
          valid2 = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
        }
        cxt.pass(valid2);
        function loopEnum() {
          gen.assign(valid2, false);
          gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, () => gen.assign(valid2, true).break()));
        }
        function equalCode(vSchema, i) {
          const sch = schema[i];
          return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/index.js
var require_validation = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var limitNumber_1 = require_limitNumber();
    var multipleOf_1 = require_multipleOf();
    var limitLength_1 = require_limitLength();
    var pattern_1 = require_pattern();
    var limitProperties_1 = require_limitProperties();
    var required_1 = require_required();
    var limitItems_1 = require_limitItems();
    var uniqueItems_1 = require_uniqueItems();
    var const_1 = require_const();
    var enum_1 = require_enum();
    var validation = [
      limitNumber_1.default,
      multipleOf_1.default,
      limitLength_1.default,
      pattern_1.default,
      limitProperties_1.default,
      required_1.default,
      limitItems_1.default,
      uniqueItems_1.default,
      { keyword: "type", schemaType: ["string", "array"] },
      { keyword: "nullable", schemaType: "boolean" },
      const_1.default,
      enum_1.default
    ];
    exports.default = validation;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
var require_additionalItems = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/additionalItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAdditionalItems = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
      params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
    };
    var def = {
      keyword: "additionalItems",
      type: "array",
      schemaType: ["boolean", "object"],
      before: "uniqueItems",
      error,
      code(cxt) {
        const { parentSchema, it } = cxt;
        const { items } = parentSchema;
        if (!Array.isArray(items)) {
          (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
          return;
        }
        validateAdditionalItems(cxt, items);
      }
    };
    function validateAdditionalItems(cxt, items) {
      const { gen, schema, data, keyword, it } = cxt;
      it.items = true;
      const len = gen.const("len", (0, codegen_1._)`${data}.length`);
      if (schema === false) {
        cxt.setParams({ len: items.length });
        cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
      } else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
        const valid2 = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`);
        gen.if((0, codegen_1.not)(valid2), () => validateItems(valid2));
        cxt.ok(valid2);
      }
      function validateItems(valid2) {
        gen.forRange("i", items.length, len, (i) => {
          cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid2);
          if (!it.allErrors)
            gen.if((0, codegen_1.not)(valid2), () => gen.break());
        });
      }
    }
    exports.validateAdditionalItems = validateAdditionalItems;
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/items.js
var require_items = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/items.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTuple = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var code_1 = require_code2();
    var def = {
      keyword: "items",
      type: "array",
      schemaType: ["object", "array", "boolean"],
      before: "uniqueItems",
      code(cxt) {
        const { schema, it } = cxt;
        if (Array.isArray(schema))
          return validateTuple(cxt, "additionalItems", schema);
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema))
          return;
        cxt.ok((0, code_1.validateArray)(cxt));
      }
    };
    function validateTuple(cxt, extraItems, schArr = cxt.schema) {
      const { gen, parentSchema, data, keyword, it } = cxt;
      checkStrictTuple(parentSchema);
      if (it.opts.unevaluated && schArr.length && it.items !== true) {
        it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
      }
      const valid2 = gen.name("valid");
      const len = gen.const("len", (0, codegen_1._)`${data}.length`);
      schArr.forEach((sch, i) => {
        if ((0, util_1.alwaysValidSchema)(it, sch))
          return;
        gen.if((0, codegen_1._)`${len} > ${i}`, () => cxt.subschema({
          keyword,
          schemaProp: i,
          dataProp: i
        }, valid2));
        cxt.ok(valid2);
      });
      function checkStrictTuple(sch) {
        const { opts, errSchemaPath } = it;
        const l = schArr.length;
        const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
        if (opts.strictTuples && !fullTuple) {
          const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
          (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
        }
      }
    }
    exports.validateTuple = validateTuple;
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/prefixItems.js
var require_prefixItems = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/prefixItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var items_1 = require_items();
    var def = {
      keyword: "prefixItems",
      type: "array",
      schemaType: ["array"],
      before: "uniqueItems",
      code: (cxt) => (0, items_1.validateTuple)(cxt, "items")
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/items2020.js
var require_items2020 = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/items2020.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var code_1 = require_code2();
    var additionalItems_1 = require_additionalItems();
    var error = {
      message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
      params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
    };
    var def = {
      keyword: "items",
      type: "array",
      schemaType: ["object", "boolean"],
      before: "uniqueItems",
      error,
      code(cxt) {
        const { schema, parentSchema, it } = cxt;
        const { prefixItems } = parentSchema;
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema))
          return;
        if (prefixItems)
          (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
        else
          cxt.ok((0, code_1.validateArray)(cxt));
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/contains.js
var require_contains = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/contains.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
      params: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
    };
    var def = {
      keyword: "contains",
      type: "array",
      schemaType: ["object", "boolean"],
      before: "uniqueItems",
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        let min;
        let max;
        const { minContains, maxContains } = parentSchema;
        if (it.opts.next) {
          min = minContains === void 0 ? 1 : minContains;
          max = maxContains;
        } else {
          min = 1;
        }
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        cxt.setParams({ min, max });
        if (max === void 0 && min === 0) {
          (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
          return;
        }
        if (max !== void 0 && min > max) {
          (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
          cxt.fail();
          return;
        }
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
          let cond = (0, codegen_1._)`${len} >= ${min}`;
          if (max !== void 0)
            cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
          cxt.pass(cond);
          return;
        }
        it.items = true;
        const valid2 = gen.name("valid");
        if (max === void 0 && min === 1) {
          validateItems(valid2, () => gen.if(valid2, () => gen.break()));
        } else if (min === 0) {
          gen.let(valid2, true);
          if (max !== void 0)
            gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
        } else {
          gen.let(valid2, false);
          validateItemsWithCount();
        }
        cxt.result(valid2, () => cxt.reset());
        function validateItemsWithCount() {
          const schValid = gen.name("_valid");
          const count = gen.let("count", 0);
          validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
        }
        function validateItems(_valid, block) {
          gen.forRange("i", 0, len, (i) => {
            cxt.subschema({
              keyword: "contains",
              dataProp: i,
              dataPropType: util_1.Type.Num,
              compositeRule: true
            }, _valid);
            block();
          });
        }
        function checkLimits(count) {
          gen.code((0, codegen_1._)`${count}++`);
          if (max === void 0) {
            gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid2, true).break());
          } else {
            gen.if((0, codegen_1._)`${count} > ${max}`, () => gen.assign(valid2, false).break());
            if (min === 1)
              gen.assign(valid2, true);
            else
              gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid2, true));
          }
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/dependencies.js
var require_dependencies = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/dependencies.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var code_1 = require_code2();
    exports.error = {
      message: ({ params: { property, depsCount, deps } }) => {
        const property_ies = depsCount === 1 ? "property" : "properties";
        return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
      },
      params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
    };
    var def = {
      keyword: "dependencies",
      type: "object",
      schemaType: "object",
      error: exports.error,
      code(cxt) {
        const [propDeps, schDeps] = splitDependencies(cxt);
        validatePropertyDeps(cxt, propDeps);
        validateSchemaDeps(cxt, schDeps);
      }
    };
    function splitDependencies({ schema }) {
      const propertyDeps = {};
      const schemaDeps = {};
      for (const key in schema) {
        if (key === "__proto__")
          continue;
        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
        deps[key] = schema[key];
      }
      return [propertyDeps, schemaDeps];
    }
    function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
      const { gen, data, it } = cxt;
      if (Object.keys(propertyDeps).length === 0)
        return;
      const missing = gen.let("missing");
      for (const prop in propertyDeps) {
        const deps = propertyDeps[prop];
        if (deps.length === 0)
          continue;
        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
        cxt.setParams({
          property: prop,
          depsCount: deps.length,
          deps: deps.join(", ")
        });
        if (it.allErrors) {
          gen.if(hasProperty, () => {
            for (const depProp of deps) {
              (0, code_1.checkReportMissingProp)(cxt, depProp);
            }
          });
        } else {
          gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
          (0, code_1.reportMissingProp)(cxt, missing);
          gen.else();
        }
      }
    }
    exports.validatePropertyDeps = validatePropertyDeps;
    function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
      const { gen, data, keyword, it } = cxt;
      const valid2 = gen.name("valid");
      for (const prop in schemaDeps) {
        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
          continue;
        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
          const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid2);
          cxt.mergeValidEvaluated(schCxt, valid2);
        }, () => gen.var(valid2, true));
        cxt.ok(valid2);
      }
    }
    exports.validateSchemaDeps = validateSchemaDeps;
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
var require_propertyNames = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/propertyNames.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: "property name must be valid",
      params: ({ params }) => (0, codegen_1._)`{propertyName: ${params.propertyName}}`
    };
    var def = {
      keyword: "propertyNames",
      type: "object",
      schemaType: ["object", "boolean"],
      error,
      code(cxt) {
        const { gen, schema, data, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema))
          return;
        const valid2 = gen.name("valid");
        gen.forIn("key", data, (key) => {
          cxt.setParams({ propertyName: key });
          cxt.subschema({
            keyword: "propertyNames",
            data: key,
            dataTypes: ["string"],
            propertyName: key,
            compositeRule: true
          }, valid2);
          gen.if((0, codegen_1.not)(valid2), () => {
            cxt.error(true);
            if (!it.allErrors)
              gen.break();
          });
        });
        cxt.ok(valid2);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
var require_additionalProperties = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var util_1 = require_util();
    var error = {
      message: "must NOT have additional properties",
      params: ({ params }) => (0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
    };
    var def = {
      keyword: "additionalProperties",
      type: ["object"],
      schemaType: ["boolean", "object"],
      allowUndefined: true,
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, data, errsCount, it } = cxt;
        if (!errsCount)
          throw new Error("ajv implementation error");
        const { allErrors, opts } = it;
        it.props = true;
        if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema))
          return;
        const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
        const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
        checkAdditionalProperties();
        cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
        function checkAdditionalProperties() {
          gen.forIn("key", data, (key) => {
            if (!props.length && !patProps.length)
              additionalPropertyCode(key);
            else
              gen.if(isAdditional(key), () => additionalPropertyCode(key));
          });
        }
        function isAdditional(key) {
          let definedProp;
          if (props.length > 8) {
            const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
            definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
          } else if (props.length) {
            definedProp = (0, codegen_1.or)(...props.map((p) => (0, codegen_1._)`${key} === ${p}`));
          } else {
            definedProp = codegen_1.nil;
          }
          if (patProps.length) {
            definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p) => (0, codegen_1._)`${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
          }
          return (0, codegen_1.not)(definedProp);
        }
        function deleteAdditional(key) {
          gen.code((0, codegen_1._)`delete ${data}[${key}]`);
        }
        function additionalPropertyCode(key) {
          if (opts.removeAdditional === "all" || opts.removeAdditional && schema === false) {
            deleteAdditional(key);
            return;
          }
          if (schema === false) {
            cxt.setParams({ additionalProperty: key });
            cxt.error();
            if (!allErrors)
              gen.break();
            return;
          }
          if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
            const valid2 = gen.name("valid");
            if (opts.removeAdditional === "failing") {
              applyAdditionalSchema(key, valid2, false);
              gen.if((0, codegen_1.not)(valid2), () => {
                cxt.reset();
                deleteAdditional(key);
              });
            } else {
              applyAdditionalSchema(key, valid2);
              if (!allErrors)
                gen.if((0, codegen_1.not)(valid2), () => gen.break());
            }
          }
        }
        function applyAdditionalSchema(key, valid2, errors) {
          const subschema = {
            keyword: "additionalProperties",
            dataProp: key,
            dataPropType: util_1.Type.Str
          };
          if (errors === false) {
            Object.assign(subschema, {
              compositeRule: true,
              createErrors: false,
              allErrors: false
            });
          }
          cxt.subschema(subschema, valid2);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/properties.js
var require_properties = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/properties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var validate_1 = require_validate();
    var code_1 = require_code2();
    var util_1 = require_util();
    var additionalProperties_1 = require_additionalProperties();
    var def = {
      keyword: "properties",
      type: "object",
      schemaType: "object",
      code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === void 0) {
          additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
        }
        const allProps = (0, code_1.allSchemaProperties)(schema);
        for (const prop of allProps) {
          it.definedProperties.add(prop);
        }
        if (it.opts.unevaluated && allProps.length && it.props !== true) {
          it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
        }
        const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));
        if (properties.length === 0)
          return;
        const valid2 = gen.name("valid");
        for (const prop of properties) {
          if (hasDefault(prop)) {
            applyPropertySchema(prop);
          } else {
            gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
            applyPropertySchema(prop);
            if (!it.allErrors)
              gen.else().var(valid2, true);
            gen.endIf();
          }
          cxt.it.definedProperties.add(prop);
          cxt.ok(valid2);
        }
        function hasDefault(prop) {
          return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== void 0;
        }
        function applyPropertySchema(prop) {
          cxt.subschema({
            keyword: "properties",
            schemaProp: prop,
            dataProp: prop
          }, valid2);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
var require_patternProperties = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/patternProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var util_2 = require_util();
    var def = {
      keyword: "patternProperties",
      type: "object",
      schemaType: "object",
      code(cxt) {
        const { gen, schema, data, parentSchema, it } = cxt;
        const { opts } = it;
        const patterns = (0, code_1.allSchemaProperties)(schema);
        const alwaysValidPatterns = patterns.filter((p) => (0, util_1.alwaysValidSchema)(it, schema[p]));
        if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
          return;
        }
        const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
        const valid2 = gen.name("valid");
        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
          it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
        }
        const { props } = it;
        validatePatternProperties();
        function validatePatternProperties() {
          for (const pat of patterns) {
            if (checkProperties)
              checkMatchingProperties(pat);
            if (it.allErrors) {
              validateProperties(pat);
            } else {
              gen.var(valid2, true);
              validateProperties(pat);
              gen.if(valid2);
            }
          }
        }
        function checkMatchingProperties(pat) {
          for (const prop in checkProperties) {
            if (new RegExp(pat).test(prop)) {
              (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
            }
          }
        }
        function validateProperties(pat) {
          gen.forIn("key", data, (key) => {
            gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
              const alwaysValid = alwaysValidPatterns.includes(pat);
              if (!alwaysValid) {
                cxt.subschema({
                  keyword: "patternProperties",
                  schemaProp: pat,
                  dataProp: key,
                  dataPropType: util_2.Type.Str
                }, valid2);
              }
              if (it.opts.unevaluated && props !== true) {
                gen.assign((0, codegen_1._)`${props}[${key}]`, true);
              } else if (!alwaysValid && !it.allErrors) {
                gen.if((0, codegen_1.not)(valid2), () => gen.break());
              }
            });
          });
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/not.js
var require_not = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var def = {
      keyword: "not",
      schemaType: ["object", "boolean"],
      trackErrors: true,
      code(cxt) {
        const { gen, schema, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
          cxt.fail();
          return;
        }
        const valid2 = gen.name("valid");
        cxt.subschema({
          keyword: "not",
          compositeRule: true,
          createErrors: false,
          allErrors: false
        }, valid2);
        cxt.failResult(valid2, () => cxt.reset(), () => cxt.error());
      },
      error: { message: "must NOT be valid" }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/anyOf.js
var require_anyOf = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/anyOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var def = {
      keyword: "anyOf",
      schemaType: "array",
      trackErrors: true,
      code: code_1.validateUnion,
      error: { message: "must match a schema in anyOf" }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/oneOf.js
var require_oneOf = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/oneOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: "must match exactly one schema in oneOf",
      params: ({ params }) => (0, codegen_1._)`{passingSchemas: ${params.passing}}`
    };
    var def = {
      keyword: "oneOf",
      schemaType: "array",
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, it } = cxt;
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        if (it.opts.discriminator && parentSchema.discriminator)
          return;
        const schArr = schema;
        const valid2 = gen.let("valid", false);
        const passing = gen.let("passing", null);
        const schValid = gen.name("_valid");
        cxt.setParams({ passing });
        gen.block(validateOneOf);
        cxt.result(valid2, () => cxt.reset(), () => cxt.error(true));
        function validateOneOf() {
          schArr.forEach((sch, i) => {
            let schCxt;
            if ((0, util_1.alwaysValidSchema)(it, sch)) {
              gen.var(schValid, true);
            } else {
              schCxt = cxt.subschema({
                keyword: "oneOf",
                schemaProp: i,
                compositeRule: true
              }, schValid);
            }
            if (i > 0) {
              gen.if((0, codegen_1._)`${schValid} && ${valid2}`).assign(valid2, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();
            }
            gen.if(schValid, () => {
              gen.assign(valid2, true);
              gen.assign(passing, i);
              if (schCxt)
                cxt.mergeEvaluated(schCxt, codegen_1.Name);
            });
          });
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/allOf.js
var require_allOf = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/allOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var def = {
      keyword: "allOf",
      schemaType: "array",
      code(cxt) {
        const { gen, schema, it } = cxt;
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        const valid2 = gen.name("valid");
        schema.forEach((sch, i) => {
          if ((0, util_1.alwaysValidSchema)(it, sch))
            return;
          const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid2);
          cxt.ok(valid2);
          cxt.mergeEvaluated(schCxt);
        });
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/if.js
var require_if = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/if.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: ({ params }) => (0, codegen_1.str)`must match "${params.ifClause}" schema`,
      params: ({ params }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
    };
    var def = {
      keyword: "if",
      schemaType: ["object", "boolean"],
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, parentSchema, it } = cxt;
        if (parentSchema.then === void 0 && parentSchema.else === void 0) {
          (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
        }
        const hasThen = hasSchema(it, "then");
        const hasElse = hasSchema(it, "else");
        if (!hasThen && !hasElse)
          return;
        const valid2 = gen.let("valid", true);
        const schValid = gen.name("_valid");
        validateIf();
        cxt.reset();
        if (hasThen && hasElse) {
          const ifClause = gen.let("ifClause");
          cxt.setParams({ ifClause });
          gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
        } else if (hasThen) {
          gen.if(schValid, validateClause("then"));
        } else {
          gen.if((0, codegen_1.not)(schValid), validateClause("else"));
        }
        cxt.pass(valid2, () => cxt.error(true));
        function validateIf() {
          const schCxt = cxt.subschema({
            keyword: "if",
            compositeRule: true,
            createErrors: false,
            allErrors: false
          }, schValid);
          cxt.mergeEvaluated(schCxt);
        }
        function validateClause(keyword, ifClause) {
          return () => {
            const schCxt = cxt.subschema({ keyword }, schValid);
            gen.assign(valid2, schValid);
            cxt.mergeValidEvaluated(schCxt, valid2);
            if (ifClause)
              gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
            else
              cxt.setParams({ ifClause: keyword });
          };
        }
      }
    };
    function hasSchema(it, keyword) {
      const schema = it.schema[keyword];
      return schema !== void 0 && !(0, util_1.alwaysValidSchema)(it, schema);
    }
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/thenElse.js
var require_thenElse = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/thenElse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var def = {
      keyword: ["then", "else"],
      schemaType: ["object", "boolean"],
      code({ keyword, parentSchema, it }) {
        if (parentSchema.if === void 0)
          (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/index.js
var require_applicator = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var additionalItems_1 = require_additionalItems();
    var prefixItems_1 = require_prefixItems();
    var items_1 = require_items();
    var items2020_1 = require_items2020();
    var contains_1 = require_contains();
    var dependencies_1 = require_dependencies();
    var propertyNames_1 = require_propertyNames();
    var additionalProperties_1 = require_additionalProperties();
    var properties_1 = require_properties();
    var patternProperties_1 = require_patternProperties();
    var not_1 = require_not();
    var anyOf_1 = require_anyOf();
    var oneOf_1 = require_oneOf();
    var allOf_1 = require_allOf();
    var if_1 = require_if();
    var thenElse_1 = require_thenElse();
    function getApplicator(draft2020 = false) {
      const applicator = [
        not_1.default,
        anyOf_1.default,
        oneOf_1.default,
        allOf_1.default,
        if_1.default,
        thenElse_1.default,
        propertyNames_1.default,
        additionalProperties_1.default,
        dependencies_1.default,
        properties_1.default,
        patternProperties_1.default
      ];
      if (draft2020)
        applicator.push(prefixItems_1.default, items2020_1.default);
      else
        applicator.push(additionalItems_1.default, items_1.default);
      applicator.push(contains_1.default);
      return applicator;
    }
    exports.default = getApplicator;
  }
});

// node_modules/ajv/dist/vocabularies/format/format.js
var require_format = __commonJS({
  "node_modules/ajv/dist/vocabularies/format/format.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) => (0, codegen_1.str)`must match format "${schemaCode}"`,
      params: ({ schemaCode }) => (0, codegen_1._)`{format: ${schemaCode}}`
    };
    var def = {
      keyword: "format",
      type: ["number", "string"],
      schemaType: "string",
      $data: true,
      error,
      code(cxt, ruleType) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        const { opts, errSchemaPath, schemaEnv, self: self2 } = it;
        if (!opts.validateFormats)
          return;
        if ($data)
          validate$DataFormat();
        else
          validateFormat();
        function validate$DataFormat() {
          const fmts = gen.scopeValue("formats", {
            ref: self2.formats,
            code: opts.code.formats
          });
          const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
          const fType = gen.let("fType");
          const format = gen.let("format");
          gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`"string"`).assign(format, fDef));
          cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
          function unknownFmt() {
            if (opts.strictSchema === false)
              return codegen_1.nil;
            return (0, codegen_1._)`${schemaCode} && !${format}`;
          }
          function invalidFmt() {
            const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;
            const validData = (0, codegen_1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
            return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
          }
        }
        function validateFormat() {
          const formatDef = self2.formats[schema];
          if (!formatDef) {
            unknownFormat();
            return;
          }
          if (formatDef === true)
            return;
          const [fmtType, format, fmtRef] = getFormat(formatDef);
          if (fmtType === ruleType)
            cxt.pass(validCondition());
          function unknownFormat() {
            if (opts.strictSchema === false) {
              self2.logger.warn(unknownMsg());
              return;
            }
            throw new Error(unknownMsg());
            function unknownMsg() {
              return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
            }
          }
          function getFormat(fmtDef) {
            const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : void 0;
            const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
            if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
              return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];
            }
            return ["string", fmtDef, fmt];
          }
          function validCondition() {
            if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
              if (!schemaEnv.$async)
                throw new Error("async format in sync schema");
              return (0, codegen_1._)`await ${fmtRef}(${data})`;
            }
            return typeof format == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
          }
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/format/index.js
var require_format2 = __commonJS({
  "node_modules/ajv/dist/vocabularies/format/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var format_1 = require_format();
    var format = [format_1.default];
    exports.default = format;
  }
});

// node_modules/ajv/dist/vocabularies/metadata.js
var require_metadata = __commonJS({
  "node_modules/ajv/dist/vocabularies/metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.contentVocabulary = exports.metadataVocabulary = void 0;
    exports.metadataVocabulary = [
      "title",
      "description",
      "default",
      "deprecated",
      "readOnly",
      "writeOnly",
      "examples"
    ];
    exports.contentVocabulary = [
      "contentMediaType",
      "contentEncoding",
      "contentSchema"
    ];
  }
});

// node_modules/ajv/dist/vocabularies/draft7.js
var require_draft7 = __commonJS({
  "node_modules/ajv/dist/vocabularies/draft7.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = require_core2();
    var validation_1 = require_validation();
    var applicator_1 = require_applicator();
    var format_1 = require_format2();
    var metadata_1 = require_metadata();
    var draft7Vocabularies = [
      core_1.default,
      validation_1.default,
      (0, applicator_1.default)(),
      format_1.default,
      metadata_1.metadataVocabulary,
      metadata_1.contentVocabulary
    ];
    exports.default = draft7Vocabularies;
  }
});

// node_modules/ajv/dist/vocabularies/discriminator/types.js
var require_types = __commonJS({
  "node_modules/ajv/dist/vocabularies/discriminator/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiscrError = void 0;
    var DiscrError;
    (function(DiscrError2) {
      DiscrError2["Tag"] = "tag";
      DiscrError2["Mapping"] = "mapping";
    })(DiscrError = exports.DiscrError || (exports.DiscrError = {}));
  }
});

// node_modules/ajv/dist/vocabularies/discriminator/index.js
var require_discriminator = __commonJS({
  "node_modules/ajv/dist/vocabularies/discriminator/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var types_1 = require_types();
    var compile_1 = require_compile();
    var util_1 = require_util();
    var error = {
      message: ({ params: { discrError, tagName: tagName13 } }) => discrError === types_1.DiscrError.Tag ? `tag "${tagName13}" must be string` : `value of tag "${tagName13}" must be in oneOf`,
      params: ({ params: { discrError, tag, tagName: tagName13 } }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName13}, tagValue: ${tag}}`
    };
    var def = {
      keyword: "discriminator",
      type: "object",
      schemaType: "object",
      error,
      code(cxt) {
        const { gen, data, schema, parentSchema, it } = cxt;
        const { oneOf } = parentSchema;
        if (!it.opts.discriminator) {
          throw new Error("discriminator: requires discriminator option");
        }
        const tagName13 = schema.propertyName;
        if (typeof tagName13 != "string")
          throw new Error("discriminator: requires propertyName");
        if (schema.mapping)
          throw new Error("discriminator: mapping is not supported");
        if (!oneOf)
          throw new Error("discriminator: requires oneOf keyword");
        const valid2 = gen.let("valid", false);
        const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName13)}`);
        gen.if((0, codegen_1._)`typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName: tagName13 }));
        cxt.ok(valid2);
        function validateMapping() {
          const mapping = getMapping();
          gen.if(false);
          for (const tagValue in mapping) {
            gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
            gen.assign(valid2, applyTagSchema(mapping[tagValue]));
          }
          gen.else();
          cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName: tagName13 });
          gen.endIf();
        }
        function applyTagSchema(schemaProp) {
          const _valid = gen.name("valid");
          const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
          cxt.mergeEvaluated(schCxt, codegen_1.Name);
          return _valid;
        }
        function getMapping() {
          var _a;
          const oneOfMapping = {};
          const topRequired = hasRequired(parentSchema);
          let tagRequired = true;
          for (let i = 0; i < oneOf.length; i++) {
            let sch = oneOf[i];
            if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
              sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
              if (sch instanceof compile_1.SchemaEnv)
                sch = sch.schema;
            }
            const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName13];
            if (typeof propSch != "object") {
              throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName13}"`);
            }
            tagRequired = tagRequired && (topRequired || hasRequired(sch));
            addMappings(propSch, i);
          }
          if (!tagRequired)
            throw new Error(`discriminator: "${tagName13}" must be required`);
          return oneOfMapping;
          function hasRequired({ required }) {
            return Array.isArray(required) && required.includes(tagName13);
          }
          function addMappings(sch, i) {
            if (sch.const) {
              addMapping(sch.const, i);
            } else if (sch.enum) {
              for (const tagValue of sch.enum) {
                addMapping(tagValue, i);
              }
            } else {
              throw new Error(`discriminator: "properties/${tagName13}" must have "const" or "enum"`);
            }
          }
          function addMapping(tagValue, i) {
            if (typeof tagValue != "string" || tagValue in oneOfMapping) {
              throw new Error(`discriminator: "${tagName13}" values must be unique strings`);
            }
            oneOfMapping[tagValue] = i;
          }
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/refs/json-schema-draft-07.json
var require_json_schema_draft_07 = __commonJS({
  "node_modules/ajv/dist/refs/json-schema-draft-07.json"(exports, module) {
    module.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "http://json-schema.org/draft-07/schema#",
      title: "Core schema meta-schema",
      definitions: {
        schemaArray: {
          type: "array",
          minItems: 1,
          items: { $ref: "#" }
        },
        nonNegativeInteger: {
          type: "integer",
          minimum: 0
        },
        nonNegativeIntegerDefault0: {
          allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }]
        },
        simpleTypes: {
          enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
        },
        stringArray: {
          type: "array",
          items: { type: "string" },
          uniqueItems: true,
          default: []
        }
      },
      type: ["object", "boolean"],
      properties: {
        $id: {
          type: "string",
          format: "uri-reference"
        },
        $schema: {
          type: "string",
          format: "uri"
        },
        $ref: {
          type: "string",
          format: "uri-reference"
        },
        $comment: {
          type: "string"
        },
        title: {
          type: "string"
        },
        description: {
          type: "string"
        },
        default: true,
        readOnly: {
          type: "boolean",
          default: false
        },
        examples: {
          type: "array",
          items: true
        },
        multipleOf: {
          type: "number",
          exclusiveMinimum: 0
        },
        maximum: {
          type: "number"
        },
        exclusiveMaximum: {
          type: "number"
        },
        minimum: {
          type: "number"
        },
        exclusiveMinimum: {
          type: "number"
        },
        maxLength: { $ref: "#/definitions/nonNegativeInteger" },
        minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        pattern: {
          type: "string",
          format: "regex"
        },
        additionalItems: { $ref: "#" },
        items: {
          anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }],
          default: true
        },
        maxItems: { $ref: "#/definitions/nonNegativeInteger" },
        minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        uniqueItems: {
          type: "boolean",
          default: false
        },
        contains: { $ref: "#" },
        maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
        minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        required: { $ref: "#/definitions/stringArray" },
        additionalProperties: { $ref: "#" },
        definitions: {
          type: "object",
          additionalProperties: { $ref: "#" },
          default: {}
        },
        properties: {
          type: "object",
          additionalProperties: { $ref: "#" },
          default: {}
        },
        patternProperties: {
          type: "object",
          additionalProperties: { $ref: "#" },
          propertyNames: { format: "regex" },
          default: {}
        },
        dependencies: {
          type: "object",
          additionalProperties: {
            anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }]
          }
        },
        propertyNames: { $ref: "#" },
        const: true,
        enum: {
          type: "array",
          items: true,
          minItems: 1,
          uniqueItems: true
        },
        type: {
          anyOf: [
            { $ref: "#/definitions/simpleTypes" },
            {
              type: "array",
              items: { $ref: "#/definitions/simpleTypes" },
              minItems: 1,
              uniqueItems: true
            }
          ]
        },
        format: { type: "string" },
        contentMediaType: { type: "string" },
        contentEncoding: { type: "string" },
        if: { $ref: "#" },
        then: { $ref: "#" },
        else: { $ref: "#" },
        allOf: { $ref: "#/definitions/schemaArray" },
        anyOf: { $ref: "#/definitions/schemaArray" },
        oneOf: { $ref: "#/definitions/schemaArray" },
        not: { $ref: "#" }
      },
      default: true
    };
  }
});

// node_modules/ajv/dist/ajv.js
var require_ajv = __commonJS({
  "node_modules/ajv/dist/ajv.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    var core_1 = require_core();
    var draft7_1 = require_draft7();
    var discriminator_1 = require_discriminator();
    var draft7MetaSchema = require_json_schema_draft_07();
    var META_SUPPORT_DATA = ["/properties"];
    var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
    var Ajv2 = class extends core_1.default {
      _addVocabularies() {
        super._addVocabularies();
        draft7_1.default.forEach((v) => this.addVocabulary(v));
        if (this.opts.discriminator)
          this.addKeyword(discriminator_1.default);
      }
      _addDefaultMetaSchema() {
        super._addDefaultMetaSchema();
        if (!this.opts.meta)
          return;
        const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
      }
      defaultMeta() {
        return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
      }
    };
    module.exports = exports = Ajv2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Ajv2;
    var validate_1 = require_validate();
    Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
      return validate_1.KeywordCxt;
    } });
    var codegen_1 = require_codegen();
    Object.defineProperty(exports, "_", { enumerable: true, get: function() {
      return codegen_1._;
    } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function() {
      return codegen_1.str;
    } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return codegen_1.stringify;
    } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
      return codegen_1.nil;
    } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
      return codegen_1.Name;
    } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
      return codegen_1.CodeGen;
    } });
  }
});

// node_modules/ajv-formats/dist/formats.js
var require_formats = __commonJS({
  "node_modules/ajv-formats/dist/formats.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatNames = exports.fastFormats = exports.fullFormats = void 0;
    function fmtDef(validate2, compare) {
      return { validate: validate2, compare };
    }
    exports.fullFormats = {
      date: fmtDef(date, compareDate),
      time: fmtDef(time, compareTime),
      "date-time": fmtDef(date_time, compareDateTime),
      duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,
      uri,
      "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,
      "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,
      url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,
      email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
      hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,
      ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
      ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,
      regex,
      uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,
      "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/,
      "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,
      "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,
      byte,
      int32: { type: "number", validate: validateInt32 },
      int64: { type: "number", validate: validateInt64 },
      float: { type: "number", validate: validateNumber },
      double: { type: "number", validate: validateNumber },
      password: true,
      binary: true
    };
    exports.fastFormats = {
      ...exports.fullFormats,
      date: fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d$/, compareDate),
      time: fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareTime),
      "date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareDateTime),
      uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
      "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
      email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i
    };
    exports.formatNames = Object.keys(exports.fullFormats);
    function isLeapYear(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }
    var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function date(str2) {
      const matches = DATE.exec(str2);
      if (!matches)
        return false;
      const year = +matches[1];
      const month = +matches[2];
      const day = +matches[3];
      return month >= 1 && month <= 12 && day >= 1 && day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month]);
    }
    function compareDate(d1, d2) {
      if (!(d1 && d2))
        return void 0;
      if (d1 > d2)
        return 1;
      if (d1 < d2)
        return -1;
      return 0;
    }
    var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
    function time(str2, withTimeZone) {
      const matches = TIME.exec(str2);
      if (!matches)
        return false;
      const hour = +matches[1];
      const minute = +matches[2];
      const second = +matches[3];
      const timeZone = matches[5];
      return (hour <= 23 && minute <= 59 && second <= 59 || hour === 23 && minute === 59 && second === 60) && (!withTimeZone || timeZone !== "");
    }
    function compareTime(t1, t2) {
      if (!(t1 && t2))
        return void 0;
      const a1 = TIME.exec(t1);
      const a2 = TIME.exec(t2);
      if (!(a1 && a2))
        return void 0;
      t1 = a1[1] + a1[2] + a1[3] + (a1[4] || "");
      t2 = a2[1] + a2[2] + a2[3] + (a2[4] || "");
      if (t1 > t2)
        return 1;
      if (t1 < t2)
        return -1;
      return 0;
    }
    var DATE_TIME_SEPARATOR = /t|\s/i;
    function date_time(str2) {
      const dateTime = str2.split(DATE_TIME_SEPARATOR);
      return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1], true);
    }
    function compareDateTime(dt1, dt2) {
      if (!(dt1 && dt2))
        return void 0;
      const [d1, t1] = dt1.split(DATE_TIME_SEPARATOR);
      const [d2, t2] = dt2.split(DATE_TIME_SEPARATOR);
      const res = compareDate(d1, d2);
      if (res === void 0)
        return void 0;
      return res || compareTime(t1, t2);
    }
    var NOT_URI_FRAGMENT = /\/|:/;
    var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
    function uri(str2) {
      return NOT_URI_FRAGMENT.test(str2) && URI.test(str2);
    }
    var BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
    function byte(str2) {
      BYTE.lastIndex = 0;
      return BYTE.test(str2);
    }
    var MIN_INT32 = -(2 ** 31);
    var MAX_INT32 = 2 ** 31 - 1;
    function validateInt32(value) {
      return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32;
    }
    function validateInt64(value) {
      return Number.isInteger(value);
    }
    function validateNumber() {
      return true;
    }
    var Z_ANCHOR = /[^\\]\\Z/;
    function regex(str2) {
      if (Z_ANCHOR.test(str2))
        return false;
      try {
        new RegExp(str2);
        return true;
      } catch (e) {
        return false;
      }
    }
  }
});

// node_modules/ajv-formats/dist/limit.js
var require_limit = __commonJS({
  "node_modules/ajv-formats/dist/limit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatLimitDefinition = void 0;
    var ajv_1 = require_ajv();
    var codegen_1 = require_codegen();
    var ops = codegen_1.operators;
    var KWDs = {
      formatMaximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
      formatMinimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
      formatExclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
      formatExclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
    };
    var error = {
      message: ({ keyword, schemaCode }) => codegen_1.str`should be ${KWDs[keyword].okStr} ${schemaCode}`,
      params: ({ keyword, schemaCode }) => codegen_1._`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
    };
    exports.formatLimitDefinition = {
      keyword: Object.keys(KWDs),
      type: "string",
      schemaType: "string",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, schemaCode, keyword, it } = cxt;
        const { opts, self: self2 } = it;
        if (!opts.validateFormats)
          return;
        const fCxt = new ajv_1.KeywordCxt(it, self2.RULES.all.format.definition, "format");
        if (fCxt.$data)
          validate$DataFormat();
        else
          validateFormat();
        function validate$DataFormat() {
          const fmts = gen.scopeValue("formats", {
            ref: self2.formats,
            code: opts.code.formats
          });
          const fmt = gen.const("fmt", codegen_1._`${fmts}[${fCxt.schemaCode}]`);
          cxt.fail$data(codegen_1.or(codegen_1._`typeof ${fmt} != "object"`, codegen_1._`${fmt} instanceof RegExp`, codegen_1._`typeof ${fmt}.compare != "function"`, compareCode(fmt)));
        }
        function validateFormat() {
          const format = fCxt.schema;
          const fmtDef = self2.formats[format];
          if (!fmtDef || fmtDef === true)
            return;
          if (typeof fmtDef != "object" || fmtDef instanceof RegExp || typeof fmtDef.compare != "function") {
            throw new Error(`"${keyword}": format "${format}" does not define "compare" function`);
          }
          const fmt = gen.scopeValue("formats", {
            key: format,
            ref: fmtDef,
            code: opts.code.formats ? codegen_1._`${opts.code.formats}${codegen_1.getProperty(format)}` : void 0
          });
          cxt.fail$data(compareCode(fmt));
        }
        function compareCode(fmt) {
          return codegen_1._`${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;
        }
      },
      dependencies: ["format"]
    };
    var formatLimitPlugin = (ajv2) => {
      ajv2.addKeyword(exports.formatLimitDefinition);
      return ajv2;
    };
    exports.default = formatLimitPlugin;
  }
});

// node_modules/ajv-formats/dist/index.js
var require_dist = __commonJS({
  "node_modules/ajv-formats/dist/index.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var formats_1 = require_formats();
    var limit_1 = require_limit();
    var codegen_1 = require_codegen();
    var fullName = new codegen_1.Name("fullFormats");
    var fastName = new codegen_1.Name("fastFormats");
    var formatsPlugin = (ajv2, opts = { keywords: true }) => {
      if (Array.isArray(opts)) {
        addFormats2(ajv2, opts, formats_1.fullFormats, fullName);
        return ajv2;
      }
      const [formats, exportName] = opts.mode === "fast" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];
      const list = opts.formats || formats_1.formatNames;
      addFormats2(ajv2, list, formats, exportName);
      if (opts.keywords)
        limit_1.default(ajv2);
      return ajv2;
    };
    formatsPlugin.get = (name2, mode = "full") => {
      const formats = mode === "fast" ? formats_1.fastFormats : formats_1.fullFormats;
      const f = formats[name2];
      if (!f)
        throw new Error(`Unknown format "${name2}"`);
      return f;
    };
    function addFormats2(ajv2, list, fs3, exportName) {
      var _a;
      var _b;
      (_a = (_b = ajv2.opts.code).formats) !== null && _a !== void 0 ? _a : _b.formats = codegen_1._`require("ajv-formats/dist/formats").${exportName}`;
      for (const f of list)
        ajv2.addFormat(f, fs3[f]);
    }
    module.exports = exports = formatsPlugin;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = formatsPlugin;
  }
});

// ../graphscript/examples/audiofeedback/node_modules/browserfs/dist/browserfs.js
var require_browserfs = __commonJS({
  "../graphscript/examples/audiofeedback/node_modules/browserfs/dist/browserfs.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["BrowserFS"] = factory();
      else
        root["BrowserFS"] = factory();
    })(exports, function() {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId])
            return installedModules[moduleId].exports;
          var module2 = installedModules[moduleId] = {
            exports: {},
            id: moduleId,
            loaded: false
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.loaded = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = "";
        return __webpack_require__(0);
      }([
        function(module2, exports2, __webpack_require__) {
          (function(Buffer2, global2, module3, process2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var buffer = __webpack_require__(2);
            var path2 = __webpack_require__(9);
            var ErrorCode;
            (function(ErrorCode2) {
              ErrorCode2[ErrorCode2["EPERM"] = 1] = "EPERM";
              ErrorCode2[ErrorCode2["ENOENT"] = 2] = "ENOENT";
              ErrorCode2[ErrorCode2["EIO"] = 5] = "EIO";
              ErrorCode2[ErrorCode2["EBADF"] = 9] = "EBADF";
              ErrorCode2[ErrorCode2["EACCES"] = 13] = "EACCES";
              ErrorCode2[ErrorCode2["EBUSY"] = 16] = "EBUSY";
              ErrorCode2[ErrorCode2["EEXIST"] = 17] = "EEXIST";
              ErrorCode2[ErrorCode2["ENOTDIR"] = 20] = "ENOTDIR";
              ErrorCode2[ErrorCode2["EISDIR"] = 21] = "EISDIR";
              ErrorCode2[ErrorCode2["EINVAL"] = 22] = "EINVAL";
              ErrorCode2[ErrorCode2["EFBIG"] = 27] = "EFBIG";
              ErrorCode2[ErrorCode2["ENOSPC"] = 28] = "ENOSPC";
              ErrorCode2[ErrorCode2["EROFS"] = 30] = "EROFS";
              ErrorCode2[ErrorCode2["ENOTEMPTY"] = 39] = "ENOTEMPTY";
              ErrorCode2[ErrorCode2["ENOTSUP"] = 95] = "ENOTSUP";
            })(ErrorCode || (ErrorCode = {}));
            var ErrorStrings = {};
            ErrorStrings[ErrorCode.EPERM] = "Operation not permitted.";
            ErrorStrings[ErrorCode.ENOENT] = "No such file or directory.";
            ErrorStrings[ErrorCode.EIO] = "Input/output error.";
            ErrorStrings[ErrorCode.EBADF] = "Bad file descriptor.";
            ErrorStrings[ErrorCode.EACCES] = "Permission denied.";
            ErrorStrings[ErrorCode.EBUSY] = "Resource busy or locked.";
            ErrorStrings[ErrorCode.EEXIST] = "File exists.";
            ErrorStrings[ErrorCode.ENOTDIR] = "File is not a directory.";
            ErrorStrings[ErrorCode.EISDIR] = "File is a directory.";
            ErrorStrings[ErrorCode.EINVAL] = "Invalid argument.";
            ErrorStrings[ErrorCode.EFBIG] = "File is too big.";
            ErrorStrings[ErrorCode.ENOSPC] = "No space left on disk.";
            ErrorStrings[ErrorCode.EROFS] = "Cannot modify a read-only file system.";
            ErrorStrings[ErrorCode.ENOTEMPTY] = "Directory is not empty.";
            ErrorStrings[ErrorCode.ENOTSUP] = "Operation is not supported.";
            var ApiError = function(Error2) {
              function ApiError2(type, message, path$$1) {
                if (message === void 0)
                  message = ErrorStrings[type];
                Error2.call(this, message);
                this.syscall = "";
                this.errno = type;
                this.code = ErrorCode[type];
                this.path = path$$1;
                this.stack = new Error2().stack;
                this.message = "Error: " + this.code + ": " + message + (this.path ? ", '" + this.path + "'" : "");
              }
              if (Error2)
                ApiError2.__proto__ = Error2;
              ApiError2.prototype = Object.create(Error2 && Error2.prototype);
              ApiError2.prototype.constructor = ApiError2;
              ApiError2.fromJSON = function fromJSON(json) {
                var err = new ApiError2(0);
                err.errno = json.errno;
                err.code = json.code;
                err.path = json.path;
                err.stack = json.stack;
                err.message = json.message;
                return err;
              };
              ApiError2.fromBuffer = function fromBuffer(buffer$$1, i2) {
                if (i2 === void 0)
                  i2 = 0;
                return ApiError2.fromJSON(JSON.parse(buffer$$1.toString("utf8", i2 + 4, i2 + 4 + buffer$$1.readUInt32LE(i2))));
              };
              ApiError2.FileError = function FileError(code, p) {
                return new ApiError2(code, ErrorStrings[code], p);
              };
              ApiError2.ENOENT = function ENOENT(path$$1) {
                return this.FileError(ErrorCode.ENOENT, path$$1);
              };
              ApiError2.EEXIST = function EEXIST(path$$1) {
                return this.FileError(ErrorCode.EEXIST, path$$1);
              };
              ApiError2.EISDIR = function EISDIR(path$$1) {
                return this.FileError(ErrorCode.EISDIR, path$$1);
              };
              ApiError2.ENOTDIR = function ENOTDIR(path$$1) {
                return this.FileError(ErrorCode.ENOTDIR, path$$1);
              };
              ApiError2.EPERM = function EPERM(path$$1) {
                return this.FileError(ErrorCode.EPERM, path$$1);
              };
              ApiError2.ENOTEMPTY = function ENOTEMPTY(path$$1) {
                return this.FileError(ErrorCode.ENOTEMPTY, path$$1);
              };
              ApiError2.prototype.toString = function toString() {
                return this.message;
              };
              ApiError2.prototype.toJSON = function toJSON() {
                return {
                  errno: this.errno,
                  code: this.code,
                  path: this.path,
                  stack: this.stack,
                  message: this.message
                };
              };
              ApiError2.prototype.writeToBuffer = function writeToBuffer(buffer$$1, i2) {
                if (buffer$$1 === void 0)
                  buffer$$1 = Buffer2.alloc(this.bufferSize());
                if (i2 === void 0)
                  i2 = 0;
                var bytesWritten = buffer$$1.write(JSON.stringify(this.toJSON()), i2 + 4);
                buffer$$1.writeUInt32LE(bytesWritten, i2);
                return buffer$$1;
              };
              ApiError2.prototype.bufferSize = function bufferSize() {
                return 4 + Buffer2.byteLength(JSON.stringify(this.toJSON()));
              };
              return ApiError2;
            }(Error);
            var api_error = Object.freeze({
              get ErrorCode() {
                return ErrorCode;
              },
              ErrorStrings,
              ApiError
            });
            var ActionType;
            (function(ActionType2) {
              ActionType2[ActionType2["NOP"] = 0] = "NOP";
              ActionType2[ActionType2["THROW_EXCEPTION"] = 1] = "THROW_EXCEPTION";
              ActionType2[ActionType2["TRUNCATE_FILE"] = 2] = "TRUNCATE_FILE";
              ActionType2[ActionType2["CREATE_FILE"] = 3] = "CREATE_FILE";
            })(ActionType || (ActionType = {}));
            var FileFlag = function FileFlag2(flagStr) {
              this.flagStr = flagStr;
              if (FileFlag2.validFlagStrs.indexOf(flagStr) < 0) {
                throw new ApiError(ErrorCode.EINVAL, "Invalid flag: " + flagStr);
              }
            };
            FileFlag.getFileFlag = function getFileFlag(flagStr) {
              if (FileFlag.flagCache.hasOwnProperty(flagStr)) {
                return FileFlag.flagCache[flagStr];
              }
              return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);
            };
            FileFlag.prototype.getFlagString = function getFlagString() {
              return this.flagStr;
            };
            FileFlag.prototype.isReadable = function isReadable() {
              return this.flagStr.indexOf("r") !== -1 || this.flagStr.indexOf("+") !== -1;
            };
            FileFlag.prototype.isWriteable = function isWriteable() {
              return this.flagStr.indexOf("w") !== -1 || this.flagStr.indexOf("a") !== -1 || this.flagStr.indexOf("+") !== -1;
            };
            FileFlag.prototype.isTruncating = function isTruncating() {
              return this.flagStr.indexOf("w") !== -1;
            };
            FileFlag.prototype.isAppendable = function isAppendable() {
              return this.flagStr.indexOf("a") !== -1;
            };
            FileFlag.prototype.isSynchronous = function isSynchronous() {
              return this.flagStr.indexOf("s") !== -1;
            };
            FileFlag.prototype.isExclusive = function isExclusive() {
              return this.flagStr.indexOf("x") !== -1;
            };
            FileFlag.prototype.pathExistsAction = function pathExistsAction() {
              if (this.isExclusive()) {
                return ActionType.THROW_EXCEPTION;
              } else if (this.isTruncating()) {
                return ActionType.TRUNCATE_FILE;
              } else {
                return ActionType.NOP;
              }
            };
            FileFlag.prototype.pathNotExistsAction = function pathNotExistsAction() {
              if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== "r+") {
                return ActionType.CREATE_FILE;
              } else {
                return ActionType.THROW_EXCEPTION;
              }
            };
            FileFlag.flagCache = {};
            FileFlag.validFlagStrs = ["r", "r+", "rs", "rs+", "w", "wx", "w+", "wx+", "a", "ax", "a+", "ax+"];
            var FileType;
            (function(FileType2) {
              FileType2[FileType2["FILE"] = 32768] = "FILE";
              FileType2[FileType2["DIRECTORY"] = 16384] = "DIRECTORY";
              FileType2[FileType2["SYMLINK"] = 40960] = "SYMLINK";
            })(FileType || (FileType = {}));
            var Stats = function Stats2(itemType, size, mode, atime, mtime, ctime) {
              if (atime === void 0)
                atime = new Date();
              if (mtime === void 0)
                mtime = new Date();
              if (ctime === void 0)
                ctime = new Date();
              this.size = size;
              this.atime = atime;
              this.mtime = mtime;
              this.ctime = ctime;
              this.dev = 0;
              this.ino = 0;
              this.rdev = 0;
              this.nlink = 1;
              this.blksize = 4096;
              this.uid = 0;
              this.gid = 0;
              this.birthtime = new Date(0);
              this.fileData = null;
              if (!mode) {
                switch (itemType) {
                  case FileType.FILE:
                    this.mode = 420;
                    break;
                  case FileType.DIRECTORY:
                  default:
                    this.mode = 511;
                }
              } else {
                this.mode = mode;
              }
              this.blocks = Math.ceil(size / 512);
              if (this.mode < 4096) {
                this.mode |= itemType;
              }
            };
            Stats.fromBuffer = function fromBuffer(buffer$$1) {
              var size = buffer$$1.readUInt32LE(0), mode = buffer$$1.readUInt32LE(4), atime = buffer$$1.readDoubleLE(8), mtime = buffer$$1.readDoubleLE(16), ctime = buffer$$1.readDoubleLE(24);
              return new Stats(mode & 61440, size, mode & 4095, new Date(atime), new Date(mtime), new Date(ctime));
            };
            Stats.prototype.toBuffer = function toBuffer() {
              var buffer$$1 = Buffer2.alloc(32);
              buffer$$1.writeUInt32LE(this.size, 0);
              buffer$$1.writeUInt32LE(this.mode, 4);
              buffer$$1.writeDoubleLE(this.atime.getTime(), 8);
              buffer$$1.writeDoubleLE(this.mtime.getTime(), 16);
              buffer$$1.writeDoubleLE(this.ctime.getTime(), 24);
              return buffer$$1;
            };
            Stats.prototype.clone = function clone() {
              return new Stats(this.mode & 61440, this.size, this.mode & 4095, this.atime, this.mtime, this.ctime);
            };
            Stats.prototype.isFile = function isFile() {
              return (this.mode & 61440) === FileType.FILE;
            };
            Stats.prototype.isDirectory = function isDirectory() {
              return (this.mode & 61440) === FileType.DIRECTORY;
            };
            Stats.prototype.isSymbolicLink = function isSymbolicLink() {
              return (this.mode & 61440) === FileType.SYMLINK;
            };
            Stats.prototype.chmod = function chmod(mode) {
              this.mode = this.mode & 61440 | mode;
            };
            Stats.prototype.isSocket = function isSocket() {
              return false;
            };
            Stats.prototype.isBlockDevice = function isBlockDevice() {
              return false;
            };
            Stats.prototype.isCharacterDevice = function isCharacterDevice() {
              return false;
            };
            Stats.prototype.isFIFO = function isFIFO() {
              return false;
            };
            var wrapCb = function(cb, numArgs) {
              return cb;
            };
            function assertRoot(fs4) {
              if (fs4) {
                return fs4;
              }
              throw new ApiError(ErrorCode.EIO, "Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)");
            }
            function normalizeMode(mode, def) {
              switch (typeof mode) {
                case "number":
                  return mode;
                case "string":
                  var trueMode = parseInt(mode, 8);
                  if (!isNaN(trueMode)) {
                    return trueMode;
                  }
                  return def;
                default:
                  return def;
              }
            }
            function normalizeTime(time) {
              if (time instanceof Date) {
                return time;
              } else if (typeof time === "number") {
                return new Date(time * 1e3);
              } else {
                throw new ApiError(ErrorCode.EINVAL, "Invalid time.");
              }
            }
            function normalizePath(p) {
              if (p.indexOf("\0") >= 0) {
                throw new ApiError(ErrorCode.EINVAL, "Path must be a string without null bytes.");
              } else if (p === "") {
                throw new ApiError(ErrorCode.EINVAL, "Path must not be empty.");
              }
              return path2.resolve(p);
            }
            function normalizeOptions(options2, defEnc, defFlag, defMode) {
              switch (typeof options2) {
                case "object":
                  return {
                    encoding: typeof options2["encoding"] !== "undefined" ? options2["encoding"] : defEnc,
                    flag: typeof options2["flag"] !== "undefined" ? options2["flag"] : defFlag,
                    mode: normalizeMode(options2["mode"], defMode)
                  };
                case "string":
                  return {
                    encoding: options2,
                    flag: defFlag,
                    mode: defMode
                  };
                default:
                  return {
                    encoding: defEnc,
                    flag: defFlag,
                    mode: defMode
                  };
              }
            }
            function nopCb() {
            }
            var FS = function FS2() {
              this.F_OK = 0;
              this.R_OK = 4;
              this.W_OK = 2;
              this.X_OK = 1;
              this.root = null;
              this.fdMap = {};
              this.nextFd = 100;
            };
            FS.prototype.initialize = function initialize3(rootFS) {
              if (!rootFS.constructor.isAvailable()) {
                throw new ApiError(ErrorCode.EINVAL, "Tried to instantiate BrowserFS with an unavailable file system.");
              }
              return this.root = rootFS;
            };
            FS.prototype._toUnixTimestamp = function _toUnixTimestamp(time) {
              if (typeof time === "number") {
                return time;
              } else if (time instanceof Date) {
                return time.getTime() / 1e3;
              }
              throw new Error("Cannot parse time: " + time);
            };
            FS.prototype.getRootFS = function getRootFS() {
              if (this.root) {
                return this.root;
              } else {
                return null;
              }
            };
            FS.prototype.rename = function rename(oldPath, newPath, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.renameSync = function renameSync(oldPath, newPath) {
              assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath));
            };
            FS.prototype.exists = function exists2(path$$1, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                return assertRoot(this.root).exists(normalizePath(path$$1), newCb);
              } catch (e) {
                return newCb(false);
              }
            };
            FS.prototype.existsSync = function existsSync(path$$1) {
              try {
                return assertRoot(this.root).existsSync(normalizePath(path$$1));
              } catch (e) {
                return false;
              }
            };
            FS.prototype.stat = function stat(path$$1, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 2);
              try {
                return assertRoot(this.root).stat(normalizePath(path$$1), false, newCb);
              } catch (e) {
                return newCb(e);
              }
            };
            FS.prototype.statSync = function statSync(path$$1) {
              return assertRoot(this.root).statSync(normalizePath(path$$1), false);
            };
            FS.prototype.lstat = function lstat(path$$1, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 2);
              try {
                return assertRoot(this.root).stat(normalizePath(path$$1), true, newCb);
              } catch (e) {
                return newCb(e);
              }
            };
            FS.prototype.lstatSync = function lstatSync(path$$1) {
              return assertRoot(this.root).statSync(normalizePath(path$$1), true);
            };
            FS.prototype.truncate = function truncate(path$$1, arg2, cb) {
              if (arg2 === void 0)
                arg2 = 0;
              if (cb === void 0)
                cb = nopCb;
              var len = 0;
              if (typeof arg2 === "function") {
                cb = arg2;
              } else if (typeof arg2 === "number") {
                len = arg2;
              }
              var newCb = wrapCb(cb, 1);
              try {
                if (len < 0) {
                  throw new ApiError(ErrorCode.EINVAL);
                }
                return assertRoot(this.root).truncate(normalizePath(path$$1), len, newCb);
              } catch (e) {
                return newCb(e);
              }
            };
            FS.prototype.truncateSync = function truncateSync(path$$1, len) {
              if (len === void 0)
                len = 0;
              if (len < 0) {
                throw new ApiError(ErrorCode.EINVAL);
              }
              return assertRoot(this.root).truncateSync(normalizePath(path$$1), len);
            };
            FS.prototype.unlink = function unlink(path$$1, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                return assertRoot(this.root).unlink(normalizePath(path$$1), newCb);
              } catch (e) {
                return newCb(e);
              }
            };
            FS.prototype.unlinkSync = function unlinkSync(path$$1) {
              return assertRoot(this.root).unlinkSync(normalizePath(path$$1));
            };
            FS.prototype.open = function open(path$$1, flag, arg2, cb) {
              var this$1 = this;
              if (cb === void 0)
                cb = nopCb;
              var mode = normalizeMode(arg2, 420);
              cb = typeof arg2 === "function" ? arg2 : cb;
              var newCb = wrapCb(cb, 2);
              try {
                assertRoot(this.root).open(normalizePath(path$$1), FileFlag.getFileFlag(flag), mode, function(e, file) {
                  if (file) {
                    newCb(e, this$1.getFdForFile(file));
                  } else {
                    newCb(e);
                  }
                });
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.openSync = function openSync(path$$1, flag, mode) {
              if (mode === void 0)
                mode = 420;
              return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path$$1), FileFlag.getFileFlag(flag), normalizeMode(mode, 420)));
            };
            FS.prototype.readFile = function readFile(filename, arg2, cb) {
              if (arg2 === void 0)
                arg2 = {};
              if (cb === void 0)
                cb = nopCb;
              var options2 = normalizeOptions(arg2, null, "r", null);
              cb = typeof arg2 === "function" ? arg2 : cb;
              var newCb = wrapCb(cb, 2);
              try {
                var flag = FileFlag.getFileFlag(options2["flag"]);
                if (!flag.isReadable()) {
                  return newCb(new ApiError(ErrorCode.EINVAL, "Flag passed to readFile must allow for reading."));
                }
                return assertRoot(this.root).readFile(normalizePath(filename), options2.encoding, flag, newCb);
              } catch (e) {
                return newCb(e);
              }
            };
            FS.prototype.readFileSync = function readFileSync(filename, arg2) {
              if (arg2 === void 0)
                arg2 = {};
              var options2 = normalizeOptions(arg2, null, "r", null);
              var flag = FileFlag.getFileFlag(options2.flag);
              if (!flag.isReadable()) {
                throw new ApiError(ErrorCode.EINVAL, "Flag passed to readFile must allow for reading.");
              }
              return assertRoot(this.root).readFileSync(normalizePath(filename), options2.encoding, flag);
            };
            FS.prototype.writeFile = function writeFile2(filename, data, arg3, cb) {
              if (arg3 === void 0)
                arg3 = {};
              if (cb === void 0)
                cb = nopCb;
              var options2 = normalizeOptions(arg3, "utf8", "w", 420);
              cb = typeof arg3 === "function" ? arg3 : cb;
              var newCb = wrapCb(cb, 1);
              try {
                var flag = FileFlag.getFileFlag(options2.flag);
                if (!flag.isWriteable()) {
                  return newCb(new ApiError(ErrorCode.EINVAL, "Flag passed to writeFile must allow for writing."));
                }
                return assertRoot(this.root).writeFile(normalizePath(filename), data, options2.encoding, flag, options2.mode, newCb);
              } catch (e) {
                return newCb(e);
              }
            };
            FS.prototype.writeFileSync = function writeFileSync(filename, data, arg3) {
              var options2 = normalizeOptions(arg3, "utf8", "w", 420);
              var flag = FileFlag.getFileFlag(options2.flag);
              if (!flag.isWriteable()) {
                throw new ApiError(ErrorCode.EINVAL, "Flag passed to writeFile must allow for writing.");
              }
              return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options2.encoding, flag, options2.mode);
            };
            FS.prototype.appendFile = function appendFile3(filename, data, arg3, cb) {
              if (cb === void 0)
                cb = nopCb;
              var options2 = normalizeOptions(arg3, "utf8", "a", 420);
              cb = typeof arg3 === "function" ? arg3 : cb;
              var newCb = wrapCb(cb, 1);
              try {
                var flag = FileFlag.getFileFlag(options2.flag);
                if (!flag.isAppendable()) {
                  return newCb(new ApiError(ErrorCode.EINVAL, "Flag passed to appendFile must allow for appending."));
                }
                assertRoot(this.root).appendFile(normalizePath(filename), data, options2.encoding, flag, options2.mode, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.appendFileSync = function appendFileSync(filename, data, arg3) {
              var options2 = normalizeOptions(arg3, "utf8", "a", 420);
              var flag = FileFlag.getFileFlag(options2.flag);
              if (!flag.isAppendable()) {
                throw new ApiError(ErrorCode.EINVAL, "Flag passed to appendFile must allow for appending.");
              }
              return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options2.encoding, flag, options2.mode);
            };
            FS.prototype.fstat = function fstat(fd, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 2);
              try {
                var file = this.fd2file(fd);
                file.stat(newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.fstatSync = function fstatSync(fd) {
              return this.fd2file(fd).statSync();
            };
            FS.prototype.close = function close(fd, cb) {
              var this$1 = this;
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                this.fd2file(fd).close(function(e) {
                  if (!e) {
                    this$1.closeFd(fd);
                  }
                  newCb(e);
                });
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.closeSync = function closeSync(fd) {
              this.fd2file(fd).closeSync();
              this.closeFd(fd);
            };
            FS.prototype.ftruncate = function ftruncate(fd, arg2, cb) {
              if (cb === void 0)
                cb = nopCb;
              var length = typeof arg2 === "number" ? arg2 : 0;
              cb = typeof arg2 === "function" ? arg2 : cb;
              var newCb = wrapCb(cb, 1);
              try {
                var file = this.fd2file(fd);
                if (length < 0) {
                  throw new ApiError(ErrorCode.EINVAL);
                }
                file.truncate(length, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.ftruncateSync = function ftruncateSync(fd, len) {
              if (len === void 0)
                len = 0;
              var file = this.fd2file(fd);
              if (len < 0) {
                throw new ApiError(ErrorCode.EINVAL);
              }
              file.truncateSync(len);
            };
            FS.prototype.fsync = function fsync(fd, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                this.fd2file(fd).sync(newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.fsyncSync = function fsyncSync(fd) {
              this.fd2file(fd).syncSync();
            };
            FS.prototype.fdatasync = function fdatasync(fd, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                this.fd2file(fd).datasync(newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.fdatasyncSync = function fdatasyncSync(fd) {
              this.fd2file(fd).datasyncSync();
            };
            FS.prototype.write = function write(fd, arg2, arg3, arg4, arg5, cb) {
              if (cb === void 0)
                cb = nopCb;
              var buffer$$1, offset, length, position = null;
              if (typeof arg2 === "string") {
                var encoding = "utf8";
                switch (typeof arg3) {
                  case "function":
                    cb = arg3;
                    break;
                  case "number":
                    position = arg3;
                    encoding = typeof arg4 === "string" ? arg4 : "utf8";
                    cb = typeof arg5 === "function" ? arg5 : cb;
                    break;
                  default:
                    cb = typeof arg4 === "function" ? arg4 : typeof arg5 === "function" ? arg5 : cb;
                    return cb(new ApiError(ErrorCode.EINVAL, "Invalid arguments."));
                }
                buffer$$1 = Buffer2.from(arg2, encoding);
                offset = 0;
                length = buffer$$1.length;
              } else {
                buffer$$1 = arg2;
                offset = arg3;
                length = arg4;
                position = typeof arg5 === "number" ? arg5 : null;
                cb = typeof arg5 === "function" ? arg5 : cb;
              }
              var newCb = wrapCb(cb, 3);
              try {
                var file = this.fd2file(fd);
                if (position === void 0 || position === null) {
                  position = file.getPos();
                }
                file.write(buffer$$1, offset, length, position, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.writeSync = function writeSync(fd, arg2, arg3, arg4, arg5) {
              var buffer$$1, offset = 0, length, position;
              if (typeof arg2 === "string") {
                position = typeof arg3 === "number" ? arg3 : null;
                var encoding = typeof arg4 === "string" ? arg4 : "utf8";
                offset = 0;
                buffer$$1 = Buffer2.from(arg2, encoding);
                length = buffer$$1.length;
              } else {
                buffer$$1 = arg2;
                offset = arg3;
                length = arg4;
                position = typeof arg5 === "number" ? arg5 : null;
              }
              var file = this.fd2file(fd);
              if (position === void 0 || position === null) {
                position = file.getPos();
              }
              return file.writeSync(buffer$$1, offset, length, position);
            };
            FS.prototype.read = function read(fd, arg2, arg3, arg4, arg5, cb) {
              if (cb === void 0)
                cb = nopCb;
              var position, offset, length, buffer$$1, newCb;
              if (typeof arg2 === "number") {
                length = arg2;
                position = arg3;
                var encoding = arg4;
                cb = typeof arg5 === "function" ? arg5 : cb;
                offset = 0;
                buffer$$1 = Buffer2.alloc(length);
                newCb = wrapCb(function(err, bytesRead, buf) {
                  if (err) {
                    return cb(err);
                  }
                  cb(err, buf.toString(encoding), bytesRead);
                }, 3);
              } else {
                buffer$$1 = arg2;
                offset = arg3;
                length = arg4;
                position = arg5;
                newCb = wrapCb(cb, 3);
              }
              try {
                var file = this.fd2file(fd);
                if (position === void 0 || position === null) {
                  position = file.getPos();
                }
                file.read(buffer$$1, offset, length, position, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.readSync = function readSync(fd, arg2, arg3, arg4, arg5) {
              var shenanigans = false;
              var buffer$$1, offset, length, position, encoding = "utf8";
              if (typeof arg2 === "number") {
                length = arg2;
                position = arg3;
                encoding = arg4;
                offset = 0;
                buffer$$1 = Buffer2.alloc(length);
                shenanigans = true;
              } else {
                buffer$$1 = arg2;
                offset = arg3;
                length = arg4;
                position = arg5;
              }
              var file = this.fd2file(fd);
              if (position === void 0 || position === null) {
                position = file.getPos();
              }
              var rv = file.readSync(buffer$$1, offset, length, position);
              if (!shenanigans) {
                return rv;
              } else {
                return [buffer$$1.toString(encoding), rv];
              }
            };
            FS.prototype.fchown = function fchown(fd, uid, gid, callback) {
              if (callback === void 0)
                callback = nopCb;
              var newCb = wrapCb(callback, 1);
              try {
                this.fd2file(fd).chown(uid, gid, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.fchownSync = function fchownSync(fd, uid, gid) {
              this.fd2file(fd).chownSync(uid, gid);
            };
            FS.prototype.fchmod = function fchmod(fd, mode, cb) {
              var newCb = wrapCb(cb, 1);
              try {
                var numMode = typeof mode === "string" ? parseInt(mode, 8) : mode;
                this.fd2file(fd).chmod(numMode, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.fchmodSync = function fchmodSync(fd, mode) {
              var numMode = typeof mode === "string" ? parseInt(mode, 8) : mode;
              this.fd2file(fd).chmodSync(numMode);
            };
            FS.prototype.futimes = function futimes(fd, atime, mtime, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                var file = this.fd2file(fd);
                if (typeof atime === "number") {
                  atime = new Date(atime * 1e3);
                }
                if (typeof mtime === "number") {
                  mtime = new Date(mtime * 1e3);
                }
                file.utimes(atime, mtime, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.futimesSync = function futimesSync(fd, atime, mtime) {
              this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));
            };
            FS.prototype.rmdir = function rmdir(path$$1, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                path$$1 = normalizePath(path$$1);
                assertRoot(this.root).rmdir(path$$1, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.rmdirSync = function rmdirSync(path$$1) {
              path$$1 = normalizePath(path$$1);
              return assertRoot(this.root).rmdirSync(path$$1);
            };
            FS.prototype.mkdir = function mkdir(path$$1, mode, cb) {
              if (cb === void 0)
                cb = nopCb;
              if (typeof mode === "function") {
                cb = mode;
                mode = 511;
              }
              var newCb = wrapCb(cb, 1);
              try {
                path$$1 = normalizePath(path$$1);
                assertRoot(this.root).mkdir(path$$1, mode, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.mkdirSync = function mkdirSync(path$$1, mode) {
              assertRoot(this.root).mkdirSync(normalizePath(path$$1), normalizeMode(mode, 511));
            };
            FS.prototype.readdir = function readdir(path$$1, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 2);
              try {
                path$$1 = normalizePath(path$$1);
                assertRoot(this.root).readdir(path$$1, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.readdirSync = function readdirSync(path$$1) {
              path$$1 = normalizePath(path$$1);
              return assertRoot(this.root).readdirSync(path$$1);
            };
            FS.prototype.link = function link(srcpath, dstpath, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                srcpath = normalizePath(srcpath);
                dstpath = normalizePath(dstpath);
                assertRoot(this.root).link(srcpath, dstpath, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.linkSync = function linkSync(srcpath, dstpath) {
              srcpath = normalizePath(srcpath);
              dstpath = normalizePath(dstpath);
              return assertRoot(this.root).linkSync(srcpath, dstpath);
            };
            FS.prototype.symlink = function symlink(srcpath, dstpath, arg3, cb) {
              if (cb === void 0)
                cb = nopCb;
              var type = typeof arg3 === "string" ? arg3 : "file";
              cb = typeof arg3 === "function" ? arg3 : cb;
              var newCb = wrapCb(cb, 1);
              try {
                if (type !== "file" && type !== "dir") {
                  return newCb(new ApiError(ErrorCode.EINVAL, "Invalid type: " + type));
                }
                srcpath = normalizePath(srcpath);
                dstpath = normalizePath(dstpath);
                assertRoot(this.root).symlink(srcpath, dstpath, type, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
              if (!type) {
                type = "file";
              } else if (type !== "file" && type !== "dir") {
                throw new ApiError(ErrorCode.EINVAL, "Invalid type: " + type);
              }
              srcpath = normalizePath(srcpath);
              dstpath = normalizePath(dstpath);
              return assertRoot(this.root).symlinkSync(srcpath, dstpath, type);
            };
            FS.prototype.readlink = function readlink(path$$1, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 2);
              try {
                path$$1 = normalizePath(path$$1);
                assertRoot(this.root).readlink(path$$1, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.readlinkSync = function readlinkSync(path$$1) {
              path$$1 = normalizePath(path$$1);
              return assertRoot(this.root).readlinkSync(path$$1);
            };
            FS.prototype.chown = function chown(path$$1, uid, gid, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                path$$1 = normalizePath(path$$1);
                assertRoot(this.root).chown(path$$1, false, uid, gid, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.chownSync = function chownSync(path$$1, uid, gid) {
              path$$1 = normalizePath(path$$1);
              assertRoot(this.root).chownSync(path$$1, false, uid, gid);
            };
            FS.prototype.lchown = function lchown(path$$1, uid, gid, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                path$$1 = normalizePath(path$$1);
                assertRoot(this.root).chown(path$$1, true, uid, gid, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.lchownSync = function lchownSync(path$$1, uid, gid) {
              path$$1 = normalizePath(path$$1);
              assertRoot(this.root).chownSync(path$$1, true, uid, gid);
            };
            FS.prototype.chmod = function chmod(path$$1, mode, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                var numMode = normalizeMode(mode, -1);
                if (numMode < 0) {
                  throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
                }
                assertRoot(this.root).chmod(normalizePath(path$$1), false, numMode, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.chmodSync = function chmodSync(path$$1, mode) {
              var numMode = normalizeMode(mode, -1);
              if (numMode < 0) {
                throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
              }
              path$$1 = normalizePath(path$$1);
              assertRoot(this.root).chmodSync(path$$1, false, numMode);
            };
            FS.prototype.lchmod = function lchmod(path$$1, mode, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                var numMode = normalizeMode(mode, -1);
                if (numMode < 0) {
                  throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
                }
                assertRoot(this.root).chmod(normalizePath(path$$1), true, numMode, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.lchmodSync = function lchmodSync(path$$1, mode) {
              var numMode = normalizeMode(mode, -1);
              if (numMode < 1) {
                throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
              }
              assertRoot(this.root).chmodSync(normalizePath(path$$1), true, numMode);
            };
            FS.prototype.utimes = function utimes(path$$1, atime, mtime, cb) {
              if (cb === void 0)
                cb = nopCb;
              var newCb = wrapCb(cb, 1);
              try {
                assertRoot(this.root).utimes(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime), newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.utimesSync = function utimesSync(path$$1, atime, mtime) {
              assertRoot(this.root).utimesSync(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime));
            };
            FS.prototype.realpath = function realpath(path$$1, arg2, cb) {
              if (cb === void 0)
                cb = nopCb;
              var cache2 = typeof arg2 === "object" ? arg2 : {};
              cb = typeof arg2 === "function" ? arg2 : nopCb;
              var newCb = wrapCb(cb, 2);
              try {
                path$$1 = normalizePath(path$$1);
                assertRoot(this.root).realpath(path$$1, cache2, newCb);
              } catch (e) {
                newCb(e);
              }
            };
            FS.prototype.realpathSync = function realpathSync(path$$1, cache2) {
              if (cache2 === void 0)
                cache2 = {};
              path$$1 = normalizePath(path$$1);
              return assertRoot(this.root).realpathSync(path$$1, cache2);
            };
            FS.prototype.watchFile = function watchFile(filename, arg2, listener) {
              if (listener === void 0)
                listener = nopCb;
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            FS.prototype.unwatchFile = function unwatchFile(filename, listener) {
              if (listener === void 0)
                listener = nopCb;
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            FS.prototype.watch = function watch(filename, arg2, listener) {
              if (listener === void 0)
                listener = nopCb;
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            FS.prototype.access = function access(path$$1, arg2, cb) {
              if (cb === void 0)
                cb = nopCb;
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            FS.prototype.accessSync = function accessSync(path$$1, mode) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            FS.prototype.createReadStream = function createReadStream(path$$1, options2) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            FS.prototype.createWriteStream = function createWriteStream(path$$1, options2) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            FS.prototype.wrapCallbacks = function wrapCallbacks(cbWrapper) {
              wrapCb = cbWrapper;
            };
            FS.prototype.getFdForFile = function getFdForFile(file) {
              var fd = this.nextFd++;
              this.fdMap[fd] = file;
              return fd;
            };
            FS.prototype.fd2file = function fd2file(fd) {
              var rv = this.fdMap[fd];
              if (rv) {
                return rv;
              } else {
                throw new ApiError(ErrorCode.EBADF, "Invalid file descriptor.");
              }
            };
            FS.prototype.closeFd = function closeFd(fd) {
              delete this.fdMap[fd];
            };
            FS.Stats = Stats;
            var fs3 = new FS();
            var _fsMock = {};
            var fsProto = FS.prototype;
            Object.keys(fsProto).forEach(function(key) {
              if (typeof fs3[key] === "function") {
                _fsMock[key] = function() {
                  return fs3[key].apply(fs3, arguments);
                };
              } else {
                _fsMock[key] = fs3[key];
              }
            });
            _fsMock["changeFSModule"] = function(newFs) {
              fs3 = newFs;
            };
            _fsMock["getFSModule"] = function() {
              return fs3;
            };
            _fsMock["FS"] = FS;
            function _min(d0, d1, d2, bx, ay) {
              return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;
            }
            function levenshtein(a, b) {
              if (a === b) {
                return 0;
              }
              if (a.length > b.length) {
                var tmp = a;
                a = b;
                b = tmp;
              }
              var la = a.length;
              var lb = b.length;
              while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {
                la--;
                lb--;
              }
              var offset = 0;
              while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {
                offset++;
              }
              la -= offset;
              lb -= offset;
              if (la === 0 || lb === 1) {
                return lb;
              }
              var vector = new Array(la << 1);
              for (var y = 0; y < la; ) {
                vector[la + y] = a.charCodeAt(offset + y);
                vector[y] = ++y;
              }
              var x;
              var d0;
              var d1;
              var d2;
              var d3;
              for (x = 0; x + 3 < lb; ) {
                var bx0 = b.charCodeAt(offset + (d0 = x));
                var bx1 = b.charCodeAt(offset + (d1 = x + 1));
                var bx2 = b.charCodeAt(offset + (d2 = x + 2));
                var bx3 = b.charCodeAt(offset + (d3 = x + 3));
                var dd$1 = x += 4;
                for (var y$1 = 0; y$1 < la; ) {
                  var ay = vector[la + y$1];
                  var dy = vector[y$1];
                  d0 = _min(dy, d0, d1, bx0, ay);
                  d1 = _min(d0, d1, d2, bx1, ay);
                  d2 = _min(d1, d2, d3, bx2, ay);
                  dd$1 = _min(d2, d3, dd$1, bx3, ay);
                  vector[y$1++] = dd$1;
                  d3 = d2;
                  d2 = d1;
                  d1 = d0;
                  d0 = dy;
                }
              }
              var dd = 0;
              for (; x < lb; ) {
                var bx0$1 = b.charCodeAt(offset + (d0 = x));
                dd = ++x;
                for (var y$2 = 0; y$2 < la; y$2++) {
                  var dy$1 = vector[y$2];
                  vector[y$2] = dd = dy$1 < d0 || dd < d0 ? dy$1 > dd ? dd + 1 : dy$1 + 1 : bx0$1 === vector[la + y$2] ? d0 : d0 + 1;
                  d0 = dy$1;
                }
              }
              return dd;
            }
            function deprecationMessage(print, fsName, opts) {
              if (print) {
                console.warn("[" + fsName + "] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '" + fsName + ".Create(" + JSON.stringify(opts) + ", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details.");
              }
            }
            var isIE = typeof navigator !== "undefined" && !!(/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || navigator.userAgent.indexOf("Trident") !== -1);
            var isWebWorker = typeof window === "undefined";
            function fail() {
              throw new Error("BFS has reached an impossible code path; please file a bug.");
            }
            function mkdirpSync(p, mode, fs4) {
              if (!fs4.existsSync(p)) {
                mkdirpSync(path2.dirname(p), mode, fs4);
                fs4.mkdirSync(p, mode);
              }
            }
            function buffer2ArrayBuffer(buff) {
              var u8 = buffer2Uint8array(buff), u8offset = u8.byteOffset, u8Len = u8.byteLength;
              if (u8offset === 0 && u8Len === u8.buffer.byteLength) {
                return u8.buffer;
              } else {
                return u8.buffer.slice(u8offset, u8offset + u8Len);
              }
            }
            function buffer2Uint8array(buff) {
              if (buff instanceof Uint8Array) {
                return buff;
              } else {
                return new Uint8Array(buff);
              }
            }
            function arrayish2Buffer(arr) {
              if (arr instanceof Buffer2) {
                return arr;
              } else if (arr instanceof Uint8Array) {
                return uint8Array2Buffer(arr);
              } else {
                return Buffer2.from(arr);
              }
            }
            function uint8Array2Buffer(u8) {
              if (u8 instanceof Buffer2) {
                return u8;
              } else if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength) {
                return arrayBuffer2Buffer(u8.buffer);
              } else {
                return Buffer2.from(u8.buffer, u8.byteOffset, u8.byteLength);
              }
            }
            function arrayBuffer2Buffer(ab) {
              return Buffer2.from(ab);
            }
            function copyingSlice(buff, start, end) {
              if (start === void 0)
                start = 0;
              if (end === void 0)
                end = buff.length;
              if (start < 0 || end < 0 || end > buff.length || start > end) {
                throw new TypeError("Invalid slice bounds on buffer of length " + buff.length + ": [" + start + ", " + end + "]");
              }
              if (buff.length === 0) {
                return emptyBuffer();
              } else {
                var u8 = buffer2Uint8array(buff), s0 = buff[0], newS0 = (s0 + 1) % 255;
                buff[0] = newS0;
                if (u8[0] === newS0) {
                  u8[0] = s0;
                  return uint8Array2Buffer(u8.slice(start, end));
                } else {
                  buff[0] = s0;
                  return uint8Array2Buffer(u8.subarray(start, end));
                }
              }
            }
            var emptyBuff = null;
            function emptyBuffer() {
              if (emptyBuff) {
                return emptyBuff;
              }
              return emptyBuff = Buffer2.alloc(0);
            }
            function bufferValidator(v, cb) {
              if (Buffer2.isBuffer(v)) {
                cb();
              } else {
                cb(new ApiError(ErrorCode.EINVAL, "option must be a Buffer."));
              }
            }
            function checkOptions(fsType, opts, cb) {
              var optsInfo = fsType.Options;
              var fsName = fsType.Name;
              var pendingValidators = 0;
              var callbackCalled = false;
              var loopEnded = false;
              function validatorCallback(e) {
                if (!callbackCalled) {
                  if (e) {
                    callbackCalled = true;
                    cb(e);
                  }
                  pendingValidators--;
                  if (pendingValidators === 0 && loopEnded) {
                    cb();
                  }
                }
              }
              var loop = function(optName2) {
                if (optsInfo.hasOwnProperty(optName2)) {
                  var opt = optsInfo[optName2];
                  var providedValue = opts[optName2];
                  if (providedValue === void 0 || providedValue === null) {
                    if (!opt.optional) {
                      var incorrectOptions = Object.keys(opts).filter(function(o) {
                        return !(o in optsInfo);
                      }).map(function(a) {
                        return { str: a, distance: levenshtein(optName2, a) };
                      }).filter(function(o) {
                        return o.distance < 5;
                      }).sort(function(a, b) {
                        return a.distance - b.distance;
                      });
                      if (callbackCalled) {
                        return {};
                      }
                      callbackCalled = true;
                      return { v: cb(new ApiError(ErrorCode.EINVAL, "[" + fsName + "] Required option '" + optName2 + "' not provided." + (incorrectOptions.length > 0 ? " You provided unrecognized option '" + incorrectOptions[0].str + "'; perhaps you meant to type '" + optName2 + "'." : "") + "\nOption description: " + opt.description)) };
                    }
                  } else {
                    var typeMatches = false;
                    if (Array.isArray(opt.type)) {
                      typeMatches = opt.type.indexOf(typeof providedValue) !== -1;
                    } else {
                      typeMatches = typeof providedValue === opt.type;
                    }
                    if (!typeMatches) {
                      if (callbackCalled) {
                        return {};
                      }
                      callbackCalled = true;
                      return { v: cb(new ApiError(ErrorCode.EINVAL, "[" + fsName + "] Value provided for option " + optName2 + " is not the proper type. Expected " + (Array.isArray(opt.type) ? "one of {" + opt.type.join(", ") + "}" : opt.type) + ", but received " + typeof providedValue + "\nOption description: " + opt.description)) };
                    } else if (opt.validator) {
                      pendingValidators++;
                      opt.validator(providedValue, validatorCallback);
                    }
                  }
                }
              };
              for (var optName in optsInfo) {
                var returned = loop(optName);
                if (returned)
                  return returned.v;
              }
              loopEnded = true;
              if (pendingValidators === 0 && !callbackCalled) {
                cb();
              }
            }
            var BFSUtils = Object.freeze({
              deprecationMessage,
              isIE,
              isWebWorker,
              fail,
              mkdirpSync,
              buffer2ArrayBuffer,
              buffer2Uint8array,
              arrayish2Buffer,
              uint8Array2Buffer,
              arrayBuffer2Buffer,
              copyingSlice,
              emptyBuffer,
              bufferValidator,
              checkOptions
            });
            var BFSEmscriptenStreamOps = function BFSEmscriptenStreamOps2(fs4) {
              this.fs = fs4;
              this.nodefs = fs4.getNodeFS();
              this.FS = fs4.getFS();
              this.PATH = fs4.getPATH();
              this.ERRNO_CODES = fs4.getERRNO_CODES();
            };
            BFSEmscriptenStreamOps.prototype.open = function open(stream) {
              var path$$1 = this.fs.realPath(stream.node);
              var FS2 = this.FS;
              try {
                if (FS2.isFile(stream.node.mode)) {
                  stream.nfd = this.nodefs.openSync(path$$1, this.fs.flagsToPermissionString(stream.flags));
                }
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new FS2.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            BFSEmscriptenStreamOps.prototype.close = function close(stream) {
              var FS2 = this.FS;
              try {
                if (FS2.isFile(stream.node.mode) && stream.nfd) {
                  this.nodefs.closeSync(stream.nfd);
                }
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new FS2.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            BFSEmscriptenStreamOps.prototype.read = function read(stream, buffer$$1, offset, length, position) {
              try {
                return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
              } catch (e) {
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            BFSEmscriptenStreamOps.prototype.write = function write(stream, buffer$$1, offset, length, position) {
              try {
                return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
              } catch (e) {
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            BFSEmscriptenStreamOps.prototype.llseek = function llseek(stream, offset, whence) {
              var position = offset;
              if (whence === 1) {
                position += stream.position;
              } else if (whence === 2) {
                if (this.FS.isFile(stream.node.mode)) {
                  try {
                    var stat = this.nodefs.fstatSync(stream.nfd);
                    position += stat.size;
                  } catch (e) {
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                }
              }
              if (position < 0) {
                throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);
              }
              stream.position = position;
              return position;
            };
            var BFSEmscriptenNodeOps = function BFSEmscriptenNodeOps2(fs4) {
              this.fs = fs4;
              this.nodefs = fs4.getNodeFS();
              this.FS = fs4.getFS();
              this.PATH = fs4.getPATH();
              this.ERRNO_CODES = fs4.getERRNO_CODES();
            };
            BFSEmscriptenNodeOps.prototype.getattr = function getattr(node) {
              var path$$1 = this.fs.realPath(node);
              var stat;
              try {
                stat = this.nodefs.lstatSync(path$$1);
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
              return {
                dev: stat.dev,
                ino: stat.ino,
                mode: stat.mode,
                nlink: stat.nlink,
                uid: stat.uid,
                gid: stat.gid,
                rdev: stat.rdev,
                size: stat.size,
                atime: stat.atime,
                mtime: stat.mtime,
                ctime: stat.ctime,
                blksize: stat.blksize,
                blocks: stat.blocks
              };
            };
            BFSEmscriptenNodeOps.prototype.setattr = function setattr(node, attr) {
              var path$$1 = this.fs.realPath(node);
              try {
                if (attr.mode !== void 0) {
                  this.nodefs.chmodSync(path$$1, attr.mode);
                  node.mode = attr.mode;
                }
                if (attr.timestamp !== void 0) {
                  var date = new Date(attr.timestamp);
                  this.nodefs.utimesSync(path$$1, date, date);
                }
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                if (e.code !== "ENOTSUP") {
                  throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                }
              }
              if (attr.size !== void 0) {
                try {
                  this.nodefs.truncateSync(path$$1, attr.size);
                } catch (e) {
                  if (!e.code) {
                    throw e;
                  }
                  throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                }
              }
            };
            BFSEmscriptenNodeOps.prototype.lookup = function lookup(parent, name2) {
              var path$$1 = this.PATH.join2(this.fs.realPath(parent), name2);
              var mode = this.fs.getMode(path$$1);
              return this.fs.createNode(parent, name2, mode);
            };
            BFSEmscriptenNodeOps.prototype.mknod = function mknod(parent, name2, mode, dev) {
              var node = this.fs.createNode(parent, name2, mode, dev);
              var path$$1 = this.fs.realPath(node);
              try {
                if (this.FS.isDir(node.mode)) {
                  this.nodefs.mkdirSync(path$$1, node.mode);
                } else {
                  this.nodefs.writeFileSync(path$$1, "", { mode: node.mode });
                }
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
              return node;
            };
            BFSEmscriptenNodeOps.prototype.rename = function rename(oldNode, newDir, newName) {
              var oldPath = this.fs.realPath(oldNode);
              var newPath = this.PATH.join2(this.fs.realPath(newDir), newName);
              try {
                this.nodefs.renameSync(oldPath, newPath);
                oldNode.name = newName;
                oldNode.parent = newDir;
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            BFSEmscriptenNodeOps.prototype.unlink = function unlink(parent, name2) {
              var path$$1 = this.PATH.join2(this.fs.realPath(parent), name2);
              try {
                this.nodefs.unlinkSync(path$$1);
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            BFSEmscriptenNodeOps.prototype.rmdir = function rmdir(parent, name2) {
              var path$$1 = this.PATH.join2(this.fs.realPath(parent), name2);
              try {
                this.nodefs.rmdirSync(path$$1);
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            BFSEmscriptenNodeOps.prototype.readdir = function readdir(node) {
              var path$$1 = this.fs.realPath(node);
              try {
                var contents = this.nodefs.readdirSync(path$$1);
                contents.push(".", "..");
                return contents;
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            BFSEmscriptenNodeOps.prototype.symlink = function symlink(parent, newName, oldPath) {
              var newPath = this.PATH.join2(this.fs.realPath(parent), newName);
              try {
                this.nodefs.symlinkSync(oldPath, newPath);
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            BFSEmscriptenNodeOps.prototype.readlink = function readlink(node) {
              var path$$1 = this.fs.realPath(node);
              try {
                return this.nodefs.readlinkSync(path$$1);
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            };
            var BFSEmscriptenFS = function BFSEmscriptenFS2(_FS, _PATH, _ERRNO_CODES, nodefs) {
              if (_FS === void 0)
                _FS = self["FS"];
              if (_PATH === void 0)
                _PATH = self["PATH"];
              if (_ERRNO_CODES === void 0)
                _ERRNO_CODES = self["ERRNO_CODES"];
              if (nodefs === void 0)
                nodefs = _fsMock;
              this.flagsToPermissionStringMap = {
                0: "r",
                1: "r+",
                2: "r+",
                64: "r",
                65: "r+",
                66: "r+",
                129: "rx+",
                193: "rx+",
                514: "w+",
                577: "w",
                578: "w+",
                705: "wx",
                706: "wx+",
                1024: "a",
                1025: "a",
                1026: "a+",
                1089: "a",
                1090: "a+",
                1153: "ax",
                1154: "ax+",
                1217: "ax",
                1218: "ax+",
                4096: "rs",
                4098: "rs+"
              };
              this.nodefs = nodefs;
              this.FS = _FS;
              this.PATH = _PATH;
              this.ERRNO_CODES = _ERRNO_CODES;
              this.node_ops = new BFSEmscriptenNodeOps(this);
              this.stream_ops = new BFSEmscriptenStreamOps(this);
            };
            BFSEmscriptenFS.prototype.mount = function mount(m) {
              return this.createNode(null, "/", this.getMode(m.opts.root), 0);
            };
            BFSEmscriptenFS.prototype.createNode = function createNode3(parent, name2, mode, dev) {
              var FS2 = this.FS;
              if (!FS2.isDir(mode) && !FS2.isFile(mode) && !FS2.isLink(mode)) {
                throw new FS2.ErrnoError(this.ERRNO_CODES.EINVAL);
              }
              var node = FS2.createNode(parent, name2, mode);
              node.node_ops = this.node_ops;
              node.stream_ops = this.stream_ops;
              return node;
            };
            BFSEmscriptenFS.prototype.getMode = function getMode(path$$1) {
              var stat;
              try {
                stat = this.nodefs.lstatSync(path$$1);
              } catch (e) {
                if (!e.code) {
                  throw e;
                }
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
              return stat.mode;
            };
            BFSEmscriptenFS.prototype.realPath = function realPath(node) {
              var parts = [];
              while (node.parent !== node) {
                parts.push(node.name);
                node = node.parent;
              }
              parts.push(node.mount.opts.root);
              parts.reverse();
              return this.PATH.join.apply(null, parts);
            };
            BFSEmscriptenFS.prototype.flagsToPermissionString = function flagsToPermissionString(flags) {
              var parsedFlags = typeof flags === "string" ? parseInt(flags, 10) : flags;
              parsedFlags &= 8191;
              if (parsedFlags in this.flagsToPermissionStringMap) {
                return this.flagsToPermissionStringMap[parsedFlags];
              } else {
                return flags;
              }
            };
            BFSEmscriptenFS.prototype.getNodeFS = function getNodeFS() {
              return this.nodefs;
            };
            BFSEmscriptenFS.prototype.getFS = function getFS() {
              return this.FS;
            };
            BFSEmscriptenFS.prototype.getPATH = function getPATH() {
              return this.PATH;
            };
            BFSEmscriptenFS.prototype.getERRNO_CODES = function getERRNO_CODES() {
              return this.ERRNO_CODES;
            };
            var BaseFileSystem = function BaseFileSystem2() {
            };
            BaseFileSystem.prototype.supportsLinks = function supportsLinks() {
              return false;
            };
            BaseFileSystem.prototype.diskSpace = function diskSpace(p, cb) {
              cb(0, 0);
            };
            BaseFileSystem.prototype.openFile = function openFile(p, flag, cb) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.createFile = function createFile(p, flag, mode, cb) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.open = function open(p, flag, mode, cb) {
              var this$1 = this;
              var mustBeFile = function(e, stats) {
                if (e) {
                  switch (flag.pathNotExistsAction()) {
                    case ActionType.CREATE_FILE:
                      return this$1.stat(path2.dirname(p), false, function(e2, parentStats) {
                        if (e2) {
                          cb(e2);
                        } else if (parentStats && !parentStats.isDirectory()) {
                          cb(ApiError.ENOTDIR(path2.dirname(p)));
                        } else {
                          this$1.createFile(p, flag, mode, cb);
                        }
                      });
                    case ActionType.THROW_EXCEPTION:
                      return cb(ApiError.ENOENT(p));
                    default:
                      return cb(new ApiError(ErrorCode.EINVAL, "Invalid FileFlag object."));
                  }
                } else {
                  if (stats && stats.isDirectory()) {
                    return cb(ApiError.EISDIR(p));
                  }
                  switch (flag.pathExistsAction()) {
                    case ActionType.THROW_EXCEPTION:
                      return cb(ApiError.EEXIST(p));
                    case ActionType.TRUNCATE_FILE:
                      return this$1.openFile(p, flag, function(e2, fd) {
                        if (e2) {
                          cb(e2);
                        } else if (fd) {
                          fd.truncate(0, function() {
                            fd.sync(function() {
                              cb(null, fd);
                            });
                          });
                        } else {
                          fail();
                        }
                      });
                    case ActionType.NOP:
                      return this$1.openFile(p, flag, cb);
                    default:
                      return cb(new ApiError(ErrorCode.EINVAL, "Invalid FileFlag object."));
                  }
                }
              };
              this.stat(p, false, mustBeFile);
            };
            BaseFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.stat = function stat(p, isLstat, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.statSync = function statSync(p, isLstat) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.openFileSync = function openFileSync(p, flag, mode) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.createFileSync = function createFileSync(p, flag, mode) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.openSync = function openSync(p, flag, mode) {
              var stats;
              try {
                stats = this.statSync(p, false);
              } catch (e) {
                switch (flag.pathNotExistsAction()) {
                  case ActionType.CREATE_FILE:
                    var parentStats = this.statSync(path2.dirname(p), false);
                    if (!parentStats.isDirectory()) {
                      throw ApiError.ENOTDIR(path2.dirname(p));
                    }
                    return this.createFileSync(p, flag, mode);
                  case ActionType.THROW_EXCEPTION:
                    throw ApiError.ENOENT(p);
                  default:
                    throw new ApiError(ErrorCode.EINVAL, "Invalid FileFlag object.");
                }
              }
              if (stats.isDirectory()) {
                throw ApiError.EISDIR(p);
              }
              switch (flag.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                  throw ApiError.EEXIST(p);
                case ActionType.TRUNCATE_FILE:
                  this.unlinkSync(p);
                  return this.createFileSync(p, flag, stats.mode);
                case ActionType.NOP:
                  return this.openFileSync(p, flag, mode);
                default:
                  throw new ApiError(ErrorCode.EINVAL, "Invalid FileFlag object.");
              }
            };
            BaseFileSystem.prototype.unlink = function unlink(p, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.unlinkSync = function unlinkSync(p) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.rmdir = function rmdir(p, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.rmdirSync = function rmdirSync(p) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.mkdirSync = function mkdirSync(p, mode) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.readdir = function readdir(p, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.readdirSync = function readdirSync(p) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.exists = function exists2(p, cb) {
              this.stat(p, null, function(err) {
                cb(!err);
              });
            };
            BaseFileSystem.prototype.existsSync = function existsSync(p) {
              try {
                this.statSync(p, true);
                return true;
              } catch (e) {
                return false;
              }
            };
            BaseFileSystem.prototype.realpath = function realpath(p, cache2, cb) {
              if (this.supportsLinks()) {
                var splitPath = p.split(path2.sep);
                for (var i2 = 0; i2 < splitPath.length; i2++) {
                  var addPaths = splitPath.slice(0, i2 + 1);
                  splitPath[i2] = path2.join.apply(null, addPaths);
                }
              } else {
                this.exists(p, function(doesExist) {
                  if (doesExist) {
                    cb(null, p);
                  } else {
                    cb(ApiError.ENOENT(p));
                  }
                });
              }
            };
            BaseFileSystem.prototype.realpathSync = function realpathSync(p, cache2) {
              if (this.supportsLinks()) {
                var splitPath = p.split(path2.sep);
                for (var i2 = 0; i2 < splitPath.length; i2++) {
                  var addPaths = splitPath.slice(0, i2 + 1);
                  splitPath[i2] = path2.join.apply(path2, addPaths);
                }
                return splitPath.join(path2.sep);
              } else {
                if (this.existsSync(p)) {
                  return p;
                } else {
                  throw ApiError.ENOENT(p);
                }
              }
            };
            BaseFileSystem.prototype.truncate = function truncate(p, len, cb) {
              this.open(p, FileFlag.getFileFlag("r+"), 420, function(er, fd) {
                if (er) {
                  return cb(er);
                }
                fd.truncate(len, function(er2) {
                  fd.close(function(er22) {
                    cb(er2 || er22);
                  });
                });
              });
            };
            BaseFileSystem.prototype.truncateSync = function truncateSync(p, len) {
              var fd = this.openSync(p, FileFlag.getFileFlag("r+"), 420);
              try {
                fd.truncateSync(len);
              } catch (e) {
                throw e;
              } finally {
                fd.closeSync();
              }
            };
            BaseFileSystem.prototype.readFile = function readFile(fname, encoding, flag, cb) {
              var oldCb = cb;
              this.open(fname, flag, 420, function(err, fd) {
                if (err) {
                  return cb(err);
                }
                cb = function(err2, arg) {
                  fd.close(function(err22) {
                    if (!err2) {
                      err2 = err22;
                    }
                    return oldCb(err2, arg);
                  });
                };
                fd.stat(function(err2, stat) {
                  if (err2) {
                    return cb(err2);
                  }
                  var buf = Buffer2.alloc(stat.size);
                  fd.read(buf, 0, stat.size, 0, function(err3) {
                    if (err3) {
                      return cb(err3);
                    } else if (encoding === null) {
                      return cb(err3, buf);
                    }
                    try {
                      cb(null, buf.toString(encoding));
                    } catch (e) {
                      cb(e);
                    }
                  });
                });
              });
            };
            BaseFileSystem.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
              var fd = this.openSync(fname, flag, 420);
              try {
                var stat = fd.statSync();
                var buf = Buffer2.alloc(stat.size);
                fd.readSync(buf, 0, stat.size, 0);
                fd.closeSync();
                if (encoding === null) {
                  return buf;
                }
                return buf.toString(encoding);
              } finally {
                fd.closeSync();
              }
            };
            BaseFileSystem.prototype.writeFile = function writeFile2(fname, data, encoding, flag, mode, cb) {
              var oldCb = cb;
              this.open(fname, flag, 420, function(err, fd) {
                if (err) {
                  return cb(err);
                }
                cb = function(err2) {
                  fd.close(function(err22) {
                    oldCb(err2 ? err2 : err22);
                  });
                };
                try {
                  if (typeof data === "string") {
                    data = Buffer2.from(data, encoding);
                  }
                } catch (e) {
                  return cb(e);
                }
                fd.write(data, 0, data.length, 0, cb);
              });
            };
            BaseFileSystem.prototype.writeFileSync = function writeFileSync(fname, data, encoding, flag, mode) {
              var fd = this.openSync(fname, flag, mode);
              try {
                if (typeof data === "string") {
                  data = Buffer2.from(data, encoding);
                }
                fd.writeSync(data, 0, data.length, 0);
              } finally {
                fd.closeSync();
              }
            };
            BaseFileSystem.prototype.appendFile = function appendFile3(fname, data, encoding, flag, mode, cb) {
              var oldCb = cb;
              this.open(fname, flag, mode, function(err, fd) {
                if (err) {
                  return cb(err);
                }
                cb = function(err2) {
                  fd.close(function(err22) {
                    oldCb(err2 ? err2 : err22);
                  });
                };
                if (typeof data === "string") {
                  data = Buffer2.from(data, encoding);
                }
                fd.write(data, 0, data.length, null, cb);
              });
            };
            BaseFileSystem.prototype.appendFileSync = function appendFileSync(fname, data, encoding, flag, mode) {
              var fd = this.openSync(fname, flag, mode);
              try {
                if (typeof data === "string") {
                  data = Buffer2.from(data, encoding);
                }
                fd.writeSync(data, 0, data.length, null);
              } finally {
                fd.closeSync();
              }
            };
            BaseFileSystem.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.utimes = function utimes(p, atime, mtime, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.utimesSync = function utimesSync(p, atime, mtime) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.link = function link(srcpath, dstpath, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.linkSync = function linkSync(srcpath, dstpath) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFileSystem.prototype.readlink = function readlink(p, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFileSystem.prototype.readlinkSync = function readlinkSync(p) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            var SynchronousFileSystem = function(BaseFileSystem2) {
              function SynchronousFileSystem2() {
                BaseFileSystem2.apply(this, arguments);
              }
              if (BaseFileSystem2)
                SynchronousFileSystem2.__proto__ = BaseFileSystem2;
              SynchronousFileSystem2.prototype = Object.create(BaseFileSystem2 && BaseFileSystem2.prototype);
              SynchronousFileSystem2.prototype.constructor = SynchronousFileSystem2;
              SynchronousFileSystem2.prototype.supportsSynch = function supportsSynch() {
                return true;
              };
              SynchronousFileSystem2.prototype.rename = function rename(oldPath, newPath, cb) {
                try {
                  this.renameSync(oldPath, newPath);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.stat = function stat(p, isLstat, cb) {
                try {
                  cb(null, this.statSync(p, isLstat));
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.open = function open(p, flags, mode, cb) {
                try {
                  cb(null, this.openSync(p, flags, mode));
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.unlink = function unlink(p, cb) {
                try {
                  this.unlinkSync(p);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.rmdir = function rmdir(p, cb) {
                try {
                  this.rmdirSync(p);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.mkdir = function mkdir(p, mode, cb) {
                try {
                  this.mkdirSync(p, mode);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.readdir = function readdir(p, cb) {
                try {
                  cb(null, this.readdirSync(p));
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
                try {
                  this.chmodSync(p, isLchmod, mode);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
                try {
                  this.chownSync(p, isLchown, uid, gid);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.utimes = function utimes(p, atime, mtime, cb) {
                try {
                  this.utimesSync(p, atime, mtime);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.link = function link(srcpath, dstpath, cb) {
                try {
                  this.linkSync(srcpath, dstpath);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
                try {
                  this.symlinkSync(srcpath, dstpath, type);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              SynchronousFileSystem2.prototype.readlink = function readlink(p, cb) {
                try {
                  cb(null, this.readlinkSync(p));
                } catch (e) {
                  cb(e);
                }
              };
              return SynchronousFileSystem2;
            }(BaseFileSystem);
            var BaseFile = function BaseFile2() {
            };
            BaseFile.prototype.sync = function sync(cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFile.prototype.syncSync = function syncSync() {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFile.prototype.datasync = function datasync(cb) {
              this.sync(cb);
            };
            BaseFile.prototype.datasyncSync = function datasyncSync() {
              return this.syncSync();
            };
            BaseFile.prototype.chown = function chown(uid, gid, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFile.prototype.chownSync = function chownSync(uid, gid) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFile.prototype.chmod = function chmod(mode, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFile.prototype.chmodSync = function chmodSync(mode) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            BaseFile.prototype.utimes = function utimes(atime, mtime, cb) {
              cb(new ApiError(ErrorCode.ENOTSUP));
            };
            BaseFile.prototype.utimesSync = function utimesSync(atime, mtime) {
              throw new ApiError(ErrorCode.ENOTSUP);
            };
            var PreloadFile = function(BaseFile$$1) {
              function PreloadFile2(_fs, _path, _flag, _stat, contents) {
                BaseFile$$1.call(this);
                this._pos = 0;
                this._dirty = false;
                this._fs = _fs;
                this._path = _path;
                this._flag = _flag;
                this._stat = _stat;
                if (contents) {
                  this._buffer = contents;
                } else {
                  this._buffer = emptyBuffer();
                }
                if (this._stat.size !== this._buffer.length && this._flag.isReadable()) {
                  throw new Error("Invalid buffer: Buffer is " + this._buffer.length + " long, yet Stats object specifies that file is " + this._stat.size + " long.");
                }
              }
              if (BaseFile$$1)
                PreloadFile2.__proto__ = BaseFile$$1;
              PreloadFile2.prototype = Object.create(BaseFile$$1 && BaseFile$$1.prototype);
              PreloadFile2.prototype.constructor = PreloadFile2;
              PreloadFile2.prototype.getBuffer = function getBuffer() {
                return this._buffer;
              };
              PreloadFile2.prototype.getStats = function getStats() {
                return this._stat;
              };
              PreloadFile2.prototype.getFlag = function getFlag2() {
                return this._flag;
              };
              PreloadFile2.prototype.getPath = function getPath() {
                return this._path;
              };
              PreloadFile2.prototype.getPos = function getPos() {
                if (this._flag.isAppendable()) {
                  return this._stat.size;
                }
                return this._pos;
              };
              PreloadFile2.prototype.advancePos = function advancePos(delta) {
                return this._pos += delta;
              };
              PreloadFile2.prototype.setPos = function setPos(newPos) {
                return this._pos = newPos;
              };
              PreloadFile2.prototype.sync = function sync(cb) {
                try {
                  this.syncSync();
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              PreloadFile2.prototype.syncSync = function syncSync() {
                throw new ApiError(ErrorCode.ENOTSUP);
              };
              PreloadFile2.prototype.close = function close(cb) {
                try {
                  this.closeSync();
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              PreloadFile2.prototype.closeSync = function closeSync() {
                throw new ApiError(ErrorCode.ENOTSUP);
              };
              PreloadFile2.prototype.stat = function stat(cb) {
                try {
                  cb(null, this._stat.clone());
                } catch (e) {
                  cb(e);
                }
              };
              PreloadFile2.prototype.statSync = function statSync() {
                return this._stat.clone();
              };
              PreloadFile2.prototype.truncate = function truncate(len, cb) {
                try {
                  this.truncateSync(len);
                  if (this._flag.isSynchronous() && !_fsMock.getRootFS().supportsSynch()) {
                    this.sync(cb);
                  }
                  cb();
                } catch (e) {
                  return cb(e);
                }
              };
              PreloadFile2.prototype.truncateSync = function truncateSync(len) {
                this._dirty = true;
                if (!this._flag.isWriteable()) {
                  throw new ApiError(ErrorCode.EPERM, "File not opened with a writeable mode.");
                }
                this._stat.mtime = new Date();
                if (len > this._buffer.length) {
                  var buf = Buffer2.alloc(len - this._buffer.length, 0);
                  this.writeSync(buf, 0, buf.length, this._buffer.length);
                  if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
                    this.syncSync();
                  }
                  return;
                }
                this._stat.size = len;
                var newBuff = Buffer2.alloc(len);
                this._buffer.copy(newBuff, 0, 0, len);
                this._buffer = newBuff;
                if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
                  this.syncSync();
                }
              };
              PreloadFile2.prototype.write = function write(buffer$$1, offset, length, position, cb) {
                try {
                  cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
                } catch (e) {
                  cb(e);
                }
              };
              PreloadFile2.prototype.writeSync = function writeSync(buffer$$1, offset, length, position) {
                this._dirty = true;
                if (position === void 0 || position === null) {
                  position = this.getPos();
                }
                if (!this._flag.isWriteable()) {
                  throw new ApiError(ErrorCode.EPERM, "File not opened with a writeable mode.");
                }
                var endFp = position + length;
                if (endFp > this._stat.size) {
                  this._stat.size = endFp;
                  if (endFp > this._buffer.length) {
                    var newBuff = Buffer2.alloc(endFp);
                    this._buffer.copy(newBuff);
                    this._buffer = newBuff;
                  }
                }
                var len = buffer$$1.copy(this._buffer, position, offset, offset + length);
                this._stat.mtime = new Date();
                if (this._flag.isSynchronous()) {
                  this.syncSync();
                  return len;
                }
                this.setPos(position + len);
                return len;
              };
              PreloadFile2.prototype.read = function read(buffer$$1, offset, length, position, cb) {
                try {
                  cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
                } catch (e) {
                  cb(e);
                }
              };
              PreloadFile2.prototype.readSync = function readSync(buffer$$1, offset, length, position) {
                if (!this._flag.isReadable()) {
                  throw new ApiError(ErrorCode.EPERM, "File not opened with a readable mode.");
                }
                if (position === void 0 || position === null) {
                  position = this.getPos();
                }
                var endRead = position + length;
                if (endRead > this._stat.size) {
                  length = this._stat.size - position;
                }
                var rv = this._buffer.copy(buffer$$1, offset, position, position + length);
                this._stat.atime = new Date();
                this._pos = position + length;
                return rv;
              };
              PreloadFile2.prototype.chmod = function chmod(mode, cb) {
                try {
                  this.chmodSync(mode);
                  cb();
                } catch (e) {
                  cb(e);
                }
              };
              PreloadFile2.prototype.chmodSync = function chmodSync(mode) {
                if (!this._fs.supportsProps()) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                }
                this._dirty = true;
                this._stat.chmod(mode);
                this.syncSync();
              };
              PreloadFile2.prototype.isDirty = function isDirty() {
                return this._dirty;
              };
              PreloadFile2.prototype.resetDirty = function resetDirty() {
                this._dirty = false;
              };
              return PreloadFile2;
            }(BaseFile);
            var NoSyncFile = function(PreloadFile2) {
              function NoSyncFile2(_fs, _path, _flag, _stat, contents) {
                PreloadFile2.call(this, _fs, _path, _flag, _stat, contents);
              }
              if (PreloadFile2)
                NoSyncFile2.__proto__ = PreloadFile2;
              NoSyncFile2.prototype = Object.create(PreloadFile2 && PreloadFile2.prototype);
              NoSyncFile2.prototype.constructor = NoSyncFile2;
              NoSyncFile2.prototype.sync = function sync(cb) {
                cb();
              };
              NoSyncFile2.prototype.syncSync = function syncSync() {
              };
              NoSyncFile2.prototype.close = function close(cb) {
                cb();
              };
              NoSyncFile2.prototype.closeSync = function closeSync() {
              };
              return NoSyncFile2;
            }(PreloadFile);
            var MirrorFile = function(PreloadFile$$1) {
              function MirrorFile2(fs4, path$$1, flag, stat, data) {
                PreloadFile$$1.call(this, fs4, path$$1, flag, stat, data);
              }
              if (PreloadFile$$1)
                MirrorFile2.__proto__ = PreloadFile$$1;
              MirrorFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
              MirrorFile2.prototype.constructor = MirrorFile2;
              MirrorFile2.prototype.syncSync = function syncSync() {
                if (this.isDirty()) {
                  this._fs._syncSync(this);
                  this.resetDirty();
                }
              };
              MirrorFile2.prototype.closeSync = function closeSync() {
                this.syncSync();
              };
              return MirrorFile2;
            }(PreloadFile);
            var AsyncMirror = function(SynchronousFileSystem$$1) {
              function AsyncMirror2(sync, async, deprecateMsg) {
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                SynchronousFileSystem$$1.call(this);
                this._queue = [];
                this._queueRunning = false;
                this._isInitialized = false;
                this._initializeCallbacks = [];
                this._sync = sync;
                this._async = async;
                if (!sync.supportsSynch()) {
                  throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.");
                }
                deprecationMessage(deprecateMsg, AsyncMirror2.Name, { sync: "sync file system instance", async: "async file system instance" });
              }
              if (SynchronousFileSystem$$1)
                AsyncMirror2.__proto__ = SynchronousFileSystem$$1;
              AsyncMirror2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
              AsyncMirror2.prototype.constructor = AsyncMirror2;
              AsyncMirror2.Create = function Create(opts, cb) {
                try {
                  var fs4 = new AsyncMirror2(opts.sync, opts.async, false);
                  fs4.initialize(function(e) {
                    if (e) {
                      cb(e);
                    } else {
                      cb(null, fs4);
                    }
                  }, false);
                } catch (e) {
                  cb(e);
                }
              };
              AsyncMirror2.isAvailable = function isAvailable() {
                return true;
              };
              AsyncMirror2.prototype.getName = function getName() {
                return AsyncMirror2.Name;
              };
              AsyncMirror2.prototype._syncSync = function _syncSync(fd) {
                this._sync.writeFileSync(fd.getPath(), fd.getBuffer(), null, FileFlag.getFileFlag("w"), fd.getStats().mode);
                this.enqueueOp({
                  apiMethod: "writeFile",
                  arguments: [fd.getPath(), fd.getBuffer(), null, fd.getFlag(), fd.getStats().mode]
                });
              };
              AsyncMirror2.prototype.initialize = function initialize3(userCb, deprecateMsg) {
                var this$1 = this;
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                if (deprecateMsg) {
                  console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use 'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)' to create and initialize AsyncMirror instances.");
                }
                var callbacks = this._initializeCallbacks;
                var end = function(e) {
                  this$1._isInitialized = !e;
                  this$1._initializeCallbacks = [];
                  callbacks.forEach(function(cb) {
                    return cb(e);
                  });
                };
                if (!this._isInitialized) {
                  if (callbacks.push(userCb) === 1) {
                    var copyDirectory = function(p, mode, cb) {
                      if (p !== "/") {
                        this$1._sync.mkdirSync(p, mode);
                      }
                      this$1._async.readdir(p, function(err, files) {
                        var i2 = 0;
                        function copyNextFile(err2) {
                          if (err2) {
                            cb(err2);
                          } else if (i2 < files.length) {
                            copyItem(path2.join(p, files[i2]), copyNextFile);
                            i2++;
                          } else {
                            cb();
                          }
                        }
                        if (err) {
                          cb(err);
                        } else {
                          copyNextFile();
                        }
                      });
                    }, copyFile = function(p, mode, cb) {
                      this$1._async.readFile(p, null, FileFlag.getFileFlag("r"), function(err, data) {
                        if (err) {
                          cb(err);
                        } else {
                          try {
                            this$1._sync.writeFileSync(p, data, null, FileFlag.getFileFlag("w"), mode);
                          } catch (e) {
                            err = e;
                          } finally {
                            cb(err);
                          }
                        }
                      });
                    }, copyItem = function(p, cb) {
                      this$1._async.stat(p, false, function(err, stats) {
                        if (err) {
                          cb(err);
                        } else if (stats.isDirectory()) {
                          copyDirectory(p, stats.mode, cb);
                        } else {
                          copyFile(p, stats.mode, cb);
                        }
                      });
                    };
                    copyDirectory("/", 0, end);
                  }
                } else {
                  userCb();
                }
              };
              AsyncMirror2.prototype.isReadOnly = function isReadOnly() {
                return false;
              };
              AsyncMirror2.prototype.supportsSynch = function supportsSynch() {
                return true;
              };
              AsyncMirror2.prototype.supportsLinks = function supportsLinks() {
                return false;
              };
              AsyncMirror2.prototype.supportsProps = function supportsProps() {
                return this._sync.supportsProps() && this._async.supportsProps();
              };
              AsyncMirror2.prototype.renameSync = function renameSync(oldPath, newPath) {
                this.checkInitialized();
                this._sync.renameSync(oldPath, newPath);
                this.enqueueOp({
                  apiMethod: "rename",
                  arguments: [oldPath, newPath]
                });
              };
              AsyncMirror2.prototype.statSync = function statSync(p, isLstat) {
                this.checkInitialized();
                return this._sync.statSync(p, isLstat);
              };
              AsyncMirror2.prototype.openSync = function openSync(p, flag, mode) {
                this.checkInitialized();
                var fd = this._sync.openSync(p, flag, mode);
                fd.closeSync();
                return new MirrorFile(this, p, flag, this._sync.statSync(p, false), this._sync.readFileSync(p, null, FileFlag.getFileFlag("r")));
              };
              AsyncMirror2.prototype.unlinkSync = function unlinkSync(p) {
                this.checkInitialized();
                this._sync.unlinkSync(p);
                this.enqueueOp({
                  apiMethod: "unlink",
                  arguments: [p]
                });
              };
              AsyncMirror2.prototype.rmdirSync = function rmdirSync(p) {
                this.checkInitialized();
                this._sync.rmdirSync(p);
                this.enqueueOp({
                  apiMethod: "rmdir",
                  arguments: [p]
                });
              };
              AsyncMirror2.prototype.mkdirSync = function mkdirSync(p, mode) {
                this.checkInitialized();
                this._sync.mkdirSync(p, mode);
                this.enqueueOp({
                  apiMethod: "mkdir",
                  arguments: [p, mode]
                });
              };
              AsyncMirror2.prototype.readdirSync = function readdirSync(p) {
                this.checkInitialized();
                return this._sync.readdirSync(p);
              };
              AsyncMirror2.prototype.existsSync = function existsSync(p) {
                this.checkInitialized();
                return this._sync.existsSync(p);
              };
              AsyncMirror2.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
                this.checkInitialized();
                this._sync.chmodSync(p, isLchmod, mode);
                this.enqueueOp({
                  apiMethod: "chmod",
                  arguments: [p, isLchmod, mode]
                });
              };
              AsyncMirror2.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
                this.checkInitialized();
                this._sync.chownSync(p, isLchown, uid, gid);
                this.enqueueOp({
                  apiMethod: "chown",
                  arguments: [p, isLchown, uid, gid]
                });
              };
              AsyncMirror2.prototype.utimesSync = function utimesSync(p, atime, mtime) {
                this.checkInitialized();
                this._sync.utimesSync(p, atime, mtime);
                this.enqueueOp({
                  apiMethod: "utimes",
                  arguments: [p, atime, mtime]
                });
              };
              AsyncMirror2.prototype.checkInitialized = function checkInitialized() {
                if (!this._isInitialized) {
                  throw new ApiError(ErrorCode.EPERM, "AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.");
                }
              };
              AsyncMirror2.prototype.enqueueOp = function enqueueOp(op) {
                var this$1 = this;
                this._queue.push(op);
                if (!this._queueRunning) {
                  this._queueRunning = true;
                  var doNextOp = function(err) {
                    if (err) {
                      console.error("WARNING: File system has desynchronized. Received following error: " + err + "\n$");
                    }
                    if (this$1._queue.length > 0) {
                      var op2 = this$1._queue.shift(), args = op2.arguments;
                      args.push(doNextOp);
                      this$1._async[op2.apiMethod].apply(this$1._async, args);
                    } else {
                      this$1._queueRunning = false;
                    }
                  };
                  doNextOp();
                }
              };
              return AsyncMirror2;
            }(SynchronousFileSystem);
            AsyncMirror.Name = "AsyncMirror";
            AsyncMirror.Options = {
              sync: {
                type: "object",
                description: "The synchronous file system to mirror the asynchronous file system to."
              },
              async: {
                type: "object",
                description: "The asynchronous file system to mirror."
              }
            };
            function apply(func, thisArg, args) {
              switch (args.length) {
                case 0:
                  return func.call(thisArg);
                case 1:
                  return func.call(thisArg, args[0]);
                case 2:
                  return func.call(thisArg, args[0], args[1]);
                case 3:
                  return func.call(thisArg, args[0], args[1], args[2]);
              }
              return func.apply(thisArg, args);
            }
            var nativeMax = Math.max;
            function overRest$1(func, start, transform) {
              start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
              return function() {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                while (++index < length) {
                  array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                  otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
              };
            }
            function identity(value) {
              return value;
            }
            function rest(func, start) {
              return overRest$1(func, start, identity);
            }
            var initialParams = function(fn) {
              return rest(function(args) {
                var callback = args.pop();
                fn.call(this, args, callback);
              });
            };
            function applyEach$1(eachfn) {
              return rest(function(fns, args) {
                var go = initialParams(function(args2, callback) {
                  var that = this;
                  return eachfn(fns, function(fn, cb) {
                    fn.apply(that, args2.concat(cb));
                  }, callback);
                });
                if (args.length) {
                  return go.apply(this, args);
                } else {
                  return go;
                }
              });
            }
            var freeGlobal = typeof global2 == "object" && global2 && global2.Object === Object && global2;
            var freeSelf = typeof self == "object" && self && self.Object === Object && self;
            var root = freeGlobal || freeSelf || Function("return this")();
            var Symbol$1 = root.Symbol;
            var objectProto = Object.prototype;
            var hasOwnProperty = objectProto.hasOwnProperty;
            var nativeObjectToString = objectProto.toString;
            var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
            function getRawTag(value) {
              var isOwn = hasOwnProperty.call(value, symToStringTag$1), tag = value[symToStringTag$1];
              try {
                value[symToStringTag$1] = void 0;
                var unmasked = true;
              } catch (e) {
              }
              var result = nativeObjectToString.call(value);
              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag$1] = tag;
                } else {
                  delete value[symToStringTag$1];
                }
              }
              return result;
            }
            var objectProto$1 = Object.prototype;
            var nativeObjectToString$1 = objectProto$1.toString;
            function objectToString(value) {
              return nativeObjectToString$1.call(value);
            }
            var nullTag = "[object Null]";
            var undefinedTag = "[object Undefined]";
            var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
            function baseGetTag(value) {
              if (value == null) {
                return value === void 0 ? undefinedTag : nullTag;
              }
              return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
            }
            function isObject(value) {
              var type = typeof value;
              return value != null && (type == "object" || type == "function");
            }
            var asyncTag = "[object AsyncFunction]";
            var funcTag = "[object Function]";
            var genTag = "[object GeneratorFunction]";
            var proxyTag = "[object Proxy]";
            function isFunction(value) {
              if (!isObject(value)) {
                return false;
              }
              var tag = baseGetTag(value);
              return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }
            var MAX_SAFE_INTEGER = 9007199254740991;
            function isLength(value) {
              return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
            }
            function isArrayLike(value) {
              return value != null && isLength(value.length) && !isFunction(value);
            }
            var breakLoop = {};
            function noop2() {
            }
            function once(fn) {
              return function() {
                if (fn === null) {
                  return;
                }
                var callFn = fn;
                fn = null;
                callFn.apply(this, arguments);
              };
            }
            var iteratorSymbol = typeof Symbol === "function" && Symbol.iterator;
            var getIterator = function(coll) {
              return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
            };
            function baseTimes(n, iteratee) {
              var index = -1, result = Array(n);
              while (++index < n) {
                result[index] = iteratee(index);
              }
              return result;
            }
            function isObjectLike(value) {
              return value != null && typeof value == "object";
            }
            var argsTag = "[object Arguments]";
            function baseIsArguments(value) {
              return isObjectLike(value) && baseGetTag(value) == argsTag;
            }
            var objectProto$3 = Object.prototype;
            var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
            var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
            var isArguments = baseIsArguments(function() {
              return arguments;
            }()) ? baseIsArguments : function(value) {
              return isObjectLike(value) && hasOwnProperty$2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
            };
            var isArray = Array.isArray;
            function stubFalse() {
              return false;
            }
            var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
            var freeModule = freeExports && typeof module3 == "object" && module3 && !module3.nodeType && module3;
            var moduleExports = freeModule && freeModule.exports === freeExports;
            var Buffer$1 = moduleExports ? root.Buffer : void 0;
            var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;
            var isBuffer = nativeIsBuffer || stubFalse;
            var MAX_SAFE_INTEGER$1 = 9007199254740991;
            var reIsUint = /^(?:0|[1-9]\d*)$/;
            function isIndex(value, length) {
              length = length == null ? MAX_SAFE_INTEGER$1 : length;
              return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
            }
            var argsTag$1 = "[object Arguments]";
            var arrayTag = "[object Array]";
            var boolTag = "[object Boolean]";
            var dateTag = "[object Date]";
            var errorTag = "[object Error]";
            var funcTag$1 = "[object Function]";
            var mapTag = "[object Map]";
            var numberTag = "[object Number]";
            var objectTag = "[object Object]";
            var regexpTag = "[object RegExp]";
            var setTag = "[object Set]";
            var stringTag = "[object String]";
            var weakMapTag = "[object WeakMap]";
            var arrayBufferTag = "[object ArrayBuffer]";
            var dataViewTag = "[object DataView]";
            var float32Tag = "[object Float32Array]";
            var float64Tag = "[object Float64Array]";
            var int8Tag = "[object Int8Array]";
            var int16Tag = "[object Int16Array]";
            var int32Tag = "[object Int32Array]";
            var uint8Tag = "[object Uint8Array]";
            var uint8ClampedTag = "[object Uint8ClampedArray]";
            var uint16Tag = "[object Uint16Array]";
            var uint32Tag = "[object Uint32Array]";
            var typedArrayTags = {};
            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
            typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
            function baseIsTypedArray(value) {
              return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
            }
            function baseUnary(func) {
              return function(value) {
                return func(value);
              };
            }
            var freeExports$1 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
            var freeModule$1 = freeExports$1 && typeof module3 == "object" && module3 && !module3.nodeType && module3;
            var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
            var freeProcess = moduleExports$1 && freeGlobal.process;
            var nodeUtil = function() {
              try {
                return freeProcess && freeProcess.binding && freeProcess.binding("util");
              } catch (e) {
              }
            }();
            var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
            var objectProto$2 = Object.prototype;
            var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
            function arrayLikeKeys(value, inherited) {
              var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
              for (var key in value) {
                if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
                  result.push(key);
                }
              }
              return result;
            }
            var objectProto$5 = Object.prototype;
            function isPrototype(value) {
              var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$5;
              return value === proto;
            }
            function overArg(func, transform) {
              return function(arg) {
                return func(transform(arg));
              };
            }
            var nativeKeys = overArg(Object.keys, Object);
            var objectProto$4 = Object.prototype;
            var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
            function baseKeys(object) {
              if (!isPrototype(object)) {
                return nativeKeys(object);
              }
              var result = [];
              for (var key in Object(object)) {
                if (hasOwnProperty$3.call(object, key) && key != "constructor") {
                  result.push(key);
                }
              }
              return result;
            }
            function keys(object) {
              return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
            }
            function createArrayIterator(coll) {
              var i2 = -1;
              var len = coll.length;
              return function next() {
                return ++i2 < len ? { value: coll[i2], key: i2 } : null;
              };
            }
            function createES2015Iterator(iterator2) {
              var i2 = -1;
              return function next() {
                var item = iterator2.next();
                if (item.done) {
                  return null;
                }
                i2++;
                return { value: item.value, key: i2 };
              };
            }
            function createObjectIterator(obj) {
              var okeys = keys(obj);
              var i2 = -1;
              var len = okeys.length;
              return function next() {
                var key = okeys[++i2];
                return i2 < len ? { value: obj[key], key } : null;
              };
            }
            function iterator(coll) {
              if (isArrayLike(coll)) {
                return createArrayIterator(coll);
              }
              var iterator2 = getIterator(coll);
              return iterator2 ? createES2015Iterator(iterator2) : createObjectIterator(coll);
            }
            function onlyOnce(fn) {
              return function() {
                if (fn === null) {
                  throw new Error("Callback was already called.");
                }
                var callFn = fn;
                fn = null;
                callFn.apply(this, arguments);
              };
            }
            function _eachOfLimit(limit) {
              return function(obj, iteratee, callback) {
                callback = once(callback || noop2);
                if (limit <= 0 || !obj) {
                  return callback(null);
                }
                var nextElem = iterator(obj);
                var done = false;
                var running = 0;
                function iterateeCallback(err, value) {
                  running -= 1;
                  if (err) {
                    done = true;
                    callback(err);
                  } else if (value === breakLoop || done && running <= 0) {
                    done = true;
                    return callback(null);
                  } else {
                    replenish();
                  }
                }
                function replenish() {
                  while (running < limit && !done) {
                    var elem = nextElem();
                    if (elem === null) {
                      done = true;
                      if (running <= 0) {
                        callback(null);
                      }
                      return;
                    }
                    running += 1;
                    iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
                  }
                }
                replenish();
              };
            }
            function eachOfLimit(coll, limit, iteratee, callback) {
              _eachOfLimit(limit)(coll, iteratee, callback);
            }
            function doLimit(fn, limit) {
              return function(iterable, iteratee, callback) {
                return fn(iterable, limit, iteratee, callback);
              };
            }
            function eachOfArrayLike(coll, iteratee, callback) {
              callback = once(callback || noop2);
              var index = 0, completed = 0, length = coll.length;
              if (length === 0) {
                callback(null);
              }
              function iteratorCallback(err, value) {
                if (err) {
                  callback(err);
                } else if (++completed === length || value === breakLoop) {
                  callback(null);
                }
              }
              for (; index < length; index++) {
                iteratee(coll[index], index, onlyOnce(iteratorCallback));
              }
            }
            var eachOfGeneric = doLimit(eachOfLimit, Infinity);
            var eachOf = function(coll, iteratee, callback) {
              var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
              eachOfImplementation(coll, iteratee, callback);
            };
            function doParallel(fn) {
              return function(obj, iteratee, callback) {
                return fn(eachOf, obj, iteratee, callback);
              };
            }
            function _asyncMap(eachfn, arr, iteratee, callback) {
              callback = callback || noop2;
              arr = arr || [];
              var results = [];
              var counter = 0;
              eachfn(arr, function(value, _2, callback2) {
                var index = counter++;
                iteratee(value, function(err, v) {
                  results[index] = v;
                  callback2(err);
                });
              }, function(err) {
                callback(err, results);
              });
            }
            var map = doParallel(_asyncMap);
            applyEach$1(map);
            function doParallelLimit(fn) {
              return function(obj, limit, iteratee, callback) {
                return fn(_eachOfLimit(limit), obj, iteratee, callback);
              };
            }
            var mapLimit = doParallelLimit(_asyncMap);
            var mapSeries = doLimit(mapLimit, 1);
            applyEach$1(mapSeries);
            rest(function(fn, args) {
              return rest(function(callArgs) {
                return fn.apply(null, args.concat(callArgs));
              });
            });
            function arrayEach(array, iteratee) {
              var index = -1, length = array == null ? 0 : array.length;
              while (++index < length) {
                if (iteratee(array[index], index, array) === false) {
                  break;
                }
              }
              return array;
            }
            function createBaseFor(fromRight) {
              return function(object, iteratee, keysFunc) {
                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                while (length--) {
                  var key = props[fromRight ? length : ++index];
                  if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                  }
                }
                return object;
              };
            }
            var baseFor = createBaseFor();
            function baseForOwn(object, iteratee) {
              return object && baseFor(object, iteratee, keys);
            }
            function baseFindIndex(array, predicate, fromIndex, fromRight) {
              var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
              while (fromRight ? index-- : ++index < length) {
                if (predicate(array[index], index, array)) {
                  return index;
                }
              }
              return -1;
            }
            function baseIsNaN(value) {
              return value !== value;
            }
            function strictIndexOf(array, value, fromIndex) {
              var index = fromIndex - 1, length = array.length;
              while (++index < length) {
                if (array[index] === value) {
                  return index;
                }
              }
              return -1;
            }
            function baseIndexOf(array, value, fromIndex) {
              return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
            }
            var rsAstralRange$1 = "\\ud800-\\udfff";
            var rsComboMarksRange$1 = "\\u0300-\\u036f";
            var reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f";
            var rsComboSymbolsRange$1 = "\\u20d0-\\u20ff";
            var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
            var rsVarRange$1 = "\\ufe0e\\ufe0f";
            var rsAstral = "[" + rsAstralRange$1 + "]";
            var rsCombo = "[" + rsComboRange$1 + "]";
            var rsFitz = "\\ud83c[\\udffb-\\udfff]";
            var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
            var rsNonAstral = "[^" + rsAstralRange$1 + "]";
            var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
            var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
            var rsZWJ$1 = "\\u200d";
            var reOptMod = rsModifier + "?";
            var rsOptVar = "[" + rsVarRange$1 + "]?";
            var rsOptJoin = "(?:" + rsZWJ$1 + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
            var rsSeq = rsOptVar + reOptMod + rsOptJoin;
            var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
            var hasSetImmediate = typeof setImmediate === "function" && setImmediate;
            var hasNextTick = typeof process2 === "object" && typeof process2.nextTick === "function";
            function fallback(fn) {
              setTimeout(fn, 0);
            }
            function wrap(defer) {
              return rest(function(fn, args) {
                defer(function() {
                  fn.apply(null, args);
                });
              });
            }
            var _defer;
            if (hasSetImmediate) {
              _defer = setImmediate;
            } else if (hasNextTick) {
              _defer = process2.nextTick;
            } else {
              _defer = fallback;
            }
            wrap(_defer);
            var eachOfSeries = doLimit(eachOfLimit, 1);
            function reduce(coll, memo, iteratee, callback) {
              callback = once(callback || noop2);
              eachOfSeries(coll, function(x, i2, callback2) {
                iteratee(memo, x, function(err, v) {
                  memo = v;
                  callback2(err);
                });
              }, function(err) {
                callback(err, memo);
              });
            }
            var seq = rest(function seq2(functions) {
              return rest(function(args) {
                var that = this;
                var cb = args[args.length - 1];
                if (typeof cb == "function") {
                  args.pop();
                } else {
                  cb = noop2;
                }
                reduce(functions, args, function(newargs, fn, cb2) {
                  fn.apply(that, newargs.concat(rest(function(err, nextargs) {
                    cb2(err, nextargs);
                  })));
                }, function(err, results) {
                  cb.apply(that, [err].concat(results));
                });
              });
            });
            rest(function(args) {
              return seq.apply(null, args.reverse());
            });
            rest(function(values) {
              var args = [null].concat(values);
              return initialParams(function(ignoredArgs, callback) {
                return callback.apply(this, args);
              });
            });
            function consoleFunc(name2) {
              return rest(function(fn, args) {
                fn.apply(null, args.concat(rest(function(err, args2) {
                  if (typeof console === "object") {
                    if (err) {
                      if (console.error) {
                        console.error(err);
                      }
                    } else if (console[name2]) {
                      arrayEach(args2, function(x) {
                        console[name2](x);
                      });
                    }
                  }
                })));
              });
            }
            consoleFunc("dir");
            function _withoutIndex(iteratee) {
              return function(value, index, callback) {
                return iteratee(value, callback);
              };
            }
            function eachLimit(coll, iteratee, callback) {
              eachOf(coll, _withoutIndex(iteratee), callback);
            }
            consoleFunc("log");
            var _defer$1;
            if (hasNextTick) {
              _defer$1 = process2.nextTick;
            } else if (hasSetImmediate) {
              _defer$1 = setImmediate;
            } else {
              _defer$1 = fallback;
            }
            wrap(_defer$1);
            var nativeCeil = Math.ceil;
            var nativeMax$1 = Math.max;
            var errorCodeLookup;
            function constructErrorCodeLookup() {
              if (errorCodeLookup) {
                return;
              }
              errorCodeLookup = {};
              errorCodeLookup[Dropbox.ApiError.NETWORK_ERROR] = ErrorCode.EIO;
              errorCodeLookup[Dropbox.ApiError.INVALID_PARAM] = ErrorCode.EINVAL;
              errorCodeLookup[Dropbox.ApiError.INVALID_TOKEN] = ErrorCode.EPERM;
              errorCodeLookup[Dropbox.ApiError.OAUTH_ERROR] = ErrorCode.EPERM;
              errorCodeLookup[Dropbox.ApiError.NOT_FOUND] = ErrorCode.ENOENT;
              errorCodeLookup[Dropbox.ApiError.INVALID_METHOD] = ErrorCode.EINVAL;
              errorCodeLookup[Dropbox.ApiError.NOT_ACCEPTABLE] = ErrorCode.EINVAL;
              errorCodeLookup[Dropbox.ApiError.CONFLICT] = ErrorCode.EINVAL;
              errorCodeLookup[Dropbox.ApiError.RATE_LIMITED] = ErrorCode.EBUSY;
              errorCodeLookup[Dropbox.ApiError.SERVER_ERROR] = ErrorCode.EBUSY;
              errorCodeLookup[Dropbox.ApiError.OVER_QUOTA] = ErrorCode.ENOSPC;
            }
            function isFileInfo(cache2) {
              return cache2 && cache2.stat.isFile;
            }
            function isDirInfo(cache2) {
              return cache2 && cache2.stat.isFolder;
            }
            function isArrayBuffer(ab) {
              return ab === null || ab === void 0 || typeof ab === "object" && typeof ab["byteLength"] === "number";
            }
            var CachedDropboxClient = function CachedDropboxClient2(client) {
              this._cache = {};
              this._client = client;
            };
            CachedDropboxClient.prototype.readdir = function readdir(p, cb) {
              var this$1 = this;
              var cacheInfo = this.getCachedDirInfo(p);
              this._wrap(function(interceptCb) {
                if (cacheInfo !== null && cacheInfo.contents) {
                  this$1._client.readdir(p, {
                    contentHash: cacheInfo.stat.contentHash
                  }, interceptCb);
                } else {
                  this$1._client.readdir(p, interceptCb);
                }
              }, function(err, filenames, stat, folderEntries) {
                if (err) {
                  if (err.status === Dropbox.ApiError.NO_CONTENT && cacheInfo !== null) {
                    cb(null, cacheInfo.contents.slice(0));
                  } else {
                    cb(err);
                  }
                } else {
                  this$1.updateCachedDirInfo(p, stat, filenames.slice(0));
                  folderEntries.forEach(function(entry) {
                    this$1.updateCachedInfo(path2.join(p, entry.name), entry);
                  });
                  cb(null, filenames);
                }
              });
            };
            CachedDropboxClient.prototype.remove = function remove2(p, cb) {
              var this$1 = this;
              this._wrap(function(interceptCb) {
                this$1._client.remove(p, interceptCb);
              }, function(err, stat) {
                if (!err) {
                  this$1.updateCachedInfo(p, stat);
                }
                cb(err);
              });
            };
            CachedDropboxClient.prototype.move = function move(src, dest, cb) {
              var this$1 = this;
              this._wrap(function(interceptCb) {
                this$1._client.move(src, dest, interceptCb);
              }, function(err, stat) {
                if (!err) {
                  this$1.deleteCachedInfo(src);
                  this$1.updateCachedInfo(dest, stat);
                }
                cb(err);
              });
            };
            CachedDropboxClient.prototype.stat = function stat(p, cb) {
              var this$1 = this;
              this._wrap(function(interceptCb) {
                this$1._client.stat(p, interceptCb);
              }, function(err, stat2) {
                if (!err) {
                  this$1.updateCachedInfo(p, stat2);
                }
                cb(err, stat2);
              });
            };
            CachedDropboxClient.prototype.readFile = function readFile(p, cb) {
              var this$1 = this;
              var cacheInfo = this.getCachedFileInfo(p);
              if (cacheInfo !== null && cacheInfo.contents !== null) {
                this.stat(p, function(error, stat) {
                  if (error) {
                    cb(error);
                  } else if (stat.contentHash === cacheInfo.stat.contentHash) {
                    cb(error, cacheInfo.contents.slice(0), cacheInfo.stat);
                  } else {
                    this$1.readFile(p, cb);
                  }
                });
              } else {
                this._wrap(function(interceptCb) {
                  this$1._client.readFile(p, { arrayBuffer: true }, interceptCb);
                }, function(err, contents, stat) {
                  if (!err) {
                    this$1.updateCachedInfo(p, stat, contents.slice(0));
                  }
                  cb(err, contents, stat);
                });
              }
            };
            CachedDropboxClient.prototype.writeFile = function writeFile2(p, contents, cb) {
              var this$1 = this;
              this._wrap(function(interceptCb) {
                this$1._client.writeFile(p, contents, interceptCb);
              }, function(err, stat) {
                if (!err) {
                  this$1.updateCachedInfo(p, stat, contents.slice(0));
                }
                cb(err, stat);
              });
            };
            CachedDropboxClient.prototype.mkdir = function mkdir(p, cb) {
              var this$1 = this;
              this._wrap(function(interceptCb) {
                this$1._client.mkdir(p, interceptCb);
              }, function(err, stat) {
                if (!err) {
                  this$1.updateCachedInfo(p, stat, []);
                }
                cb(err);
              });
            };
            CachedDropboxClient.prototype._wrap = function _wrap(performOp, cb) {
              var numRun = 0;
              var interceptCb = function(error) {
                var timeoutDuration = 2;
                if (error && 3 > ++numRun) {
                  switch (error.status) {
                    case Dropbox.ApiError.SERVER_ERROR:
                    case Dropbox.ApiError.NETWORK_ERROR:
                    case Dropbox.ApiError.RATE_LIMITED:
                      setTimeout(function() {
                        performOp(interceptCb);
                      }, timeoutDuration * 1e3);
                      break;
                    default:
                      cb.apply(null, arguments);
                      break;
                  }
                } else {
                  cb.apply(null, arguments);
                }
              };
              performOp(interceptCb);
            };
            CachedDropboxClient.prototype.getCachedInfo = function getCachedInfo(p) {
              return this._cache[p.toLowerCase()];
            };
            CachedDropboxClient.prototype.putCachedInfo = function putCachedInfo(p, cache2) {
              this._cache[p.toLowerCase()] = cache2;
            };
            CachedDropboxClient.prototype.deleteCachedInfo = function deleteCachedInfo(p) {
              delete this._cache[p.toLowerCase()];
            };
            CachedDropboxClient.prototype.getCachedDirInfo = function getCachedDirInfo(p) {
              var info = this.getCachedInfo(p);
              if (isDirInfo(info)) {
                return info;
              } else {
                return null;
              }
            };
            CachedDropboxClient.prototype.getCachedFileInfo = function getCachedFileInfo(p) {
              var info = this.getCachedInfo(p);
              if (isFileInfo(info)) {
                return info;
              } else {
                return null;
              }
            };
            CachedDropboxClient.prototype.updateCachedDirInfo = function updateCachedDirInfo(p, stat, contents) {
              if (contents === void 0)
                contents = null;
              var cachedInfo = this.getCachedInfo(p);
              if (stat.contentHash !== null && (cachedInfo === void 0 || cachedInfo.stat.contentHash !== stat.contentHash)) {
                this.putCachedInfo(p, {
                  stat,
                  contents
                });
              }
            };
            CachedDropboxClient.prototype.updateCachedFileInfo = function updateCachedFileInfo(p, stat, contents) {
              if (contents === void 0)
                contents = null;
              var cachedInfo = this.getCachedInfo(p);
              if (stat.versionTag !== null && (cachedInfo === void 0 || cachedInfo.stat.versionTag !== stat.versionTag)) {
                this.putCachedInfo(p, {
                  stat,
                  contents
                });
              }
            };
            CachedDropboxClient.prototype.updateCachedInfo = function updateCachedInfo(p, stat, contents) {
              if (contents === void 0)
                contents = null;
              if (stat.isFile && isArrayBuffer(contents)) {
                this.updateCachedFileInfo(p, stat, contents);
              } else if (stat.isFolder && Array.isArray(contents)) {
                this.updateCachedDirInfo(p, stat, contents);
              }
            };
            var DropboxFile = function(PreloadFile$$1) {
              function DropboxFile2(_fs, _path, _flag, _stat, contents) {
                PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
              }
              if (PreloadFile$$1)
                DropboxFile2.__proto__ = PreloadFile$$1;
              DropboxFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
              DropboxFile2.prototype.constructor = DropboxFile2;
              DropboxFile2.prototype.sync = function sync(cb) {
                var this$1 = this;
                if (this.isDirty()) {
                  var buffer$$1 = this.getBuffer(), arrayBuffer = buffer2ArrayBuffer(buffer$$1);
                  this._fs._writeFileStrict(this.getPath(), arrayBuffer, function(e) {
                    if (!e) {
                      this$1.resetDirty();
                    }
                    cb(e);
                  });
                } else {
                  cb();
                }
              };
              DropboxFile2.prototype.close = function close(cb) {
                this.sync(cb);
              };
              return DropboxFile2;
            }(PreloadFile);
            var DropboxFileSystem = function(BaseFileSystem$$1) {
              function DropboxFileSystem2(client, deprecateMsg) {
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                BaseFileSystem$$1.call(this);
                this._client = new CachedDropboxClient(client);
                deprecationMessage(deprecateMsg, DropboxFileSystem2.Name, { client: "authenticated dropbox client instance" });
                constructErrorCodeLookup();
              }
              if (BaseFileSystem$$1)
                DropboxFileSystem2.__proto__ = BaseFileSystem$$1;
              DropboxFileSystem2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
              DropboxFileSystem2.prototype.constructor = DropboxFileSystem2;
              DropboxFileSystem2.Create = function Create(opts, cb) {
                cb(null, new DropboxFileSystem2(opts.client, false));
              };
              DropboxFileSystem2.isAvailable = function isAvailable() {
                return typeof Dropbox !== "undefined";
              };
              DropboxFileSystem2.prototype.getName = function getName() {
                return DropboxFileSystem2.Name;
              };
              DropboxFileSystem2.prototype.isReadOnly = function isReadOnly() {
                return false;
              };
              DropboxFileSystem2.prototype.supportsSymlinks = function supportsSymlinks() {
                return false;
              };
              DropboxFileSystem2.prototype.supportsProps = function supportsProps() {
                return false;
              };
              DropboxFileSystem2.prototype.supportsSynch = function supportsSynch() {
                return false;
              };
              DropboxFileSystem2.prototype.empty = function empty(mainCb) {
                var this$1 = this;
                this._client.readdir("/", function(error, files) {
                  if (error) {
                    mainCb(this$1.convert(error, "/"));
                  } else {
                    var deleteFile2 = function(file, cb) {
                      var p = path2.join("/", file);
                      this$1._client.remove(p, function(err) {
                        cb(err ? this$1.convert(err, p) : null);
                      });
                    };
                    var finished = function(err) {
                      if (err) {
                        mainCb(err);
                      } else {
                        mainCb();
                      }
                    };
                    eachLimit(files, deleteFile2, finished);
                  }
                });
              };
              DropboxFileSystem2.prototype.rename = function rename(oldPath, newPath, cb) {
                var this$1 = this;
                this._client.move(oldPath, newPath, function(error) {
                  if (error) {
                    this$1._client.stat(newPath, function(error2, stat) {
                      if (error2 || stat.isFolder) {
                        var missingPath = error.response.error.indexOf(oldPath) > -1 ? oldPath : newPath;
                        cb(this$1.convert(error, missingPath));
                      } else {
                        this$1._client.remove(newPath, function(error22) {
                          if (error22) {
                            cb(this$1.convert(error22, newPath));
                          } else {
                            this$1.rename(oldPath, newPath, cb);
                          }
                        });
                      }
                    });
                  } else {
                    cb();
                  }
                });
              };
              DropboxFileSystem2.prototype.stat = function stat(path$$1, isLstat, cb) {
                var this$1 = this;
                this._client.stat(path$$1, function(error, stat2) {
                  if (error) {
                    cb(this$1.convert(error, path$$1));
                  } else if (stat2 && stat2.isRemoved) {
                    cb(ApiError.FileError(ErrorCode.ENOENT, path$$1));
                  } else {
                    var stats = new Stats(this$1._statType(stat2), stat2.size);
                    return cb(null, stats);
                  }
                });
              };
              DropboxFileSystem2.prototype.open = function open(path$$1, flags, mode, cb) {
                var this$1 = this;
                this._client.readFile(path$$1, function(error, content, dbStat) {
                  if (error) {
                    if (flags.isReadable()) {
                      cb(this$1.convert(error, path$$1));
                    } else {
                      switch (error.status) {
                        case Dropbox.ApiError.NOT_FOUND:
                          var ab = new ArrayBuffer(0);
                          return this$1._writeFileStrict(path$$1, ab, function(error2, stat) {
                            if (error2) {
                              cb(error2);
                            } else {
                              var file2 = this$1._makeFile(path$$1, flags, stat, arrayBuffer2Buffer(ab));
                              cb(null, file2);
                            }
                          });
                        default:
                          return cb(this$1.convert(error, path$$1));
                      }
                    }
                  } else {
                    var buffer$$1;
                    if (content === null) {
                      buffer$$1 = emptyBuffer();
                    } else {
                      buffer$$1 = arrayBuffer2Buffer(content);
                    }
                    var file = this$1._makeFile(path$$1, flags, dbStat, buffer$$1);
                    return cb(null, file);
                  }
                });
              };
              DropboxFileSystem2.prototype._writeFileStrict = function _writeFileStrict(p, data, cb) {
                var this$1 = this;
                var parent = path2.dirname(p);
                this.stat(parent, false, function(error, stat) {
                  if (error) {
                    cb(ApiError.FileError(ErrorCode.ENOENT, parent));
                  } else {
                    this$1._client.writeFile(p, data, function(error2, stat2) {
                      if (error2) {
                        cb(this$1.convert(error2, p));
                      } else {
                        cb(null, stat2);
                      }
                    });
                  }
                });
              };
              DropboxFileSystem2.prototype._statType = function _statType(stat) {
                return stat.isFile ? FileType.FILE : FileType.DIRECTORY;
              };
              DropboxFileSystem2.prototype._makeFile = function _makeFile(path$$1, flag, stat, buffer$$1) {
                var type = this._statType(stat);
                var stats = new Stats(type, stat.size);
                return new DropboxFile(this, path$$1, flag, stats, buffer$$1);
              };
              DropboxFileSystem2.prototype._remove = function _remove(path$$1, cb, isFile) {
                var this$1 = this;
                this._client.stat(path$$1, function(error, stat) {
                  if (error) {
                    cb(this$1.convert(error, path$$1));
                  } else {
                    if (stat.isFile && !isFile) {
                      cb(ApiError.FileError(ErrorCode.ENOTDIR, path$$1));
                    } else if (!stat.isFile && isFile) {
                      cb(ApiError.FileError(ErrorCode.EISDIR, path$$1));
                    } else {
                      this$1._client.remove(path$$1, function(error2) {
                        if (error2) {
                          cb(this$1.convert(error2, path$$1));
                        } else {
                          cb(null);
                        }
                      });
                    }
                  }
                });
              };
              DropboxFileSystem2.prototype.unlink = function unlink(path$$1, cb) {
                this._remove(path$$1, cb, true);
              };
              DropboxFileSystem2.prototype.rmdir = function rmdir(path$$1, cb) {
                this._remove(path$$1, cb, false);
              };
              DropboxFileSystem2.prototype.mkdir = function mkdir(p, mode, cb) {
                var this$1 = this;
                var parent = path2.dirname(p);
                this._client.stat(parent, function(error, stat) {
                  if (error) {
                    cb(this$1.convert(error, parent));
                  } else {
                    this$1._client.mkdir(p, function(error2) {
                      if (error2) {
                        cb(ApiError.FileError(ErrorCode.EEXIST, p));
                      } else {
                        cb(null);
                      }
                    });
                  }
                });
              };
              DropboxFileSystem2.prototype.readdir = function readdir(path$$1, cb) {
                var this$1 = this;
                this._client.readdir(path$$1, function(error, files) {
                  if (error) {
                    return cb(this$1.convert(error));
                  } else {
                    return cb(null, files);
                  }
                });
              };
              DropboxFileSystem2.prototype.convert = function convert(err, path$$1) {
                if (path$$1 === void 0)
                  path$$1 = null;
                var errorCode = errorCodeLookup[err.status];
                if (errorCode === void 0) {
                  errorCode = ErrorCode.EIO;
                }
                if (!path$$1) {
                  return new ApiError(errorCode);
                } else {
                  return ApiError.FileError(errorCode, path$$1);
                }
              };
              return DropboxFileSystem2;
            }(BaseFileSystem);
            DropboxFileSystem.Name = "Dropbox";
            DropboxFileSystem.Options = {
              client: {
                type: "object",
                description: "An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",
                validator: function(opt, cb) {
                  if (opt.isAuthenticated && opt.isAuthenticated()) {
                    cb();
                  } else {
                    cb(new ApiError(ErrorCode.EINVAL, "'client' option must be an authenticated Dropbox client from the v0.10 JS SDK."));
                  }
                }
              }
            };
            function convertError(e, path$$1) {
              if (path$$1 === void 0)
                path$$1 = "";
              var errno = e.errno;
              var parent = e.node;
              var paths = [];
              while (parent) {
                paths.unshift(parent.name);
                if (parent === parent.parent) {
                  break;
                }
                parent = parent.parent;
              }
              return new ApiError(errno, ErrorStrings[errno], paths.length > 0 ? "/" + paths.join("/") : path$$1);
            }
            var EmscriptenFile = function(BaseFile$$1) {
              function EmscriptenFile2(_fs, _FS, _path, _stream) {
                BaseFile$$1.call(this);
                this._fs = _fs;
                this._FS = _FS;
                this._path = _path;
                this._stream = _stream;
              }
              if (BaseFile$$1)
                EmscriptenFile2.__proto__ = BaseFile$$1;
              EmscriptenFile2.prototype = Object.create(BaseFile$$1 && BaseFile$$1.prototype);
              EmscriptenFile2.prototype.constructor = EmscriptenFile2;
              EmscriptenFile2.prototype.getPos = function getPos() {
                return void 0;
              };
              EmscriptenFile2.prototype.close = function close(cb) {
                var err = null;
                try {
                  this.closeSync();
                } catch (e) {
                  err = e;
                } finally {
                  cb(err);
                }
              };
              EmscriptenFile2.prototype.closeSync = function closeSync() {
                try {
                  this._FS.close(this._stream);
                } catch (e) {
                  throw convertError(e, this._path);
                }
              };
              EmscriptenFile2.prototype.stat = function stat(cb) {
                try {
                  cb(null, this.statSync());
                } catch (e) {
                  cb(e);
                }
              };
              EmscriptenFile2.prototype.statSync = function statSync() {
                try {
                  return this._fs.statSync(this._path, false);
                } catch (e) {
                  throw convertError(e, this._path);
                }
              };
              EmscriptenFile2.prototype.truncate = function truncate(len, cb) {
                var err = null;
                try {
                  this.truncateSync(len);
                } catch (e) {
                  err = e;
                } finally {
                  cb(err);
                }
              };
              EmscriptenFile2.prototype.truncateSync = function truncateSync(len) {
                try {
                  this._FS.ftruncate(this._stream.fd, len);
                } catch (e) {
                  throw convertError(e, this._path);
                }
              };
              EmscriptenFile2.prototype.write = function write(buffer$$1, offset, length, position, cb) {
                try {
                  cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
                } catch (e) {
                  cb(e);
                }
              };
              EmscriptenFile2.prototype.writeSync = function writeSync(buffer$$1, offset, length, position) {
                try {
                  var u8 = buffer2Uint8array(buffer$$1);
                  var emPosition = position === null ? void 0 : position;
                  return this._FS.write(this._stream, u8, offset, length, emPosition);
                } catch (e) {
                  throw convertError(e, this._path);
                }
              };
              EmscriptenFile2.prototype.read = function read(buffer$$1, offset, length, position, cb) {
                try {
                  cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
                } catch (e) {
                  cb(e);
                }
              };
              EmscriptenFile2.prototype.readSync = function readSync(buffer$$1, offset, length, position) {
                try {
                  var u8 = buffer2Uint8array(buffer$$1);
                  var emPosition = position === null ? void 0 : position;
                  return this._FS.read(this._stream, u8, offset, length, emPosition);
                } catch (e) {
                  throw convertError(e, this._path);
                }
              };
              EmscriptenFile2.prototype.sync = function sync(cb) {
                cb();
              };
              EmscriptenFile2.prototype.syncSync = function syncSync() {
              };
              EmscriptenFile2.prototype.chown = function chown(uid, gid, cb) {
                var err = null;
                try {
                  this.chownSync(uid, gid);
                } catch (e) {
                  err = e;
                } finally {
                  cb(err);
                }
              };
              EmscriptenFile2.prototype.chownSync = function chownSync(uid, gid) {
                try {
                  this._FS.fchown(this._stream.fd, uid, gid);
                } catch (e) {
                  throw convertError(e, this._path);
                }
              };
              EmscriptenFile2.prototype.chmod = function chmod(mode, cb) {
                var err = null;
                try {
                  this.chmodSync(mode);
                } catch (e) {
                  err = e;
                } finally {
                  cb(err);
                }
              };
              EmscriptenFile2.prototype.chmodSync = function chmodSync(mode) {
                try {
                  this._FS.fchmod(this._stream.fd, mode);
                } catch (e) {
                  throw convertError(e, this._path);
                }
              };
              EmscriptenFile2.prototype.utimes = function utimes(atime, mtime, cb) {
                var err = null;
                try {
                  this.utimesSync(atime, mtime);
                } catch (e) {
                  err = e;
                } finally {
                  cb(err);
                }
              };
              EmscriptenFile2.prototype.utimesSync = function utimesSync(atime, mtime) {
                this._fs.utimesSync(this._path, atime, mtime);
              };
              return EmscriptenFile2;
            }(BaseFile);
            var EmscriptenFileSystem = function(SynchronousFileSystem$$1) {
              function EmscriptenFileSystem2(_FS) {
                SynchronousFileSystem$$1.call(this);
                this._FS = _FS;
              }
              if (SynchronousFileSystem$$1)
                EmscriptenFileSystem2.__proto__ = SynchronousFileSystem$$1;
              EmscriptenFileSystem2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
              EmscriptenFileSystem2.prototype.constructor = EmscriptenFileSystem2;
              EmscriptenFileSystem2.Create = function Create(opts, cb) {
                cb(null, new EmscriptenFileSystem2(opts.FS));
              };
              EmscriptenFileSystem2.isAvailable = function isAvailable() {
                return true;
              };
              EmscriptenFileSystem2.prototype.getName = function getName() {
                return this._FS.DB_NAME();
              };
              EmscriptenFileSystem2.prototype.isReadOnly = function isReadOnly() {
                return false;
              };
              EmscriptenFileSystem2.prototype.supportsLinks = function supportsLinks() {
                return true;
              };
              EmscriptenFileSystem2.prototype.supportsProps = function supportsProps() {
                return true;
              };
              EmscriptenFileSystem2.prototype.supportsSynch = function supportsSynch() {
                return true;
              };
              EmscriptenFileSystem2.prototype.renameSync = function renameSync(oldPath, newPath) {
                try {
                  this._FS.rename(oldPath, newPath);
                } catch (e) {
                  if (e.errno === ErrorCode.ENOENT) {
                    throw convertError(e, this.existsSync(oldPath) ? newPath : oldPath);
                  } else {
                    throw convertError(e);
                  }
                }
              };
              EmscriptenFileSystem2.prototype.statSync = function statSync(p, isLstat) {
                try {
                  var stats = isLstat ? this._FS.lstat(p) : this._FS.stat(p);
                  var itemType = this.modeToFileType(stats.mode);
                  return new Stats(itemType, stats.size, stats.mode, stats.atime, stats.mtime, stats.ctime);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.openSync = function openSync(p, flag, mode) {
                try {
                  var stream = this._FS.open(p, flag.getFlagString(), mode);
                  if (this._FS.isDir(stream.node.mode)) {
                    this._FS.close(stream);
                    throw ApiError.EISDIR(p);
                  }
                  return new EmscriptenFile(this, this._FS, p, stream);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.unlinkSync = function unlinkSync(p) {
                try {
                  this._FS.unlink(p);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.rmdirSync = function rmdirSync(p) {
                try {
                  this._FS.rmdir(p);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.mkdirSync = function mkdirSync(p, mode) {
                try {
                  this._FS.mkdir(p, mode);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.readdirSync = function readdirSync(p) {
                try {
                  return this._FS.readdir(p).filter(function(p2) {
                    return p2 !== "." && p2 !== "..";
                  });
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.truncateSync = function truncateSync(p, len) {
                try {
                  this._FS.truncate(p, len);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.readFileSync = function readFileSync(p, encoding, flag) {
                try {
                  var data = this._FS.readFile(p, { flags: flag.getFlagString() });
                  var buff = uint8Array2Buffer(data);
                  if (encoding) {
                    return buff.toString(encoding);
                  } else {
                    return buff;
                  }
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.writeFileSync = function writeFileSync(p, data, encoding, flag, mode) {
                try {
                  if (encoding) {
                    data = Buffer2.from(data, encoding);
                  }
                  var u8 = buffer2Uint8array(data);
                  this._FS.writeFile(p, u8, { flags: flag.getFlagString(), encoding: "binary" });
                  this._FS.chmod(p, mode);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
                try {
                  isLchmod ? this._FS.lchmod(p, mode) : this._FS.chmod(p, mode);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
                try {
                  isLchown ? this._FS.lchown(p, uid, gid) : this._FS.chown(p, uid, gid);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
                try {
                  this._FS.symlink(srcpath, dstpath);
                } catch (e) {
                  throw convertError(e);
                }
              };
              EmscriptenFileSystem2.prototype.readlinkSync = function readlinkSync(p) {
                try {
                  return this._FS.readlink(p);
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.utimesSync = function utimesSync(p, atime, mtime) {
                try {
                  this._FS.utime(p, atime.getTime(), mtime.getTime());
                } catch (e) {
                  throw convertError(e, p);
                }
              };
              EmscriptenFileSystem2.prototype.modeToFileType = function modeToFileType(mode) {
                if (this._FS.isDir(mode)) {
                  return FileType.DIRECTORY;
                } else if (this._FS.isFile(mode)) {
                  return FileType.FILE;
                } else if (this._FS.isLink(mode)) {
                  return FileType.SYMLINK;
                } else {
                  throw ApiError.EPERM("Invalid mode: " + mode);
                }
              };
              return EmscriptenFileSystem2;
            }(SynchronousFileSystem);
            EmscriptenFileSystem.Name = "EmscriptenFileSystem";
            EmscriptenFileSystem.Options = {
              FS: {
                type: "object",
                description: "The Emscripten file system to use (the `FS` variable)"
              }
            };
            var FolderAdapter = function(BaseFileSystem$$1) {
              function FolderAdapter2(folder, wrapped) {
                BaseFileSystem$$1.call(this);
                this._folder = folder;
                this._wrapped = wrapped;
              }
              if (BaseFileSystem$$1)
                FolderAdapter2.__proto__ = BaseFileSystem$$1;
              FolderAdapter2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
              FolderAdapter2.prototype.constructor = FolderAdapter2;
              FolderAdapter2.Create = function Create(opts, cb) {
                cb(null, new FolderAdapter2(opts.folder, opts.wrapped));
              };
              FolderAdapter2.isAvailable = function isAvailable() {
                return true;
              };
              FolderAdapter2.prototype.initialize = function initialize3(cb) {
                var this$1 = this;
                this._wrapped.exists(this._folder, function(exists2) {
                  if (exists2) {
                    cb();
                  } else if (this$1._wrapped.isReadOnly()) {
                    cb(ApiError.ENOENT(this$1._folder));
                  } else {
                    this$1._wrapped.mkdir(this$1._folder, 511, cb);
                  }
                });
              };
              FolderAdapter2.prototype.getName = function getName() {
                return this._wrapped.getName();
              };
              FolderAdapter2.prototype.isReadOnly = function isReadOnly() {
                return this._wrapped.isReadOnly();
              };
              FolderAdapter2.prototype.supportsProps = function supportsProps() {
                return this._wrapped.supportsProps();
              };
              FolderAdapter2.prototype.supportsSynch = function supportsSynch() {
                return this._wrapped.supportsSynch();
              };
              FolderAdapter2.prototype.supportsLinks = function supportsLinks() {
                return false;
              };
              return FolderAdapter2;
            }(BaseFileSystem);
            FolderAdapter.Name = "FolderAdapter";
            FolderAdapter.Options = {
              folder: {
                type: "string",
                description: "The folder to use as the root directory"
              },
              wrapped: {
                type: "object",
                description: "The file system to wrap"
              }
            };
            function translateError(folder, e) {
              if (e !== null && typeof e === "object") {
                var err = e;
                var p = err.path;
                if (p) {
                  p = "/" + path2.relative(folder, p);
                  err.message = err.message.replace(err.path, p);
                  err.path = p;
                }
              }
              return e;
            }
            function wrapCallback(folder, cb) {
              if (typeof cb === "function") {
                return function(err) {
                  if (arguments.length > 0) {
                    arguments[0] = translateError(folder, err);
                  }
                  cb.apply(null, arguments);
                };
              } else {
                return cb;
              }
            }
            function wrapFunction(name2, wrapFirst, wrapSecond) {
              if (name2.slice(name2.length - 4) !== "Sync") {
                return function() {
                  if (arguments.length > 0) {
                    if (wrapFirst) {
                      arguments[0] = path2.join(this._folder, arguments[0]);
                    }
                    if (wrapSecond) {
                      arguments[1] = path2.join(this._folder, arguments[1]);
                    }
                    arguments[arguments.length - 1] = wrapCallback(this._folder, arguments[arguments.length - 1]);
                  }
                  return this._wrapped[name2].apply(this._wrapped, arguments);
                };
              } else {
                return function() {
                  try {
                    if (wrapFirst) {
                      arguments[0] = path2.join(this._folder, arguments[0]);
                    }
                    if (wrapSecond) {
                      arguments[1] = path2.join(this._folder, arguments[1]);
                    }
                    return this._wrapped[name2].apply(this._wrapped, arguments);
                  } catch (e) {
                    throw translateError(this._folder, e);
                  }
                };
              }
            }
            [
              "diskSpace",
              "stat",
              "statSync",
              "open",
              "openSync",
              "unlink",
              "unlinkSync",
              "rmdir",
              "rmdirSync",
              "mkdir",
              "mkdirSync",
              "readdir",
              "readdirSync",
              "exists",
              "existsSync",
              "realpath",
              "realpathSync",
              "truncate",
              "truncateSync",
              "readFile",
              "readFileSync",
              "writeFile",
              "writeFileSync",
              "appendFile",
              "appendFileSync",
              "chmod",
              "chmodSync",
              "chown",
              "chownSync",
              "utimes",
              "utimesSync",
              "readlink",
              "readlinkSync"
            ].forEach(function(name2) {
              FolderAdapter.prototype[name2] = wrapFunction(name2, true, false);
            });
            ["rename", "renameSync", "link", "linkSync", "symlink", "symlinkSync"].forEach(function(name2) {
              FolderAdapter.prototype[name2] = wrapFunction(name2, true, true);
            });
            var toExport;
            if (typeof window !== "undefined") {
              toExport = window;
            } else if (typeof self !== "undefined") {
              toExport = self;
            } else {
              toExport = global2;
            }
            var global$1 = toExport;
            function isDirectoryEntry(entry) {
              return entry.isDirectory;
            }
            var _getFS = global$1.webkitRequestFileSystem || global$1.requestFileSystem || null;
            function _requestQuota(type, size, success, errorCallback) {
              if (typeof navigator["webkitPersistentStorage"] !== "undefined") {
                switch (type) {
                  case global$1.PERSISTENT:
                    navigator.webkitPersistentStorage.requestQuota(size, success, errorCallback);
                    break;
                  case global$1.TEMPORARY:
                    navigator.webkitTemporaryStorage.requestQuota(size, success, errorCallback);
                    break;
                  default:
                    errorCallback(new TypeError("Invalid storage type: " + type));
                    break;
                }
              } else {
                global$1.webkitStorageInfo.requestQuota(type, size, success, errorCallback);
              }
            }
            function _toArray(list2) {
              return Array.prototype.slice.call(list2 || [], 0);
            }
            function convertError$1(err, p, expectedDir) {
              switch (err.name) {
                case "PathExistsError":
                  return ApiError.EEXIST(p);
                case "QuotaExceededError":
                  return ApiError.FileError(ErrorCode.ENOSPC, p);
                case "NotFoundError":
                  return ApiError.ENOENT(p);
                case "SecurityError":
                  return ApiError.FileError(ErrorCode.EACCES, p);
                case "InvalidModificationError":
                  return ApiError.FileError(ErrorCode.EPERM, p);
                case "TypeMismatchError":
                  return ApiError.FileError(expectedDir ? ErrorCode.ENOTDIR : ErrorCode.EISDIR, p);
                case "EncodingError":
                case "InvalidStateError":
                case "NoModificationAllowedError":
                default:
                  return ApiError.FileError(ErrorCode.EINVAL, p);
              }
            }
            var HTML5FSFile = function(PreloadFile$$1) {
              function HTML5FSFile2(fs4, entry, path$$1, flag, stat, contents) {
                PreloadFile$$1.call(this, fs4, path$$1, flag, stat, contents);
                this._entry = entry;
              }
              if (PreloadFile$$1)
                HTML5FSFile2.__proto__ = PreloadFile$$1;
              HTML5FSFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
              HTML5FSFile2.prototype.constructor = HTML5FSFile2;
              HTML5FSFile2.prototype.sync = function sync(cb) {
                var this$1 = this;
                if (!this.isDirty()) {
                  return cb();
                }
                this._entry.createWriter(function(writer) {
                  var buffer$$1 = this$1.getBuffer();
                  var blob = new Blob([buffer2ArrayBuffer(buffer$$1)]);
                  var length = blob.size;
                  writer.onwriteend = function(err) {
                    writer.onwriteend = null;
                    writer.onerror = null;
                    writer.truncate(length);
                    this$1.resetDirty();
                    cb();
                  };
                  writer.onerror = function(err) {
                    cb(convertError$1(err, this$1.getPath(), false));
                  };
                  writer.write(blob);
                });
              };
              HTML5FSFile2.prototype.close = function close(cb) {
                this.sync(cb);
              };
              return HTML5FSFile2;
            }(PreloadFile);
            var HTML5FS = function(BaseFileSystem$$1) {
              function HTML5FS2(size, type, deprecateMsg) {
                if (size === void 0)
                  size = 5;
                if (type === void 0)
                  type = global$1.PERSISTENT;
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                BaseFileSystem$$1.call(this);
                this.size = 1024 * 1024 * size;
                this.type = type;
                deprecationMessage(deprecateMsg, HTML5FS2.Name, { size, type });
              }
              if (BaseFileSystem$$1)
                HTML5FS2.__proto__ = BaseFileSystem$$1;
              HTML5FS2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
              HTML5FS2.prototype.constructor = HTML5FS2;
              HTML5FS2.Create = function Create(opts, cb) {
                var fs4 = new HTML5FS2(opts.size, opts.type, false);
                fs4.allocate(function(e) {
                  return e ? cb(e) : cb(null, fs4);
                }, false);
              };
              HTML5FS2.isAvailable = function isAvailable() {
                return !!_getFS;
              };
              HTML5FS2.prototype.getName = function getName() {
                return HTML5FS2.Name;
              };
              HTML5FS2.prototype.isReadOnly = function isReadOnly() {
                return false;
              };
              HTML5FS2.prototype.supportsSymlinks = function supportsSymlinks() {
                return false;
              };
              HTML5FS2.prototype.supportsProps = function supportsProps() {
                return false;
              };
              HTML5FS2.prototype.supportsSynch = function supportsSynch() {
                return false;
              };
              HTML5FS2.prototype.allocate = function allocate(cb, deprecateMsg) {
                var this$1 = this;
                if (cb === void 0)
                  cb = function() {
                  };
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                if (deprecateMsg) {
                  console.warn("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: " + this.type + ", size: " + this.size + "}, cb)' to create and allocate HTML5FS instances.");
                }
                var success = function(fs4) {
                  this$1.fs = fs4;
                  cb();
                };
                var error = function(err) {
                  cb(convertError$1(err, "/", true));
                };
                if (this.type === global$1.PERSISTENT) {
                  _requestQuota(this.type, this.size, function(granted) {
                    _getFS(this$1.type, granted, success, error);
                  }, error);
                } else {
                  _getFS(this.type, this.size, success, error);
                }
              };
              HTML5FS2.prototype.empty = function empty(mainCb) {
                this._readdir("/", function(err, entries) {
                  if (err) {
                    console.error("Failed to empty FS");
                    mainCb(err);
                  } else {
                    var finished = function(er) {
                      if (err) {
                        console.error("Failed to empty FS");
                        mainCb(err);
                      } else {
                        mainCb();
                      }
                    };
                    var deleteEntry = function(entry, cb) {
                      var succ = function() {
                        cb();
                      };
                      var error = function(err2) {
                        cb(convertError$1(err2, entry.fullPath, !entry.isDirectory));
                      };
                      if (isDirectoryEntry(entry)) {
                        entry.removeRecursively(succ, error);
                      } else {
                        entry.remove(succ, error);
                      }
                    };
                    eachLimit(entries, deleteEntry, finished);
                  }
                });
              };
              HTML5FS2.prototype.rename = function rename(oldPath, newPath, cb) {
                var this$1 = this;
                var semaphore = 2;
                var successCount = 0;
                var root2 = this.fs.root;
                var currentPath = oldPath;
                var error = function(err) {
                  if (--semaphore <= 0) {
                    cb(convertError$1(err, currentPath, false));
                  }
                };
                var success = function(file) {
                  if (++successCount === 2) {
                    return cb(new ApiError(ErrorCode.EINVAL, "Something was identified as both a file and a directory. This should never happen."));
                  }
                  if (oldPath === newPath) {
                    return cb();
                  }
                  currentPath = path2.dirname(newPath);
                  root2.getDirectory(currentPath, {}, function(parentDir) {
                    currentPath = path2.basename(newPath);
                    file.moveTo(parentDir, currentPath, function(entry) {
                      cb();
                    }, function(err) {
                      if (file.isDirectory) {
                        currentPath = newPath;
                        this$1.unlink(newPath, function(e) {
                          if (e) {
                            error(err);
                          } else {
                            this$1.rename(oldPath, newPath, cb);
                          }
                        });
                      } else {
                        error(err);
                      }
                    });
                  }, error);
                };
                root2.getFile(oldPath, {}, success, error);
                root2.getDirectory(oldPath, {}, success, error);
              };
              HTML5FS2.prototype.stat = function stat(path$$1, isLstat, cb) {
                var this$1 = this;
                var opts = {
                  create: false
                };
                var loadAsFile = function(entry) {
                  var fileFromEntry = function(file) {
                    var stat2 = new Stats(FileType.FILE, file.size);
                    cb(null, stat2);
                  };
                  entry.file(fileFromEntry, failedToLoad);
                };
                var loadAsDir = function(dir$$1) {
                  var size = 4096;
                  var stat2 = new Stats(FileType.DIRECTORY, size);
                  cb(null, stat2);
                };
                var failedToLoad = function(err) {
                  cb(convertError$1(err, path$$1, false));
                };
                var failedToLoadAsFile = function() {
                  this$1.fs.root.getDirectory(path$$1, opts, loadAsDir, failedToLoad);
                };
                this.fs.root.getFile(path$$1, opts, loadAsFile, failedToLoadAsFile);
              };
              HTML5FS2.prototype.open = function open(p, flags, mode, cb) {
                var this$1 = this;
                var error = function(err) {
                  if (err.name === "InvalidModificationError" && flags.isExclusive()) {
                    cb(ApiError.EEXIST(p));
                  } else {
                    cb(convertError$1(err, p, false));
                  }
                };
                this.fs.root.getFile(p, {
                  create: flags.pathNotExistsAction() === ActionType.CREATE_FILE,
                  exclusive: flags.isExclusive()
                }, function(entry) {
                  entry.file(function(file) {
                    var reader = new FileReader();
                    reader.onloadend = function(event) {
                      var bfsFile = this$1._makeFile(p, entry, flags, file, reader.result);
                      cb(null, bfsFile);
                    };
                    reader.onerror = function(ev) {
                      error(reader.error);
                    };
                    reader.readAsArrayBuffer(file);
                  }, error);
                }, error);
              };
              HTML5FS2.prototype.unlink = function unlink(path$$1, cb) {
                this._remove(path$$1, cb, true);
              };
              HTML5FS2.prototype.rmdir = function rmdir(path$$1, cb) {
                var this$1 = this;
                this.readdir(path$$1, function(e, files) {
                  if (e) {
                    cb(e);
                  } else if (files.length > 0) {
                    cb(ApiError.ENOTEMPTY(path$$1));
                  } else {
                    this$1._remove(path$$1, cb, false);
                  }
                });
              };
              HTML5FS2.prototype.mkdir = function mkdir(path$$1, mode, cb) {
                var opts = {
                  create: true,
                  exclusive: true
                };
                var success = function(dir$$1) {
                  cb();
                };
                var error = function(err) {
                  cb(convertError$1(err, path$$1, true));
                };
                this.fs.root.getDirectory(path$$1, opts, success, error);
              };
              HTML5FS2.prototype.readdir = function readdir(path$$1, cb) {
                this._readdir(path$$1, function(e, entries) {
                  if (entries) {
                    var rv = [];
                    for (var i2 = 0, list2 = entries; i2 < list2.length; i2 += 1) {
                      var entry = list2[i2];
                      rv.push(entry.name);
                    }
                    cb(null, rv);
                  } else {
                    return cb(e);
                  }
                });
              };
              HTML5FS2.prototype._makeFile = function _makeFile(path$$1, entry, flag, stat, data) {
                if (data === void 0)
                  data = new ArrayBuffer(0);
                var stats = new Stats(FileType.FILE, stat.size);
                var buffer$$1 = arrayBuffer2Buffer(data);
                return new HTML5FSFile(this, entry, path$$1, flag, stats, buffer$$1);
              };
              HTML5FS2.prototype._readdir = function _readdir(path$$1, cb) {
                var error = function(err) {
                  cb(convertError$1(err, path$$1, true));
                };
                this.fs.root.getDirectory(path$$1, { create: false }, function(dirEntry) {
                  var reader = dirEntry.createReader();
                  var entries = [];
                  var readEntries = function() {
                    reader.readEntries(function(results) {
                      if (results.length) {
                        entries = entries.concat(_toArray(results));
                        readEntries();
                      } else {
                        cb(null, entries);
                      }
                    }, error);
                  };
                  readEntries();
                }, error);
              };
              HTML5FS2.prototype._remove = function _remove(path$$1, cb, isFile) {
                var success = function(entry) {
                  var succ = function() {
                    cb();
                  };
                  var err = function(err2) {
                    cb(convertError$1(err2, path$$1, !isFile));
                  };
                  entry.remove(succ, err);
                };
                var error = function(err) {
                  cb(convertError$1(err, path$$1, !isFile));
                };
                var opts = {
                  create: false
                };
                if (isFile) {
                  this.fs.root.getFile(path$$1, opts, success, error);
                } else {
                  this.fs.root.getDirectory(path$$1, opts, success, error);
                }
              };
              return HTML5FS2;
            }(BaseFileSystem);
            HTML5FS.Name = "HTML5FS";
            HTML5FS.Options = {
              size: {
                type: "number",
                optional: true,
                description: "Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."
              },
              type: {
                type: "number",
                optional: true,
                description: "window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."
              }
            };
            var Inode = function Inode2(id, size, mode, atime, mtime, ctime) {
              this.id = id;
              this.size = size;
              this.mode = mode;
              this.atime = atime;
              this.mtime = mtime;
              this.ctime = ctime;
            };
            Inode.fromBuffer = function fromBuffer(buffer$$1) {
              if (buffer$$1 === void 0) {
                throw new Error("NO");
              }
              return new Inode(buffer$$1.toString("ascii", 30), buffer$$1.readUInt32LE(0), buffer$$1.readUInt16LE(4), buffer$$1.readDoubleLE(6), buffer$$1.readDoubleLE(14), buffer$$1.readDoubleLE(22));
            };
            Inode.prototype.toStats = function toStats() {
              return new Stats((this.mode & 61440) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE, this.size, this.mode, new Date(this.atime), new Date(this.mtime), new Date(this.ctime));
            };
            Inode.prototype.getSize = function getSize() {
              return 30 + this.id.length;
            };
            Inode.prototype.toBuffer = function toBuffer(buff) {
              if (buff === void 0)
                buff = Buffer2.alloc(this.getSize());
              buff.writeUInt32LE(this.size, 0);
              buff.writeUInt16LE(this.mode, 4);
              buff.writeDoubleLE(this.atime, 6);
              buff.writeDoubleLE(this.mtime, 14);
              buff.writeDoubleLE(this.ctime, 22);
              buff.write(this.id, 30, this.id.length, "ascii");
              return buff;
            };
            Inode.prototype.update = function update(stats) {
              var hasChanged = false;
              if (this.size !== stats.size) {
                this.size = stats.size;
                hasChanged = true;
              }
              if (this.mode !== stats.mode) {
                this.mode = stats.mode;
                hasChanged = true;
              }
              var atimeMs = stats.atime.getTime();
              if (this.atime !== atimeMs) {
                this.atime = atimeMs;
                hasChanged = true;
              }
              var mtimeMs = stats.mtime.getTime();
              if (this.mtime !== mtimeMs) {
                this.mtime = mtimeMs;
                hasChanged = true;
              }
              var ctimeMs = stats.ctime.getTime();
              if (this.ctime !== ctimeMs) {
                this.ctime = ctimeMs;
                hasChanged = true;
              }
              return hasChanged;
            };
            Inode.prototype.isFile = function isFile() {
              return (this.mode & 61440) === FileType.FILE;
            };
            Inode.prototype.isDirectory = function isDirectory() {
              return (this.mode & 61440) === FileType.DIRECTORY;
            };
            var ROOT_NODE_ID = "/";
            var emptyDirNode = null;
            function getEmptyDirNode() {
              if (emptyDirNode) {
                return emptyDirNode;
              }
              return emptyDirNode = Buffer2.from("{}");
            }
            function GenerateRandomID() {
              return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0;
                var v = c === "x" ? r : r & 3 | 8;
                return v.toString(16);
              });
            }
            function noError(e, cb) {
              if (e) {
                cb(e);
                return false;
              }
              return true;
            }
            function noErrorTx(e, tx, cb) {
              if (e) {
                tx.abort(function() {
                  cb(e);
                });
                return false;
              }
              return true;
            }
            var SimpleSyncRWTransaction = function SimpleSyncRWTransaction2(store) {
              this.store = store;
              this.originalData = {};
              this.modifiedKeys = [];
            };
            SimpleSyncRWTransaction.prototype.get = function get3(key) {
              var val = this.store.get(key);
              this.stashOldValue(key, val);
              return val;
            };
            SimpleSyncRWTransaction.prototype.put = function put(key, data, overwrite) {
              this.markModified(key);
              return this.store.put(key, data, overwrite);
            };
            SimpleSyncRWTransaction.prototype.del = function del(key) {
              this.markModified(key);
              this.store.del(key);
            };
            SimpleSyncRWTransaction.prototype.commit = function commit() {
            };
            SimpleSyncRWTransaction.prototype.abort = function abort() {
              var this$1 = this;
              for (var i2 = 0, list2 = this$1.modifiedKeys; i2 < list2.length; i2 += 1) {
                var key = list2[i2];
                var value = this$1.originalData[key];
                if (!value) {
                  this$1.store.del(key);
                } else {
                  this$1.store.put(key, value, true);
                }
              }
            };
            SimpleSyncRWTransaction.prototype.stashOldValue = function stashOldValue(key, value) {
              if (!this.originalData.hasOwnProperty(key)) {
                this.originalData[key] = value;
              }
            };
            SimpleSyncRWTransaction.prototype.markModified = function markModified(key) {
              if (this.modifiedKeys.indexOf(key) === -1) {
                this.modifiedKeys.push(key);
                if (!this.originalData.hasOwnProperty(key)) {
                  this.originalData[key] = this.store.get(key);
                }
              }
            };
            var SyncKeyValueFile = function(PreloadFile$$1) {
              function SyncKeyValueFile2(_fs, _path, _flag, _stat, contents) {
                PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
              }
              if (PreloadFile$$1)
                SyncKeyValueFile2.__proto__ = PreloadFile$$1;
              SyncKeyValueFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
              SyncKeyValueFile2.prototype.constructor = SyncKeyValueFile2;
              SyncKeyValueFile2.prototype.syncSync = function syncSync() {
                if (this.isDirty()) {
                  this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());
                  this.resetDirty();
                }
              };
              SyncKeyValueFile2.prototype.closeSync = function closeSync() {
                this.syncSync();
              };
              return SyncKeyValueFile2;
            }(PreloadFile);
            var SyncKeyValueFileSystem = function(SynchronousFileSystem$$1) {
              function SyncKeyValueFileSystem2(options2) {
                SynchronousFileSystem$$1.call(this);
                this.store = options2.store;
                this.makeRootDirectory();
              }
              if (SynchronousFileSystem$$1)
                SyncKeyValueFileSystem2.__proto__ = SynchronousFileSystem$$1;
              SyncKeyValueFileSystem2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
              SyncKeyValueFileSystem2.prototype.constructor = SyncKeyValueFileSystem2;
              SyncKeyValueFileSystem2.isAvailable = function isAvailable() {
                return true;
              };
              SyncKeyValueFileSystem2.prototype.getName = function getName() {
                return this.store.name();
              };
              SyncKeyValueFileSystem2.prototype.isReadOnly = function isReadOnly() {
                return false;
              };
              SyncKeyValueFileSystem2.prototype.supportsSymlinks = function supportsSymlinks() {
                return false;
              };
              SyncKeyValueFileSystem2.prototype.supportsProps = function supportsProps() {
                return false;
              };
              SyncKeyValueFileSystem2.prototype.supportsSynch = function supportsSynch() {
                return true;
              };
              SyncKeyValueFileSystem2.prototype.empty = function empty() {
                this.store.clear();
                this.makeRootDirectory();
              };
              SyncKeyValueFileSystem2.prototype.renameSync = function renameSync(oldPath, newPath) {
                var tx = this.store.beginTransaction("readwrite"), oldParent = path2.dirname(oldPath), oldName = path2.basename(oldPath), newParent = path2.dirname(newPath), newName = path2.basename(newPath), oldDirNode = this.findINode(tx, oldParent), oldDirList = this.getDirListing(tx, oldParent, oldDirNode);
                if (!oldDirList[oldName]) {
                  throw ApiError.ENOENT(oldPath);
                }
                var nodeId = oldDirList[oldName];
                delete oldDirList[oldName];
                if ((newParent + "/").indexOf(oldPath + "/") === 0) {
                  throw new ApiError(ErrorCode.EBUSY, oldParent);
                }
                var newDirNode, newDirList;
                if (newParent === oldParent) {
                  newDirNode = oldDirNode;
                  newDirList = oldDirList;
                } else {
                  newDirNode = this.findINode(tx, newParent);
                  newDirList = this.getDirListing(tx, newParent, newDirNode);
                }
                if (newDirList[newName]) {
                  var newNameNode = this.getINode(tx, newPath, newDirList[newName]);
                  if (newNameNode.isFile()) {
                    try {
                      tx.del(newNameNode.id);
                      tx.del(newDirList[newName]);
                    } catch (e) {
                      tx.abort();
                      throw e;
                    }
                  } else {
                    throw ApiError.EPERM(newPath);
                  }
                }
                newDirList[newName] = nodeId;
                try {
                  tx.put(oldDirNode.id, Buffer2.from(JSON.stringify(oldDirList)), true);
                  tx.put(newDirNode.id, Buffer2.from(JSON.stringify(newDirList)), true);
                } catch (e) {
                  tx.abort();
                  throw e;
                }
                tx.commit();
              };
              SyncKeyValueFileSystem2.prototype.statSync = function statSync(p, isLstat) {
                return this.findINode(this.store.beginTransaction("readonly"), p).toStats();
              };
              SyncKeyValueFileSystem2.prototype.createFileSync = function createFileSync(p, flag, mode) {
                var tx = this.store.beginTransaction("readwrite"), data = emptyBuffer(), newFile = this.commitNewFile(tx, p, FileType.FILE, mode, data);
                return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);
              };
              SyncKeyValueFileSystem2.prototype.openFileSync = function openFileSync(p, flag) {
                var tx = this.store.beginTransaction("readonly"), node = this.findINode(tx, p), data = tx.get(node.id);
                if (data === void 0) {
                  throw ApiError.ENOENT(p);
                }
                return new SyncKeyValueFile(this, p, flag, node.toStats(), data);
              };
              SyncKeyValueFileSystem2.prototype.unlinkSync = function unlinkSync(p) {
                this.removeEntry(p, false);
              };
              SyncKeyValueFileSystem2.prototype.rmdirSync = function rmdirSync(p) {
                if (this.readdirSync(p).length > 0) {
                  throw ApiError.ENOTEMPTY(p);
                } else {
                  this.removeEntry(p, true);
                }
              };
              SyncKeyValueFileSystem2.prototype.mkdirSync = function mkdirSync(p, mode) {
                var tx = this.store.beginTransaction("readwrite"), data = Buffer2.from("{}");
                this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data);
              };
              SyncKeyValueFileSystem2.prototype.readdirSync = function readdirSync(p) {
                var tx = this.store.beginTransaction("readonly");
                return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));
              };
              SyncKeyValueFileSystem2.prototype._syncSync = function _syncSync(p, data, stats) {
                var tx = this.store.beginTransaction("readwrite"), fileInodeId = this._findINode(tx, path2.dirname(p), path2.basename(p)), fileInode = this.getINode(tx, p, fileInodeId), inodeChanged = fileInode.update(stats);
                try {
                  tx.put(fileInode.id, data, true);
                  if (inodeChanged) {
                    tx.put(fileInodeId, fileInode.toBuffer(), true);
                  }
                } catch (e) {
                  tx.abort();
                  throw e;
                }
                tx.commit();
              };
              SyncKeyValueFileSystem2.prototype.makeRootDirectory = function makeRootDirectory() {
                var tx = this.store.beginTransaction("readwrite");
                if (tx.get(ROOT_NODE_ID) === void 0) {
                  var currTime = new Date().getTime(), dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
                  tx.put(dirInode.id, getEmptyDirNode(), false);
                  tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);
                  tx.commit();
                }
              };
              SyncKeyValueFileSystem2.prototype._findINode = function _findINode(tx, parent, filename) {
                var this$1 = this;
                var readDirectory = function(inode) {
                  var dirList = this$1.getDirListing(tx, parent, inode);
                  if (dirList[filename]) {
                    return dirList[filename];
                  } else {
                    throw ApiError.ENOENT(path2.resolve(parent, filename));
                  }
                };
                if (parent === "/") {
                  if (filename === "") {
                    return ROOT_NODE_ID;
                  } else {
                    return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));
                  }
                } else {
                  return readDirectory(this.getINode(tx, parent + path2.sep + filename, this._findINode(tx, path2.dirname(parent), path2.basename(parent))));
                }
              };
              SyncKeyValueFileSystem2.prototype.findINode = function findINode(tx, p) {
                return this.getINode(tx, p, this._findINode(tx, path2.dirname(p), path2.basename(p)));
              };
              SyncKeyValueFileSystem2.prototype.getINode = function getINode(tx, p, id) {
                var inode = tx.get(id);
                if (inode === void 0) {
                  throw ApiError.ENOENT(p);
                }
                return Inode.fromBuffer(inode);
              };
              SyncKeyValueFileSystem2.prototype.getDirListing = function getDirListing(tx, p, inode) {
                if (!inode.isDirectory()) {
                  throw ApiError.ENOTDIR(p);
                }
                var data = tx.get(inode.id);
                if (data === void 0) {
                  throw ApiError.ENOENT(p);
                }
                return JSON.parse(data.toString());
              };
              SyncKeyValueFileSystem2.prototype.addNewNode = function addNewNode(tx, data) {
                var retries = 0;
                var currId;
                while (retries < 5) {
                  try {
                    currId = GenerateRandomID();
                    tx.put(currId, data, false);
                    return currId;
                  } catch (e) {
                  }
                }
                throw new ApiError(ErrorCode.EIO, "Unable to commit data to key-value store.");
              };
              SyncKeyValueFileSystem2.prototype.commitNewFile = function commitNewFile(tx, p, type, mode, data) {
                var parentDir = path2.dirname(p), fname = path2.basename(p), parentNode = this.findINode(tx, parentDir), dirListing = this.getDirListing(tx, parentDir, parentNode), currTime = new Date().getTime();
                if (p === "/") {
                  throw ApiError.EEXIST(p);
                }
                if (dirListing[fname]) {
                  throw ApiError.EEXIST(p);
                }
                var fileNode;
                try {
                  var dataId = this.addNewNode(tx, data);
                  fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
                  var fileNodeId = this.addNewNode(tx, fileNode.toBuffer());
                  dirListing[fname] = fileNodeId;
                  tx.put(parentNode.id, Buffer2.from(JSON.stringify(dirListing)), true);
                } catch (e) {
                  tx.abort();
                  throw e;
                }
                tx.commit();
                return fileNode;
              };
              SyncKeyValueFileSystem2.prototype.removeEntry = function removeEntry(p, isDir) {
                var tx = this.store.beginTransaction("readwrite"), parent = path2.dirname(p), parentNode = this.findINode(tx, parent), parentListing = this.getDirListing(tx, parent, parentNode), fileName = path2.basename(p);
                if (!parentListing[fileName]) {
                  throw ApiError.ENOENT(p);
                }
                var fileNodeId = parentListing[fileName];
                delete parentListing[fileName];
                var fileNode = this.getINode(tx, p, fileNodeId);
                if (!isDir && fileNode.isDirectory()) {
                  throw ApiError.EISDIR(p);
                } else if (isDir && !fileNode.isDirectory()) {
                  throw ApiError.ENOTDIR(p);
                }
                try {
                  tx.del(fileNode.id);
                  tx.del(fileNodeId);
                  tx.put(parentNode.id, Buffer2.from(JSON.stringify(parentListing)), true);
                } catch (e) {
                  tx.abort();
                  throw e;
                }
                tx.commit();
              };
              return SyncKeyValueFileSystem2;
            }(SynchronousFileSystem);
            var AsyncKeyValueFile = function(PreloadFile$$1) {
              function AsyncKeyValueFile2(_fs, _path, _flag, _stat, contents) {
                PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
              }
              if (PreloadFile$$1)
                AsyncKeyValueFile2.__proto__ = PreloadFile$$1;
              AsyncKeyValueFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
              AsyncKeyValueFile2.prototype.constructor = AsyncKeyValueFile2;
              AsyncKeyValueFile2.prototype.sync = function sync(cb) {
                var this$1 = this;
                if (this.isDirty()) {
                  this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), function(e) {
                    if (!e) {
                      this$1.resetDirty();
                    }
                    cb(e);
                  });
                } else {
                  cb();
                }
              };
              AsyncKeyValueFile2.prototype.close = function close(cb) {
                this.sync(cb);
              };
              return AsyncKeyValueFile2;
            }(PreloadFile);
            var AsyncKeyValueFileSystem = function(BaseFileSystem$$1) {
              function AsyncKeyValueFileSystem2() {
                BaseFileSystem$$1.apply(this, arguments);
              }
              if (BaseFileSystem$$1)
                AsyncKeyValueFileSystem2.__proto__ = BaseFileSystem$$1;
              AsyncKeyValueFileSystem2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
              AsyncKeyValueFileSystem2.prototype.constructor = AsyncKeyValueFileSystem2;
              AsyncKeyValueFileSystem2.isAvailable = function isAvailable() {
                return true;
              };
              AsyncKeyValueFileSystem2.prototype.init = function init(store, cb) {
                this.store = store;
                this.makeRootDirectory(cb);
              };
              AsyncKeyValueFileSystem2.prototype.getName = function getName() {
                return this.store.name();
              };
              AsyncKeyValueFileSystem2.prototype.isReadOnly = function isReadOnly() {
                return false;
              };
              AsyncKeyValueFileSystem2.prototype.supportsSymlinks = function supportsSymlinks() {
                return false;
              };
              AsyncKeyValueFileSystem2.prototype.supportsProps = function supportsProps() {
                return false;
              };
              AsyncKeyValueFileSystem2.prototype.supportsSynch = function supportsSynch() {
                return false;
              };
              AsyncKeyValueFileSystem2.prototype.empty = function empty(cb) {
                var this$1 = this;
                this.store.clear(function(e) {
                  if (noError(e, cb)) {
                    this$1.makeRootDirectory(cb);
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.rename = function rename(oldPath, newPath, cb) {
                var this$1 = this;
                var tx = this.store.beginTransaction("readwrite");
                var oldParent = path2.dirname(oldPath), oldName = path2.basename(oldPath);
                var newParent = path2.dirname(newPath), newName = path2.basename(newPath);
                var inodes = {};
                var lists = {};
                var errorOccurred = false;
                if ((newParent + "/").indexOf(oldPath + "/") === 0) {
                  return cb(new ApiError(ErrorCode.EBUSY, oldParent));
                }
                var theOleSwitcharoo = function() {
                  if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {
                    return;
                  }
                  var oldParentList = lists[oldParent], oldParentINode = inodes[oldParent], newParentList = lists[newParent], newParentINode = inodes[newParent];
                  if (!oldParentList[oldName]) {
                    cb(ApiError.ENOENT(oldPath));
                  } else {
                    var fileId = oldParentList[oldName];
                    delete oldParentList[oldName];
                    var completeRename = function() {
                      newParentList[newName] = fileId;
                      tx.put(oldParentINode.id, Buffer2.from(JSON.stringify(oldParentList)), true, function(e) {
                        if (noErrorTx(e, tx, cb)) {
                          if (oldParent === newParent) {
                            tx.commit(cb);
                          } else {
                            tx.put(newParentINode.id, Buffer2.from(JSON.stringify(newParentList)), true, function(e2) {
                              if (noErrorTx(e2, tx, cb)) {
                                tx.commit(cb);
                              }
                            });
                          }
                        }
                      });
                    };
                    if (newParentList[newName]) {
                      this$1.getINode(tx, newPath, newParentList[newName], function(e, inode) {
                        if (noErrorTx(e, tx, cb)) {
                          if (inode.isFile()) {
                            tx.del(inode.id, function(e2) {
                              if (noErrorTx(e2, tx, cb)) {
                                tx.del(newParentList[newName], function(e3) {
                                  if (noErrorTx(e3, tx, cb)) {
                                    completeRename();
                                  }
                                });
                              }
                            });
                          } else {
                            tx.abort(function(e2) {
                              cb(ApiError.EPERM(newPath));
                            });
                          }
                        }
                      });
                    } else {
                      completeRename();
                    }
                  }
                };
                var processInodeAndListings = function(p) {
                  this$1.findINodeAndDirListing(tx, p, function(e, node, dirList) {
                    if (e) {
                      if (!errorOccurred) {
                        errorOccurred = true;
                        tx.abort(function() {
                          cb(e);
                        });
                      }
                    } else {
                      inodes[p] = node;
                      lists[p] = dirList;
                      theOleSwitcharoo();
                    }
                  });
                };
                processInodeAndListings(oldParent);
                if (oldParent !== newParent) {
                  processInodeAndListings(newParent);
                }
              };
              AsyncKeyValueFileSystem2.prototype.stat = function stat(p, isLstat, cb) {
                var tx = this.store.beginTransaction("readonly");
                this.findINode(tx, p, function(e, inode) {
                  if (noError(e, cb)) {
                    cb(null, inode.toStats());
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.createFile = function createFile(p, flag, mode, cb) {
                var this$1 = this;
                var tx = this.store.beginTransaction("readwrite"), data = emptyBuffer();
                this.commitNewFile(tx, p, FileType.FILE, mode, data, function(e, newFile) {
                  if (noError(e, cb)) {
                    cb(null, new AsyncKeyValueFile(this$1, p, flag, newFile.toStats(), data));
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.openFile = function openFile(p, flag, cb) {
                var this$1 = this;
                var tx = this.store.beginTransaction("readonly");
                this.findINode(tx, p, function(e, inode) {
                  if (noError(e, cb)) {
                    tx.get(inode.id, function(e2, data) {
                      if (noError(e2, cb)) {
                        if (data === void 0) {
                          cb(ApiError.ENOENT(p));
                        } else {
                          cb(null, new AsyncKeyValueFile(this$1, p, flag, inode.toStats(), data));
                        }
                      }
                    });
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.unlink = function unlink(p, cb) {
                this.removeEntry(p, false, cb);
              };
              AsyncKeyValueFileSystem2.prototype.rmdir = function rmdir(p, cb) {
                var this$1 = this;
                this.readdir(p, function(err, files) {
                  if (err) {
                    cb(err);
                  } else if (files.length > 0) {
                    cb(ApiError.ENOTEMPTY(p));
                  } else {
                    this$1.removeEntry(p, true, cb);
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.mkdir = function mkdir(p, mode, cb) {
                var tx = this.store.beginTransaction("readwrite"), data = Buffer2.from("{}");
                this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);
              };
              AsyncKeyValueFileSystem2.prototype.readdir = function readdir(p, cb) {
                var this$1 = this;
                var tx = this.store.beginTransaction("readonly");
                this.findINode(tx, p, function(e, inode) {
                  if (noError(e, cb)) {
                    this$1.getDirListing(tx, p, inode, function(e2, dirListing) {
                      if (noError(e2, cb)) {
                        cb(null, Object.keys(dirListing));
                      }
                    });
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype._sync = function _sync(p, data, stats, cb) {
                var this$1 = this;
                var tx = this.store.beginTransaction("readwrite");
                this._findINode(tx, path2.dirname(p), path2.basename(p), function(e, fileInodeId) {
                  if (noErrorTx(e, tx, cb)) {
                    this$1.getINode(tx, p, fileInodeId, function(e2, fileInode) {
                      if (noErrorTx(e2, tx, cb)) {
                        var inodeChanged = fileInode.update(stats);
                        tx.put(fileInode.id, data, true, function(e3) {
                          if (noErrorTx(e3, tx, cb)) {
                            if (inodeChanged) {
                              tx.put(fileInodeId, fileInode.toBuffer(), true, function(e4) {
                                if (noErrorTx(e4, tx, cb)) {
                                  tx.commit(cb);
                                }
                              });
                            } else {
                              tx.commit(cb);
                            }
                          }
                        });
                      }
                    });
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.makeRootDirectory = function makeRootDirectory(cb) {
                var tx = this.store.beginTransaction("readwrite");
                tx.get(ROOT_NODE_ID, function(e, data) {
                  if (e || data === void 0) {
                    var currTime = new Date().getTime(), dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
                    tx.put(dirInode.id, getEmptyDirNode(), false, function(e2) {
                      if (noErrorTx(e2, tx, cb)) {
                        tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, function(e3) {
                          if (e3) {
                            tx.abort(function() {
                              cb(e3);
                            });
                          } else {
                            tx.commit(cb);
                          }
                        });
                      }
                    });
                  } else {
                    tx.commit(cb);
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype._findINode = function _findINode(tx, parent, filename, cb) {
                var this$1 = this;
                var handleDirectoryListings = function(e, inode, dirList) {
                  if (e) {
                    cb(e);
                  } else if (dirList[filename]) {
                    cb(null, dirList[filename]);
                  } else {
                    cb(ApiError.ENOENT(path2.resolve(parent, filename)));
                  }
                };
                if (parent === "/") {
                  if (filename === "") {
                    cb(null, ROOT_NODE_ID);
                  } else {
                    this.getINode(tx, parent, ROOT_NODE_ID, function(e, inode) {
                      if (noError(e, cb)) {
                        this$1.getDirListing(tx, parent, inode, function(e2, dirList) {
                          handleDirectoryListings(e2, inode, dirList);
                        });
                      }
                    });
                  }
                } else {
                  this.findINodeAndDirListing(tx, parent, handleDirectoryListings);
                }
              };
              AsyncKeyValueFileSystem2.prototype.findINode = function findINode(tx, p, cb) {
                var this$1 = this;
                this._findINode(tx, path2.dirname(p), path2.basename(p), function(e, id) {
                  if (noError(e, cb)) {
                    this$1.getINode(tx, p, id, cb);
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.getINode = function getINode(tx, p, id, cb) {
                tx.get(id, function(e, data) {
                  if (noError(e, cb)) {
                    if (data === void 0) {
                      cb(ApiError.ENOENT(p));
                    } else {
                      cb(null, Inode.fromBuffer(data));
                    }
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.getDirListing = function getDirListing(tx, p, inode, cb) {
                if (!inode.isDirectory()) {
                  cb(ApiError.ENOTDIR(p));
                } else {
                  tx.get(inode.id, function(e, data) {
                    if (noError(e, cb)) {
                      try {
                        cb(null, JSON.parse(data.toString()));
                      } catch (e2) {
                        cb(ApiError.ENOENT(p));
                      }
                    }
                  });
                }
              };
              AsyncKeyValueFileSystem2.prototype.findINodeAndDirListing = function findINodeAndDirListing(tx, p, cb) {
                var this$1 = this;
                this.findINode(tx, p, function(e, inode) {
                  if (noError(e, cb)) {
                    this$1.getDirListing(tx, p, inode, function(e2, listing) {
                      if (noError(e2, cb)) {
                        cb(null, inode, listing);
                      }
                    });
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.addNewNode = function addNewNode(tx, data, cb) {
                var retries = 0, currId;
                var reroll = function() {
                  if (++retries === 5) {
                    cb(new ApiError(ErrorCode.EIO, "Unable to commit data to key-value store."));
                  } else {
                    currId = GenerateRandomID();
                    tx.put(currId, data, false, function(e, committed) {
                      if (e || !committed) {
                        reroll();
                      } else {
                        cb(null, currId);
                      }
                    });
                  }
                };
                reroll();
              };
              AsyncKeyValueFileSystem2.prototype.commitNewFile = function commitNewFile(tx, p, type, mode, data, cb) {
                var this$1 = this;
                var parentDir = path2.dirname(p), fname = path2.basename(p), currTime = new Date().getTime();
                if (p === "/") {
                  return cb(ApiError.EEXIST(p));
                }
                this.findINodeAndDirListing(tx, parentDir, function(e, parentNode, dirListing) {
                  if (noErrorTx(e, tx, cb)) {
                    if (dirListing[fname]) {
                      tx.abort(function() {
                        cb(ApiError.EEXIST(p));
                      });
                    } else {
                      this$1.addNewNode(tx, data, function(e2, dataId) {
                        if (noErrorTx(e2, tx, cb)) {
                          var fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
                          this$1.addNewNode(tx, fileInode.toBuffer(), function(e3, fileInodeId) {
                            if (noErrorTx(e3, tx, cb)) {
                              dirListing[fname] = fileInodeId;
                              tx.put(parentNode.id, Buffer2.from(JSON.stringify(dirListing)), true, function(e4) {
                                if (noErrorTx(e4, tx, cb)) {
                                  tx.commit(function(e5) {
                                    if (noErrorTx(e5, tx, cb)) {
                                      cb(null, fileInode);
                                    }
                                  });
                                }
                              });
                            }
                          });
                        }
                      });
                    }
                  }
                });
              };
              AsyncKeyValueFileSystem2.prototype.removeEntry = function removeEntry(p, isDir, cb) {
                var this$1 = this;
                var tx = this.store.beginTransaction("readwrite"), parent = path2.dirname(p), fileName = path2.basename(p);
                this.findINodeAndDirListing(tx, parent, function(e, parentNode, parentListing) {
                  if (noErrorTx(e, tx, cb)) {
                    if (!parentListing[fileName]) {
                      tx.abort(function() {
                        cb(ApiError.ENOENT(p));
                      });
                    } else {
                      var fileNodeId = parentListing[fileName];
                      delete parentListing[fileName];
                      this$1.getINode(tx, p, fileNodeId, function(e2, fileNode) {
                        if (noErrorTx(e2, tx, cb)) {
                          if (!isDir && fileNode.isDirectory()) {
                            tx.abort(function() {
                              cb(ApiError.EISDIR(p));
                            });
                          } else if (isDir && !fileNode.isDirectory()) {
                            tx.abort(function() {
                              cb(ApiError.ENOTDIR(p));
                            });
                          } else {
                            tx.del(fileNode.id, function(e3) {
                              if (noErrorTx(e3, tx, cb)) {
                                tx.del(fileNodeId, function(e4) {
                                  if (noErrorTx(e4, tx, cb)) {
                                    tx.put(parentNode.id, Buffer2.from(JSON.stringify(parentListing)), true, function(e5) {
                                      if (noErrorTx(e5, tx, cb)) {
                                        tx.commit(cb);
                                      }
                                    });
                                  }
                                });
                              }
                            });
                          }
                        }
                      });
                    }
                  }
                });
              };
              return AsyncKeyValueFileSystem2;
            }(BaseFileSystem);
            var InMemoryStore = function InMemoryStore2() {
              this.store = {};
            };
            InMemoryStore.prototype.name = function name2() {
              return InMemoryFileSystem.Name;
            };
            InMemoryStore.prototype.clear = function clear() {
              this.store = {};
            };
            InMemoryStore.prototype.beginTransaction = function beginTransaction(type) {
              return new SimpleSyncRWTransaction(this);
            };
            InMemoryStore.prototype.get = function get3(key) {
              return this.store[key];
            };
            InMemoryStore.prototype.put = function put(key, data, overwrite) {
              if (!overwrite && this.store.hasOwnProperty(key)) {
                return false;
              }
              this.store[key] = data;
              return true;
            };
            InMemoryStore.prototype.del = function del(key) {
              delete this.store[key];
            };
            var InMemoryFileSystem = function(SyncKeyValueFileSystem$$1) {
              function InMemoryFileSystem2() {
                SyncKeyValueFileSystem$$1.call(this, { store: new InMemoryStore() });
              }
              if (SyncKeyValueFileSystem$$1)
                InMemoryFileSystem2.__proto__ = SyncKeyValueFileSystem$$1;
              InMemoryFileSystem2.prototype = Object.create(SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype);
              InMemoryFileSystem2.prototype.constructor = InMemoryFileSystem2;
              InMemoryFileSystem2.Create = function Create(options2, cb) {
                cb(null, new InMemoryFileSystem2());
              };
              return InMemoryFileSystem2;
            }(SyncKeyValueFileSystem);
            InMemoryFileSystem.Name = "InMemory";
            InMemoryFileSystem.Options = {};
            var indexedDB = global$1.indexedDB || global$1.mozIndexedDB || global$1.webkitIndexedDB || global$1.msIndexedDB;
            function convertError$2(e, message) {
              if (message === void 0)
                message = e.toString();
              switch (e.name) {
                case "NotFoundError":
                  return new ApiError(ErrorCode.ENOENT, message);
                case "QuotaExceededError":
                  return new ApiError(ErrorCode.ENOSPC, message);
                default:
                  return new ApiError(ErrorCode.EIO, message);
              }
            }
            function onErrorHandler(cb, code, message) {
              if (code === void 0)
                code = ErrorCode.EIO;
              if (message === void 0)
                message = null;
              return function(e) {
                e.preventDefault();
                cb(new ApiError(code, message !== null ? message : void 0));
              };
            }
            var IndexedDBROTransaction = function IndexedDBROTransaction2(tx, store) {
              this.tx = tx;
              this.store = store;
            };
            IndexedDBROTransaction.prototype.get = function get3(key, cb) {
              try {
                var r = this.store.get(key);
                r.onerror = onErrorHandler(cb);
                r.onsuccess = function(event) {
                  var result = event.target.result;
                  if (result === void 0) {
                    cb(null, result);
                  } else {
                    cb(null, arrayBuffer2Buffer(result));
                  }
                };
              } catch (e) {
                cb(convertError$2(e));
              }
            };
            var IndexedDBRWTransaction = function(IndexedDBROTransaction2) {
              function IndexedDBRWTransaction2(tx, store) {
                IndexedDBROTransaction2.call(this, tx, store);
              }
              if (IndexedDBROTransaction2)
                IndexedDBRWTransaction2.__proto__ = IndexedDBROTransaction2;
              IndexedDBRWTransaction2.prototype = Object.create(IndexedDBROTransaction2 && IndexedDBROTransaction2.prototype);
              IndexedDBRWTransaction2.prototype.constructor = IndexedDBRWTransaction2;
              IndexedDBRWTransaction2.prototype.put = function put(key, data, overwrite, cb) {
                try {
                  var arraybuffer = buffer2ArrayBuffer(data);
                  var r;
                  if (overwrite) {
                    r = this.store.put(arraybuffer, key);
                  } else {
                    r = this.store.add(arraybuffer, key);
                  }
                  r.onerror = onErrorHandler(cb);
                  r.onsuccess = function(event) {
                    cb(null, true);
                  };
                } catch (e) {
                  cb(convertError$2(e));
                }
              };
              IndexedDBRWTransaction2.prototype.del = function del(key, cb) {
                try {
                  var r = this.store["delete"](key);
                  r.onerror = onErrorHandler(cb);
                  r.onsuccess = function(event) {
                    cb();
                  };
                } catch (e) {
                  cb(convertError$2(e));
                }
              };
              IndexedDBRWTransaction2.prototype.commit = function commit(cb) {
                setTimeout(cb, 0);
              };
              IndexedDBRWTransaction2.prototype.abort = function abort(cb) {
                var _e2 = null;
                try {
                  this.tx.abort();
                } catch (e) {
                  _e2 = convertError$2(e);
                } finally {
                  cb(_e2);
                }
              };
              return IndexedDBRWTransaction2;
            }(IndexedDBROTransaction);
            var IndexedDBStore = function IndexedDBStore2(cb, storeName) {
              var this$1 = this;
              if (storeName === void 0)
                storeName = "browserfs";
              this.storeName = storeName;
              var openReq = indexedDB.open(this.storeName, 1);
              openReq.onupgradeneeded = function(event) {
                var db = event.target.result;
                if (db.objectStoreNames.contains(this$1.storeName)) {
                  db.deleteObjectStore(this$1.storeName);
                }
                db.createObjectStore(this$1.storeName);
              };
              openReq.onsuccess = function(event) {
                this$1.db = event.target.result;
                cb(null, this$1);
              };
              openReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);
            };
            IndexedDBStore.prototype.name = function name2() {
              return IndexedDBFileSystem.Name + " - " + this.storeName;
            };
            IndexedDBStore.prototype.clear = function clear(cb) {
              try {
                var tx = this.db.transaction(this.storeName, "readwrite"), objectStore = tx.objectStore(this.storeName), r = objectStore.clear();
                r.onsuccess = function(event) {
                  setTimeout(cb, 0);
                };
                r.onerror = onErrorHandler(cb);
              } catch (e) {
                cb(convertError$2(e));
              }
            };
            IndexedDBStore.prototype.beginTransaction = function beginTransaction(type) {
              if (type === void 0)
                type = "readonly";
              var tx = this.db.transaction(this.storeName, type), objectStore = tx.objectStore(this.storeName);
              if (type === "readwrite") {
                return new IndexedDBRWTransaction(tx, objectStore);
              } else if (type === "readonly") {
                return new IndexedDBROTransaction(tx, objectStore);
              } else {
                throw new ApiError(ErrorCode.EINVAL, "Invalid transaction type.");
              }
            };
            var IndexedDBFileSystem = function(AsyncKeyValueFileSystem$$1) {
              function IndexedDBFileSystem2(cb, storeName, deprecateMsg) {
                var this$1 = this;
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                AsyncKeyValueFileSystem$$1.call(this);
                this.store = new IndexedDBStore(function(e) {
                  if (e) {
                    cb(e);
                  } else {
                    this$1.init(this$1.store, function(e2) {
                      cb(e2, this$1);
                    });
                  }
                }, storeName);
                deprecationMessage(deprecateMsg, IndexedDBFileSystem2.Name, { storeName });
              }
              if (AsyncKeyValueFileSystem$$1)
                IndexedDBFileSystem2.__proto__ = AsyncKeyValueFileSystem$$1;
              IndexedDBFileSystem2.prototype = Object.create(AsyncKeyValueFileSystem$$1 && AsyncKeyValueFileSystem$$1.prototype);
              IndexedDBFileSystem2.prototype.constructor = IndexedDBFileSystem2;
              IndexedDBFileSystem2.Create = function Create(opts, cb) {
                new IndexedDBFileSystem2(cb, opts.storeName, false);
              };
              IndexedDBFileSystem2.isAvailable = function isAvailable() {
                try {
                  return typeof indexedDB !== "undefined" && null !== indexedDB.open("__browserfs_test__");
                } catch (e) {
                  return false;
                }
              };
              return IndexedDBFileSystem2;
            }(AsyncKeyValueFileSystem);
            IndexedDBFileSystem.Name = "IndexedDB";
            IndexedDBFileSystem.Options = {
              storeName: {
                type: "string",
                optional: true,
                description: "The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."
              }
            };
            var supportsBinaryString = false;
            var binaryEncoding;
            try {
              global$1.localStorage.setItem("__test__", String.fromCharCode(55296));
              supportsBinaryString = global$1.localStorage.getItem("__test__") === String.fromCharCode(55296);
            } catch (e) {
              supportsBinaryString = false;
            }
            binaryEncoding = supportsBinaryString ? "binary_string" : "binary_string_ie";
            if (!Buffer2.isEncoding(binaryEncoding)) {
              binaryEncoding = "base64";
            }
            var LocalStorageStore = function LocalStorageStore2() {
            };
            LocalStorageStore.prototype.name = function name2() {
              return LocalStorageFileSystem.Name;
            };
            LocalStorageStore.prototype.clear = function clear() {
              global$1.localStorage.clear();
            };
            LocalStorageStore.prototype.beginTransaction = function beginTransaction(type) {
              return new SimpleSyncRWTransaction(this);
            };
            LocalStorageStore.prototype.get = function get3(key) {
              try {
                var data = global$1.localStorage.getItem(key);
                if (data !== null) {
                  return Buffer2.from(data, binaryEncoding);
                }
              } catch (e) {
              }
              return void 0;
            };
            LocalStorageStore.prototype.put = function put(key, data, overwrite) {
              try {
                if (!overwrite && global$1.localStorage.getItem(key) !== null) {
                  return false;
                }
                global$1.localStorage.setItem(key, data.toString(binaryEncoding));
                return true;
              } catch (e) {
                throw new ApiError(ErrorCode.ENOSPC, "LocalStorage is full.");
              }
            };
            LocalStorageStore.prototype.del = function del(key) {
              try {
                global$1.localStorage.removeItem(key);
              } catch (e) {
                throw new ApiError(ErrorCode.EIO, "Unable to delete key " + key + ": " + e);
              }
            };
            var LocalStorageFileSystem = function(SyncKeyValueFileSystem$$1) {
              function LocalStorageFileSystem2() {
                SyncKeyValueFileSystem$$1.call(this, { store: new LocalStorageStore() });
              }
              if (SyncKeyValueFileSystem$$1)
                LocalStorageFileSystem2.__proto__ = SyncKeyValueFileSystem$$1;
              LocalStorageFileSystem2.prototype = Object.create(SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype);
              LocalStorageFileSystem2.prototype.constructor = LocalStorageFileSystem2;
              LocalStorageFileSystem2.Create = function Create(options2, cb) {
                cb(null, new LocalStorageFileSystem2());
              };
              LocalStorageFileSystem2.isAvailable = function isAvailable() {
                return typeof global$1.localStorage !== "undefined";
              };
              return LocalStorageFileSystem2;
            }(SyncKeyValueFileSystem);
            LocalStorageFileSystem.Name = "LocalStorage";
            LocalStorageFileSystem.Options = {};
            var MountableFileSystem = function(BaseFileSystem$$1) {
              function MountableFileSystem2() {
                BaseFileSystem$$1.call(this);
                this.mountList = [];
                this.mntMap = {};
                this.rootFs = new InMemoryFileSystem();
              }
              if (BaseFileSystem$$1)
                MountableFileSystem2.__proto__ = BaseFileSystem$$1;
              MountableFileSystem2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
              MountableFileSystem2.prototype.constructor = MountableFileSystem2;
              MountableFileSystem2.Create = function Create(opts, cb) {
                var fs4 = new MountableFileSystem2();
                Object.keys(opts).forEach(function(mountPoint) {
                  fs4.mount(mountPoint, opts[mountPoint]);
                });
                cb(null, fs4);
              };
              MountableFileSystem2.isAvailable = function isAvailable() {
                return true;
              };
              MountableFileSystem2.prototype.mount = function mount(mountPoint, fs4) {
                if (mountPoint[0] !== "/") {
                  mountPoint = "/" + mountPoint;
                }
                mountPoint = path2.resolve(mountPoint);
                if (this.mntMap[mountPoint]) {
                  throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already taken.");
                }
                mkdirpSync(mountPoint, 511, this.rootFs);
                this.mntMap[mountPoint] = fs4;
                this.mountList.push(mountPoint);
                this.mountList = this.mountList.sort(function(a, b) {
                  return b.length - a.length;
                });
              };
              MountableFileSystem2.prototype.umount = function umount(mountPoint) {
                var this$1 = this;
                if (mountPoint[0] !== "/") {
                  mountPoint = "/" + mountPoint;
                }
                mountPoint = path2.resolve(mountPoint);
                if (!this.mntMap[mountPoint]) {
                  throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already unmounted.");
                }
                delete this.mntMap[mountPoint];
                this.mountList.splice(this.mountList.indexOf(mountPoint), 1);
                while (mountPoint !== "/") {
                  if (this$1.rootFs.readdirSync(mountPoint).length === 0) {
                    this$1.rootFs.rmdirSync(mountPoint);
                    mountPoint = path2.dirname(mountPoint);
                  } else {
                    break;
                  }
                }
              };
              MountableFileSystem2.prototype._getFs = function _getFs(path$$1) {
                var this$1 = this;
                var mountList = this.mountList, len = mountList.length;
                for (var i2 = 0; i2 < len; i2++) {
                  var mountPoint = mountList[i2];
                  if (mountPoint.length <= path$$1.length && path$$1.indexOf(mountPoint) === 0) {
                    path$$1 = path$$1.substr(mountPoint.length > 1 ? mountPoint.length : 0);
                    if (path$$1 === "") {
                      path$$1 = "/";
                    }
                    return { fs: this$1.mntMap[mountPoint], path: path$$1 };
                  }
                }
                return { fs: this.rootFs, path: path$$1 };
              };
              MountableFileSystem2.prototype.getName = function getName() {
                return MountableFileSystem2.Name;
              };
              MountableFileSystem2.prototype.diskSpace = function diskSpace(path$$1, cb) {
                cb(0, 0);
              };
              MountableFileSystem2.prototype.isReadOnly = function isReadOnly() {
                return false;
              };
              MountableFileSystem2.prototype.supportsLinks = function supportsLinks() {
                return false;
              };
              MountableFileSystem2.prototype.supportsProps = function supportsProps() {
                return false;
              };
              MountableFileSystem2.prototype.supportsSynch = function supportsSynch() {
                return true;
              };
              MountableFileSystem2.prototype.standardizeError = function standardizeError(err, path$$1, realPath) {
                var index = err.message.indexOf(path$$1);
                if (index !== -1) {
                  err.message = err.message.substr(0, index) + realPath + err.message.substr(index + path$$1.length);
                  err.path = realPath;
                }
                return err;
              };
              MountableFileSystem2.prototype.rename = function rename(oldPath, newPath, cb) {
                var this$1 = this;
                var fs1rv = this._getFs(oldPath);
                var fs2rv = this._getFs(newPath);
                if (fs1rv.fs === fs2rv.fs) {
                  return fs1rv.fs.rename(fs1rv.path, fs2rv.path, function(e) {
                    if (e) {
                      this$1.standardizeError(this$1.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
                    }
                    cb(e);
                  });
                }
                return _fsMock.readFile(oldPath, function(err, data) {
                  if (err) {
                    return cb(err);
                  }
                  _fsMock.writeFile(newPath, data, function(err2) {
                    if (err2) {
                      return cb(err2);
                    }
                    _fsMock.unlink(oldPath, cb);
                  });
                });
              };
              MountableFileSystem2.prototype.renameSync = function renameSync(oldPath, newPath) {
                var fs1rv = this._getFs(oldPath);
                var fs2rv = this._getFs(newPath);
                if (fs1rv.fs === fs2rv.fs) {
                  try {
                    return fs1rv.fs.renameSync(fs1rv.path, fs2rv.path);
                  } catch (e) {
                    this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
                    throw e;
                  }
                }
                var data = _fsMock.readFileSync(oldPath);
                _fsMock.writeFileSync(newPath, data);
                return _fsMock.unlinkSync(oldPath);
              };
              MountableFileSystem2.prototype.readdirSync = function readdirSync(p) {
                var fsInfo = this._getFs(p);
                var rv = null;
                if (fsInfo.fs !== this.rootFs) {
                  try {
                    rv = this.rootFs.readdirSync(p);
                  } catch (e) {
                  }
                }
                try {
                  var rv2 = fsInfo.fs.readdirSync(fsInfo.path);
                  if (rv === null) {
                    return rv2;
                  } else {
                    return rv2.concat(rv.filter(function(val) {
                      return rv2.indexOf(val) === -1;
                    }));
                  }
                } catch (e) {
                  if (rv === null) {
                    throw this.standardizeError(e, fsInfo.path, p);
                  } else {
                    return rv;
                  }
                }
              };
              MountableFileSystem2.prototype.readdir = function readdir(p, cb) {
                var this$1 = this;
                var fsInfo = this._getFs(p);
                fsInfo.fs.readdir(fsInfo.path, function(err, files) {
                  if (fsInfo.fs !== this$1.rootFs) {
                    try {
                      var rv = this$1.rootFs.readdirSync(p);
                      if (files) {
                        files = files.concat(rv.filter(function(val) {
                          return files.indexOf(val) === -1;
                        }));
                      } else {
                        files = rv;
                      }
                    } catch (e) {
                      if (err) {
                        return cb(this$1.standardizeError(err, fsInfo.path, p));
                      }
                    }
                  } else if (err) {
                    return cb(this$1.standardizeError(err, fsInfo.path, p));
                  }
                  cb(null, files);
                });
              };
              MountableFileSystem2.prototype.rmdirSync = function rmdirSync(p) {
                var fsInfo = this._getFs(p);
                if (this._containsMountPt(p)) {
                  throw ApiError.ENOTEMPTY(p);
                } else {
                  try {
                    fsInfo.fs.rmdirSync(fsInfo.path);
                  } catch (e) {
                    throw this.standardizeError(e, fsInfo.path, p);
                  }
                }
              };
              MountableFileSystem2.prototype.rmdir = function rmdir(p, cb) {
                var this$1 = this;
                var fsInfo = this._getFs(p);
                if (this._containsMountPt(p)) {
                  cb(ApiError.ENOTEMPTY(p));
                } else {
                  fsInfo.fs.rmdir(fsInfo.path, function(err) {
                    cb(err ? this$1.standardizeError(err, fsInfo.path, p) : null);
                  });
                }
              };
              MountableFileSystem2.prototype._containsMountPt = function _containsMountPt(p) {
                var mountPoints = this.mountList, len = mountPoints.length;
                for (var i2 = 0; i2 < len; i2++) {
                  var pt2 = mountPoints[i2];
                  if (pt2.length >= p.length && pt2.slice(0, p.length) === p) {
                    return true;
                  }
                }
                return false;
              };
              return MountableFileSystem2;
            }(BaseFileSystem);
            MountableFileSystem.Name = "MountableFileSystem";
            MountableFileSystem.Options = {};
            function defineFcn(name2, isSync, numArgs) {
              if (isSync) {
                return function() {
                  var args = [], len = arguments.length;
                  while (len--)
                    args[len] = arguments[len];
                  var path$$1 = args[0];
                  var rv = this._getFs(path$$1);
                  args[0] = rv.path;
                  try {
                    return rv.fs[name2].apply(rv.fs, args);
                  } catch (e) {
                    this.standardizeError(e, rv.path, path$$1);
                    throw e;
                  }
                };
              } else {
                return function() {
                  var this$1 = this;
                  var args = [], len = arguments.length;
                  while (len--)
                    args[len] = arguments[len];
                  var path$$1 = args[0];
                  var rv = this._getFs(path$$1);
                  args[0] = rv.path;
                  if (typeof args[args.length - 1] === "function") {
                    var cb = args[args.length - 1];
                    args[args.length - 1] = function() {
                      var args2 = [], len2 = arguments.length;
                      while (len2--)
                        args2[len2] = arguments[len2];
                      if (args2.length > 0 && args2[0] instanceof ApiError) {
                        this$1.standardizeError(args2[0], rv.path, path$$1);
                      }
                      cb.apply(null, args2);
                    };
                  }
                  return rv.fs[name2].apply(rv.fs, args);
                };
              }
            }
            var fsCmdMap = [
              ["exists", "unlink", "readlink"],
              ["stat", "mkdir", "realpath", "truncate"],
              ["open", "readFile", "chmod", "utimes"],
              ["chown"],
              ["writeFile", "appendFile"]
            ];
            for (var i = 0; i < fsCmdMap.length; i++) {
              var cmds = fsCmdMap[i];
              for (var i$1 = 0, list = cmds; i$1 < list.length; i$1 += 1) {
                var fnName = list[i$1];
                MountableFileSystem.prototype[fnName] = defineFcn(fnName, false, i + 1);
                MountableFileSystem.prototype[fnName + "Sync"] = defineFcn(fnName + "Sync", true, i + 1);
              }
            }
            var bfsSetImmediate;
            if (typeof setImmediate !== "undefined") {
              bfsSetImmediate = setImmediate;
            } else {
              var gScope = global$1;
              var timeouts = [];
              var messageName = "zero-timeout-message";
              var canUsePostMessage = function() {
                if (typeof gScope.importScripts !== "undefined" || !gScope.postMessage) {
                  return false;
                }
                var postMessageIsAsync = true;
                var oldOnMessage = gScope.onmessage;
                gScope.onmessage = function() {
                  postMessageIsAsync = false;
                };
                gScope.postMessage("", "*");
                gScope.onmessage = oldOnMessage;
                return postMessageIsAsync;
              };
              if (canUsePostMessage()) {
                bfsSetImmediate = function(fn) {
                  timeouts.push(fn);
                  gScope.postMessage(messageName, "*");
                };
                var handleMessage = function(event) {
                  if (event.source === self && event.data === messageName) {
                    if (event.stopPropagation) {
                      event.stopPropagation();
                    } else {
                      event.cancelBubble = true;
                    }
                    if (timeouts.length > 0) {
                      var fn = timeouts.shift();
                      return fn();
                    }
                  }
                };
                if (gScope.addEventListener) {
                  gScope.addEventListener("message", handleMessage, true);
                } else {
                  gScope.attachEvent("onmessage", handleMessage);
                }
              } else if (gScope.MessageChannel) {
                var channel = new gScope.MessageChannel();
                channel.port1.onmessage = function(event) {
                  if (timeouts.length > 0) {
                    return timeouts.shift()();
                  }
                };
                bfsSetImmediate = function(fn) {
                  timeouts.push(fn);
                  channel.port2.postMessage("");
                };
              } else {
                bfsSetImmediate = function(fn) {
                  return setTimeout(fn, 0);
                };
              }
            }
            var setImmediate$3 = bfsSetImmediate;
            var Mutex = function Mutex2() {
              this._locked = false;
              this._waiters = [];
            };
            Mutex.prototype.lock = function lock(cb) {
              if (this._locked) {
                this._waiters.push(cb);
                return;
              }
              this._locked = true;
              cb();
            };
            Mutex.prototype.unlock = function unlock() {
              if (!this._locked) {
                throw new Error("unlock of a non-locked mutex");
              }
              var next = this._waiters.shift();
              if (next) {
                setImmediate$3(next);
                return;
              }
              this._locked = false;
            };
            Mutex.prototype.tryLock = function tryLock() {
              if (this._locked) {
                return false;
              }
              this._locked = true;
              return true;
            };
            Mutex.prototype.isLocked = function isLocked() {
              return this._locked;
            };
            var LockedFS = function LockedFS2(fs4) {
              this._fs = fs4;
              this._mu = new Mutex();
            };
            LockedFS.prototype.getName = function getName() {
              return "LockedFS<" + this._fs.getName() + ">";
            };
            LockedFS.prototype.getFSUnlocked = function getFSUnlocked() {
              return this._fs;
            };
            LockedFS.prototype.initialize = function initialize3(cb) {
              this._fs.initialize(cb);
            };
            LockedFS.prototype.diskSpace = function diskSpace(p, cb) {
              this._fs.diskSpace(p, cb);
            };
            LockedFS.prototype.isReadOnly = function isReadOnly() {
              return this._fs.isReadOnly();
            };
            LockedFS.prototype.supportsLinks = function supportsLinks() {
              return this._fs.supportsLinks();
            };
            LockedFS.prototype.supportsProps = function supportsProps() {
              return this._fs.supportsProps();
            };
            LockedFS.prototype.supportsSynch = function supportsSynch() {
              return this._fs.supportsSynch();
            };
            LockedFS.prototype.rename = function rename(oldPath, newPath, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.rename(oldPath, newPath, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.renameSync = function renameSync(oldPath, newPath) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.renameSync(oldPath, newPath);
            };
            LockedFS.prototype.stat = function stat(p, isLstat, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.stat(p, isLstat, function(err, stat2) {
                  this$1._mu.unlock();
                  cb(err, stat2);
                });
              });
            };
            LockedFS.prototype.statSync = function statSync(p, isLstat) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.statSync(p, isLstat);
            };
            LockedFS.prototype.open = function open(p, flag, mode, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.open(p, flag, mode, function(err, fd) {
                  this$1._mu.unlock();
                  cb(err, fd);
                });
              });
            };
            LockedFS.prototype.openSync = function openSync(p, flag, mode) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.openSync(p, flag, mode);
            };
            LockedFS.prototype.unlink = function unlink(p, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.unlink(p, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.unlinkSync = function unlinkSync(p) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.unlinkSync(p);
            };
            LockedFS.prototype.rmdir = function rmdir(p, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.rmdir(p, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.rmdirSync = function rmdirSync(p) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.rmdirSync(p);
            };
            LockedFS.prototype.mkdir = function mkdir(p, mode, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.mkdir(p, mode, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.mkdirSync = function mkdirSync(p, mode) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.mkdirSync(p, mode);
            };
            LockedFS.prototype.readdir = function readdir(p, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.readdir(p, function(err, files) {
                  this$1._mu.unlock();
                  cb(err, files);
                });
              });
            };
            LockedFS.prototype.readdirSync = function readdirSync(p) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.readdirSync(p);
            };
            LockedFS.prototype.exists = function exists2(p, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.exists(p, function(exists3) {
                  this$1._mu.unlock();
                  cb(exists3);
                });
              });
            };
            LockedFS.prototype.existsSync = function existsSync(p) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.existsSync(p);
            };
            LockedFS.prototype.realpath = function realpath(p, cache2, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.realpath(p, cache2, function(err, resolvedPath) {
                  this$1._mu.unlock();
                  cb(err, resolvedPath);
                });
              });
            };
            LockedFS.prototype.realpathSync = function realpathSync(p, cache2) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.realpathSync(p, cache2);
            };
            LockedFS.prototype.truncate = function truncate(p, len, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.truncate(p, len, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.truncateSync = function truncateSync(p, len) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.truncateSync(p, len);
            };
            LockedFS.prototype.readFile = function readFile(fname, encoding, flag, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.readFile(fname, encoding, flag, function(err, data) {
                  this$1._mu.unlock();
                  cb(err, data);
                });
              });
            };
            LockedFS.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.readFileSync(fname, encoding, flag);
            };
            LockedFS.prototype.writeFile = function writeFile2(fname, data, encoding, flag, mode, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.writeFile(fname, data, encoding, flag, mode, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.writeFileSync = function writeFileSync(fname, data, encoding, flag, mode) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.writeFileSync(fname, data, encoding, flag, mode);
            };
            LockedFS.prototype.appendFile = function appendFile3(fname, data, encoding, flag, mode, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.appendFile(fname, data, encoding, flag, mode, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.appendFileSync = function appendFileSync(fname, data, encoding, flag, mode) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.appendFileSync(fname, data, encoding, flag, mode);
            };
            LockedFS.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.chmod(p, isLchmod, mode, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.chmodSync(p, isLchmod, mode);
            };
            LockedFS.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.chown(p, isLchown, uid, gid, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.chownSync(p, isLchown, uid, gid);
            };
            LockedFS.prototype.utimes = function utimes(p, atime, mtime, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.utimes(p, atime, mtime, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.utimesSync = function utimesSync(p, atime, mtime) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.utimesSync(p, atime, mtime);
            };
            LockedFS.prototype.link = function link(srcpath, dstpath, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.link(srcpath, dstpath, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.linkSync = function linkSync(srcpath, dstpath) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.linkSync(srcpath, dstpath);
            };
            LockedFS.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.symlink(srcpath, dstpath, type, function(err) {
                  this$1._mu.unlock();
                  cb(err);
                });
              });
            };
            LockedFS.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.symlinkSync(srcpath, dstpath, type);
            };
            LockedFS.prototype.readlink = function readlink(p, cb) {
              var this$1 = this;
              this._mu.lock(function() {
                this$1._fs.readlink(p, function(err, linkString) {
                  this$1._mu.unlock();
                  cb(err, linkString);
                });
              });
            };
            LockedFS.prototype.readlinkSync = function readlinkSync(p) {
              if (this._mu.isLocked()) {
                throw new Error("invalid sync call");
              }
              return this._fs.readlinkSync(p);
            };
            var deletionLogPath = "/.deletedFiles.log";
            function makeModeWritable(mode) {
              return 146 | mode;
            }
            function getFlag(f) {
              return FileFlag.getFileFlag(f);
            }
            var OverlayFile = function(PreloadFile$$1) {
              function OverlayFile2(fs4, path$$1, flag, stats, data) {
                PreloadFile$$1.call(this, fs4, path$$1, flag, stats, data);
              }
              if (PreloadFile$$1)
                OverlayFile2.__proto__ = PreloadFile$$1;
              OverlayFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
              OverlayFile2.prototype.constructor = OverlayFile2;
              OverlayFile2.prototype.sync = function sync(cb) {
                var this$1 = this;
                if (!this.isDirty()) {
                  cb(null);
                  return;
                }
                this._fs._syncAsync(this, function(err) {
                  this$1.resetDirty();
                  cb(err);
                });
              };
              OverlayFile2.prototype.syncSync = function syncSync() {
                if (this.isDirty()) {
                  this._fs._syncSync(this);
                  this.resetDirty();
                }
              };
              OverlayFile2.prototype.close = function close(cb) {
                this.sync(cb);
              };
              OverlayFile2.prototype.closeSync = function closeSync() {
                this.syncSync();
              };
              return OverlayFile2;
            }(PreloadFile);
            var UnlockedOverlayFS = function(BaseFileSystem$$1) {
              function UnlockedOverlayFS2(writable, readable) {
                BaseFileSystem$$1.call(this);
                this._isInitialized = false;
                this._initializeCallbacks = [];
                this._deletedFiles = {};
                this._deleteLog = "";
                this._deleteLogUpdatePending = false;
                this._deleteLogUpdateNeeded = false;
                this._deleteLogError = null;
                this._writable = writable;
                this._readable = readable;
                if (this._writable.isReadOnly()) {
                  throw new ApiError(ErrorCode.EINVAL, "Writable file system must be writable.");
                }
              }
              if (BaseFileSystem$$1)
                UnlockedOverlayFS2.__proto__ = BaseFileSystem$$1;
              UnlockedOverlayFS2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
              UnlockedOverlayFS2.prototype.constructor = UnlockedOverlayFS2;
              UnlockedOverlayFS2.isAvailable = function isAvailable() {
                return true;
              };
              UnlockedOverlayFS2.prototype.getOverlayedFileSystems = function getOverlayedFileSystems() {
                return {
                  readable: this._readable,
                  writable: this._writable
                };
              };
              UnlockedOverlayFS2.prototype._syncAsync = function _syncAsync(file, cb) {
                var this$1 = this;
                this.createParentDirectoriesAsync(file.getPath(), function(err) {
                  if (err) {
                    return cb(err);
                  }
                  this$1._writable.writeFile(file.getPath(), file.getBuffer(), null, getFlag("w"), file.getStats().mode, cb);
                });
              };
              UnlockedOverlayFS2.prototype._syncSync = function _syncSync(file) {
                this.createParentDirectories(file.getPath());
                this._writable.writeFileSync(file.getPath(), file.getBuffer(), null, getFlag("w"), file.getStats().mode);
              };
              UnlockedOverlayFS2.prototype.getName = function getName() {
                return OverlayFS.Name;
              };
              UnlockedOverlayFS2.prototype.initialize = function initialize3(cb) {
                var this$1 = this;
                var callbackArray = this._initializeCallbacks;
                var end = function(e) {
                  this$1._isInitialized = !e;
                  this$1._initializeCallbacks = [];
                  callbackArray.forEach(function(cb2) {
                    return cb2(e);
                  });
                };
                if (this._isInitialized) {
                  return cb();
                }
                callbackArray.push(cb);
                if (callbackArray.length !== 1) {
                  return;
                }
                this._writable.readFile(deletionLogPath, "utf8", getFlag("r"), function(err, data) {
                  if (err) {
                    if (err.errno !== ErrorCode.ENOENT) {
                      return end(err);
                    }
                  } else {
                    this$1._deleteLog = data;
                  }
                  this$1._reparseDeletionLog();
                  end();
                });
              };
              UnlockedOverlayFS2.prototype.isReadOnly = function isReadOnly() {
                return false;
              };
              UnlockedOverlayFS2.prototype.supportsSynch = function supportsSynch() {
                return this._readable.supportsSynch() && this._writable.supportsSynch();
              };
              UnlockedOverlayFS2.prototype.supportsLinks = function supportsLinks() {
                return false;
              };
              UnlockedOverlayFS2.prototype.supportsProps = function supportsProps() {
                return this._readable.supportsProps() && this._writable.supportsProps();
              };
              UnlockedOverlayFS2.prototype.getDeletionLog = function getDeletionLog() {
                return this._deleteLog;
              };
              UnlockedOverlayFS2.prototype.restoreDeletionLog = function restoreDeletionLog(log) {
                this._deleteLog = log;
                this._reparseDeletionLog();
                this.updateLog("");
              };
              UnlockedOverlayFS2.prototype.rename = function rename(oldPath, newPath, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb) || this.checkPathAsync(oldPath, cb) || this.checkPathAsync(newPath, cb)) {
                  return;
                }
                if (oldPath === deletionLogPath || newPath === deletionLogPath) {
                  return cb(ApiError.EPERM("Cannot rename deletion log."));
                }
                if (oldPath === newPath) {
                  return cb();
                }
                this.stat(oldPath, false, function(oldErr, oldStats) {
                  if (oldErr) {
                    return cb(oldErr);
                  }
                  return this$1.stat(newPath, false, function(newErr, newStats) {
                    var self2 = this$1;
                    function copyDirContents(files) {
                      var file = files.shift();
                      if (!file) {
                        return cb();
                      }
                      var oldFile = path2.resolve(oldPath, file);
                      var newFile = path2.resolve(newPath, file);
                      self2.rename(oldFile, newFile, function(err) {
                        if (err) {
                          return cb(err);
                        }
                        copyDirContents(files);
                      });
                    }
                    var mode = 511;
                    if (oldStats.isDirectory()) {
                      if (newErr) {
                        if (newErr.errno !== ErrorCode.ENOENT) {
                          return cb(newErr);
                        }
                        return this$1._writable.exists(oldPath, function(exists2) {
                          if (exists2) {
                            return this$1._writable.rename(oldPath, newPath, cb);
                          }
                          this$1._writable.mkdir(newPath, mode, function(mkdirErr) {
                            if (mkdirErr) {
                              return cb(mkdirErr);
                            }
                            this$1._readable.readdir(oldPath, function(err, files) {
                              if (err) {
                                return cb();
                              }
                              copyDirContents(files);
                            });
                          });
                        });
                      }
                      mode = newStats.mode;
                      if (!newStats.isDirectory()) {
                        return cb(ApiError.ENOTDIR(newPath));
                      }
                      this$1.readdir(newPath, function(readdirErr, files) {
                        if (files && files.length) {
                          return cb(ApiError.ENOTEMPTY(newPath));
                        }
                        this$1._readable.readdir(oldPath, function(err, files2) {
                          if (err) {
                            return cb();
                          }
                          copyDirContents(files2);
                        });
                      });
                    }
                    if (newStats && newStats.isDirectory()) {
                      return cb(ApiError.EISDIR(newPath));
                    }
                    this$1.readFile(oldPath, null, getFlag("r"), function(err, data) {
                      if (err) {
                        return cb(err);
                      }
                      return this$1.writeFile(newPath, data, null, getFlag("w"), oldStats.mode, function(err2) {
                        if (err2) {
                          return cb(err2);
                        }
                        return this$1.unlink(oldPath, cb);
                      });
                    });
                  });
                });
              };
              UnlockedOverlayFS2.prototype.renameSync = function renameSync(oldPath, newPath) {
                var this$1 = this;
                this.checkInitialized();
                this.checkPath(oldPath);
                this.checkPath(newPath);
                if (oldPath === deletionLogPath || newPath === deletionLogPath) {
                  throw ApiError.EPERM("Cannot rename deletion log.");
                }
                var oldStats = this.statSync(oldPath, false);
                if (oldStats.isDirectory()) {
                  if (oldPath === newPath) {
                    return;
                  }
                  var mode = 511;
                  if (this.existsSync(newPath)) {
                    var stats = this.statSync(newPath, false);
                    mode = stats.mode;
                    if (stats.isDirectory()) {
                      if (this.readdirSync(newPath).length > 0) {
                        throw ApiError.ENOTEMPTY(newPath);
                      }
                    } else {
                      throw ApiError.ENOTDIR(newPath);
                    }
                  }
                  if (this._writable.existsSync(oldPath)) {
                    this._writable.renameSync(oldPath, newPath);
                  } else if (!this._writable.existsSync(newPath)) {
                    this._writable.mkdirSync(newPath, mode);
                  }
                  if (this._readable.existsSync(oldPath)) {
                    this._readable.readdirSync(oldPath).forEach(function(name2) {
                      this$1.renameSync(path2.resolve(oldPath, name2), path2.resolve(newPath, name2));
                    });
                  }
                } else {
                  if (this.existsSync(newPath) && this.statSync(newPath, false).isDirectory()) {
                    throw ApiError.EISDIR(newPath);
                  }
                  this.writeFileSync(newPath, this.readFileSync(oldPath, null, getFlag("r")), null, getFlag("w"), oldStats.mode);
                }
                if (oldPath !== newPath && this.existsSync(oldPath)) {
                  this.unlinkSync(oldPath);
                }
              };
              UnlockedOverlayFS2.prototype.stat = function stat(p, isLstat, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb)) {
                  return;
                }
                this._writable.stat(p, isLstat, function(err, stat2) {
                  if (err && err.errno === ErrorCode.ENOENT) {
                    if (this$1._deletedFiles[p]) {
                      cb(ApiError.ENOENT(p));
                    }
                    this$1._readable.stat(p, isLstat, function(err2, stat3) {
                      if (stat3) {
                        stat3 = stat3.clone();
                        stat3.mode = makeModeWritable(stat3.mode);
                      }
                      cb(err2, stat3);
                    });
                  } else {
                    cb(err, stat2);
                  }
                });
              };
              UnlockedOverlayFS2.prototype.statSync = function statSync(p, isLstat) {
                this.checkInitialized();
                try {
                  return this._writable.statSync(p, isLstat);
                } catch (e) {
                  if (this._deletedFiles[p]) {
                    throw ApiError.ENOENT(p);
                  }
                  var oldStat = this._readable.statSync(p, isLstat).clone();
                  oldStat.mode = makeModeWritable(oldStat.mode);
                  return oldStat;
                }
              };
              UnlockedOverlayFS2.prototype.open = function open(p, flag, mode, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
                  return;
                }
                this.stat(p, false, function(err, stats) {
                  if (stats) {
                    switch (flag.pathExistsAction()) {
                      case ActionType.TRUNCATE_FILE:
                        return this$1.createParentDirectoriesAsync(p, function(err2) {
                          if (err2) {
                            return cb(err2);
                          }
                          this$1._writable.open(p, flag, mode, cb);
                        });
                      case ActionType.NOP:
                        return this$1._writable.exists(p, function(exists2) {
                          if (exists2) {
                            this$1._writable.open(p, flag, mode, cb);
                          } else {
                            stats = stats.clone();
                            stats.mode = mode;
                            this$1._readable.readFile(p, null, getFlag("r"), function(readFileErr, data) {
                              if (readFileErr) {
                                return cb(readFileErr);
                              }
                              if (stats.size === -1) {
                                stats.size = data.length;
                              }
                              var f = new OverlayFile(this$1, p, flag, stats, data);
                              cb(null, f);
                            });
                          }
                        });
                      default:
                        return cb(ApiError.EEXIST(p));
                    }
                  } else {
                    switch (flag.pathNotExistsAction()) {
                      case ActionType.CREATE_FILE:
                        return this$1.createParentDirectoriesAsync(p, function(err2) {
                          if (err2) {
                            return cb(err2);
                          }
                          return this$1._writable.open(p, flag, mode, cb);
                        });
                      default:
                        return cb(ApiError.ENOENT(p));
                    }
                  }
                });
              };
              UnlockedOverlayFS2.prototype.openSync = function openSync(p, flag, mode) {
                this.checkInitialized();
                this.checkPath(p);
                if (p === deletionLogPath) {
                  throw ApiError.EPERM("Cannot open deletion log.");
                }
                if (this.existsSync(p)) {
                  switch (flag.pathExistsAction()) {
                    case ActionType.TRUNCATE_FILE:
                      this.createParentDirectories(p);
                      return this._writable.openSync(p, flag, mode);
                    case ActionType.NOP:
                      if (this._writable.existsSync(p)) {
                        return this._writable.openSync(p, flag, mode);
                      } else {
                        var buf = this._readable.readFileSync(p, null, getFlag("r"));
                        var stats = this._readable.statSync(p, false).clone();
                        stats.mode = mode;
                        return new OverlayFile(this, p, flag, stats, buf);
                      }
                    default:
                      throw ApiError.EEXIST(p);
                  }
                } else {
                  switch (flag.pathNotExistsAction()) {
                    case ActionType.CREATE_FILE:
                      this.createParentDirectories(p);
                      return this._writable.openSync(p, flag, mode);
                    default:
                      throw ApiError.ENOENT(p);
                  }
                }
              };
              UnlockedOverlayFS2.prototype.unlink = function unlink(p, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
                  return;
                }
                this.exists(p, function(exists2) {
                  if (!exists2) {
                    return cb(ApiError.ENOENT(p));
                  }
                  this$1._writable.exists(p, function(writableExists) {
                    if (writableExists) {
                      return this$1._writable.unlink(p, function(err) {
                        if (err) {
                          return cb(err);
                        }
                        this$1.exists(p, function(readableExists) {
                          if (readableExists) {
                            this$1.deletePath(p);
                          }
                          cb(null);
                        });
                      });
                    } else {
                      this$1.deletePath(p);
                      cb(null);
                    }
                  });
                });
              };
              UnlockedOverlayFS2.prototype.unlinkSync = function unlinkSync(p) {
                this.checkInitialized();
                this.checkPath(p);
                if (this.existsSync(p)) {
                  if (this._writable.existsSync(p)) {
                    this._writable.unlinkSync(p);
                  }
                  if (this.existsSync(p)) {
                    this.deletePath(p);
                  }
                } else {
                  throw ApiError.ENOENT(p);
                }
              };
              UnlockedOverlayFS2.prototype.rmdir = function rmdir(p, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb)) {
                  return;
                }
                var rmdirLower = function() {
                  this$1.readdir(p, function(err, files) {
                    if (err) {
                      return cb(err);
                    }
                    if (files.length) {
                      return cb(ApiError.ENOTEMPTY(p));
                    }
                    this$1.deletePath(p);
                    cb(null);
                  });
                };
                this.exists(p, function(exists2) {
                  if (!exists2) {
                    return cb(ApiError.ENOENT(p));
                  }
                  this$1._writable.exists(p, function(writableExists) {
                    if (writableExists) {
                      this$1._writable.rmdir(p, function(err) {
                        if (err) {
                          return cb(err);
                        }
                        this$1._readable.exists(p, function(readableExists) {
                          if (readableExists) {
                            rmdirLower();
                          } else {
                            cb();
                          }
                        });
                      });
                    } else {
                      rmdirLower();
                    }
                  });
                });
              };
              UnlockedOverlayFS2.prototype.rmdirSync = function rmdirSync(p) {
                this.checkInitialized();
                if (this.existsSync(p)) {
                  if (this._writable.existsSync(p)) {
                    this._writable.rmdirSync(p);
                  }
                  if (this.existsSync(p)) {
                    if (this.readdirSync(p).length > 0) {
                      throw ApiError.ENOTEMPTY(p);
                    } else {
                      this.deletePath(p);
                    }
                  }
                } else {
                  throw ApiError.ENOENT(p);
                }
              };
              UnlockedOverlayFS2.prototype.mkdir = function mkdir(p, mode, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb)) {
                  return;
                }
                this.exists(p, function(exists2) {
                  if (exists2) {
                    return cb(ApiError.EEXIST(p));
                  }
                  this$1.createParentDirectoriesAsync(p, function(err) {
                    if (err) {
                      return cb(err);
                    }
                    this$1._writable.mkdir(p, mode, cb);
                  });
                });
              };
              UnlockedOverlayFS2.prototype.mkdirSync = function mkdirSync(p, mode) {
                this.checkInitialized();
                if (this.existsSync(p)) {
                  throw ApiError.EEXIST(p);
                } else {
                  this.createParentDirectories(p);
                  this._writable.mkdirSync(p, mode);
                }
              };
              UnlockedOverlayFS2.prototype.readdir = function readdir(p, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb)) {
                  return;
                }
                this.stat(p, false, function(err, dirStats) {
                  if (err) {
                    return cb(err);
                  }
                  if (!dirStats.isDirectory()) {
                    return cb(ApiError.ENOTDIR(p));
                  }
                  this$1._writable.readdir(p, function(err2, wFiles) {
                    if (err2 && err2.code !== "ENOENT") {
                      return cb(err2);
                    } else if (err2 || !wFiles) {
                      wFiles = [];
                    }
                    this$1._readable.readdir(p, function(err3, rFiles) {
                      if (err3 || !rFiles) {
                        rFiles = [];
                      }
                      var seenMap = {};
                      var filtered = wFiles.concat(rFiles.filter(function(fPath) {
                        return !this$1._deletedFiles[p + "/" + fPath];
                      })).filter(function(fPath) {
                        var result = !seenMap[fPath];
                        seenMap[fPath] = true;
                        return result;
                      });
                      cb(null, filtered);
                    });
                  });
                });
              };
              UnlockedOverlayFS2.prototype.readdirSync = function readdirSync(p) {
                var this$1 = this;
                this.checkInitialized();
                var dirStats = this.statSync(p, false);
                if (!dirStats.isDirectory()) {
                  throw ApiError.ENOTDIR(p);
                }
                var contents = [];
                try {
                  contents = contents.concat(this._writable.readdirSync(p));
                } catch (e) {
                }
                try {
                  contents = contents.concat(this._readable.readdirSync(p).filter(function(fPath) {
                    return !this$1._deletedFiles[p + "/" + fPath];
                  }));
                } catch (e) {
                }
                var seenMap = {};
                return contents.filter(function(fileP) {
                  var result = !seenMap[fileP];
                  seenMap[fileP] = true;
                  return result;
                });
              };
              UnlockedOverlayFS2.prototype.exists = function exists2(p, cb) {
                var this$1 = this;
                this.checkInitialized();
                this._writable.exists(p, function(existsWritable) {
                  if (existsWritable) {
                    return cb(true);
                  }
                  this$1._readable.exists(p, function(existsReadable) {
                    cb(existsReadable && this$1._deletedFiles[p] !== true);
                  });
                });
              };
              UnlockedOverlayFS2.prototype.existsSync = function existsSync(p) {
                this.checkInitialized();
                return this._writable.existsSync(p) || this._readable.existsSync(p) && this._deletedFiles[p] !== true;
              };
              UnlockedOverlayFS2.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb)) {
                  return;
                }
                this.operateOnWritableAsync(p, function(err) {
                  if (err) {
                    return cb(err);
                  } else {
                    this$1._writable.chmod(p, isLchmod, mode, cb);
                  }
                });
              };
              UnlockedOverlayFS2.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
                var this$1 = this;
                this.checkInitialized();
                this.operateOnWritable(p, function() {
                  this$1._writable.chmodSync(p, isLchmod, mode);
                });
              };
              UnlockedOverlayFS2.prototype.chown = function chown(p, isLchmod, uid, gid, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb)) {
                  return;
                }
                this.operateOnWritableAsync(p, function(err) {
                  if (err) {
                    return cb(err);
                  } else {
                    this$1._writable.chown(p, isLchmod, uid, gid, cb);
                  }
                });
              };
              UnlockedOverlayFS2.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
                var this$1 = this;
                this.checkInitialized();
                this.operateOnWritable(p, function() {
                  this$1._writable.chownSync(p, isLchown, uid, gid);
                });
              };
              UnlockedOverlayFS2.prototype.utimes = function utimes(p, atime, mtime, cb) {
                var this$1 = this;
                if (!this.checkInitAsync(cb)) {
                  return;
                }
                this.operateOnWritableAsync(p, function(err) {
                  if (err) {
                    return cb(err);
                  } else {
                    this$1._writable.utimes(p, atime, mtime, cb);
                  }
                });
              };
              UnlockedOverlayFS2.prototype.utimesSync = function utimesSync(p, atime, mtime) {
                var this$1 = this;
                this.checkInitialized();
                this.operateOnWritable(p, function() {
                  this$1._writable.utimesSync(p, atime, mtime);
                });
              };
              UnlockedOverlayFS2.prototype.deletePath = function deletePath(p) {
                this._deletedFiles[p] = true;
                this.updateLog("d" + p + "\n");
              };
              UnlockedOverlayFS2.prototype.updateLog = function updateLog(addition) {
                var this$1 = this;
                this._deleteLog += addition;
                if (this._deleteLogUpdatePending) {
                  this._deleteLogUpdateNeeded = true;
                } else {
                  this._deleteLogUpdatePending = true;
                  this._writable.writeFile(deletionLogPath, this._deleteLog, "utf8", FileFlag.getFileFlag("w"), 420, function(e) {
                    this$1._deleteLogUpdatePending = false;
                    if (e) {
                      this$1._deleteLogError = e;
                    } else if (this$1._deleteLogUpdateNeeded) {
                      this$1._deleteLogUpdateNeeded = false;
                      this$1.updateLog("");
                    }
                  });
                }
              };
              UnlockedOverlayFS2.prototype._reparseDeletionLog = function _reparseDeletionLog() {
                var this$1 = this;
                this._deletedFiles = {};
                this._deleteLog.split("\n").forEach(function(path$$1) {
                  this$1._deletedFiles[path$$1.slice(1)] = path$$1.slice(0, 1) === "d";
                });
              };
              UnlockedOverlayFS2.prototype.checkInitialized = function checkInitialized() {
                if (!this._isInitialized) {
                  throw new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");
                } else if (this._deleteLogError !== null) {
                  var e = this._deleteLogError;
                  this._deleteLogError = null;
                  throw e;
                }
              };
              UnlockedOverlayFS2.prototype.checkInitAsync = function checkInitAsync(cb) {
                if (!this._isInitialized) {
                  cb(new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it."));
                  return false;
                } else if (this._deleteLogError !== null) {
                  var e = this._deleteLogError;
                  this._deleteLogError = null;
                  cb(e);
                  return false;
                }
                return true;
              };
              UnlockedOverlayFS2.prototype.checkPath = function checkPath(p) {
                if (p === deletionLogPath) {
                  throw ApiError.EPERM(p);
                }
              };
              UnlockedOverlayFS2.prototype.checkPathAsync = function checkPathAsync(p, cb) {
                if (p === deletionLogPath) {
                  cb(ApiError.EPERM(p));
                  return true;
                }
                return false;
              };
              UnlockedOverlayFS2.prototype.createParentDirectoriesAsync = function createParentDirectoriesAsync(p, cb) {
                var parent = path2.dirname(p);
                var toCreate = [];
                var self2 = this;
                this._writable.stat(parent, false, statDone);
                function statDone(err, stat) {
                  if (err) {
                    toCreate.push(parent);
                    parent = path2.dirname(parent);
                    self2._writable.stat(parent, false, statDone);
                  } else {
                    createParents();
                  }
                }
                function createParents() {
                  if (!toCreate.length) {
                    return cb();
                  }
                  var dir2 = toCreate.pop();
                  self2._readable.stat(dir2, false, function(err, stats) {
                    if (!stats) {
                      return cb();
                    }
                    self2._writable.mkdir(dir2, stats.mode, function(err2) {
                      if (err2) {
                        return cb(err2);
                      }
                      createParents();
                    });
                  });
                }
              };
              UnlockedOverlayFS2.prototype.createParentDirectories = function createParentDirectories(p) {
                var this$1 = this;
                var parent = path2.dirname(p), toCreate = [];
                while (!this._writable.existsSync(parent)) {
                  toCreate.push(parent);
                  parent = path2.dirname(parent);
                }
                toCreate = toCreate.reverse();
                toCreate.forEach(function(p2) {
                  this$1._writable.mkdirSync(p2, this$1.statSync(p2, false).mode);
                });
              };
              UnlockedOverlayFS2.prototype.operateOnWritable = function operateOnWritable(p, f) {
                if (this.existsSync(p)) {
                  if (!this._writable.existsSync(p)) {
                    this.copyToWritable(p);
                  }
                  f();
                } else {
                  throw ApiError.ENOENT(p);
                }
              };
              UnlockedOverlayFS2.prototype.operateOnWritableAsync = function operateOnWritableAsync(p, cb) {
                var this$1 = this;
                this.exists(p, function(exists2) {
                  if (!exists2) {
                    return cb(ApiError.ENOENT(p));
                  }
                  this$1._writable.exists(p, function(existsWritable) {
                    if (existsWritable) {
                      cb();
                    } else {
                      return this$1.copyToWritableAsync(p, cb);
                    }
                  });
                });
              };
              UnlockedOverlayFS2.prototype.copyToWritable = function copyToWritable(p) {
                var pStats = this.statSync(p, false);
                if (pStats.isDirectory()) {
                  this._writable.mkdirSync(p, pStats.mode);
                } else {
                  this.writeFileSync(p, this._readable.readFileSync(p, null, getFlag("r")), null, getFlag("w"), this.statSync(p, false).mode);
                }
              };
              UnlockedOverlayFS2.prototype.copyToWritableAsync = function copyToWritableAsync(p, cb) {
                var this$1 = this;
                this.stat(p, false, function(err, pStats) {
                  if (err) {
                    return cb(err);
                  }
                  if (pStats.isDirectory()) {
                    return this$1._writable.mkdir(p, pStats.mode, cb);
                  }
                  this$1._readable.readFile(p, null, getFlag("r"), function(err2, data) {
                    if (err2) {
                      return cb(err2);
                    }
                    this$1.writeFile(p, data, null, getFlag("w"), pStats.mode, cb);
                  });
                });
              };
              return UnlockedOverlayFS2;
            }(BaseFileSystem);
            var OverlayFS = function(LockedFS$$1) {
              function OverlayFS2(writable, readable, deprecateMsg) {
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                LockedFS$$1.call(this, new UnlockedOverlayFS(writable, readable));
                deprecationMessage(deprecateMsg, OverlayFS2.Name, { readable: "readable file system", writable: "writable file system" });
              }
              if (LockedFS$$1)
                OverlayFS2.__proto__ = LockedFS$$1;
              OverlayFS2.prototype = Object.create(LockedFS$$1 && LockedFS$$1.prototype);
              OverlayFS2.prototype.constructor = OverlayFS2;
              OverlayFS2.Create = function Create(opts, cb) {
                try {
                  var fs4 = new OverlayFS2(opts.writable, opts.readable, false);
                  fs4.initialize(function(e) {
                    cb(e, fs4);
                  }, false);
                } catch (e) {
                  cb(e);
                }
              };
              OverlayFS2.isAvailable = function isAvailable() {
                return UnlockedOverlayFS.isAvailable();
              };
              OverlayFS2.prototype.initialize = function initialize3(cb, deprecateMsg) {
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                if (deprecateMsg) {
                  console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use 'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)' to create and initialize OverlayFS instances.");
                }
                LockedFS$$1.prototype.initialize.call(this, cb);
              };
              OverlayFS2.prototype.getOverlayedFileSystems = function getOverlayedFileSystems() {
                return LockedFS$$1.prototype.getFSUnlocked.call(this).getOverlayedFileSystems();
              };
              OverlayFS2.prototype.unwrap = function unwrap() {
                return LockedFS$$1.prototype.getFSUnlocked.call(this);
              };
              return OverlayFS2;
            }(LockedFS);
            OverlayFS.Name = "OverlayFS";
            OverlayFS.Options = {
              writable: {
                type: "object",
                description: "The file system to write modified files to."
              },
              readable: {
                type: "object",
                description: "The file system that initially populates this file system."
              }
            };
            var SpecialArgType;
            (function(SpecialArgType2) {
              SpecialArgType2[SpecialArgType2["CB"] = 0] = "CB";
              SpecialArgType2[SpecialArgType2["FD"] = 1] = "FD";
              SpecialArgType2[SpecialArgType2["API_ERROR"] = 2] = "API_ERROR";
              SpecialArgType2[SpecialArgType2["STATS"] = 3] = "STATS";
              SpecialArgType2[SpecialArgType2["PROBE"] = 4] = "PROBE";
              SpecialArgType2[SpecialArgType2["FILEFLAG"] = 5] = "FILEFLAG";
              SpecialArgType2[SpecialArgType2["BUFFER"] = 6] = "BUFFER";
              SpecialArgType2[SpecialArgType2["ERROR"] = 7] = "ERROR";
            })(SpecialArgType || (SpecialArgType = {}));
            var CallbackArgumentConverter = function CallbackArgumentConverter2() {
              this._callbacks = {};
              this._nextId = 0;
            };
            CallbackArgumentConverter.prototype.toRemoteArg = function toRemoteArg(cb) {
              var id = this._nextId++;
              this._callbacks[id] = cb;
              return {
                type: SpecialArgType.CB,
                id
              };
            };
            CallbackArgumentConverter.prototype.toLocalArg = function toLocalArg(id) {
              var cb = this._callbacks[id];
              delete this._callbacks[id];
              return cb;
            };
            var FileDescriptorArgumentConverter = function FileDescriptorArgumentConverter2() {
              this._fileDescriptors = {};
              this._nextId = 0;
            };
            FileDescriptorArgumentConverter.prototype.toRemoteArg = function toRemoteArg(fd, p, flag, cb) {
              var id = this._nextId++;
              var data;
              var stat;
              this._fileDescriptors[id] = fd;
              fd.stat(function(err, stats) {
                if (err) {
                  cb(err);
                } else {
                  stat = bufferToTransferrableObject(stats.toBuffer());
                  if (flag.isReadable()) {
                    fd.read(Buffer2.alloc(stats.size), 0, stats.size, 0, function(err2, bytesRead, buff) {
                      if (err2) {
                        cb(err2);
                      } else {
                        data = bufferToTransferrableObject(buff);
                        cb(null, {
                          type: SpecialArgType.FD,
                          id,
                          data,
                          stat,
                          path: p,
                          flag: flag.getFlagString()
                        });
                      }
                    });
                  } else {
                    cb(null, {
                      type: SpecialArgType.FD,
                      id,
                      data: new ArrayBuffer(0),
                      stat,
                      path: p,
                      flag: flag.getFlagString()
                    });
                  }
                }
              });
            };
            FileDescriptorArgumentConverter.prototype.applyFdAPIRequest = function applyFdAPIRequest(request, cb) {
              var this$1 = this;
              var fdArg = request.args[0];
              this._applyFdChanges(fdArg, function(err, fd) {
                if (err) {
                  cb(err);
                } else {
                  fd[request.method](function(e) {
                    if (request.method === "close") {
                      delete this$1._fileDescriptors[fdArg.id];
                    }
                    cb(e);
                  });
                }
              });
            };
            FileDescriptorArgumentConverter.prototype._applyFdChanges = function _applyFdChanges(remoteFd, cb) {
              var fd = this._fileDescriptors[remoteFd.id], data = transferrableObjectToBuffer(remoteFd.data), remoteStats = Stats.fromBuffer(transferrableObjectToBuffer(remoteFd.stat));
              var flag = FileFlag.getFileFlag(remoteFd.flag);
              if (flag.isWriteable()) {
                fd.write(data, 0, data.length, flag.isAppendable() ? fd.getPos() : 0, function(e) {
                  function applyStatChanges() {
                    fd.stat(function(e2, stats) {
                      if (e2) {
                        cb(e2);
                      } else {
                        if (stats.mode !== remoteStats.mode) {
                          fd.chmod(remoteStats.mode, function(e3) {
                            cb(e3, fd);
                          });
                        } else {
                          cb(e2, fd);
                        }
                      }
                    });
                  }
                  if (e) {
                    cb(e);
                  } else {
                    if (!flag.isAppendable()) {
                      fd.truncate(data.length, function() {
                        applyStatChanges();
                      });
                    } else {
                      applyStatChanges();
                    }
                  }
                });
              } else {
                cb(null, fd);
              }
            };
            function apiErrorLocal2Remote(e) {
              return {
                type: SpecialArgType.API_ERROR,
                errorData: bufferToTransferrableObject(e.writeToBuffer())
              };
            }
            function apiErrorRemote2Local(e) {
              return ApiError.fromBuffer(transferrableObjectToBuffer(e.errorData));
            }
            function errorLocal2Remote(e) {
              return {
                type: SpecialArgType.ERROR,
                name: e.name,
                message: e.message,
                stack: e.stack
              };
            }
            function errorRemote2Local(e) {
              var cnstr = global$1[e.name];
              if (typeof cnstr !== "function") {
                cnstr = Error;
              }
              var err = new cnstr(e.message);
              err.stack = e.stack;
              return err;
            }
            function statsLocal2Remote(stats) {
              return {
                type: SpecialArgType.STATS,
                statsData: bufferToTransferrableObject(stats.toBuffer())
              };
            }
            function statsRemote2Local(stats) {
              return Stats.fromBuffer(transferrableObjectToBuffer(stats.statsData));
            }
            function fileFlagLocal2Remote(flag) {
              return {
                type: SpecialArgType.FILEFLAG,
                flagStr: flag.getFlagString()
              };
            }
            function fileFlagRemote2Local(remoteFlag) {
              return FileFlag.getFileFlag(remoteFlag.flagStr);
            }
            function bufferToTransferrableObject(buff) {
              return buffer2ArrayBuffer(buff);
            }
            function transferrableObjectToBuffer(buff) {
              return arrayBuffer2Buffer(buff);
            }
            function bufferLocal2Remote(buff) {
              return {
                type: SpecialArgType.BUFFER,
                data: bufferToTransferrableObject(buff)
              };
            }
            function bufferRemote2Local(buffArg) {
              return transferrableObjectToBuffer(buffArg.data);
            }
            function isAPIRequest(data) {
              return data && typeof data === "object" && data.hasOwnProperty("browserfsMessage") && data["browserfsMessage"];
            }
            function isAPIResponse(data) {
              return data && typeof data === "object" && data.hasOwnProperty("browserfsMessage") && data["browserfsMessage"];
            }
            var WorkerFile = function(PreloadFile$$1) {
              function WorkerFile2(_fs, _path, _flag, _stat, remoteFdId, contents) {
                PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
                this._remoteFdId = remoteFdId;
              }
              if (PreloadFile$$1)
                WorkerFile2.__proto__ = PreloadFile$$1;
              WorkerFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
              WorkerFile2.prototype.constructor = WorkerFile2;
              WorkerFile2.prototype.getRemoteFdId = function getRemoteFdId() {
                return this._remoteFdId;
              };
              WorkerFile2.prototype.toRemoteArg = function toRemoteArg() {
                return {
                  type: SpecialArgType.FD,
                  id: this._remoteFdId,
                  data: bufferToTransferrableObject(this.getBuffer()),
                  stat: bufferToTransferrableObject(this.getStats().toBuffer()),
                  path: this.getPath(),
                  flag: this.getFlag().getFlagString()
                };
              };
              WorkerFile2.prototype.sync = function sync(cb) {
                this._syncClose("sync", cb);
              };
              WorkerFile2.prototype.close = function close(cb) {
                this._syncClose("close", cb);
              };
              WorkerFile2.prototype._syncClose = function _syncClose(type, cb) {
                var this$1 = this;
                if (this.isDirty()) {
                  this._fs.syncClose(type, this, function(e) {
                    if (!e) {
                      this$1.resetDirty();
                    }
                    cb(e);
                  });
                } else {
                  cb();
                }
              };
              return WorkerFile2;
            }(PreloadFile);
            var WorkerFS = function(BaseFileSystem$$1) {
              function WorkerFS2(worker, deprecateMsg) {
                var this$1 = this;
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                BaseFileSystem$$1.call(this);
                this._callbackConverter = new CallbackArgumentConverter();
                this._isInitialized = false;
                this._isReadOnly = false;
                this._supportLinks = false;
                this._supportProps = false;
                this._worker = worker;
                deprecationMessage(deprecateMsg, WorkerFS2.Name, { worker: "Web Worker instance" });
                this._worker.addEventListener("message", function(e) {
                  var resp = e.data;
                  if (isAPIResponse(resp)) {
                    var i2;
                    var args = resp.args;
                    var fixedArgs = new Array(args.length);
                    for (i2 = 0; i2 < fixedArgs.length; i2++) {
                      fixedArgs[i2] = this$1._argRemote2Local(args[i2]);
                    }
                    this$1._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);
                  }
                });
              }
              if (BaseFileSystem$$1)
                WorkerFS2.__proto__ = BaseFileSystem$$1;
              WorkerFS2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
              WorkerFS2.prototype.constructor = WorkerFS2;
              WorkerFS2.Create = function Create(opts, cb) {
                var fs4 = new WorkerFS2(opts.worker, false);
                fs4.initialize(function() {
                  cb(null, fs4);
                });
              };
              WorkerFS2.isAvailable = function isAvailable() {
                return typeof importScripts !== "undefined" || typeof Worker !== "undefined";
              };
              WorkerFS2.attachRemoteListener = function attachRemoteListener(worker) {
                var fdConverter = new FileDescriptorArgumentConverter();
                function argLocal2Remote(arg, requestArgs, cb) {
                  switch (typeof arg) {
                    case "object":
                      if (arg instanceof Stats) {
                        cb(null, statsLocal2Remote(arg));
                      } else if (arg instanceof ApiError) {
                        cb(null, apiErrorLocal2Remote(arg));
                      } else if (arg instanceof BaseFile) {
                        cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));
                      } else if (arg instanceof FileFlag) {
                        cb(null, fileFlagLocal2Remote(arg));
                      } else if (arg instanceof Buffer2) {
                        cb(null, bufferLocal2Remote(arg));
                      } else if (arg instanceof Error) {
                        cb(null, errorLocal2Remote(arg));
                      } else {
                        cb(null, arg);
                      }
                      break;
                    default:
                      cb(null, arg);
                      break;
                  }
                }
                function argRemote2Local(arg, fixedRequestArgs) {
                  if (!arg) {
                    return arg;
                  }
                  switch (typeof arg) {
                    case "object":
                      if (typeof arg["type"] === "number") {
                        var specialArg = arg;
                        switch (specialArg.type) {
                          case SpecialArgType.CB:
                            var cbId = arg.id;
                            return function() {
                              var arguments$1 = arguments;
                              var i2;
                              var fixedArgs = new Array(arguments.length);
                              var message, countdown = arguments.length;
                              function abortAndSendError(err) {
                                if (countdown > 0) {
                                  countdown = -1;
                                  message = {
                                    browserfsMessage: true,
                                    cbId,
                                    args: [apiErrorLocal2Remote(err)]
                                  };
                                  worker.postMessage(message);
                                }
                              }
                              for (i2 = 0; i2 < arguments.length; i2++) {
                                (function(i3, arg2) {
                                  argLocal2Remote(arg2, fixedRequestArgs, function(err, fixedArg) {
                                    fixedArgs[i3] = fixedArg;
                                    if (err) {
                                      abortAndSendError(err);
                                    } else if (--countdown === 0) {
                                      message = {
                                        browserfsMessage: true,
                                        cbId,
                                        args: fixedArgs
                                      };
                                      worker.postMessage(message);
                                    }
                                  });
                                })(i2, arguments$1[i2]);
                              }
                              if (arguments.length === 0) {
                                message = {
                                  browserfsMessage: true,
                                  cbId,
                                  args: fixedArgs
                                };
                                worker.postMessage(message);
                              }
                            };
                          case SpecialArgType.API_ERROR:
                            return apiErrorRemote2Local(specialArg);
                          case SpecialArgType.STATS:
                            return statsRemote2Local(specialArg);
                          case SpecialArgType.FILEFLAG:
                            return fileFlagRemote2Local(specialArg);
                          case SpecialArgType.BUFFER:
                            return bufferRemote2Local(specialArg);
                          case SpecialArgType.ERROR:
                            return errorRemote2Local(specialArg);
                          default:
                            return arg;
                        }
                      } else {
                        return arg;
                      }
                    default:
                      return arg;
                  }
                }
                worker.addEventListener("message", function(e) {
                  var request = e.data;
                  if (isAPIRequest(request)) {
                    var args = request.args, fixedArgs = new Array(args.length);
                    switch (request.method) {
                      case "close":
                      case "sync":
                        (function() {
                          var remoteCb = args[1];
                          fdConverter.applyFdAPIRequest(request, function(err) {
                            var response = {
                              browserfsMessage: true,
                              cbId: remoteCb.id,
                              args: err ? [apiErrorLocal2Remote(err)] : []
                            };
                            worker.postMessage(response);
                          });
                        })();
                        break;
                      case "probe":
                        (function() {
                          var rootFs = _fsMock.getRootFS(), remoteCb = args[1], probeResponse = {
                            type: SpecialArgType.PROBE,
                            isReadOnly: rootFs.isReadOnly(),
                            supportsLinks: rootFs.supportsLinks(),
                            supportsProps: rootFs.supportsProps()
                          }, response = {
                            browserfsMessage: true,
                            cbId: remoteCb.id,
                            args: [probeResponse]
                          };
                          worker.postMessage(response);
                        })();
                        break;
                      default:
                        for (var i2 = 0; i2 < args.length; i2++) {
                          fixedArgs[i2] = argRemote2Local(args[i2], fixedArgs);
                        }
                        var rootFS = _fsMock.getRootFS();
                        rootFS[request.method].apply(rootFS, fixedArgs);
                        break;
                    }
                  }
                });
              };
              WorkerFS2.prototype.getName = function getName() {
                return WorkerFS2.Name;
              };
              WorkerFS2.prototype.initialize = function initialize3(cb) {
                var this$1 = this;
                if (!this._isInitialized) {
                  var message = {
                    browserfsMessage: true,
                    method: "probe",
                    args: [this._argLocal2Remote(emptyBuffer()), this._callbackConverter.toRemoteArg(function(probeResponse) {
                      this$1._isInitialized = true;
                      this$1._isReadOnly = probeResponse.isReadOnly;
                      this$1._supportLinks = probeResponse.supportsLinks;
                      this$1._supportProps = probeResponse.supportsProps;
                      cb();
                    })]
                  };
                  this._worker.postMessage(message);
                } else {
                  cb();
                }
              };
              WorkerFS2.prototype.isReadOnly = function isReadOnly() {
                return this._isReadOnly;
              };
              WorkerFS2.prototype.supportsSynch = function supportsSynch() {
                return false;
              };
              WorkerFS2.prototype.supportsLinks = function supportsLinks() {
                return this._supportLinks;
              };
              WorkerFS2.prototype.supportsProps = function supportsProps() {
                return this._supportProps;
              };
              WorkerFS2.prototype.rename = function rename(oldPath, newPath, cb) {
                this._rpc("rename", arguments);
              };
              WorkerFS2.prototype.stat = function stat(p, isLstat, cb) {
                this._rpc("stat", arguments);
              };
              WorkerFS2.prototype.open = function open(p, flag, mode, cb) {
                this._rpc("open", arguments);
              };
              WorkerFS2.prototype.unlink = function unlink(p, cb) {
                this._rpc("unlink", arguments);
              };
              WorkerFS2.prototype.rmdir = function rmdir(p, cb) {
                this._rpc("rmdir", arguments);
              };
              WorkerFS2.prototype.mkdir = function mkdir(p, mode, cb) {
                this._rpc("mkdir", arguments);
              };
              WorkerFS2.prototype.readdir = function readdir(p, cb) {
                this._rpc("readdir", arguments);
              };
              WorkerFS2.prototype.exists = function exists2(p, cb) {
                this._rpc("exists", arguments);
              };
              WorkerFS2.prototype.realpath = function realpath(p, cache2, cb) {
                this._rpc("realpath", arguments);
              };
              WorkerFS2.prototype.truncate = function truncate(p, len, cb) {
                this._rpc("truncate", arguments);
              };
              WorkerFS2.prototype.readFile = function readFile(fname, encoding, flag, cb) {
                this._rpc("readFile", arguments);
              };
              WorkerFS2.prototype.writeFile = function writeFile2(fname, data, encoding, flag, mode, cb) {
                this._rpc("writeFile", arguments);
              };
              WorkerFS2.prototype.appendFile = function appendFile3(fname, data, encoding, flag, mode, cb) {
                this._rpc("appendFile", arguments);
              };
              WorkerFS2.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
                this._rpc("chmod", arguments);
              };
              WorkerFS2.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
                this._rpc("chown", arguments);
              };
              WorkerFS2.prototype.utimes = function utimes(p, atime, mtime, cb) {
                this._rpc("utimes", arguments);
              };
              WorkerFS2.prototype.link = function link(srcpath, dstpath, cb) {
                this._rpc("link", arguments);
              };
              WorkerFS2.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
                this._rpc("symlink", arguments);
              };
              WorkerFS2.prototype.readlink = function readlink(p, cb) {
                this._rpc("readlink", arguments);
              };
              WorkerFS2.prototype.syncClose = function syncClose(method, fd, cb) {
                this._worker.postMessage({
                  browserfsMessage: true,
                  method,
                  args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]
                });
              };
              WorkerFS2.prototype._argRemote2Local = function _argRemote2Local(arg) {
                if (!arg) {
                  return arg;
                }
                switch (typeof arg) {
                  case "object":
                    if (typeof arg["type"] === "number") {
                      var specialArg = arg;
                      switch (specialArg.type) {
                        case SpecialArgType.API_ERROR:
                          return apiErrorRemote2Local(specialArg);
                        case SpecialArgType.FD:
                          var fdArg = specialArg;
                          return new WorkerFile(this, fdArg.path, FileFlag.getFileFlag(fdArg.flag), Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)), fdArg.id, transferrableObjectToBuffer(fdArg.data));
                        case SpecialArgType.STATS:
                          return statsRemote2Local(specialArg);
                        case SpecialArgType.FILEFLAG:
                          return fileFlagRemote2Local(specialArg);
                        case SpecialArgType.BUFFER:
                          return bufferRemote2Local(specialArg);
                        case SpecialArgType.ERROR:
                          return errorRemote2Local(specialArg);
                        default:
                          return arg;
                      }
                    } else {
                      return arg;
                    }
                  default:
                    return arg;
                }
              };
              WorkerFS2.prototype._rpc = function _rpc(methodName, args) {
                var this$1 = this;
                var fixedArgs = new Array(args.length);
                for (var i2 = 0; i2 < args.length; i2++) {
                  fixedArgs[i2] = this$1._argLocal2Remote(args[i2]);
                }
                var message = {
                  browserfsMessage: true,
                  method: methodName,
                  args: fixedArgs
                };
                this._worker.postMessage(message);
              };
              WorkerFS2.prototype._argLocal2Remote = function _argLocal2Remote(arg) {
                if (!arg) {
                  return arg;
                }
                switch (typeof arg) {
                  case "object":
                    if (arg instanceof Stats) {
                      return statsLocal2Remote(arg);
                    } else if (arg instanceof ApiError) {
                      return apiErrorLocal2Remote(arg);
                    } else if (arg instanceof WorkerFile) {
                      return arg.toRemoteArg();
                    } else if (arg instanceof FileFlag) {
                      return fileFlagLocal2Remote(arg);
                    } else if (arg instanceof Buffer2) {
                      return bufferLocal2Remote(arg);
                    } else if (arg instanceof Error) {
                      return errorLocal2Remote(arg);
                    } else {
                      return "Unknown argument";
                    }
                  case "function":
                    return this._callbackConverter.toRemoteArg(arg);
                  default:
                    return arg;
                }
              };
              return WorkerFS2;
            }(BaseFileSystem);
            WorkerFS.Name = "WorkerFS";
            WorkerFS.Options = {
              worker: {
                type: "object",
                description: "The target worker that you want to connect to, or the current worker if in a worker context.",
                validator: function(v, cb) {
                  if (v["postMessage"]) {
                    cb();
                  } else {
                    cb(new ApiError(ErrorCode.EINVAL, "option must be a Web Worker instance."));
                  }
                }
              }
            };
            function asyncDownloadFileModern(p, type, cb) {
              var req = new XMLHttpRequest();
              req.open("GET", p, true);
              var jsonSupported = true;
              switch (type) {
                case "buffer":
                  req.responseType = "arraybuffer";
                  break;
                case "json":
                  try {
                    req.responseType = "json";
                    jsonSupported = req.responseType === "json";
                  } catch (e) {
                    jsonSupported = false;
                  }
                  break;
                default:
                  return cb(new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type));
              }
              req.onreadystatechange = function(e) {
                if (req.readyState === 4) {
                  if (req.status === 200) {
                    switch (type) {
                      case "buffer":
                        return cb(null, req.response ? Buffer2.from(req.response) : emptyBuffer());
                      case "json":
                        if (jsonSupported) {
                          return cb(null, req.response);
                        } else {
                          return cb(null, JSON.parse(req.responseText));
                        }
                    }
                  } else {
                    return cb(new ApiError(req.status, "XHR error."));
                  }
                }
              };
              req.send();
            }
            function syncDownloadFileModern(p, type) {
              var req = new XMLHttpRequest();
              req.open("GET", p, false);
              var data = null;
              var err = null;
              req.overrideMimeType("text/plain; charset=x-user-defined");
              req.onreadystatechange = function(e) {
                if (req.readyState === 4) {
                  if (req.status === 200) {
                    switch (type) {
                      case "buffer":
                        var text = req.responseText;
                        data = Buffer2.alloc(text.length);
                        for (var i2 = 0; i2 < text.length; i2++) {
                          data[i2] = text.charCodeAt(i2);
                        }
                        return;
                      case "json":
                        data = JSON.parse(req.responseText);
                        return;
                    }
                  } else {
                    err = new ApiError(req.status, "XHR error.");
                    return;
                  }
                }
              };
              req.send();
              if (err) {
                throw err;
              }
              return data;
            }
            function syncDownloadFileIE10(p, type) {
              var req = new XMLHttpRequest();
              req.open("GET", p, false);
              switch (type) {
                case "buffer":
                  req.responseType = "arraybuffer";
                  break;
                case "json":
                  break;
                default:
                  throw new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type);
              }
              var data;
              var err;
              req.onreadystatechange = function(e) {
                if (req.readyState === 4) {
                  if (req.status === 200) {
                    switch (type) {
                      case "buffer":
                        data = Buffer2.from(req.response);
                        break;
                      case "json":
                        data = JSON.parse(req.response);
                        break;
                    }
                  } else {
                    err = new ApiError(req.status, "XHR error.");
                  }
                }
              };
              req.send();
              if (err) {
                throw err;
              }
              return data;
            }
            function getFileSize2(async, p, cb) {
              var req = new XMLHttpRequest();
              req.open("HEAD", p, async);
              req.onreadystatechange = function(e) {
                if (req.readyState === 4) {
                  if (req.status === 200) {
                    try {
                      return cb(null, parseInt(req.getResponseHeader("Content-Length") || "-1", 10));
                    } catch (e2) {
                      return cb(new ApiError(ErrorCode.EIO, "XHR HEAD error: Could not read content-length."));
                    }
                  } else {
                    return cb(new ApiError(req.status, "XHR HEAD error."));
                  }
                }
              };
              req.send();
            }
            var asyncDownloadFile = asyncDownloadFileModern;
            var syncDownloadFile = isIE && typeof Blob !== "undefined" ? syncDownloadFileIE10 : syncDownloadFileModern;
            function getFileSizeSync(p) {
              var rv = -1;
              getFileSize2(false, p, function(err, size) {
                if (err) {
                  throw err;
                }
                rv = size;
              });
              return rv;
            }
            function getFileSizeAsync(p, cb) {
              getFileSize2(true, p, cb);
            }
            var FileIndex = function FileIndex2() {
              this._index = {};
              this.addPath("/", new DirInode());
            };
            FileIndex.fromListing = function fromListing(listing) {
              var idx = new FileIndex();
              var rootInode = new DirInode();
              idx._index["/"] = rootInode;
              var queue = [["", listing, rootInode]];
              while (queue.length > 0) {
                var inode = void 0;
                var next = queue.pop();
                var pwd = next[0];
                var tree = next[1];
                var parent = next[2];
                for (var node in tree) {
                  if (tree.hasOwnProperty(node)) {
                    var children = tree[node];
                    var name2 = pwd + "/" + node;
                    if (children) {
                      idx._index[name2] = inode = new DirInode();
                      queue.push([name2, children, inode]);
                    } else {
                      inode = new FileInode(new Stats(FileType.FILE, -1, 365));
                    }
                    if (parent) {
                      parent._ls[node] = inode;
                    }
                  }
                }
              }
              return idx;
            };
            FileIndex.prototype.fileIterator = function fileIterator(cb) {
              var this$1 = this;
              for (var path$$1 in this$1._index) {
                if (this$1._index.hasOwnProperty(path$$1)) {
                  var dir2 = this$1._index[path$$1];
                  var files = dir2.getListing();
                  for (var i2 = 0, list2 = files; i2 < list2.length; i2 += 1) {
                    var file = list2[i2];
                    var item = dir2.getItem(file);
                    if (isFileInode(item)) {
                      cb(item.getData());
                    }
                  }
                }
              }
            };
            FileIndex.prototype.addPath = function addPath(path$$1, inode) {
              if (!inode) {
                throw new Error("Inode must be specified");
              }
              if (path$$1[0] !== "/") {
                throw new Error("Path must be absolute, got: " + path$$1);
              }
              if (this._index.hasOwnProperty(path$$1)) {
                return this._index[path$$1] === inode;
              }
              var splitPath = this._split_path(path$$1);
              var dirpath = splitPath[0];
              var itemname = splitPath[1];
              var parent = this._index[dirpath];
              if (parent === void 0 && path$$1 !== "/") {
                parent = new DirInode();
                if (!this.addPath(dirpath, parent)) {
                  return false;
                }
              }
              if (path$$1 !== "/") {
                if (!parent.addItem(itemname, inode)) {
                  return false;
                }
              }
              if (isDirInode(inode)) {
                this._index[path$$1] = inode;
              }
              return true;
            };
            FileIndex.prototype.addPathFast = function addPathFast(path$$1, inode) {
              var itemNameMark = path$$1.lastIndexOf("/");
              var parentPath = itemNameMark === 0 ? "/" : path$$1.substring(0, itemNameMark);
              var itemName = path$$1.substring(itemNameMark + 1);
              var parent = this._index[parentPath];
              if (parent === void 0) {
                parent = new DirInode();
                this.addPathFast(parentPath, parent);
              }
              if (!parent.addItem(itemName, inode)) {
                return false;
              }
              if (inode.isDir()) {
                this._index[path$$1] = inode;
              }
              return true;
            };
            FileIndex.prototype.removePath = function removePath(path$$1) {
              var this$1 = this;
              var splitPath = this._split_path(path$$1);
              var dirpath = splitPath[0];
              var itemname = splitPath[1];
              var parent = this._index[dirpath];
              if (parent === void 0) {
                return null;
              }
              var inode = parent.remItem(itemname);
              if (inode === null) {
                return null;
              }
              if (isDirInode(inode)) {
                var children = inode.getListing();
                for (var i2 = 0, list2 = children; i2 < list2.length; i2 += 1) {
                  var child = list2[i2];
                  this$1.removePath(path$$1 + "/" + child);
                }
                if (path$$1 !== "/") {
                  delete this._index[path$$1];
                }
              }
              return inode;
            };
            FileIndex.prototype.ls = function ls(path$$1) {
              var item = this._index[path$$1];
              if (item === void 0) {
                return null;
              }
              return item.getListing();
            };
            FileIndex.prototype.getInode = function getInode(path$$1) {
              var splitPath = this._split_path(path$$1);
              var dirpath = splitPath[0];
              var itemname = splitPath[1];
              var parent = this._index[dirpath];
              if (parent === void 0) {
                return null;
              }
              if (dirpath === path$$1) {
                return parent;
              }
              return parent.getItem(itemname);
            };
            FileIndex.prototype._split_path = function _split_path(p) {
              var dirpath = path2.dirname(p);
              var itemname = p.substr(dirpath.length + (dirpath === "/" ? 0 : 1));
              return [dirpath, itemname];
            };
            var FileInode = function FileInode2(data) {
              this.data = data;
            };
            FileInode.prototype.isFile = function isFile() {
              return true;
            };
            FileInode.prototype.isDir = function isDir() {
              return false;
            };
            FileInode.prototype.getData = function getData() {
              return this.data;
            };
            FileInode.prototype.setData = function setData(data) {
              this.data = data;
            };
            var DirInode = function DirInode2(data) {
              if (data === void 0)
                data = null;
              this.data = data;
              this._ls = {};
            };
            DirInode.prototype.isFile = function isFile() {
              return false;
            };
            DirInode.prototype.isDir = function isDir() {
              return true;
            };
            DirInode.prototype.getData = function getData() {
              return this.data;
            };
            DirInode.prototype.getStats = function getStats() {
              return new Stats(FileType.DIRECTORY, 4096, 365);
            };
            DirInode.prototype.getListing = function getListing() {
              return Object.keys(this._ls);
            };
            DirInode.prototype.getItem = function getItem(p) {
              var item = this._ls[p];
              return item ? item : null;
            };
            DirInode.prototype.addItem = function addItem(p, inode) {
              if (p in this._ls) {
                return false;
              }
              this._ls[p] = inode;
              return true;
            };
            DirInode.prototype.remItem = function remItem(p) {
              var item = this._ls[p];
              if (item === void 0) {
                return null;
              }
              delete this._ls[p];
              return item;
            };
            function isFileInode(inode) {
              return !!inode && inode.isFile();
            }
            function isDirInode(inode) {
              return !!inode && inode.isDir();
            }
            function tryToString(buff, encoding, cb) {
              try {
                cb(null, buff.toString(encoding));
              } catch (e) {
                cb(e);
              }
            }
            var XmlHttpRequest = function(BaseFileSystem$$1) {
              function XmlHttpRequest2(listingUrlOrObj, prefixUrl, deprecateMsg) {
                if (prefixUrl === void 0)
                  prefixUrl = "";
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                BaseFileSystem$$1.call(this);
                if (!listingUrlOrObj) {
                  listingUrlOrObj = "index.json";
                }
                if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== "/") {
                  prefixUrl = prefixUrl + "/";
                }
                this.prefixUrl = prefixUrl;
                var listing = null;
                if (typeof listingUrlOrObj === "string") {
                  listing = this._requestFileSync(listingUrlOrObj, "json");
                  if (!listing) {
                    throw new Error("Unable to find listing at URL: ${listingUrlOrObj}");
                  }
                } else {
                  listing = listingUrlOrObj;
                }
                deprecationMessage(deprecateMsg, XmlHttpRequest2.Name, { index: typeof listingUrlOrObj === "string" ? listingUrlOrObj : "file index as an object", baseUrl: prefixUrl });
                this._index = FileIndex.fromListing(listing);
              }
              if (BaseFileSystem$$1)
                XmlHttpRequest2.__proto__ = BaseFileSystem$$1;
              XmlHttpRequest2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
              XmlHttpRequest2.prototype.constructor = XmlHttpRequest2;
              XmlHttpRequest2.Create = function Create(opts, cb) {
                if (opts.index === void 0) {
                  opts.index = "index.json";
                }
                if (typeof opts.index === "string") {
                  XmlHttpRequest2.FromURL(opts.index, cb, opts.baseUrl, false);
                } else {
                  cb(null, new XmlHttpRequest2(opts.index, opts.baseUrl, false));
                }
              };
              XmlHttpRequest2.isAvailable = function isAvailable() {
                return typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null;
              };
              XmlHttpRequest2.FromURL = function FromURL(url2, cb, baseUrl, deprecateMsg) {
                if (baseUrl === void 0)
                  baseUrl = url2.slice(0, url2.lastIndexOf("/") + 1);
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                if (deprecateMsg) {
                  console.warn(`[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: "` + url2 + '", baseUrl: "' + baseUrl + `" }, cb)' instead.`);
                }
                asyncDownloadFile(url2, "json", function(e, data) {
                  if (e) {
                    cb(e);
                  } else {
                    cb(null, new XmlHttpRequest2(data, baseUrl, false));
                  }
                });
              };
              XmlHttpRequest2.prototype.empty = function empty() {
                this._index.fileIterator(function(file) {
                  file.fileData = null;
                });
              };
              XmlHttpRequest2.prototype.getName = function getName() {
                return XmlHttpRequest2.Name;
              };
              XmlHttpRequest2.prototype.diskSpace = function diskSpace(path$$1, cb) {
                cb(0, 0);
              };
              XmlHttpRequest2.prototype.isReadOnly = function isReadOnly() {
                return true;
              };
              XmlHttpRequest2.prototype.supportsLinks = function supportsLinks() {
                return false;
              };
              XmlHttpRequest2.prototype.supportsProps = function supportsProps() {
                return false;
              };
              XmlHttpRequest2.prototype.supportsSynch = function supportsSynch() {
                return true;
              };
              XmlHttpRequest2.prototype.preloadFile = function preloadFile(path$$1, buffer$$1) {
                var inode = this._index.getInode(path$$1);
                if (isFileInode(inode)) {
                  if (inode === null) {
                    throw ApiError.ENOENT(path$$1);
                  }
                  var stats = inode.getData();
                  stats.size = buffer$$1.length;
                  stats.fileData = buffer$$1;
                } else {
                  throw ApiError.EISDIR(path$$1);
                }
              };
              XmlHttpRequest2.prototype.stat = function stat(path$$1, isLstat, cb) {
                var inode = this._index.getInode(path$$1);
                if (inode === null) {
                  return cb(ApiError.ENOENT(path$$1));
                }
                var stats;
                if (isFileInode(inode)) {
                  stats = inode.getData();
                  if (stats.size < 0) {
                    this._requestFileSizeAsync(path$$1, function(e, size) {
                      if (e) {
                        return cb(e);
                      }
                      stats.size = size;
                      cb(null, stats.clone());
                    });
                  } else {
                    cb(null, stats.clone());
                  }
                } else if (isDirInode(inode)) {
                  stats = inode.getStats();
                  cb(null, stats);
                } else {
                  cb(ApiError.FileError(ErrorCode.EINVAL, path$$1));
                }
              };
              XmlHttpRequest2.prototype.statSync = function statSync(path$$1, isLstat) {
                var inode = this._index.getInode(path$$1);
                if (inode === null) {
                  throw ApiError.ENOENT(path$$1);
                }
                var stats;
                if (isFileInode(inode)) {
                  stats = inode.getData();
                  if (stats.size < 0) {
                    stats.size = this._requestFileSizeSync(path$$1);
                  }
                } else if (isDirInode(inode)) {
                  stats = inode.getStats();
                } else {
                  throw ApiError.FileError(ErrorCode.EINVAL, path$$1);
                }
                return stats;
              };
              XmlHttpRequest2.prototype.open = function open(path$$1, flags, mode, cb) {
                if (flags.isWriteable()) {
                  return cb(new ApiError(ErrorCode.EPERM, path$$1));
                }
                var self2 = this;
                var inode = this._index.getInode(path$$1);
                if (inode === null) {
                  return cb(ApiError.ENOENT(path$$1));
                }
                if (isFileInode(inode)) {
                  var stats = inode.getData();
                  switch (flags.pathExistsAction()) {
                    case ActionType.THROW_EXCEPTION:
                    case ActionType.TRUNCATE_FILE:
                      return cb(ApiError.EEXIST(path$$1));
                    case ActionType.NOP:
                      if (stats.fileData) {
                        return cb(null, new NoSyncFile(self2, path$$1, flags, stats.clone(), stats.fileData));
                      }
                      this._requestFileAsync(path$$1, "buffer", function(err, buffer$$1) {
                        if (err) {
                          return cb(err);
                        }
                        stats.size = buffer$$1.length;
                        stats.fileData = buffer$$1;
                        return cb(null, new NoSyncFile(self2, path$$1, flags, stats.clone(), buffer$$1));
                      });
                      break;
                    default:
                      return cb(new ApiError(ErrorCode.EINVAL, "Invalid FileMode object."));
                  }
                } else {
                  return cb(ApiError.EISDIR(path$$1));
                }
              };
              XmlHttpRequest2.prototype.openSync = function openSync(path$$1, flags, mode) {
                if (flags.isWriteable()) {
                  throw new ApiError(ErrorCode.EPERM, path$$1);
                }
                var inode = this._index.getInode(path$$1);
                if (inode === null) {
                  throw ApiError.ENOENT(path$$1);
                }
                if (isFileInode(inode)) {
                  var stats = inode.getData();
                  switch (flags.pathExistsAction()) {
                    case ActionType.THROW_EXCEPTION:
                    case ActionType.TRUNCATE_FILE:
                      throw ApiError.EEXIST(path$$1);
                    case ActionType.NOP:
                      if (stats.fileData) {
                        return new NoSyncFile(this, path$$1, flags, stats.clone(), stats.fileData);
                      }
                      var buffer$$1 = this._requestFileSync(path$$1, "buffer");
                      stats.size = buffer$$1.length;
                      stats.fileData = buffer$$1;
                      return new NoSyncFile(this, path$$1, flags, stats.clone(), buffer$$1);
                    default:
                      throw new ApiError(ErrorCode.EINVAL, "Invalid FileMode object.");
                  }
                } else {
                  throw ApiError.EISDIR(path$$1);
                }
              };
              XmlHttpRequest2.prototype.readdir = function readdir(path$$1, cb) {
                try {
                  cb(null, this.readdirSync(path$$1));
                } catch (e) {
                  cb(e);
                }
              };
              XmlHttpRequest2.prototype.readdirSync = function readdirSync(path$$1) {
                var inode = this._index.getInode(path$$1);
                if (inode === null) {
                  throw ApiError.ENOENT(path$$1);
                } else if (isDirInode(inode)) {
                  return inode.getListing();
                } else {
                  throw ApiError.ENOTDIR(path$$1);
                }
              };
              XmlHttpRequest2.prototype.readFile = function readFile(fname, encoding, flag, cb) {
                var oldCb = cb;
                this.open(fname, flag, 420, function(err, fd) {
                  if (err) {
                    return cb(err);
                  }
                  cb = function(err2, arg) {
                    fd.close(function(err22) {
                      if (!err2) {
                        err2 = err22;
                      }
                      return oldCb(err2, arg);
                    });
                  };
                  var fdCast = fd;
                  var fdBuff = fdCast.getBuffer();
                  if (encoding === null) {
                    cb(err, copyingSlice(fdBuff));
                  } else {
                    tryToString(fdBuff, encoding, cb);
                  }
                });
              };
              XmlHttpRequest2.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
                var fd = this.openSync(fname, flag, 420);
                try {
                  var fdCast = fd;
                  var fdBuff = fdCast.getBuffer();
                  if (encoding === null) {
                    return copyingSlice(fdBuff);
                  }
                  return fdBuff.toString(encoding);
                } finally {
                  fd.closeSync();
                }
              };
              XmlHttpRequest2.prototype.getXhrPath = function getXhrPath(filePath) {
                if (filePath.charAt(0) === "/") {
                  filePath = filePath.slice(1);
                }
                return this.prefixUrl + filePath;
              };
              XmlHttpRequest2.prototype._requestFileAsync = function _requestFileAsync(p, type, cb) {
                asyncDownloadFile(this.getXhrPath(p), type, cb);
              };
              XmlHttpRequest2.prototype._requestFileSync = function _requestFileSync(p, type) {
                return syncDownloadFile(this.getXhrPath(p), type);
              };
              XmlHttpRequest2.prototype._requestFileSizeAsync = function _requestFileSizeAsync(path$$1, cb) {
                getFileSizeAsync(this.getXhrPath(path$$1), cb);
              };
              XmlHttpRequest2.prototype._requestFileSizeSync = function _requestFileSizeSync(path$$1) {
                return getFileSizeSync(this.getXhrPath(path$$1));
              };
              return XmlHttpRequest2;
            }(BaseFileSystem);
            XmlHttpRequest.Name = "XmlHttpRequest";
            XmlHttpRequest.Options = {
              index: {
                type: ["string", "object"],
                optional: true,
                description: "URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."
              },
              baseUrl: {
                type: "string",
                optional: true,
                description: "Used as the URL prefix for fetched files. Default: Fetch files relative to the index."
              }
            };
            var ExtendedASCII = function ExtendedASCII2() {
            };
            ExtendedASCII.str2byte = function str2byte(str2, buf) {
              var length = str2.length > buf.length ? buf.length : str2.length;
              for (var i2 = 0; i2 < length; i2++) {
                var charCode = str2.charCodeAt(i2);
                if (charCode > 127) {
                  var charIdx = ExtendedASCII.extendedChars.indexOf(str2.charAt(i2));
                  if (charIdx > -1) {
                    charCode = charIdx + 128;
                  }
                }
                buf[charCode] = i2;
              }
              return length;
            };
            ExtendedASCII.byte2str = function byte2str(buff) {
              var chars = new Array(buff.length);
              for (var i2 = 0; i2 < buff.length; i2++) {
                var charCode = buff[i2];
                if (charCode > 127) {
                  chars[i2] = ExtendedASCII.extendedChars[charCode - 128];
                } else {
                  chars[i2] = String.fromCharCode(charCode);
                }
              }
              return chars.join("");
            };
            ExtendedASCII.byteLength = function byteLength(str2) {
              return str2.length;
            };
            ExtendedASCII.extendedChars = [
              "\xC7",
              "\xFC",
              "\xE9",
              "\xE2",
              "\xE4",
              "\xE0",
              "\xE5",
              "\xE7",
              "\xEA",
              "\xEB",
              "\xE8",
              "\xEF",
              "\xEE",
              "\xEC",
              "\xC4",
              "\xC5",
              "\xC9",
              "\xE6",
              "\xC6",
              "\xF4",
              "\xF6",
              "\xF2",
              "\xFB",
              "\xF9",
              "\xFF",
              "\xD6",
              "\xDC",
              "\xF8",
              "\xA3",
              "\xD8",
              "\xD7",
              "\u0192",
              "\xE1",
              "\xED",
              "\xF3",
              "\xFA",
              "\xF1",
              "\xD1",
              "\xAA",
              "\xBA",
              "\xBF",
              "\xAE",
              "\xAC",
              "\xBD",
              "\xBC",
              "\xA1",
              "\xAB",
              "\xBB",
              "_",
              "_",
              "_",
              "\xA6",
              "\xA6",
              "\xC1",
              "\xC2",
              "\xC0",
              "\xA9",
              "\xA6",
              "\xA6",
              "+",
              "+",
              "\xA2",
              "\xA5",
              "+",
              "+",
              "-",
              "-",
              "+",
              "-",
              "+",
              "\xE3",
              "\xC3",
              "+",
              "+",
              "-",
              "-",
              "\xA6",
              "-",
              "+",
              "\xA4",
              "\xF0",
              "\xD0",
              "\xCA",
              "\xCB",
              "\xC8",
              "i",
              "\xCD",
              "\xCE",
              "\xCF",
              "+",
              "+",
              "_",
              "_",
              "\xA6",
              "\xCC",
              "_",
              "\xD3",
              "\xDF",
              "\xD4",
              "\xD2",
              "\xF5",
              "\xD5",
              "\xB5",
              "\xFE",
              "\xDE",
              "\xDA",
              "\xDB",
              "\xD9",
              "\xFD",
              "\xDD",
              "\xAF",
              "\xB4",
              "\xAD",
              "\xB1",
              "_",
              "\xBE",
              "\xB6",
              "\xA7",
              "\xF7",
              "\xB8",
              "\xB0",
              "\xA8",
              "\xB7",
              "\xB9",
              "\xB3",
              "\xB2",
              "_",
              " "
            ];
            var inflateRaw = __webpack_require__(31).inflateRaw;
            var decompressionMethods = {};
            var ExternalFileAttributeType;
            (function(ExternalFileAttributeType2) {
              ExternalFileAttributeType2[ExternalFileAttributeType2["MSDOS"] = 0] = "MSDOS";
              ExternalFileAttributeType2[ExternalFileAttributeType2["AMIGA"] = 1] = "AMIGA";
              ExternalFileAttributeType2[ExternalFileAttributeType2["OPENVMS"] = 2] = "OPENVMS";
              ExternalFileAttributeType2[ExternalFileAttributeType2["UNIX"] = 3] = "UNIX";
              ExternalFileAttributeType2[ExternalFileAttributeType2["VM_CMS"] = 4] = "VM_CMS";
              ExternalFileAttributeType2[ExternalFileAttributeType2["ATARI_ST"] = 5] = "ATARI_ST";
              ExternalFileAttributeType2[ExternalFileAttributeType2["OS2_HPFS"] = 6] = "OS2_HPFS";
              ExternalFileAttributeType2[ExternalFileAttributeType2["MAC"] = 7] = "MAC";
              ExternalFileAttributeType2[ExternalFileAttributeType2["Z_SYSTEM"] = 8] = "Z_SYSTEM";
              ExternalFileAttributeType2[ExternalFileAttributeType2["CP_M"] = 9] = "CP_M";
              ExternalFileAttributeType2[ExternalFileAttributeType2["NTFS"] = 10] = "NTFS";
              ExternalFileAttributeType2[ExternalFileAttributeType2["MVS"] = 11] = "MVS";
              ExternalFileAttributeType2[ExternalFileAttributeType2["VSE"] = 12] = "VSE";
              ExternalFileAttributeType2[ExternalFileAttributeType2["ACORN_RISC"] = 13] = "ACORN_RISC";
              ExternalFileAttributeType2[ExternalFileAttributeType2["VFAT"] = 14] = "VFAT";
              ExternalFileAttributeType2[ExternalFileAttributeType2["ALT_MVS"] = 15] = "ALT_MVS";
              ExternalFileAttributeType2[ExternalFileAttributeType2["BEOS"] = 16] = "BEOS";
              ExternalFileAttributeType2[ExternalFileAttributeType2["TANDEM"] = 17] = "TANDEM";
              ExternalFileAttributeType2[ExternalFileAttributeType2["OS_400"] = 18] = "OS_400";
              ExternalFileAttributeType2[ExternalFileAttributeType2["OSX"] = 19] = "OSX";
            })(ExternalFileAttributeType || (ExternalFileAttributeType = {}));
            var CompressionMethod;
            (function(CompressionMethod2) {
              CompressionMethod2[CompressionMethod2["STORED"] = 0] = "STORED";
              CompressionMethod2[CompressionMethod2["SHRUNK"] = 1] = "SHRUNK";
              CompressionMethod2[CompressionMethod2["REDUCED_1"] = 2] = "REDUCED_1";
              CompressionMethod2[CompressionMethod2["REDUCED_2"] = 3] = "REDUCED_2";
              CompressionMethod2[CompressionMethod2["REDUCED_3"] = 4] = "REDUCED_3";
              CompressionMethod2[CompressionMethod2["REDUCED_4"] = 5] = "REDUCED_4";
              CompressionMethod2[CompressionMethod2["IMPLODE"] = 6] = "IMPLODE";
              CompressionMethod2[CompressionMethod2["DEFLATE"] = 8] = "DEFLATE";
              CompressionMethod2[CompressionMethod2["DEFLATE64"] = 9] = "DEFLATE64";
              CompressionMethod2[CompressionMethod2["TERSE_OLD"] = 10] = "TERSE_OLD";
              CompressionMethod2[CompressionMethod2["BZIP2"] = 12] = "BZIP2";
              CompressionMethod2[CompressionMethod2["LZMA"] = 14] = "LZMA";
              CompressionMethod2[CompressionMethod2["TERSE_NEW"] = 18] = "TERSE_NEW";
              CompressionMethod2[CompressionMethod2["LZ77"] = 19] = "LZ77";
              CompressionMethod2[CompressionMethod2["WAVPACK"] = 97] = "WAVPACK";
              CompressionMethod2[CompressionMethod2["PPMD"] = 98] = "PPMD";
            })(CompressionMethod || (CompressionMethod = {}));
            function msdos2date(time, date) {
              var day = date & 31;
              var month = (date >> 5 & 15) - 1;
              var year = (date >> 9) + 1980;
              var second = time & 31;
              var minute = time >> 5 & 63;
              var hour = time >> 11;
              return new Date(year, month, day, hour, minute, second);
            }
            function safeToString(buff, useUTF8, start, length) {
              if (length === 0) {
                return "";
              } else if (useUTF8) {
                return buff.toString("utf8", start, start + length);
              } else {
                return ExtendedASCII.byte2str(buff.slice(start, start + length));
              }
            }
            var FileHeader = function FileHeader2(data) {
              this.data = data;
              if (data.readUInt32LE(0) !== 67324752) {
                throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
              }
            };
            FileHeader.prototype.versionNeeded = function versionNeeded() {
              return this.data.readUInt16LE(4);
            };
            FileHeader.prototype.flags = function flags() {
              return this.data.readUInt16LE(6);
            };
            FileHeader.prototype.compressionMethod = function compressionMethod() {
              return this.data.readUInt16LE(8);
            };
            FileHeader.prototype.lastModFileTime = function lastModFileTime() {
              return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
            };
            FileHeader.prototype.rawLastModFileTime = function rawLastModFileTime() {
              return this.data.readUInt32LE(10);
            };
            FileHeader.prototype.crc32 = function crc32() {
              return this.data.readUInt32LE(14);
            };
            FileHeader.prototype.fileNameLength = function fileNameLength() {
              return this.data.readUInt16LE(26);
            };
            FileHeader.prototype.extraFieldLength = function extraFieldLength() {
              return this.data.readUInt16LE(28);
            };
            FileHeader.prototype.fileName = function fileName() {
              return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
            };
            FileHeader.prototype.extraField = function extraField() {
              var start = 30 + this.fileNameLength();
              return this.data.slice(start, start + this.extraFieldLength());
            };
            FileHeader.prototype.totalSize = function totalSize() {
              return 30 + this.fileNameLength() + this.extraFieldLength();
            };
            FileHeader.prototype.useUTF8 = function useUTF8() {
              return (this.flags() & 2048) === 2048;
            };
            var FileData = function FileData2(header, record, data) {
              this.header = header;
              this.record = record;
              this.data = data;
            };
            FileData.prototype.decompress = function decompress() {
              var compressionMethod = this.header.compressionMethod();
              var fcn = decompressionMethods[compressionMethod];
              if (fcn) {
                return fcn(this.data, this.record.compressedSize(), this.record.uncompressedSize(), this.record.flag());
              } else {
                var name2 = CompressionMethod[compressionMethod];
                if (!name2) {
                  name2 = "Unknown: " + compressionMethod;
                }
                throw new ApiError(ErrorCode.EINVAL, "Invalid compression method on file '" + this.header.fileName() + "': " + name2);
              }
            };
            FileData.prototype.getHeader = function getHeader() {
              return this.header;
            };
            FileData.prototype.getRecord = function getRecord() {
              return this.record;
            };
            FileData.prototype.getRawData = function getRawData() {
              return this.data;
            };
            var DataDescriptor = function DataDescriptor2(data) {
              this.data = data;
            };
            DataDescriptor.prototype.crc32 = function crc32() {
              return this.data.readUInt32LE(0);
            };
            DataDescriptor.prototype.compressedSize = function compressedSize() {
              return this.data.readUInt32LE(4);
            };
            DataDescriptor.prototype.uncompressedSize = function uncompressedSize() {
              return this.data.readUInt32LE(8);
            };
            var ArchiveExtraDataRecord = function ArchiveExtraDataRecord2(data) {
              this.data = data;
              if (this.data.readUInt32LE(0) !== 134630224) {
                throw new ApiError(ErrorCode.EINVAL, "Invalid archive extra data record signature: " + this.data.readUInt32LE(0));
              }
            };
            ArchiveExtraDataRecord.prototype.length = function length() {
              return this.data.readUInt32LE(4);
            };
            ArchiveExtraDataRecord.prototype.extraFieldData = function extraFieldData() {
              return this.data.slice(8, 8 + this.length());
            };
            var DigitalSignature = function DigitalSignature2(data) {
              this.data = data;
              if (this.data.readUInt32LE(0) !== 84233040) {
                throw new ApiError(ErrorCode.EINVAL, "Invalid digital signature signature: " + this.data.readUInt32LE(0));
              }
            };
            DigitalSignature.prototype.size = function size() {
              return this.data.readUInt16LE(4);
            };
            DigitalSignature.prototype.signatureData = function signatureData() {
              return this.data.slice(6, 6 + this.size());
            };
            var CentralDirectory = function CentralDirectory2(zipData, data) {
              this.zipData = zipData;
              this.data = data;
              if (this.data.readUInt32LE(0) !== 33639248) {
                throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Central directory record has invalid signature: " + this.data.readUInt32LE(0));
              }
              this._filename = this.produceFilename();
            };
            CentralDirectory.prototype.versionMadeBy = function versionMadeBy() {
              return this.data.readUInt16LE(4);
            };
            CentralDirectory.prototype.versionNeeded = function versionNeeded() {
              return this.data.readUInt16LE(6);
            };
            CentralDirectory.prototype.flag = function flag() {
              return this.data.readUInt16LE(8);
            };
            CentralDirectory.prototype.compressionMethod = function compressionMethod() {
              return this.data.readUInt16LE(10);
            };
            CentralDirectory.prototype.lastModFileTime = function lastModFileTime() {
              return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
            };
            CentralDirectory.prototype.rawLastModFileTime = function rawLastModFileTime() {
              return this.data.readUInt32LE(12);
            };
            CentralDirectory.prototype.crc32 = function crc32() {
              return this.data.readUInt32LE(16);
            };
            CentralDirectory.prototype.compressedSize = function compressedSize() {
              return this.data.readUInt32LE(20);
            };
            CentralDirectory.prototype.uncompressedSize = function uncompressedSize() {
              return this.data.readUInt32LE(24);
            };
            CentralDirectory.prototype.fileNameLength = function fileNameLength() {
              return this.data.readUInt16LE(28);
            };
            CentralDirectory.prototype.extraFieldLength = function extraFieldLength() {
              return this.data.readUInt16LE(30);
            };
            CentralDirectory.prototype.fileCommentLength = function fileCommentLength() {
              return this.data.readUInt16LE(32);
            };
            CentralDirectory.prototype.diskNumberStart = function diskNumberStart() {
              return this.data.readUInt16LE(34);
            };
            CentralDirectory.prototype.internalAttributes = function internalAttributes() {
              return this.data.readUInt16LE(36);
            };
            CentralDirectory.prototype.externalAttributes = function externalAttributes() {
              return this.data.readUInt32LE(38);
            };
            CentralDirectory.prototype.headerRelativeOffset = function headerRelativeOffset() {
              return this.data.readUInt32LE(42);
            };
            CentralDirectory.prototype.produceFilename = function produceFilename() {
              var fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
              return fileName.replace(/\\/g, "/");
            };
            CentralDirectory.prototype.fileName = function fileName() {
              return this._filename;
            };
            CentralDirectory.prototype.rawFileName = function rawFileName() {
              return this.data.slice(46, 46 + this.fileNameLength());
            };
            CentralDirectory.prototype.extraField = function extraField() {
              var start = 44 + this.fileNameLength();
              return this.data.slice(start, start + this.extraFieldLength());
            };
            CentralDirectory.prototype.fileComment = function fileComment() {
              var start = 46 + this.fileNameLength() + this.extraFieldLength();
              return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
            };
            CentralDirectory.prototype.rawFileComment = function rawFileComment() {
              var start = 46 + this.fileNameLength() + this.extraFieldLength();
              return this.data.slice(start, start + this.fileCommentLength());
            };
            CentralDirectory.prototype.totalSize = function totalSize() {
              return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
            };
            CentralDirectory.prototype.isDirectory = function isDirectory() {
              var fileName = this.fileName();
              return (this.externalAttributes() & 16 ? true : false) || fileName.charAt(fileName.length - 1) === "/";
            };
            CentralDirectory.prototype.isFile = function isFile() {
              return !this.isDirectory();
            };
            CentralDirectory.prototype.useUTF8 = function useUTF8() {
              return (this.flag() & 2048) === 2048;
            };
            CentralDirectory.prototype.isEncrypted = function isEncrypted() {
              return (this.flag() & 1) === 1;
            };
            CentralDirectory.prototype.getFileData = function getFileData() {
              var start = this.headerRelativeOffset();
              var header = new FileHeader(this.zipData.slice(start));
              return new FileData(header, this, this.zipData.slice(start + header.totalSize()));
            };
            CentralDirectory.prototype.getData = function getData() {
              return this.getFileData().decompress();
            };
            CentralDirectory.prototype.getRawData = function getRawData() {
              return this.getFileData().getRawData();
            };
            CentralDirectory.prototype.getStats = function getStats() {
              return new Stats(FileType.FILE, this.uncompressedSize(), 365, new Date(), this.lastModFileTime());
            };
            var EndOfCentralDirectory = function EndOfCentralDirectory2(data) {
              this.data = data;
              if (this.data.readUInt32LE(0) !== 101010256) {
                throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: End of central directory record has invalid signature: " + this.data.readUInt32LE(0));
              }
            };
            EndOfCentralDirectory.prototype.diskNumber = function diskNumber() {
              return this.data.readUInt16LE(4);
            };
            EndOfCentralDirectory.prototype.cdDiskNumber = function cdDiskNumber() {
              return this.data.readUInt16LE(6);
            };
            EndOfCentralDirectory.prototype.cdDiskEntryCount = function cdDiskEntryCount() {
              return this.data.readUInt16LE(8);
            };
            EndOfCentralDirectory.prototype.cdTotalEntryCount = function cdTotalEntryCount() {
              return this.data.readUInt16LE(10);
            };
            EndOfCentralDirectory.prototype.cdSize = function cdSize() {
              return this.data.readUInt32LE(12);
            };
            EndOfCentralDirectory.prototype.cdOffset = function cdOffset() {
              return this.data.readUInt32LE(16);
            };
            EndOfCentralDirectory.prototype.cdZipCommentLength = function cdZipCommentLength() {
              return this.data.readUInt16LE(20);
            };
            EndOfCentralDirectory.prototype.cdZipComment = function cdZipComment() {
              return safeToString(this.data, true, 22, this.cdZipCommentLength());
            };
            EndOfCentralDirectory.prototype.rawCdZipComment = function rawCdZipComment() {
              return this.data.slice(22, 22 + this.cdZipCommentLength());
            };
            var ZipTOC = function ZipTOC2(index, directoryEntries, eocd, data) {
              this.index = index;
              this.directoryEntries = directoryEntries;
              this.eocd = eocd;
              this.data = data;
            };
            var ZipFS = function(SynchronousFileSystem$$1) {
              function ZipFS2(input, name2, deprecateMsg) {
                if (name2 === void 0)
                  name2 = "";
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                SynchronousFileSystem$$1.call(this);
                this.name = name2;
                this._index = new FileIndex();
                this._directoryEntries = [];
                this._eocd = null;
                deprecationMessage(deprecateMsg, ZipFS2.Name, { zipData: "zip data as a Buffer", name: name2 });
                if (input instanceof ZipTOC) {
                  this._index = input.index;
                  this._directoryEntries = input.directoryEntries;
                  this._eocd = input.eocd;
                  this.data = input.data;
                } else {
                  this.data = input;
                  this.populateIndex();
                }
              }
              if (SynchronousFileSystem$$1)
                ZipFS2.__proto__ = SynchronousFileSystem$$1;
              ZipFS2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
              ZipFS2.prototype.constructor = ZipFS2;
              ZipFS2.Create = function Create(opts, cb) {
                try {
                  ZipFS2.computeIndex(opts.zipData, function(zipTOC) {
                    var fs4 = new ZipFS2(zipTOC, opts.name, false);
                    cb(null, fs4);
                  }, false);
                } catch (e) {
                  cb(e);
                }
              };
              ZipFS2.isAvailable = function isAvailable() {
                return true;
              };
              ZipFS2.RegisterDecompressionMethod = function RegisterDecompressionMethod(m, fcn) {
                decompressionMethods[m] = fcn;
              };
              ZipFS2.computeIndex = function computeIndex(data, cb, deprecateMsg) {
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                if (deprecateMsg) {
                  console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use 'ZipFS.Create({ zipData: zip file as a Buffer}, cb)' instead.");
                }
                var index = new FileIndex();
                var eocd = ZipFS2.getEOCD(data);
                if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
                  throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
                }
                var cdPtr = eocd.cdOffset();
                if (cdPtr === 4294967295) {
                  throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
                }
                var cdEnd = cdPtr + eocd.cdSize();
                ZipFS2.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, [], eocd);
              };
              ZipFS2.getEOCD = function getEOCD(data) {
                var startOffset = 22;
                var endOffset = Math.min(startOffset + 65535, data.length - 1);
                for (var i2 = startOffset; i2 < endOffset; i2++) {
                  if (data.readUInt32LE(data.length - i2) === 101010256) {
                    return new EndOfCentralDirectory(data.slice(data.length - i2));
                  }
                }
                throw new ApiError(ErrorCode.EINVAL, "Invalid ZIP file: Could not locate End of Central Directory signature.");
              };
              ZipFS2.addToIndex = function addToIndex(cd, index) {
                var filename = cd.fileName();
                if (filename.charAt(0) === "/") {
                  throw new Error("WHY IS THIS ABSOLUTE");
                }
                if (filename.charAt(filename.length - 1) === "/") {
                  filename = filename.substr(0, filename.length - 1);
                }
                if (cd.isDirectory()) {
                  index.addPathFast("/" + filename, new DirInode(cd));
                } else {
                  index.addPathFast("/" + filename, new FileInode(cd));
                }
              };
              ZipFS2.computeIndexResponsive = function computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd) {
                if (cdPtr < cdEnd) {
                  var count = 0;
                  while (count++ < 200 && cdPtr < cdEnd) {
                    var cd = new CentralDirectory(data, data.slice(cdPtr));
                    ZipFS2.addToIndex(cd, index);
                    cdPtr += cd.totalSize();
                    cdEntries.push(cd);
                  }
                  setImmediate$3(function() {
                    ZipFS2.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd);
                  });
                } else {
                  cb(new ZipTOC(index, cdEntries, eocd, data));
                }
              };
              ZipFS2.prototype.getName = function getName() {
                return ZipFS2.Name + (this.name !== "" ? " " + this.name : "");
              };
              ZipFS2.prototype.getCentralDirectoryEntry = function getCentralDirectoryEntry(path$$1) {
                var inode = this._index.getInode(path$$1);
                if (inode === null) {
                  throw ApiError.ENOENT(path$$1);
                }
                if (isFileInode(inode)) {
                  return inode.getData();
                } else if (isDirInode(inode)) {
                  return inode.getData();
                } else {
                  throw ApiError.EPERM("Invalid inode: " + inode);
                }
              };
              ZipFS2.prototype.getCentralDirectoryEntryAt = function getCentralDirectoryEntryAt(index) {
                var dirEntry = this._directoryEntries[index];
                if (!dirEntry) {
                  throw new RangeError("Invalid directory index: " + index + ".");
                }
                return dirEntry;
              };
              ZipFS2.prototype.getNumberOfCentralDirectoryEntries = function getNumberOfCentralDirectoryEntries() {
                return this._directoryEntries.length;
              };
              ZipFS2.prototype.getEndOfCentralDirectory = function getEndOfCentralDirectory() {
                return this._eocd;
              };
              ZipFS2.prototype.diskSpace = function diskSpace(path$$1, cb) {
                cb(this.data.length, 0);
              };
              ZipFS2.prototype.isReadOnly = function isReadOnly() {
                return true;
              };
              ZipFS2.prototype.supportsLinks = function supportsLinks() {
                return false;
              };
              ZipFS2.prototype.supportsProps = function supportsProps() {
                return false;
              };
              ZipFS2.prototype.supportsSynch = function supportsSynch() {
                return true;
              };
              ZipFS2.prototype.statSync = function statSync(path$$1, isLstat) {
                var inode = this._index.getInode(path$$1);
                if (inode === null) {
                  throw ApiError.ENOENT(path$$1);
                }
                var stats;
                if (isFileInode(inode)) {
                  stats = inode.getData().getStats();
                } else if (isDirInode(inode)) {
                  stats = inode.getStats();
                } else {
                  throw new ApiError(ErrorCode.EINVAL, "Invalid inode.");
                }
                return stats;
              };
              ZipFS2.prototype.openSync = function openSync(path$$1, flags, mode) {
                if (flags.isWriteable()) {
                  throw new ApiError(ErrorCode.EPERM, path$$1);
                }
                var inode = this._index.getInode(path$$1);
                if (!inode) {
                  throw ApiError.ENOENT(path$$1);
                } else if (isFileInode(inode)) {
                  var cdRecord = inode.getData();
                  var stats = cdRecord.getStats();
                  switch (flags.pathExistsAction()) {
                    case ActionType.THROW_EXCEPTION:
                    case ActionType.TRUNCATE_FILE:
                      throw ApiError.EEXIST(path$$1);
                    case ActionType.NOP:
                      return new NoSyncFile(this, path$$1, flags, stats, cdRecord.getData());
                    default:
                      throw new ApiError(ErrorCode.EINVAL, "Invalid FileMode object.");
                  }
                } else {
                  throw ApiError.EISDIR(path$$1);
                }
              };
              ZipFS2.prototype.readdirSync = function readdirSync(path$$1) {
                var inode = this._index.getInode(path$$1);
                if (!inode) {
                  throw ApiError.ENOENT(path$$1);
                } else if (isDirInode(inode)) {
                  return inode.getListing();
                } else {
                  throw ApiError.ENOTDIR(path$$1);
                }
              };
              ZipFS2.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
                var fd = this.openSync(fname, flag, 420);
                try {
                  var fdCast = fd;
                  var fdBuff = fdCast.getBuffer();
                  if (encoding === null) {
                    return copyingSlice(fdBuff);
                  }
                  return fdBuff.toString(encoding);
                } finally {
                  fd.closeSync();
                }
              };
              ZipFS2.prototype.populateIndex = function populateIndex() {
                var this$1 = this;
                var eocd = this._eocd = ZipFS2.getEOCD(this.data);
                if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
                  throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
                }
                var cdPtr = eocd.cdOffset();
                if (cdPtr === 4294967295) {
                  throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
                }
                var cdEnd = cdPtr + eocd.cdSize();
                while (cdPtr < cdEnd) {
                  var cd = new CentralDirectory(this$1.data, this$1.data.slice(cdPtr));
                  cdPtr += cd.totalSize();
                  ZipFS2.addToIndex(cd, this$1._index);
                  this$1._directoryEntries.push(cd);
                }
              };
              return ZipFS2;
            }(SynchronousFileSystem);
            ZipFS.Name = "ZipFS";
            ZipFS.Options = {
              zipData: {
                type: "object",
                description: "The zip file as a Buffer object.",
                validator: bufferValidator
              },
              name: {
                type: "string",
                optional: true,
                description: "The name of the zip file (optional)."
              }
            };
            ZipFS.CompressionMethod = CompressionMethod;
            ZipFS.RegisterDecompressionMethod(CompressionMethod.DEFLATE, function(data, compressedSize, uncompressedSize) {
              return arrayish2Buffer(inflateRaw(data.slice(0, compressedSize), { chunkSize: uncompressedSize }));
            });
            ZipFS.RegisterDecompressionMethod(CompressionMethod.STORED, function(data, compressedSize, uncompressedSize) {
              return copyingSlice(data, 0, uncompressedSize);
            });
            var rockRidgeIdentifier = "IEEE_P1282";
            function getASCIIString(data, startIndex, length) {
              return data.toString("ascii", startIndex, startIndex + length).trim();
            }
            function getJolietString(data, startIndex, length) {
              if (length === 1) {
                return String.fromCharCode(data[startIndex]);
              }
              var pairs = Math.floor(length / 2);
              var chars = new Array(pairs);
              for (var i2 = 0; i2 < pairs; i2++) {
                var pos = startIndex + (i2 << 1);
                chars[i2] = String.fromCharCode(data[pos + 1] | data[pos] << 8);
              }
              return chars.join("");
            }
            function getDate(data, startIndex) {
              var year = parseInt(getASCIIString(data, startIndex, 4), 10);
              var mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);
              var day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);
              var hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);
              var min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);
              var sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);
              var hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10);
              return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);
            }
            function getShortFormDate(data, startIndex) {
              var yearsSince1900 = data[startIndex];
              var month = data[startIndex + 1];
              var day = data[startIndex + 2];
              var hour = data[startIndex + 3];
              var minute = data[startIndex + 4];
              var second = data[startIndex + 5];
              return new Date(yearsSince1900, month - 1, day, hour, minute, second);
            }
            function constructSystemUseEntry(bigData, i2) {
              var data = bigData.slice(i2);
              var sue = new SystemUseEntry(data);
              switch (sue.signatureWord()) {
                case 17221:
                  return new CEEntry(data);
                case 20548:
                  return new PDEntry(data);
                case 21328:
                  return new SPEntry(data);
                case 21332:
                  return new STEntry(data);
                case 17746:
                  return new EREntry(data);
                case 17747:
                  return new ESEntry(data);
                case 20568:
                  return new PXEntry(data);
                case 20558:
                  return new PNEntry(data);
                case 21324:
                  return new SLEntry(data);
                case 20045:
                  return new NMEntry(data);
                case 17228:
                  return new CLEntry(data);
                case 20556:
                  return new PLEntry(data);
                case 21061:
                  return new REEntry(data);
                case 21574:
                  return new TFEntry(data);
                case 21318:
                  return new SFEntry(data);
                case 21074:
                  return new RREntry(data);
                default:
                  return sue;
              }
            }
            function constructSystemUseEntries(data, i2, len, isoData) {
              len = len - 4;
              var entries = new Array();
              while (i2 < len) {
                var entry = constructSystemUseEntry(data, i2);
                var length = entry.length();
                if (length === 0) {
                  return entries;
                }
                i2 += length;
                if (entry instanceof STEntry) {
                  break;
                }
                if (entry instanceof CEEntry) {
                  entries = entries.concat(entry.getEntries(isoData));
                } else {
                  entries.push(entry);
                }
              }
              return entries;
            }
            var VolumeDescriptor = function VolumeDescriptor2(data) {
              this._data = data;
            };
            VolumeDescriptor.prototype.type = function type() {
              return this._data[0];
            };
            VolumeDescriptor.prototype.standardIdentifier = function standardIdentifier() {
              return getASCIIString(this._data, 1, 5);
            };
            VolumeDescriptor.prototype.version = function version2() {
              return this._data[6];
            };
            VolumeDescriptor.prototype.data = function data() {
              return this._data.slice(7, 2048);
            };
            var PrimaryOrSupplementaryVolumeDescriptor = function(VolumeDescriptor2) {
              function PrimaryOrSupplementaryVolumeDescriptor2(data) {
                VolumeDescriptor2.call(this, data);
                this._root = null;
              }
              if (VolumeDescriptor2)
                PrimaryOrSupplementaryVolumeDescriptor2.__proto__ = VolumeDescriptor2;
              PrimaryOrSupplementaryVolumeDescriptor2.prototype = Object.create(VolumeDescriptor2 && VolumeDescriptor2.prototype);
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.constructor = PrimaryOrSupplementaryVolumeDescriptor2;
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.systemIdentifier = function systemIdentifier() {
                return this._getString32(8);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeIdentifier = function volumeIdentifier() {
                return this._getString32(40);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSpaceSize = function volumeSpaceSize() {
                return this._data.readUInt32LE(80);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSetSize = function volumeSetSize() {
                return this._data.readUInt16LE(120);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSequenceNumber = function volumeSequenceNumber() {
                return this._data.readUInt16LE(124);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.logicalBlockSize = function logicalBlockSize() {
                return this._data.readUInt16LE(128);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.pathTableSize = function pathTableSize() {
                return this._data.readUInt32LE(132);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfTypeLPathTable = function locationOfTypeLPathTable() {
                return this._data.readUInt32LE(140);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfOptionalTypeLPathTable = function locationOfOptionalTypeLPathTable() {
                return this._data.readUInt32LE(144);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfTypeMPathTable = function locationOfTypeMPathTable() {
                return this._data.readUInt32BE(148);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfOptionalTypeMPathTable = function locationOfOptionalTypeMPathTable() {
                return this._data.readUInt32BE(152);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.rootDirectoryEntry = function rootDirectoryEntry(isoData) {
                if (this._root === null) {
                  this._root = this._constructRootDirectoryRecord(this._data.slice(156));
                  this._root.rootCheckForRockRidge(isoData);
                }
                return this._root;
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSetIdentifier = function volumeSetIdentifier() {
                return this._getString(190, 128);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.publisherIdentifier = function publisherIdentifier() {
                return this._getString(318, 128);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.dataPreparerIdentifier = function dataPreparerIdentifier() {
                return this._getString(446, 128);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.applicationIdentifier = function applicationIdentifier() {
                return this._getString(574, 128);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.copyrightFileIdentifier = function copyrightFileIdentifier() {
                return this._getString(702, 38);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.abstractFileIdentifier = function abstractFileIdentifier() {
                return this._getString(740, 36);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.bibliographicFileIdentifier = function bibliographicFileIdentifier() {
                return this._getString(776, 37);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeCreationDate = function volumeCreationDate() {
                return getDate(this._data, 813);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeModificationDate = function volumeModificationDate() {
                return getDate(this._data, 830);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeExpirationDate = function volumeExpirationDate() {
                return getDate(this._data, 847);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeEffectiveDate = function volumeEffectiveDate() {
                return getDate(this._data, 864);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.fileStructureVersion = function fileStructureVersion() {
                return this._data[881];
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.applicationUsed = function applicationUsed() {
                return this._data.slice(883, 883 + 512);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype.reserved = function reserved() {
                return this._data.slice(1395, 1395 + 653);
              };
              PrimaryOrSupplementaryVolumeDescriptor2.prototype._getString32 = function _getString32(idx) {
                return this._getString(idx, 32);
              };
              return PrimaryOrSupplementaryVolumeDescriptor2;
            }(VolumeDescriptor);
            var PrimaryVolumeDescriptor = function(PrimaryOrSupplementaryVolumeDescriptor2) {
              function PrimaryVolumeDescriptor2(data) {
                PrimaryOrSupplementaryVolumeDescriptor2.call(this, data);
                if (this.type() !== 1) {
                  throw new ApiError(ErrorCode.EIO, "Invalid primary volume descriptor.");
                }
              }
              if (PrimaryOrSupplementaryVolumeDescriptor2)
                PrimaryVolumeDescriptor2.__proto__ = PrimaryOrSupplementaryVolumeDescriptor2;
              PrimaryVolumeDescriptor2.prototype = Object.create(PrimaryOrSupplementaryVolumeDescriptor2 && PrimaryOrSupplementaryVolumeDescriptor2.prototype);
              PrimaryVolumeDescriptor2.prototype.constructor = PrimaryVolumeDescriptor2;
              PrimaryVolumeDescriptor2.prototype.name = function name2() {
                return "ISO9660";
              };
              PrimaryVolumeDescriptor2.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord(data) {
                return new ISODirectoryRecord(data, -1);
              };
              PrimaryVolumeDescriptor2.prototype._getString = function _getString(idx, len) {
                return this._getString(idx, len);
              };
              return PrimaryVolumeDescriptor2;
            }(PrimaryOrSupplementaryVolumeDescriptor);
            var SupplementaryVolumeDescriptor = function(PrimaryOrSupplementaryVolumeDescriptor2) {
              function SupplementaryVolumeDescriptor2(data) {
                PrimaryOrSupplementaryVolumeDescriptor2.call(this, data);
                if (this.type() !== 2) {
                  throw new ApiError(ErrorCode.EIO, "Invalid supplementary volume descriptor.");
                }
                var escapeSequence = this.escapeSequence();
                var third = escapeSequence[2];
                if (escapeSequence[0] !== 37 || escapeSequence[1] !== 47 || third !== 64 && third !== 67 && third !== 69) {
                  throw new ApiError(ErrorCode.EIO, "Unrecognized escape sequence for SupplementaryVolumeDescriptor: " + escapeSequence.toString());
                }
              }
              if (PrimaryOrSupplementaryVolumeDescriptor2)
                SupplementaryVolumeDescriptor2.__proto__ = PrimaryOrSupplementaryVolumeDescriptor2;
              SupplementaryVolumeDescriptor2.prototype = Object.create(PrimaryOrSupplementaryVolumeDescriptor2 && PrimaryOrSupplementaryVolumeDescriptor2.prototype);
              SupplementaryVolumeDescriptor2.prototype.constructor = SupplementaryVolumeDescriptor2;
              SupplementaryVolumeDescriptor2.prototype.name = function name2() {
                return "Joliet";
              };
              SupplementaryVolumeDescriptor2.prototype.escapeSequence = function escapeSequence() {
                return this._data.slice(88, 120);
              };
              SupplementaryVolumeDescriptor2.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord(data) {
                return new JolietDirectoryRecord(data, -1);
              };
              SupplementaryVolumeDescriptor2.prototype._getString = function _getString(idx, len) {
                return getJolietString(this._data, idx, len);
              };
              return SupplementaryVolumeDescriptor2;
            }(PrimaryOrSupplementaryVolumeDescriptor);
            var DirectoryRecord = function DirectoryRecord2(data, rockRidgeOffset) {
              this._suEntries = null;
              this._fileOrDir = null;
              this._data = data;
              this._rockRidgeOffset = rockRidgeOffset;
            };
            DirectoryRecord.prototype.hasRockRidge = function hasRockRidge() {
              return this._rockRidgeOffset > -1;
            };
            DirectoryRecord.prototype.getRockRidgeOffset = function getRockRidgeOffset() {
              return this._rockRidgeOffset;
            };
            DirectoryRecord.prototype.rootCheckForRockRidge = function rootCheckForRockRidge(isoData) {
              var dir2 = this.getDirectory(isoData);
              this._rockRidgeOffset = dir2.getDotEntry(isoData)._getRockRidgeOffset(isoData);
              if (this._rockRidgeOffset > -1) {
                this._fileOrDir = null;
              }
            };
            DirectoryRecord.prototype.length = function length() {
              return this._data[0];
            };
            DirectoryRecord.prototype.extendedAttributeRecordLength = function extendedAttributeRecordLength() {
              return this._data[1];
            };
            DirectoryRecord.prototype.lba = function lba() {
              return this._data.readUInt32LE(2) * 2048;
            };
            DirectoryRecord.prototype.dataLength = function dataLength() {
              return this._data.readUInt32LE(10);
            };
            DirectoryRecord.prototype.recordingDate = function recordingDate() {
              return getShortFormDate(this._data, 18);
            };
            DirectoryRecord.prototype.fileFlags = function fileFlags() {
              return this._data[25];
            };
            DirectoryRecord.prototype.fileUnitSize = function fileUnitSize() {
              return this._data[26];
            };
            DirectoryRecord.prototype.interleaveGapSize = function interleaveGapSize() {
              return this._data[27];
            };
            DirectoryRecord.prototype.volumeSequenceNumber = function volumeSequenceNumber() {
              return this._data.readUInt16LE(28);
            };
            DirectoryRecord.prototype.identifier = function identifier() {
              return this._getString(33, this._data[32]);
            };
            DirectoryRecord.prototype.fileName = function fileName(isoData) {
              if (this.hasRockRidge()) {
                var fn = this._rockRidgeFilename(isoData);
                if (fn !== null) {
                  return fn;
                }
              }
              var ident = this.identifier();
              if (this.isDirectory(isoData)) {
                return ident;
              }
              var versionSeparator = ident.indexOf(";");
              if (versionSeparator === -1) {
                return ident;
              } else if (ident[versionSeparator - 1] === ".") {
                return ident.slice(0, versionSeparator - 1);
              } else {
                return ident.slice(0, versionSeparator);
              }
            };
            DirectoryRecord.prototype.isDirectory = function isDirectory(isoData) {
              var rv = !!(this.fileFlags() & 2);
              if (!rv && this.hasRockRidge()) {
                rv = this.getSUEntries(isoData).filter(function(e) {
                  return e instanceof CLEntry;
                }).length > 0;
              }
              return rv;
            };
            DirectoryRecord.prototype.isSymlink = function isSymlink(isoData) {
              return this.hasRockRidge() && this.getSUEntries(isoData).filter(function(e) {
                return e instanceof SLEntry;
              }).length > 0;
            };
            DirectoryRecord.prototype.getSymlinkPath = function getSymlinkPath(isoData) {
              var p = "";
              var entries = this.getSUEntries(isoData);
              var getStr = this._getGetString();
              for (var i2 = 0, list2 = entries; i2 < list2.length; i2 += 1) {
                var entry = list2[i2];
                if (entry instanceof SLEntry) {
                  var components = entry.componentRecords();
                  for (var i$12 = 0, list$1 = components; i$12 < list$1.length; i$12 += 1) {
                    var component = list$1[i$12];
                    var flags = component.flags();
                    if (flags & 2) {
                      p += "./";
                    } else if (flags & 4) {
                      p += "../";
                    } else if (flags & 8) {
                      p += "/";
                    } else {
                      p += component.content(getStr);
                      if (!(flags & 1)) {
                        p += "/";
                      }
                    }
                  }
                  if (!entry.continueFlag()) {
                    break;
                  }
                }
              }
              if (p.length > 1 && p[p.length - 1] === "/") {
                return p.slice(0, p.length - 1);
              } else {
                return p;
              }
            };
            DirectoryRecord.prototype.getFile = function getFile(isoData) {
              if (this.isDirectory(isoData)) {
                throw new Error("Tried to get a File from a directory.");
              }
              if (this._fileOrDir === null) {
                this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());
              }
              return this._fileOrDir;
            };
            DirectoryRecord.prototype.getDirectory = function getDirectory(isoData) {
              if (!this.isDirectory(isoData)) {
                throw new Error("Tried to get a Directory from a file.");
              }
              if (this._fileOrDir === null) {
                this._fileOrDir = this._constructDirectory(isoData);
              }
              return this._fileOrDir;
            };
            DirectoryRecord.prototype.getSUEntries = function getSUEntries(isoData) {
              if (!this._suEntries) {
                this._constructSUEntries(isoData);
              }
              return this._suEntries;
            };
            DirectoryRecord.prototype._rockRidgeFilename = function _rockRidgeFilename(isoData) {
              var nmEntries = this.getSUEntries(isoData).filter(function(e2) {
                return e2 instanceof NMEntry;
              });
              if (nmEntries.length === 0 || nmEntries[0].flags() & (2 | 4)) {
                return null;
              }
              var str2 = "";
              var getString = this._getGetString();
              for (var i2 = 0, list2 = nmEntries; i2 < list2.length; i2 += 1) {
                var e = list2[i2];
                str2 += e.name(getString);
                if (!(e.flags() & 1)) {
                  break;
                }
              }
              return str2;
            };
            DirectoryRecord.prototype._constructSUEntries = function _constructSUEntries(isoData) {
              var i2 = 33 + this._data[32];
              if (i2 % 2 === 1) {
                i2++;
              }
              i2 += this._rockRidgeOffset;
              this._suEntries = constructSystemUseEntries(this._data, i2, this.length(), isoData);
            };
            DirectoryRecord.prototype._getRockRidgeOffset = function _getRockRidgeOffset(isoData) {
              this._rockRidgeOffset = 0;
              var suEntries = this.getSUEntries(isoData);
              if (suEntries.length > 0) {
                var spEntry = suEntries[0];
                if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {
                  for (var i2 = 1; i2 < suEntries.length; i2++) {
                    var entry = suEntries[i2];
                    if (entry instanceof RREntry || entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier) {
                      return spEntry.bytesSkipped();
                    }
                  }
                }
              }
              this._rockRidgeOffset = -1;
              return -1;
            };
            var ISODirectoryRecord = function(DirectoryRecord2) {
              function ISODirectoryRecord2(data, rockRidgeOffset) {
                DirectoryRecord2.call(this, data, rockRidgeOffset);
              }
              if (DirectoryRecord2)
                ISODirectoryRecord2.__proto__ = DirectoryRecord2;
              ISODirectoryRecord2.prototype = Object.create(DirectoryRecord2 && DirectoryRecord2.prototype);
              ISODirectoryRecord2.prototype.constructor = ISODirectoryRecord2;
              ISODirectoryRecord2.prototype._getString = function _getString(i2, len) {
                return getASCIIString(this._data, i2, len);
              };
              ISODirectoryRecord2.prototype._constructDirectory = function _constructDirectory(isoData) {
                return new ISODirectory(this, isoData);
              };
              ISODirectoryRecord2.prototype._getGetString = function _getGetString() {
                return getASCIIString;
              };
              return ISODirectoryRecord2;
            }(DirectoryRecord);
            var JolietDirectoryRecord = function(DirectoryRecord2) {
              function JolietDirectoryRecord2(data, rockRidgeOffset) {
                DirectoryRecord2.call(this, data, rockRidgeOffset);
              }
              if (DirectoryRecord2)
                JolietDirectoryRecord2.__proto__ = DirectoryRecord2;
              JolietDirectoryRecord2.prototype = Object.create(DirectoryRecord2 && DirectoryRecord2.prototype);
              JolietDirectoryRecord2.prototype.constructor = JolietDirectoryRecord2;
              JolietDirectoryRecord2.prototype._getString = function _getString(i2, len) {
                return getJolietString(this._data, i2, len);
              };
              JolietDirectoryRecord2.prototype._constructDirectory = function _constructDirectory(isoData) {
                return new JolietDirectory(this, isoData);
              };
              JolietDirectoryRecord2.prototype._getGetString = function _getGetString() {
                return getJolietString;
              };
              return JolietDirectoryRecord2;
            }(DirectoryRecord);
            var SystemUseEntry = function SystemUseEntry2(data) {
              this._data = data;
            };
            SystemUseEntry.prototype.signatureWord = function signatureWord() {
              return this._data.readUInt16BE(0);
            };
            SystemUseEntry.prototype.signatureWordString = function signatureWordString() {
              return getASCIIString(this._data, 0, 2);
            };
            SystemUseEntry.prototype.length = function length() {
              return this._data[2];
            };
            SystemUseEntry.prototype.suVersion = function suVersion() {
              return this._data[3];
            };
            var CEEntry = function(SystemUseEntry2) {
              function CEEntry2(data) {
                SystemUseEntry2.call(this, data);
                this._entries = null;
              }
              if (SystemUseEntry2)
                CEEntry2.__proto__ = SystemUseEntry2;
              CEEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              CEEntry2.prototype.constructor = CEEntry2;
              CEEntry2.prototype.continuationLba = function continuationLba() {
                return this._data.readUInt32LE(4);
              };
              CEEntry2.prototype.continuationLbaOffset = function continuationLbaOffset() {
                return this._data.readUInt32LE(12);
              };
              CEEntry2.prototype.continuationLength = function continuationLength() {
                return this._data.readUInt32LE(20);
              };
              CEEntry2.prototype.getEntries = function getEntries(isoData) {
                if (!this._entries) {
                  var start = this.continuationLba() * 2048 + this.continuationLbaOffset();
                  this._entries = constructSystemUseEntries(isoData, start, this.continuationLength(), isoData);
                }
                return this._entries;
              };
              return CEEntry2;
            }(SystemUseEntry);
            var PDEntry = function(SystemUseEntry2) {
              function PDEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                PDEntry2.__proto__ = SystemUseEntry2;
              PDEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              PDEntry2.prototype.constructor = PDEntry2;
              return PDEntry2;
            }(SystemUseEntry);
            var SPEntry = function(SystemUseEntry2) {
              function SPEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                SPEntry2.__proto__ = SystemUseEntry2;
              SPEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              SPEntry2.prototype.constructor = SPEntry2;
              SPEntry2.prototype.checkBytesPass = function checkBytesPass() {
                return this._data[4] === 190 && this._data[5] === 239;
              };
              SPEntry2.prototype.bytesSkipped = function bytesSkipped() {
                return this._data[6];
              };
              return SPEntry2;
            }(SystemUseEntry);
            var STEntry = function(SystemUseEntry2) {
              function STEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                STEntry2.__proto__ = SystemUseEntry2;
              STEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              STEntry2.prototype.constructor = STEntry2;
              return STEntry2;
            }(SystemUseEntry);
            var EREntry = function(SystemUseEntry2) {
              function EREntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                EREntry2.__proto__ = SystemUseEntry2;
              EREntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              EREntry2.prototype.constructor = EREntry2;
              EREntry2.prototype.identifierLength = function identifierLength() {
                return this._data[4];
              };
              EREntry2.prototype.descriptorLength = function descriptorLength() {
                return this._data[5];
              };
              EREntry2.prototype.sourceLength = function sourceLength() {
                return this._data[6];
              };
              EREntry2.prototype.extensionVersion = function extensionVersion() {
                return this._data[7];
              };
              EREntry2.prototype.extensionIdentifier = function extensionIdentifier() {
                return getASCIIString(this._data, 8, this.identifierLength());
              };
              EREntry2.prototype.extensionDescriptor = function extensionDescriptor() {
                return getASCIIString(this._data, 8 + this.identifierLength(), this.descriptorLength());
              };
              EREntry2.prototype.extensionSource = function extensionSource() {
                return getASCIIString(this._data, 8 + this.identifierLength() + this.descriptorLength(), this.sourceLength());
              };
              return EREntry2;
            }(SystemUseEntry);
            var ESEntry = function(SystemUseEntry2) {
              function ESEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                ESEntry2.__proto__ = SystemUseEntry2;
              ESEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              ESEntry2.prototype.constructor = ESEntry2;
              ESEntry2.prototype.extensionSequence = function extensionSequence() {
                return this._data[4];
              };
              return ESEntry2;
            }(SystemUseEntry);
            var RREntry = function(SystemUseEntry2) {
              function RREntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                RREntry2.__proto__ = SystemUseEntry2;
              RREntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              RREntry2.prototype.constructor = RREntry2;
              return RREntry2;
            }(SystemUseEntry);
            var PXEntry = function(SystemUseEntry2) {
              function PXEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                PXEntry2.__proto__ = SystemUseEntry2;
              PXEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              PXEntry2.prototype.constructor = PXEntry2;
              PXEntry2.prototype.mode = function mode() {
                return this._data.readUInt32LE(4);
              };
              PXEntry2.prototype.fileLinks = function fileLinks() {
                return this._data.readUInt32LE(12);
              };
              PXEntry2.prototype.uid = function uid() {
                return this._data.readUInt32LE(20);
              };
              PXEntry2.prototype.gid = function gid() {
                return this._data.readUInt32LE(28);
              };
              PXEntry2.prototype.inode = function inode() {
                return this._data.readUInt32LE(36);
              };
              return PXEntry2;
            }(SystemUseEntry);
            var PNEntry = function(SystemUseEntry2) {
              function PNEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                PNEntry2.__proto__ = SystemUseEntry2;
              PNEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              PNEntry2.prototype.constructor = PNEntry2;
              PNEntry2.prototype.devTHigh = function devTHigh() {
                return this._data.readUInt32LE(4);
              };
              PNEntry2.prototype.devTLow = function devTLow() {
                return this._data.readUInt32LE(12);
              };
              return PNEntry2;
            }(SystemUseEntry);
            var SLEntry = function(SystemUseEntry2) {
              function SLEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                SLEntry2.__proto__ = SystemUseEntry2;
              SLEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              SLEntry2.prototype.constructor = SLEntry2;
              SLEntry2.prototype.flags = function flags() {
                return this._data[4];
              };
              SLEntry2.prototype.continueFlag = function continueFlag() {
                return this.flags() & 1;
              };
              SLEntry2.prototype.componentRecords = function componentRecords() {
                var this$1 = this;
                var records = new Array();
                var i2 = 5;
                while (i2 < this.length()) {
                  var record = new SLComponentRecord(this$1._data.slice(i2));
                  records.push(record);
                  i2 += record.length();
                }
                return records;
              };
              return SLEntry2;
            }(SystemUseEntry);
            var SLComponentRecord = function SLComponentRecord2(data) {
              this._data = data;
            };
            SLComponentRecord.prototype.flags = function flags() {
              return this._data[0];
            };
            SLComponentRecord.prototype.length = function length() {
              return 2 + this.componentLength();
            };
            SLComponentRecord.prototype.componentLength = function componentLength() {
              return this._data[1];
            };
            SLComponentRecord.prototype.content = function content(getString) {
              return getString(this._data, 2, this.componentLength());
            };
            var NMEntry = function(SystemUseEntry2) {
              function NMEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                NMEntry2.__proto__ = SystemUseEntry2;
              NMEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              NMEntry2.prototype.constructor = NMEntry2;
              NMEntry2.prototype.flags = function flags() {
                return this._data[4];
              };
              NMEntry2.prototype.name = function name2(getString) {
                return getString(this._data, 5, this.length() - 5);
              };
              return NMEntry2;
            }(SystemUseEntry);
            var CLEntry = function(SystemUseEntry2) {
              function CLEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                CLEntry2.__proto__ = SystemUseEntry2;
              CLEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              CLEntry2.prototype.constructor = CLEntry2;
              CLEntry2.prototype.childDirectoryLba = function childDirectoryLba() {
                return this._data.readUInt32LE(4);
              };
              return CLEntry2;
            }(SystemUseEntry);
            var PLEntry = function(SystemUseEntry2) {
              function PLEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                PLEntry2.__proto__ = SystemUseEntry2;
              PLEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              PLEntry2.prototype.constructor = PLEntry2;
              PLEntry2.prototype.parentDirectoryLba = function parentDirectoryLba() {
                return this._data.readUInt32LE(4);
              };
              return PLEntry2;
            }(SystemUseEntry);
            var REEntry = function(SystemUseEntry2) {
              function REEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                REEntry2.__proto__ = SystemUseEntry2;
              REEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              REEntry2.prototype.constructor = REEntry2;
              return REEntry2;
            }(SystemUseEntry);
            var TFEntry = function(SystemUseEntry2) {
              function TFEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                TFEntry2.__proto__ = SystemUseEntry2;
              TFEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              TFEntry2.prototype.constructor = TFEntry2;
              TFEntry2.prototype.flags = function flags() {
                return this._data[4];
              };
              TFEntry2.prototype.creation = function creation() {
                if (this.flags() & 1) {
                  if (this._longFormDates()) {
                    return getDate(this._data, 5);
                  } else {
                    return getShortFormDate(this._data, 5);
                  }
                } else {
                  return null;
                }
              };
              TFEntry2.prototype.modify = function modify() {
                if (this.flags() & 2) {
                  var previousDates = this.flags() & 1 ? 1 : 0;
                  if (this._longFormDates) {
                    return getDate(this._data, 5 + previousDates * 17);
                  } else {
                    return getShortFormDate(this._data, 5 + previousDates * 7);
                  }
                } else {
                  return null;
                }
              };
              TFEntry2.prototype.access = function access() {
                if (this.flags() & 4) {
                  var previousDates = this.flags() & 1 ? 1 : 0;
                  previousDates += this.flags() & 2 ? 1 : 0;
                  if (this._longFormDates) {
                    return getDate(this._data, 5 + previousDates * 17);
                  } else {
                    return getShortFormDate(this._data, 5 + previousDates * 7);
                  }
                } else {
                  return null;
                }
              };
              TFEntry2.prototype.backup = function backup() {
                if (this.flags() & 16) {
                  var previousDates = this.flags() & 1 ? 1 : 0;
                  previousDates += this.flags() & 2 ? 1 : 0;
                  previousDates += this.flags() & 4 ? 1 : 0;
                  if (this._longFormDates) {
                    return getDate(this._data, 5 + previousDates * 17);
                  } else {
                    return getShortFormDate(this._data, 5 + previousDates * 7);
                  }
                } else {
                  return null;
                }
              };
              TFEntry2.prototype.expiration = function expiration() {
                if (this.flags() & 32) {
                  var previousDates = this.flags() & 1 ? 1 : 0;
                  previousDates += this.flags() & 2 ? 1 : 0;
                  previousDates += this.flags() & 4 ? 1 : 0;
                  previousDates += this.flags() & 16 ? 1 : 0;
                  if (this._longFormDates) {
                    return getDate(this._data, 5 + previousDates * 17);
                  } else {
                    return getShortFormDate(this._data, 5 + previousDates * 7);
                  }
                } else {
                  return null;
                }
              };
              TFEntry2.prototype.effective = function effective() {
                if (this.flags() & 64) {
                  var previousDates = this.flags() & 1 ? 1 : 0;
                  previousDates += this.flags() & 2 ? 1 : 0;
                  previousDates += this.flags() & 4 ? 1 : 0;
                  previousDates += this.flags() & 16 ? 1 : 0;
                  previousDates += this.flags() & 32 ? 1 : 0;
                  if (this._longFormDates) {
                    return getDate(this._data, 5 + previousDates * 17);
                  } else {
                    return getShortFormDate(this._data, 5 + previousDates * 7);
                  }
                } else {
                  return null;
                }
              };
              TFEntry2.prototype._longFormDates = function _longFormDates() {
                return !!(this.flags() && 128);
              };
              return TFEntry2;
            }(SystemUseEntry);
            var SFEntry = function(SystemUseEntry2) {
              function SFEntry2(data) {
                SystemUseEntry2.call(this, data);
              }
              if (SystemUseEntry2)
                SFEntry2.__proto__ = SystemUseEntry2;
              SFEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
              SFEntry2.prototype.constructor = SFEntry2;
              SFEntry2.prototype.virtualSizeHigh = function virtualSizeHigh() {
                return this._data.readUInt32LE(4);
              };
              SFEntry2.prototype.virtualSizeLow = function virtualSizeLow() {
                return this._data.readUInt32LE(12);
              };
              SFEntry2.prototype.tableDepth = function tableDepth() {
                return this._data[20];
              };
              return SFEntry2;
            }(SystemUseEntry);
            var Directory = function Directory2(record, isoData) {
              var this$1 = this;
              this._fileList = [];
              this._fileMap = {};
              this._record = record;
              var i2 = record.lba();
              var iLimit = i2 + record.dataLength();
              if (!(record.fileFlags() & 2)) {
                var cl = record.getSUEntries(isoData).filter(function(e) {
                  return e instanceof CLEntry;
                })[0];
                i2 = cl.childDirectoryLba() * 2048;
                iLimit = Infinity;
              }
              while (i2 < iLimit) {
                var len = isoData[i2];
                if (len === 0) {
                  i2++;
                  continue;
                }
                var r = this$1._constructDirectoryRecord(isoData.slice(i2));
                var fname = r.fileName(isoData);
                if (fname !== "\0" && fname !== "") {
                  if (!r.hasRockRidge() || r.getSUEntries(isoData).filter(function(e) {
                    return e instanceof REEntry;
                  }).length === 0) {
                    this$1._fileMap[fname] = r;
                    this$1._fileList.push(fname);
                  }
                } else if (iLimit === Infinity) {
                  iLimit = i2 + r.dataLength();
                }
                i2 += r.length();
              }
            };
            Directory.prototype.getRecord = function getRecord(name2) {
              return this._fileMap[name2];
            };
            Directory.prototype.getFileList = function getFileList() {
              return this._fileList;
            };
            Directory.prototype.getDotEntry = function getDotEntry(isoData) {
              return this._constructDirectoryRecord(isoData.slice(this._record.lba()));
            };
            var ISODirectory = function(Directory2) {
              function ISODirectory2(record, isoData) {
                Directory2.call(this, record, isoData);
              }
              if (Directory2)
                ISODirectory2.__proto__ = Directory2;
              ISODirectory2.prototype = Object.create(Directory2 && Directory2.prototype);
              ISODirectory2.prototype.constructor = ISODirectory2;
              ISODirectory2.prototype._constructDirectoryRecord = function _constructDirectoryRecord(data) {
                return new ISODirectoryRecord(data, this._record.getRockRidgeOffset());
              };
              return ISODirectory2;
            }(Directory);
            var JolietDirectory = function(Directory2) {
              function JolietDirectory2(record, isoData) {
                Directory2.call(this, record, isoData);
              }
              if (Directory2)
                JolietDirectory2.__proto__ = Directory2;
              JolietDirectory2.prototype = Object.create(Directory2 && Directory2.prototype);
              JolietDirectory2.prototype.constructor = JolietDirectory2;
              JolietDirectory2.prototype._constructDirectoryRecord = function _constructDirectoryRecord(data) {
                return new JolietDirectoryRecord(data, this._record.getRockRidgeOffset());
              };
              return JolietDirectory2;
            }(Directory);
            var IsoFS = function(SynchronousFileSystem$$1) {
              function IsoFS2(data, name2, deprecateMsg) {
                var this$1 = this;
                if (name2 === void 0)
                  name2 = "";
                if (deprecateMsg === void 0)
                  deprecateMsg = true;
                SynchronousFileSystem$$1.call(this);
                this._data = data;
                deprecationMessage(deprecateMsg, IsoFS2.Name, { data: "ISO data as a Buffer", name: name2 });
                var vdTerminatorFound = false;
                var i2 = 16 * 2048;
                var candidateVDs = new Array();
                while (!vdTerminatorFound) {
                  var slice = data.slice(i2);
                  var vd = new VolumeDescriptor(slice);
                  switch (vd.type()) {
                    case 1:
                      candidateVDs.push(new PrimaryVolumeDescriptor(slice));
                      break;
                    case 2:
                      candidateVDs.push(new SupplementaryVolumeDescriptor(slice));
                      break;
                    case 255:
                      vdTerminatorFound = true;
                      break;
                  }
                  i2 += 2048;
                }
                if (candidateVDs.length === 0) {
                  throw new ApiError(ErrorCode.EIO, "Unable to find a suitable volume descriptor.");
                }
                candidateVDs.forEach(function(v) {
                  if (!this$1._pvd || this$1._pvd.type() !== 2) {
                    this$1._pvd = v;
                  }
                });
                this._root = this._pvd.rootDirectoryEntry(data);
                this._name = name2;
              }
              if (SynchronousFileSystem$$1)
                IsoFS2.__proto__ = SynchronousFileSystem$$1;
              IsoFS2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
              IsoFS2.prototype.constructor = IsoFS2;
              IsoFS2.Create = function Create(opts, cb) {
                var fs4;
                var e;
                try {
                  fs4 = new IsoFS2(opts.data, opts.name, false);
                } catch (e2) {
                  e2 = e2;
                } finally {
                  cb(e, fs4);
                }
              };
              IsoFS2.isAvailable = function isAvailable() {
                return true;
              };
              IsoFS2.prototype.getName = function getName() {
                var name2 = "IsoFS" + this._name + (this._pvd ? "-" + this._pvd.name() : "");
                if (this._root && this._root.hasRockRidge()) {
                  name2 += "-RockRidge";
                }
                return name2;
              };
              IsoFS2.prototype.diskSpace = function diskSpace(path$$1, cb) {
                cb(this._data.length, 0);
              };
              IsoFS2.prototype.isReadOnly = function isReadOnly() {
                return true;
              };
              IsoFS2.prototype.supportsLinks = function supportsLinks() {
                return false;
              };
              IsoFS2.prototype.supportsProps = function supportsProps() {
                return false;
              };
              IsoFS2.prototype.supportsSynch = function supportsSynch() {
                return true;
              };
              IsoFS2.prototype.statSync = function statSync(p, isLstat) {
                var record = this._getDirectoryRecord(p);
                if (record === null) {
                  throw ApiError.ENOENT(p);
                }
                return this._getStats(p, record);
              };
              IsoFS2.prototype.openSync = function openSync(p, flags, mode) {
                if (flags.isWriteable()) {
                  throw new ApiError(ErrorCode.EPERM, p);
                }
                var record = this._getDirectoryRecord(p);
                if (!record) {
                  throw ApiError.ENOENT(p);
                } else if (record.isSymlink(this._data)) {
                  return this.openSync(path2.resolve(p, record.getSymlinkPath(this._data)), flags, mode);
                } else if (!record.isDirectory(this._data)) {
                  var data = record.getFile(this._data);
                  var stats = this._getStats(p, record);
                  switch (flags.pathExistsAction()) {
                    case ActionType.THROW_EXCEPTION:
                    case ActionType.TRUNCATE_FILE:
                      throw ApiError.EEXIST(p);
                    case ActionType.NOP:
                      return new NoSyncFile(this, p, flags, stats, data);
                    default:
                      throw new ApiError(ErrorCode.EINVAL, "Invalid FileMode object.");
                  }
                } else {
                  throw ApiError.EISDIR(p);
                }
              };
              IsoFS2.prototype.readdirSync = function readdirSync(path$$1) {
                var record = this._getDirectoryRecord(path$$1);
                if (!record) {
                  throw ApiError.ENOENT(path$$1);
                } else if (record.isDirectory(this._data)) {
                  return record.getDirectory(this._data).getFileList().slice(0);
                } else {
                  throw ApiError.ENOTDIR(path$$1);
                }
              };
              IsoFS2.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
                var fd = this.openSync(fname, flag, 420);
                try {
                  var fdCast = fd;
                  var fdBuff = fdCast.getBuffer();
                  if (encoding === null) {
                    return copyingSlice(fdBuff);
                  }
                  return fdBuff.toString(encoding);
                } finally {
                  fd.closeSync();
                }
              };
              IsoFS2.prototype._getDirectoryRecord = function _getDirectoryRecord(path$$1) {
                var this$1 = this;
                if (path$$1 === "/") {
                  return this._root;
                }
                var components = path$$1.split("/").slice(1);
                var dir2 = this._root;
                for (var i2 = 0, list2 = components; i2 < list2.length; i2 += 1) {
                  var component = list2[i2];
                  if (dir2.isDirectory(this$1._data)) {
                    dir2 = dir2.getDirectory(this$1._data).getRecord(component);
                    if (!dir2) {
                      return null;
                    }
                  } else {
                    return null;
                  }
                }
                return dir2;
              };
              IsoFS2.prototype._getStats = function _getStats(p, record) {
                if (record.isSymlink(this._data)) {
                  var newP = path2.resolve(p, record.getSymlinkPath(this._data));
                  var dirRec = this._getDirectoryRecord(newP);
                  if (!dirRec) {
                    return null;
                  }
                  return this._getStats(newP, dirRec);
                } else {
                  var len = record.dataLength();
                  var mode = 365;
                  var date = record.recordingDate();
                  var atime = date;
                  var mtime = date;
                  var ctime = date;
                  if (record.hasRockRidge()) {
                    var entries = record.getSUEntries(this._data);
                    for (var i2 = 0, list2 = entries; i2 < list2.length; i2 += 1) {
                      var entry = list2[i2];
                      if (entry instanceof PXEntry) {
                        mode = entry.mode();
                      } else if (entry instanceof TFEntry) {
                        var flags = entry.flags();
                        if (flags & 4) {
                          atime = entry.access();
                        }
                        if (flags & 2) {
                          mtime = entry.modify();
                        }
                        if (flags & 1) {
                          ctime = entry.creation();
                        }
                      }
                    }
                  }
                  mode = mode & 365;
                  return new Stats(record.isDirectory(this._data) ? FileType.DIRECTORY : FileType.FILE, len, mode, atime, mtime, ctime);
                }
              };
              return IsoFS2;
            }(SynchronousFileSystem);
            IsoFS.Name = "IsoFS";
            IsoFS.Options = {
              data: {
                type: "object",
                description: "The ISO file in a buffer",
                validator: bufferValidator
              }
            };
            [AsyncMirror, DropboxFileSystem, EmscriptenFileSystem, FolderAdapter, HTML5FS, InMemoryFileSystem, IndexedDBFileSystem, IsoFS, LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS].forEach(function(fsType) {
              var create = fsType.Create;
              fsType.Create = function(opts, cb) {
                var oneArg = typeof opts === "function";
                var normalizedCb = oneArg ? opts : cb;
                var normalizedOpts = oneArg ? {} : opts;
                function wrappedCb(e) {
                  if (e) {
                    normalizedCb(e);
                  } else {
                    create.call(fsType, normalizedOpts, normalizedCb);
                  }
                }
                checkOptions(fsType, normalizedOpts, wrappedCb);
              };
            });
            var Backends = { AsyncMirror, Dropbox: DropboxFileSystem, Emscripten: EmscriptenFileSystem, FolderAdapter, HTML5FS, InMemory: InMemoryFileSystem, IndexedDB: IndexedDBFileSystem, IsoFS, LocalStorage: LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS };
            if (process2["initializeTTYs"]) {
              process2["initializeTTYs"]();
            }
            function install(obj) {
              obj.Buffer = Buffer2;
              obj.process = process2;
              var oldRequire = obj.require ? obj.require : null;
              obj.require = function(arg) {
                var rv = BFSRequire2(arg);
                if (!rv) {
                  return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
                } else {
                  return rv;
                }
              };
            }
            function registerFileSystem(name2, fs4) {
              Backends[name2] = fs4;
            }
            function BFSRequire2(module4) {
              switch (module4) {
                case "fs":
                  return _fsMock;
                case "path":
                  return path2;
                case "buffer":
                  return buffer;
                case "process":
                  return process2;
                case "bfs_utils":
                  return BFSUtils;
                default:
                  return Backends[module4];
              }
            }
            function initialize2(rootfs) {
              return _fsMock.initialize(rootfs);
            }
            function configure(config, cb) {
              getFileSystem(config, function(e, fs4) {
                if (fs4) {
                  initialize2(fs4);
                  cb();
                } else {
                  cb(e);
                }
              });
            }
            function getFileSystem(config, cb) {
              var fsName = config["fs"];
              if (!fsName) {
                return cb(new ApiError(ErrorCode.EPERM, 'Missing "fs" property on configuration object.'));
              }
              var options2 = config["options"];
              var waitCount = 0;
              var called = false;
              function finish() {
                if (!called) {
                  called = true;
                  var fsc = Backends[fsName];
                  if (!fsc) {
                    cb(new ApiError(ErrorCode.EPERM, "File system " + fsName + " is not available in BrowserFS."));
                  } else {
                    fsc.Create(options2, cb);
                  }
                }
              }
              if (options2 !== null && typeof options2 === "object") {
                var finishedIterating = false;
                var props = Object.keys(options2).filter(function(k) {
                  return k !== "fs";
                });
                props.forEach(function(p) {
                  var d2 = options2[p];
                  if (d2 !== null && typeof d2 === "object" && d2["fs"]) {
                    waitCount++;
                    getFileSystem(d2, function(e, fs4) {
                      waitCount--;
                      if (e) {
                        if (called) {
                          return;
                        }
                        called = true;
                        cb(e);
                      } else {
                        options2[p] = fs4;
                        if (waitCount === 0 && finishedIterating) {
                          finish();
                        }
                      }
                    });
                  }
                });
                finishedIterating = true;
              }
              if (waitCount === 0) {
                finish();
              }
            }
            if ("ab".substr(-1) !== "b") {
              String.prototype.substr = function(substr) {
                return function(start, length) {
                  if (start < 0) {
                    start = this.length + start;
                  }
                  return substr.call(this, start, length);
                };
              }(String.prototype.substr);
            }
            if (typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined") {
              if (!Uint8Array.prototype["slice"]) {
                Uint8Array.prototype.slice = function(start, end) {
                  if (start === void 0)
                    start = 0;
                  if (end === void 0)
                    end = this.length;
                  var self2 = this;
                  if (start < 0) {
                    start = this.length + start;
                    if (start < 0) {
                      start = 0;
                    }
                  }
                  if (end < 0) {
                    end = this.length + end;
                    if (end < 0) {
                      end = 0;
                    }
                  }
                  if (end < start) {
                    end = start;
                  }
                  return new Uint8Array(self2.buffer, self2.byteOffset + start, end - start);
                };
              }
            }
            exports2.install = install;
            exports2.registerFileSystem = registerFileSystem;
            exports2.BFSRequire = BFSRequire2;
            exports2.initialize = initialize2;
            exports2.configure = configure;
            exports2.getFileSystem = getFileSystem;
            exports2.EmscriptenFS = BFSEmscriptenFS;
            exports2.FileSystem = Backends;
            exports2.Errors = api_error;
            exports2.setImmediate = setImmediate$3;
          }).call(exports2, __webpack_require__(1), function() {
            return this;
          }(), __webpack_require__(5)(module2), __webpack_require__(6));
        },
        function(module2, exports2, __webpack_require__) {
          module2.exports = __webpack_require__(2).Buffer;
        },
        function(module2, exports2, __webpack_require__) {
          (function(Buffer2) {
            "use strict";
            var base64 = __webpack_require__(3);
            var ieee754 = __webpack_require__(4);
            exports2.Buffer = Buffer2;
            exports2.SlowBuffer = SlowBuffer;
            exports2.INSPECT_MAX_BYTES = 50;
            var K_MAX_LENGTH = 2147483647;
            exports2.kMaxLength = K_MAX_LENGTH;
            Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
            if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
              console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
            }
            function typedArraySupport() {
              try {
                var arr = new Uint8Array(1);
                arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                  return 42;
                } };
                return arr.foo() === 42;
              } catch (e) {
                return false;
              }
            }
            function createBuffer(length) {
              if (length > K_MAX_LENGTH) {
                throw new RangeError("Invalid typed array length");
              }
              var buf = new Uint8Array(length);
              buf.__proto__ = Buffer2.prototype;
              return buf;
            }
            function Buffer2(arg, encodingOrOffset, length) {
              if (typeof arg === "number") {
                if (typeof encodingOrOffset === "string") {
                  throw new Error("If encoding is specified then the first argument must be a string");
                }
                return allocUnsafe(arg);
              }
              return from2(arg, encodingOrOffset, length);
            }
            if (typeof Symbol !== "undefined" && Symbol.species && Buffer2[Symbol.species] === Buffer2) {
              Object.defineProperty(Buffer2, Symbol.species, {
                value: null,
                configurable: true,
                enumerable: false,
                writable: false
              });
            }
            Buffer2.poolSize = 8192;
            function from2(value, encodingOrOffset, length) {
              if (typeof value === "number") {
                throw new TypeError('"value" argument must not be a number');
              }
              if (isArrayBuffer(value)) {
                return fromArrayBuffer(value, encodingOrOffset, length);
              }
              if (typeof value === "string") {
                return fromString(value, encodingOrOffset);
              }
              return fromObject(value);
            }
            Buffer2.from = function(value, encodingOrOffset, length) {
              return from2(value, encodingOrOffset, length);
            };
            Buffer2.prototype.__proto__ = Uint8Array.prototype;
            Buffer2.__proto__ = Uint8Array;
            function assertSize(size) {
              if (typeof size !== "number") {
                throw new TypeError('"size" argument must be a number');
              } else if (size < 0) {
                throw new RangeError('"size" argument must not be negative');
              }
            }
            function alloc(size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(size);
              }
              if (fill !== void 0) {
                return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
              }
              return createBuffer(size);
            }
            Buffer2.alloc = function(size, fill, encoding) {
              return alloc(size, fill, encoding);
            };
            function allocUnsafe(size) {
              assertSize(size);
              return createBuffer(size < 0 ? 0 : checked(size) | 0);
            }
            Buffer2.allocUnsafe = function(size) {
              return allocUnsafe(size);
            };
            Buffer2.allocUnsafeSlow = function(size) {
              return allocUnsafe(size);
            };
            function fromString(string, encoding) {
              if (typeof encoding !== "string" || encoding === "") {
                encoding = "utf8";
              }
              if (!Buffer2.isEncoding(encoding)) {
                throw new TypeError('"encoding" must be a valid string encoding');
              }
              var length = byteLength(string, encoding) | 0;
              var buf = createBuffer(length);
              var actual = buf.write(string, encoding);
              if (actual !== length) {
                buf = buf.slice(0, actual);
              }
              return buf;
            }
            function fromArrayLike(array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              var buf = createBuffer(length);
              for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255;
              }
              return buf;
            }
            function fromArrayBuffer(array, byteOffset, length) {
              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError("'offset' is out of bounds");
              }
              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError("'length' is out of bounds");
              }
              var buf;
              if (byteOffset === void 0 && length === void 0) {
                buf = new Uint8Array(array);
              } else if (length === void 0) {
                buf = new Uint8Array(array, byteOffset);
              } else {
                buf = new Uint8Array(array, byteOffset, length);
              }
              buf.__proto__ = Buffer2.prototype;
              return buf;
            }
            function fromObject(obj) {
              if (Buffer2.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                var buf = createBuffer(len);
                if (buf.length === 0) {
                  return buf;
                }
                obj.copy(buf, 0, 0, len);
                return buf;
              }
              if (obj) {
                if (isArrayBufferView(obj) || "length" in obj) {
                  if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                    return createBuffer(0);
                  }
                  return fromArrayLike(obj);
                }
                if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                  return fromArrayLike(obj.data);
                }
              }
              throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            }
            function checked(length) {
              if (length >= K_MAX_LENGTH) {
                throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
              }
              return length | 0;
            }
            function SlowBuffer(length) {
              if (+length != length) {
                length = 0;
              }
              return Buffer2.alloc(+length);
            }
            Buffer2.isBuffer = function isBuffer(b) {
              return b != null && b._isBuffer === true;
            };
            Buffer2.compare = function compare(a, b) {
              if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
                throw new TypeError("Arguments must be Buffers");
              }
              if (a === b)
                return 0;
              var x = a.length;
              var y = b.length;
              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }
              if (x < y)
                return -1;
              if (y < x)
                return 1;
              return 0;
            };
            Buffer2.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return true;
                default:
                  return false;
              }
            };
            Buffer2.concat = function concat(list, length) {
              if (!Array.isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }
              if (list.length === 0) {
                return Buffer2.alloc(0);
              }
              var i;
              if (length === void 0) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }
              var buffer = Buffer2.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (!Buffer2.isBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }
                buf.copy(buffer, pos);
                pos += buf.length;
              }
              return buffer;
            };
            function byteLength(string, encoding) {
              if (Buffer2.isBuffer(string)) {
                return string.length;
              }
              if (isArrayBufferView(string) || isArrayBuffer(string)) {
                return string.byteLength;
              }
              if (typeof string !== "string") {
                string = "" + string;
              }
              var len = string.length;
              if (len === 0)
                return 0;
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "ascii":
                  case "latin1":
                  case "binary":
                    return len;
                  case "utf8":
                  case "utf-8":
                  case void 0:
                    return utf8ToBytes(string).length;
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return len * 2;
                  case "hex":
                    return len >>> 1;
                  case "base64":
                    return base64ToBytes(string).length;
                  default:
                    if (loweredCase)
                      return utf8ToBytes(string).length;
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer2.byteLength = byteLength;
            function slowToString(encoding, start, end) {
              var loweredCase = false;
              if (start === void 0 || start < 0) {
                start = 0;
              }
              if (start > this.length) {
                return "";
              }
              if (end === void 0 || end > this.length) {
                end = this.length;
              }
              if (end <= 0) {
                return "";
              }
              end >>>= 0;
              start >>>= 0;
              if (end <= start) {
                return "";
              }
              if (!encoding)
                encoding = "utf8";
              while (true) {
                switch (encoding) {
                  case "hex":
                    return hexSlice(this, start, end);
                  case "utf8":
                  case "utf-8":
                    return utf8Slice(this, start, end);
                  case "ascii":
                    return asciiSlice(this, start, end);
                  case "latin1":
                  case "binary":
                    return latin1Slice(this, start, end);
                  case "base64":
                    return base64Slice(this, start, end);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return utf16leSlice(this, start, end);
                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = (encoding + "").toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer2.prototype._isBuffer = true;
            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }
            Buffer2.prototype.swap16 = function swap16() {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 16-bits");
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this;
            };
            Buffer2.prototype.swap32 = function swap32() {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 32-bits");
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this;
            };
            Buffer2.prototype.swap64 = function swap64() {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 64-bits");
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this;
            };
            Buffer2.prototype.toString = function toString() {
              var length = this.length;
              if (length === 0)
                return "";
              if (arguments.length === 0)
                return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };
            Buffer2.prototype.equals = function equals(b) {
              if (!Buffer2.isBuffer(b))
                throw new TypeError("Argument must be a Buffer");
              if (this === b)
                return true;
              return Buffer2.compare(this, b) === 0;
            };
            Buffer2.prototype.inspect = function inspect() {
              var str2 = "";
              var max = exports2.INSPECT_MAX_BYTES;
              if (this.length > 0) {
                str2 = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
                if (this.length > max)
                  str2 += " ... ";
              }
              return "<Buffer " + str2 + ">";
            };
            Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
              if (!Buffer2.isBuffer(target)) {
                throw new TypeError("Argument must be a Buffer");
              }
              if (start === void 0) {
                start = 0;
              }
              if (end === void 0) {
                end = target ? target.length : 0;
              }
              if (thisStart === void 0) {
                thisStart = 0;
              }
              if (thisEnd === void 0) {
                thisEnd = this.length;
              }
              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError("out of range index");
              }
              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }
              if (thisStart >= thisEnd) {
                return -1;
              }
              if (start >= end) {
                return 1;
              }
              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;
              if (this === target)
                return 0;
              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);
              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);
              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }
              if (x < y)
                return -1;
              if (y < x)
                return 1;
              return 0;
            };
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir2) {
              if (buffer.length === 0)
                return -1;
              if (typeof byteOffset === "string") {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 2147483647) {
                byteOffset = 2147483647;
              } else if (byteOffset < -2147483648) {
                byteOffset = -2147483648;
              }
              byteOffset = +byteOffset;
              if (numberIsNaN(byteOffset)) {
                byteOffset = dir2 ? 0 : buffer.length - 1;
              }
              if (byteOffset < 0)
                byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir2)
                  return -1;
                else
                  byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir2)
                  byteOffset = 0;
                else
                  return -1;
              }
              if (typeof val === "string") {
                val = Buffer2.from(val, encoding);
              }
              if (Buffer2.isBuffer(val)) {
                if (val.length === 0) {
                  return -1;
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir2);
              } else if (typeof val === "number") {
                val = val & 255;
                if (typeof Uint8Array.prototype.indexOf === "function") {
                  if (dir2) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                  }
                }
                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir2);
              }
              throw new TypeError("val must be string, number or Buffer");
            }
            function arrayIndexOf(arr, val, byteOffset, encoding, dir2) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;
              if (encoding !== void 0) {
                encoding = String(encoding).toLowerCase();
                if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }
              function read(buf, i2) {
                if (indexSize === 1) {
                  return buf[i2];
                } else {
                  return buf.readUInt16BE(i2 * indexSize);
                }
              }
              var i;
              if (dir2) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1)
                      foundIndex = i;
                    if (i - foundIndex + 1 === valLength)
                      return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1)
                      i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength)
                  byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }
                  if (found)
                    return i;
                }
              }
              return -1;
            }
            Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };
            Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };
            Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };
            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }
              var strLen = string.length;
              if (strLen % 2 !== 0)
                throw new TypeError("Invalid hex string");
              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (numberIsNaN(parsed))
                  return i;
                buf[offset + i] = parsed;
              }
              return i;
            }
            function utf8Write(buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }
            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }
            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }
            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }
            Buffer2.prototype.write = function write(string, offset, length, encoding) {
              if (offset === void 0) {
                encoding = "utf8";
                length = this.length;
                offset = 0;
              } else if (length === void 0 && typeof offset === "string") {
                encoding = offset;
                length = this.length;
                offset = 0;
              } else if (isFinite(offset)) {
                offset = offset >>> 0;
                if (isFinite(length)) {
                  length = length >>> 0;
                  if (encoding === void 0)
                    encoding = "utf8";
                } else {
                  encoding = length;
                  length = void 0;
                }
              } else {
                throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              }
              var remaining = this.length - offset;
              if (length === void 0 || length > remaining)
                length = remaining;
              if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError("Attempt to write outside buffer bounds");
              }
              if (!encoding)
                encoding = "utf8";
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "hex":
                    return hexWrite(this, string, offset, length);
                  case "utf8":
                  case "utf-8":
                    return utf8Write(this, string, offset, length);
                  case "ascii":
                    return asciiWrite(this, string, offset, length);
                  case "latin1":
                  case "binary":
                    return latin1Write(this, string, offset, length);
                  case "base64":
                    return base64Write(this, string, offset, length);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return ucs2Write(this, string, offset, length);
                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };
            Buffer2.prototype.toJSON = function toJSON() {
              return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };
            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }
            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;
                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 128) {
                        codePoint = firstByte;
                      }
                      break;
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }
                if (codePoint === null) {
                  codePoint = 65533;
                  bytesPerSequence = 1;
                } else if (codePoint > 65535) {
                  codePoint -= 65536;
                  res.push(codePoint >>> 10 & 1023 | 55296);
                  codePoint = 56320 | codePoint & 1023;
                }
                res.push(codePoint);
                i += bytesPerSequence;
              }
              return decodeCodePointsArray(res);
            }
            var MAX_ARGUMENTS_LENGTH = 4096;
            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints);
              }
              var res = "";
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
              }
              return res;
            }
            function asciiSlice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 127);
              }
              return ret;
            }
            function latin1Slice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret;
            }
            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0)
                start = 0;
              if (!end || end < 0 || end > len)
                end = len;
              var out = "";
              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }
              return out;
            }
            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = "";
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res;
            }
            Buffer2.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === void 0 ? len : ~~end;
              if (start < 0) {
                start += len;
                if (start < 0)
                  start = 0;
              } else if (start > len) {
                start = len;
              }
              if (end < 0) {
                end += len;
                if (end < 0)
                  end = 0;
              } else if (end > len) {
                end = len;
              }
              if (end < start)
                end = start;
              var newBuf = this.subarray(start, end);
              newBuf.__proto__ = Buffer2.prototype;
              return newBuf;
            };
            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0)
                throw new RangeError("offset is not uint");
              if (offset + ext > length)
                throw new RangeError("Trying to access beyond buffer length");
            }
            Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              return val;
            };
            Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                checkOffset(offset, byteLength2, this.length);
              }
              var val = this[offset + --byteLength2];
              var mul = 1;
              while (byteLength2 > 0 && (mul *= 256)) {
                val += this[offset + --byteLength2] * mul;
              }
              return val;
            };
            Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              return this[offset];
            };
            Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return this[offset] | this[offset + 1] << 8;
            };
            Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return this[offset] << 8 | this[offset + 1];
            };
            Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
            };
            Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };
            Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              mul *= 128;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var i = byteLength2;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 256)) {
                val += this[offset + --i] * mul;
              }
              mul *= 128;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              if (!(this[offset] & 128))
                return this[offset];
              return (255 - this[offset] + 1) * -1;
            };
            Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset] | this[offset + 1] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | this[offset] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };
            Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };
            Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };
            Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };
            Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };
            Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };
            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer2.isBuffer(buf))
                throw new TypeError('"buffer" argument must be a Buffer instance');
              if (value > max || value < min)
                throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
            }
            Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var mul = 1;
              var i = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 255, 0);
              this[offset] = value & 255;
              return offset + 1;
            };
            Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 65535, 0);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 65535, 0);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 255;
              return offset + 2;
            };
            Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 4294967295, 0);
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 255;
              return offset + 4;
            };
            Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 4294967295, 0);
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 255;
              return offset + 4;
            };
            Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 127, -128);
              if (value < 0)
                value = 255 + value + 1;
              this[offset] = value & 255;
              return offset + 1;
            };
            Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 32767, -32768);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 32767, -32768);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 255;
              return offset + 2;
            };
            Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 2147483647, -2147483648);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
              return offset + 4;
            };
            Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 2147483647, -2147483648);
              if (value < 0)
                value = 4294967295 + value + 1;
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 255;
              return offset + 4;
            };
            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
              if (offset < 0)
                throw new RangeError("Index out of range");
            }
            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }
            Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };
            Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };
            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }
            Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert);
            };
            Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert);
            };
            Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
              if (!start)
                start = 0;
              if (!end && end !== 0)
                end = this.length;
              if (targetStart >= target.length)
                targetStart = target.length;
              if (!targetStart)
                targetStart = 0;
              if (end > 0 && end < start)
                end = start;
              if (end === start)
                return 0;
              if (target.length === 0 || this.length === 0)
                return 0;
              if (targetStart < 0) {
                throw new RangeError("targetStart out of bounds");
              }
              if (start < 0 || start >= this.length)
                throw new RangeError("sourceStart out of bounds");
              if (end < 0)
                throw new RangeError("sourceEnd out of bounds");
              if (end > this.length)
                end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }
              var len = end - start;
              var i;
              if (this === target && start < targetStart && targetStart < end) {
                for (i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else if (len < 1e3) {
                for (i = 0; i < len; ++i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
              }
              return len;
            };
            Buffer2.prototype.fill = function fill(val, start, end, encoding) {
              if (typeof val === "string") {
                if (typeof start === "string") {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === "string") {
                  encoding = end;
                  end = this.length;
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if (code < 256) {
                    val = code;
                  }
                }
                if (encoding !== void 0 && typeof encoding !== "string") {
                  throw new TypeError("encoding must be a string");
                }
                if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
              } else if (typeof val === "number") {
                val = val & 255;
              }
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError("Out of range index");
              }
              if (end <= start) {
                return this;
              }
              start = start >>> 0;
              end = end === void 0 ? this.length : end >>> 0;
              if (!val)
                val = 0;
              var i;
              if (typeof val === "number") {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer2.isBuffer(val) ? val : new Buffer2(val, encoding);
                var len = bytes.length;
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }
              return this;
            };
            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
            function base64clean(str2) {
              str2 = str2.trim().replace(INVALID_BASE64_RE, "");
              if (str2.length < 2)
                return "";
              while (str2.length % 4 !== 0) {
                str2 = str2 + "=";
              }
              return str2;
            }
            function toHex(n) {
              if (n < 16)
                return "0" + n.toString(16);
              return n.toString(16);
            }
            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];
              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);
                if (codePoint > 55295 && codePoint < 57344) {
                  if (!leadSurrogate) {
                    if (codePoint > 56319) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      continue;
                    } else if (i + 1 === length) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      continue;
                    }
                    leadSurrogate = codePoint;
                    continue;
                  }
                  if (codePoint < 56320) {
                    if ((units -= 3) > -1)
                      bytes.push(239, 191, 189);
                    leadSurrogate = codePoint;
                    continue;
                  }
                  codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                } else if (leadSurrogate) {
                  if ((units -= 3) > -1)
                    bytes.push(239, 191, 189);
                }
                leadSurrogate = null;
                if (codePoint < 128) {
                  if ((units -= 1) < 0)
                    break;
                  bytes.push(codePoint);
                } else if (codePoint < 2048) {
                  if ((units -= 2) < 0)
                    break;
                  bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
                } else if (codePoint < 65536) {
                  if ((units -= 3) < 0)
                    break;
                  bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                } else if (codePoint < 1114112) {
                  if ((units -= 4) < 0)
                    break;
                  bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                } else {
                  throw new Error("Invalid code point");
                }
              }
              return bytes;
            }
            function asciiToBytes(str2) {
              var byteArray = [];
              for (var i = 0; i < str2.length; ++i) {
                byteArray.push(str2.charCodeAt(i) & 255);
              }
              return byteArray;
            }
            function utf16leToBytes(str2, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str2.length; ++i) {
                if ((units -= 2) < 0)
                  break;
                c = str2.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }
              return byteArray;
            }
            function base64ToBytes(str2) {
              return base64.toByteArray(base64clean(str2));
            }
            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length)
                  break;
                dst[i + offset] = src[i];
              }
              return i;
            }
            function isArrayBuffer(obj) {
              return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === "ArrayBuffer" && typeof obj.byteLength === "number";
            }
            function isArrayBufferView(obj) {
              return typeof ArrayBuffer.isView === "function" && ArrayBuffer.isView(obj);
            }
            function numberIsNaN(obj) {
              return obj !== obj;
            }
          }).call(exports2, __webpack_require__(1));
        },
        function(module2, exports2) {
          "use strict";
          exports2.byteLength = byteLength;
          exports2.toByteArray = toByteArray;
          exports2.fromByteArray = fromByteArray;
          var lookup = [];
          var revLookup = [];
          var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
          var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
          }
          revLookup["-".charCodeAt(0)] = 62;
          revLookup["_".charCodeAt(0)] = 63;
          function placeHoldersCount(b64) {
            var len2 = b64.length;
            if (len2 % 4 > 0) {
              throw new Error("Invalid string. Length must be a multiple of 4");
            }
            return b64[len2 - 2] === "=" ? 2 : b64[len2 - 1] === "=" ? 1 : 0;
          }
          function byteLength(b64) {
            return b64.length * 3 / 4 - placeHoldersCount(b64);
          }
          function toByteArray(b64) {
            var i2, j, l, tmp, placeHolders, arr;
            var len2 = b64.length;
            placeHolders = placeHoldersCount(b64);
            arr = new Arr(len2 * 3 / 4 - placeHolders);
            l = placeHolders > 0 ? len2 - 4 : len2;
            var L = 0;
            for (i2 = 0, j = 0; i2 < l; i2 += 4, j += 3) {
              tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
              arr[L++] = tmp >> 16 & 255;
              arr[L++] = tmp >> 8 & 255;
              arr[L++] = tmp & 255;
            }
            if (placeHolders === 2) {
              tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
              arr[L++] = tmp & 255;
            } else if (placeHolders === 1) {
              tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
              arr[L++] = tmp >> 8 & 255;
              arr[L++] = tmp & 255;
            }
            return arr;
          }
          function tripletToBase64(num) {
            return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
          }
          function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];
            for (var i2 = start; i2 < end; i2 += 3) {
              tmp = (uint8[i2] << 16) + (uint8[i2 + 1] << 8) + uint8[i2 + 2];
              output.push(tripletToBase64(tmp));
            }
            return output.join("");
          }
          function fromByteArray(uint8) {
            var tmp;
            var len2 = uint8.length;
            var extraBytes = len2 % 3;
            var output = "";
            var parts = [];
            var maxChunkLength = 16383;
            for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
              parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
            }
            if (extraBytes === 1) {
              tmp = uint8[len2 - 1];
              output += lookup[tmp >> 2];
              output += lookup[tmp << 4 & 63];
              output += "==";
            } else if (extraBytes === 2) {
              tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
              output += lookup[tmp >> 10];
              output += lookup[tmp >> 4 & 63];
              output += lookup[tmp << 2 & 63];
              output += "=";
            }
            parts.push(output);
            return parts.join("");
          }
        },
        function(module2, exports2) {
          exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d2 = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d2;
            e = s & (1 << -nBits) - 1;
            s >>= -nBits;
            nBits += eLen;
            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d2, nBits -= 8) {
            }
            m = e & (1 << -nBits) - 1;
            e >>= -nBits;
            nBits += mLen;
            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d2, nBits -= 8) {
            }
            if (e === 0) {
              e = 1 - eBias;
            } else if (e === eMax) {
              return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
              m = m + Math.pow(2, mLen);
              e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
          };
          exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d2 = isLE ? 1 : -1;
            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
            value = Math.abs(value);
            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0;
              e = eMax;
            } else {
              e = Math.floor(Math.log(value) / Math.LN2);
              if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
              }
              if (e + eBias >= 1) {
                value += rt / c;
              } else {
                value += rt * Math.pow(2, 1 - eBias);
              }
              if (value * c >= 2) {
                e++;
                c /= 2;
              }
              if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
              } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
              }
            }
            for (; mLen >= 8; buffer[offset + i] = m & 255, i += d2, m /= 256, mLen -= 8) {
            }
            e = e << mLen | m;
            eLen += mLen;
            for (; eLen > 0; buffer[offset + i] = e & 255, i += d2, e /= 256, eLen -= 8) {
            }
            buffer[offset + i - d2] |= s * 128;
          };
        },
        function(module2, exports2) {
          module2.exports = function(module3) {
            if (!module3.webpackPolyfill) {
              module3.deprecate = function() {
              };
              module3.paths = [];
              module3.children = [];
              module3.webpackPolyfill = 1;
            }
            return module3;
          };
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var Process = __webpack_require__(7);
          var process2 = new Process(), processProxy = {};
          function defineKey(key2) {
            if (processProxy[key2]) {
              return;
            }
            if (typeof process2[key2] === "function") {
              processProxy[key2] = function() {
                return process2[key2].apply(process2, arguments);
              };
            } else {
              processProxy[key2] = process2[key2];
            }
          }
          for (var key in process2) {
            defineKey(key);
          }
          processProxy.initializeTTYs = function() {
            if (process2.stdin === null) {
              process2.initializeTTYs();
              processProxy.stdin = process2.stdin;
              processProxy.stdout = process2.stdout;
              processProxy.stderr = process2.stderr;
            }
          };
          process2.nextTick(function() {
            processProxy.initializeTTYs();
          });
          module2.exports = processProxy;
        },
        function(module2, exports2, __webpack_require__) {
          (function(__dirname) {
            "use strict";
            var __extends = this && this.__extends || function(d2, b) {
              for (var p in b)
                if (b.hasOwnProperty(p))
                  d2[p] = b[p];
              function __() {
                this.constructor = d2;
              }
              d2.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
            var events = __webpack_require__(8);
            var path2 = null;
            var Item = function() {
              function Item2(fun, array) {
                this.fun = fun;
                this.array = array;
              }
              Item2.prototype.run = function() {
                this.fun.apply(null, this.array);
              };
              return Item2;
            }();
            var NextTickQueue = function() {
              function NextTickQueue2() {
                this._queue = [];
                this._draining = false;
                this._currentQueue = null;
                this._queueIndex = -1;
              }
              NextTickQueue2.prototype.push = function(item) {
                var _this = this;
                if (this._queue.push(item) === 1 && !this._draining) {
                  setTimeout(function() {
                    return _this._drainQueue();
                  }, 0);
                }
              };
              NextTickQueue2.prototype._cleanUpNextTick = function() {
                this._draining = false;
                if (this._currentQueue && this._currentQueue.length) {
                  this._queue = this._currentQueue.concat(this._queue);
                } else {
                  this._queueIndex = -1;
                }
                if (this._queue.length) {
                  this._drainQueue();
                }
              };
              NextTickQueue2.prototype._drainQueue = function() {
                var _this = this;
                if (this._draining) {
                  return;
                }
                var timeout = setTimeout(function() {
                  return _this._cleanUpNextTick();
                });
                this._draining = true;
                var len = this._queue.length;
                while (len) {
                  this._currentQueue = this._queue;
                  this._queue = [];
                  while (++this._queueIndex < len) {
                    if (this._currentQueue) {
                      this._currentQueue[this._queueIndex].run();
                    }
                  }
                  this._queueIndex = -1;
                  len = this._queue.length;
                }
                this._currentQueue = null;
                this._draining = false;
                clearTimeout(timeout);
              };
              return NextTickQueue2;
            }();
            var Process = function(_super) {
              __extends(Process2, _super);
              function Process2() {
                _super.apply(this, arguments);
                this.startTime = Date.now();
                this._cwd = "/";
                this.platform = "browser";
                this.argv = [];
                this.execArgv = [];
                this.stdout = null;
                this.stderr = null;
                this.stdin = null;
                this.domain = null;
                this._queue = new NextTickQueue();
                this.execPath = __dirname;
                this.env = {};
                this.exitCode = 0;
                this._gid = 1;
                this._uid = 1;
                this.version = "v5.0";
                this.versions = {
                  http_parser: "0.0",
                  node: "5.0",
                  v8: "0.0",
                  uv: "0.0",
                  zlib: "0.0",
                  ares: "0.0",
                  icu: "0.0",
                  modules: "0",
                  openssl: "0.0"
                };
                this.config = {
                  target_defaults: {
                    cflags: [],
                    default_configuration: "Release",
                    defines: [],
                    include_dirs: [],
                    libraries: []
                  },
                  variables: {
                    clang: 0,
                    host_arch: "x32",
                    node_install_npm: false,
                    node_install_waf: false,
                    node_prefix: "",
                    node_shared_cares: false,
                    node_shared_http_parser: false,
                    node_shared_libuv: false,
                    node_shared_zlib: false,
                    node_shared_v8: false,
                    node_use_dtrace: false,
                    node_use_etw: false,
                    node_use_openssl: false,
                    node_shared_openssl: false,
                    strict_aliasing: false,
                    target_arch: "x32",
                    v8_use_snapshot: false,
                    v8_no_strict_aliasing: 0,
                    visibility: ""
                  }
                };
                this.pid = Math.random() * 1e3 | 0;
                this.title = "node";
                this.arch = "x32";
                this._mask = 18;
                this.connected = void 0;
              }
              Process2.prototype.chdir = function(dir2) {
                if (path2 === null) {
                  path2 = __webpack_require__(9);
                }
                this._cwd = path2.resolve(dir2);
              };
              Process2.prototype.cwd = function() {
                return this._cwd;
              };
              Process2.prototype.uptime = function() {
                return (Date.now() - this.startTime) / 1e3 | 0;
              };
              Process2.prototype.nextTick = function(fun) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                  args[_i - 1] = arguments[_i];
                }
                this._queue.push(new Item(fun, args));
              };
              Process2.prototype.abort = function() {
                this.emit("abort");
              };
              Process2.prototype.exit = function(code) {
                this.exitCode = code;
                this.emit("exit", [code]);
              };
              Process2.prototype.getgid = function() {
                return this._gid;
              };
              Process2.prototype.setgid = function(gid) {
                if (typeof gid === "number") {
                  this._gid = gid;
                } else {
                  this._gid = 1;
                }
              };
              Process2.prototype.getuid = function() {
                return this._uid;
              };
              Process2.prototype.setuid = function(uid) {
                if (typeof uid === "number") {
                  this._uid = uid;
                } else {
                  this._uid = 1;
                }
              };
              Process2.prototype.kill = function(pid, signal) {
                this.emit("kill", [pid, signal]);
              };
              Process2.prototype.memoryUsage = function() {
                return { rss: 0, heapTotal: 0, heapUsed: 0 };
              };
              Process2.prototype.umask = function(mask) {
                if (mask === void 0) {
                  mask = this._mask;
                }
                var oldMask = this._mask;
                this._mask = mask;
                this.emit("umask", [mask]);
                return oldMask;
              };
              Process2.prototype.hrtime = function() {
                var timeinfo;
                if (typeof performance !== "undefined") {
                  timeinfo = performance.now();
                } else if (Date["now"]) {
                  timeinfo = Date.now();
                } else {
                  timeinfo = new Date().getTime();
                }
                var secs = timeinfo / 1e3 | 0;
                timeinfo -= secs * 1e3;
                timeinfo = timeinfo * 1e6 | 0;
                return [secs, timeinfo];
              };
              Process2.prototype.initializeTTYs = function() {
                if (this.stdout === null) {
                  var TTY = __webpack_require__(10);
                  this.stdout = new TTY();
                  this.stderr = new TTY();
                  this.stdin = new TTY();
                }
              };
              Process2.prototype.disconnect = function() {
              };
              return Process2;
            }(events.EventEmitter);
            module2.exports = Process;
          }).call(exports2, "/");
        },
        function(module2, exports2) {
          function EventEmitter() {
            this._events = this._events || {};
            this._maxListeners = this._maxListeners || void 0;
          }
          module2.exports = EventEmitter;
          EventEmitter.EventEmitter = EventEmitter;
          EventEmitter.prototype._events = void 0;
          EventEmitter.prototype._maxListeners = void 0;
          EventEmitter.defaultMaxListeners = 10;
          EventEmitter.prototype.setMaxListeners = function(n) {
            if (!isNumber(n) || n < 0 || isNaN(n))
              throw TypeError("n must be a positive number");
            this._maxListeners = n;
            return this;
          };
          EventEmitter.prototype.emit = function(type) {
            var er, handler, len, args, i, listeners;
            if (!this._events)
              this._events = {};
            if (type === "error") {
              if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
                er = arguments[1];
                if (er instanceof Error) {
                  throw er;
                } else {
                  var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                  err.context = er;
                  throw err;
                }
              }
            }
            handler = this._events[type];
            if (isUndefined(handler))
              return false;
            if (isFunction(handler)) {
              switch (arguments.length) {
                case 1:
                  handler.call(this);
                  break;
                case 2:
                  handler.call(this, arguments[1]);
                  break;
                case 3:
                  handler.call(this, arguments[1], arguments[2]);
                  break;
                default:
                  args = Array.prototype.slice.call(arguments, 1);
                  handler.apply(this, args);
              }
            } else if (isObject(handler)) {
              args = Array.prototype.slice.call(arguments, 1);
              listeners = handler.slice();
              len = listeners.length;
              for (i = 0; i < len; i++)
                listeners[i].apply(this, args);
            }
            return true;
          };
          EventEmitter.prototype.addListener = function(type, listener) {
            var m;
            if (!isFunction(listener))
              throw TypeError("listener must be a function");
            if (!this._events)
              this._events = {};
            if (this._events.newListener)
              this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener);
            if (!this._events[type])
              this._events[type] = listener;
            else if (isObject(this._events[type]))
              this._events[type].push(listener);
            else
              this._events[type] = [this._events[type], listener];
            if (isObject(this._events[type]) && !this._events[type].warned) {
              if (!isUndefined(this._maxListeners)) {
                m = this._maxListeners;
              } else {
                m = EventEmitter.defaultMaxListeners;
              }
              if (m && m > 0 && this._events[type].length > m) {
                this._events[type].warned = true;
                console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length);
                if (typeof console.trace === "function") {
                  console.trace();
                }
              }
            }
            return this;
          };
          EventEmitter.prototype.on = EventEmitter.prototype.addListener;
          EventEmitter.prototype.once = function(type, listener) {
            if (!isFunction(listener))
              throw TypeError("listener must be a function");
            var fired = false;
            function g() {
              this.removeListener(type, g);
              if (!fired) {
                fired = true;
                listener.apply(this, arguments);
              }
            }
            g.listener = listener;
            this.on(type, g);
            return this;
          };
          EventEmitter.prototype.removeListener = function(type, listener) {
            var list, position, length, i;
            if (!isFunction(listener))
              throw TypeError("listener must be a function");
            if (!this._events || !this._events[type])
              return this;
            list = this._events[type];
            length = list.length;
            position = -1;
            if (list === listener || isFunction(list.listener) && list.listener === listener) {
              delete this._events[type];
              if (this._events.removeListener)
                this.emit("removeListener", type, listener);
            } else if (isObject(list)) {
              for (i = length; i-- > 0; ) {
                if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                  position = i;
                  break;
                }
              }
              if (position < 0)
                return this;
              if (list.length === 1) {
                list.length = 0;
                delete this._events[type];
              } else {
                list.splice(position, 1);
              }
              if (this._events.removeListener)
                this.emit("removeListener", type, listener);
            }
            return this;
          };
          EventEmitter.prototype.removeAllListeners = function(type) {
            var key, listeners;
            if (!this._events)
              return this;
            if (!this._events.removeListener) {
              if (arguments.length === 0)
                this._events = {};
              else if (this._events[type])
                delete this._events[type];
              return this;
            }
            if (arguments.length === 0) {
              for (key in this._events) {
                if (key === "removeListener")
                  continue;
                this.removeAllListeners(key);
              }
              this.removeAllListeners("removeListener");
              this._events = {};
              return this;
            }
            listeners = this._events[type];
            if (isFunction(listeners)) {
              this.removeListener(type, listeners);
            } else if (listeners) {
              while (listeners.length)
                this.removeListener(type, listeners[listeners.length - 1]);
            }
            delete this._events[type];
            return this;
          };
          EventEmitter.prototype.listeners = function(type) {
            var ret;
            if (!this._events || !this._events[type])
              ret = [];
            else if (isFunction(this._events[type]))
              ret = [this._events[type]];
            else
              ret = this._events[type].slice();
            return ret;
          };
          EventEmitter.prototype.listenerCount = function(type) {
            if (this._events) {
              var evlistener = this._events[type];
              if (isFunction(evlistener))
                return 1;
              else if (evlistener)
                return evlistener.length;
            }
            return 0;
          };
          EventEmitter.listenerCount = function(emitter, type) {
            return emitter.listenerCount(type);
          };
          function isFunction(arg) {
            return typeof arg === "function";
          }
          function isNumber(arg) {
            return typeof arg === "number";
          }
          function isObject(arg) {
            return typeof arg === "object" && arg !== null;
          }
          function isUndefined(arg) {
            return arg === void 0;
          }
        },
        function(module2, exports2, __webpack_require__) {
          (function(process2) {
            "use strict";
            var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
            function posixSplitPath(filename) {
              var out = splitPathRe.exec(filename);
              out.shift();
              return out;
            }
            var path2 = function() {
              function path3() {
              }
              path3.normalize = function(p) {
                if (p === "") {
                  p = ".";
                }
                var absolute = p.charAt(0) === path3.sep;
                p = path3._removeDuplicateSeps(p);
                var components = p.split(path3.sep);
                var goodComponents = [];
                for (var idx = 0; idx < components.length; idx++) {
                  var c = components[idx];
                  if (c === ".") {
                    continue;
                  } else if (c === ".." && (absolute || !absolute && goodComponents.length > 0 && goodComponents[0] !== "..")) {
                    goodComponents.pop();
                  } else {
                    goodComponents.push(c);
                  }
                }
                if (!absolute && goodComponents.length < 2) {
                  switch (goodComponents.length) {
                    case 1:
                      if (goodComponents[0] === "") {
                        goodComponents.unshift(".");
                      }
                      break;
                    default:
                      goodComponents.push(".");
                  }
                }
                p = goodComponents.join(path3.sep);
                if (absolute && p.charAt(0) !== path3.sep) {
                  p = path3.sep + p;
                }
                return p;
              };
              path3.join = function() {
                var paths = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  paths[_i - 0] = arguments[_i];
                }
                var processed = [];
                for (var i = 0; i < paths.length; i++) {
                  var segment = paths[i];
                  if (typeof segment !== "string") {
                    throw new TypeError("Invalid argument type to path.join: " + typeof segment);
                  } else if (segment !== "") {
                    processed.push(segment);
                  }
                }
                return path3.normalize(processed.join(path3.sep));
              };
              path3.resolve = function() {
                var paths = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  paths[_i - 0] = arguments[_i];
                }
                var processed = [];
                for (var i = 0; i < paths.length; i++) {
                  var p = paths[i];
                  if (typeof p !== "string") {
                    throw new TypeError("Invalid argument type to path.join: " + typeof p);
                  } else if (p !== "") {
                    if (p.charAt(0) === path3.sep) {
                      processed = [];
                    }
                    processed.push(p);
                  }
                }
                var resolved = path3.normalize(processed.join(path3.sep));
                if (resolved.length > 1 && resolved.charAt(resolved.length - 1) === path3.sep) {
                  return resolved.substr(0, resolved.length - 1);
                }
                if (resolved.charAt(0) !== path3.sep) {
                  if (resolved.charAt(0) === "." && (resolved.length === 1 || resolved.charAt(1) === path3.sep)) {
                    resolved = resolved.length === 1 ? "" : resolved.substr(2);
                  }
                  var cwd = process2.cwd();
                  if (resolved !== "") {
                    resolved = this.normalize(cwd + (cwd !== "/" ? path3.sep : "") + resolved);
                  } else {
                    resolved = cwd;
                  }
                }
                return resolved;
              };
              path3.relative = function(from2, to2) {
                var i;
                from2 = path3.resolve(from2);
                to2 = path3.resolve(to2);
                var fromSegs = from2.split(path3.sep);
                var toSegs = to2.split(path3.sep);
                toSegs.shift();
                fromSegs.shift();
                var upCount = 0;
                var downSegs = [];
                for (i = 0; i < fromSegs.length; i++) {
                  var seg = fromSegs[i];
                  if (seg === toSegs[i]) {
                    continue;
                  }
                  upCount = fromSegs.length - i;
                  break;
                }
                downSegs = toSegs.slice(i);
                if (fromSegs.length === 1 && fromSegs[0] === "") {
                  upCount = 0;
                }
                if (upCount > fromSegs.length) {
                  upCount = fromSegs.length;
                }
                var rv = "";
                for (i = 0; i < upCount; i++) {
                  rv += "../";
                }
                rv += downSegs.join(path3.sep);
                if (rv.length > 1 && rv.charAt(rv.length - 1) === path3.sep) {
                  rv = rv.substr(0, rv.length - 1);
                }
                return rv;
              };
              path3.dirname = function(p) {
                p = path3._removeDuplicateSeps(p);
                var absolute = p.charAt(0) === path3.sep;
                var sections = p.split(path3.sep);
                if (sections.pop() === "" && sections.length > 0) {
                  sections.pop();
                }
                if (sections.length > 1 || sections.length === 1 && !absolute) {
                  return sections.join(path3.sep);
                } else if (absolute) {
                  return path3.sep;
                } else {
                  return ".";
                }
              };
              path3.basename = function(p, ext) {
                if (ext === void 0) {
                  ext = "";
                }
                if (p === "") {
                  return p;
                }
                p = path3.normalize(p);
                var sections = p.split(path3.sep);
                var lastPart = sections[sections.length - 1];
                if (lastPart === "" && sections.length > 1) {
                  return sections[sections.length - 2];
                }
                if (ext.length > 0) {
                  var lastPartExt = lastPart.substr(lastPart.length - ext.length);
                  if (lastPartExt === ext) {
                    return lastPart.substr(0, lastPart.length - ext.length);
                  }
                }
                return lastPart;
              };
              path3.extname = function(p) {
                p = path3.normalize(p);
                var sections = p.split(path3.sep);
                p = sections.pop();
                if (p === "" && sections.length > 0) {
                  p = sections.pop();
                }
                if (p === "..") {
                  return "";
                }
                var i = p.lastIndexOf(".");
                if (i === -1 || i === 0) {
                  return "";
                }
                return p.substr(i);
              };
              path3.isAbsolute = function(p) {
                return p.length > 0 && p.charAt(0) === path3.sep;
              };
              path3._makeLong = function(p) {
                return p;
              };
              path3.parse = function(p) {
                var allParts = posixSplitPath(p);
                return {
                  root: allParts[0],
                  dir: allParts[0] + allParts[1].slice(0, -1),
                  base: allParts[2],
                  ext: allParts[3],
                  name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
                };
              };
              path3.format = function(pathObject) {
                if (pathObject === null || typeof pathObject !== "object") {
                  throw new TypeError("Parameter 'pathObject' must be an object, not " + typeof pathObject);
                }
                var root = pathObject.root || "";
                if (typeof root !== "string") {
                  throw new TypeError("'pathObject.root' must be a string or undefined, not " + typeof pathObject.root);
                }
                var dir2 = pathObject.dir ? pathObject.dir + path3.sep : "";
                var base = pathObject.base || "";
                return dir2 + base;
              };
              path3._removeDuplicateSeps = function(p) {
                p = p.replace(this._replaceRegex, this.sep);
                return p;
              };
              path3.sep = "/";
              path3._replaceRegex = new RegExp("//+", "g");
              path3.delimiter = ":";
              path3.posix = path3;
              path3.win32 = path3;
              return path3;
            }();
            var _2 = path2;
            module2.exports = path2;
          }).call(exports2, __webpack_require__(6));
        },
        function(module2, exports2, __webpack_require__) {
          (function(Buffer2) {
            "use strict";
            var __extends = this && this.__extends || function(d2, b) {
              for (var p in b)
                if (b.hasOwnProperty(p))
                  d2[p] = b[p];
              function __() {
                this.constructor = d2;
              }
              d2.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
            var stream = __webpack_require__(11);
            var TTY = function(_super) {
              __extends(TTY2, _super);
              function TTY2() {
                _super.call(this);
                this.isRaw = false;
                this.columns = 80;
                this.rows = 120;
                this.isTTY = true;
                this._bufferedWrites = [];
                this._waitingForWrites = false;
              }
              TTY2.prototype.setRawMode = function(mode) {
                if (this.isRaw !== mode) {
                  this.isRaw = mode;
                  this.emit("modeChange");
                }
              };
              TTY2.prototype.changeColumns = function(columns) {
                if (columns !== this.columns) {
                  this.columns = columns;
                  this.emit("resize");
                }
              };
              TTY2.prototype.changeRows = function(rows) {
                if (rows !== this.rows) {
                  this.rows = rows;
                  this.emit("resize");
                }
              };
              TTY2.isatty = function(fd) {
                return fd && fd instanceof TTY2;
              };
              TTY2.prototype._write = function(chunk, encoding, cb) {
                var error;
                try {
                  var data;
                  if (typeof chunk === "string") {
                    data = new Buffer2(chunk, encoding);
                  } else {
                    data = chunk;
                  }
                  this._bufferedWrites.push(data);
                  if (this._waitingForWrites) {
                    this._read(1024);
                  }
                } catch (e) {
                  error = e;
                } finally {
                  cb(error);
                }
              };
              TTY2.prototype._read = function(size) {
                if (this._bufferedWrites.length === 0) {
                  this._waitingForWrites = true;
                } else {
                  while (this._bufferedWrites.length > 0) {
                    this._waitingForWrites = this.push(this._bufferedWrites.shift());
                    if (!this._waitingForWrites) {
                      break;
                    }
                  }
                }
              };
              return TTY2;
            }(stream.Duplex);
            module2.exports = TTY;
          }).call(exports2, __webpack_require__(1));
        },
        function(module2, exports2, __webpack_require__) {
          module2.exports = Stream;
          var EE = __webpack_require__(8).EventEmitter;
          var inherits = __webpack_require__(12);
          inherits(Stream, EE);
          Stream.Readable = __webpack_require__(13);
          Stream.Writable = __webpack_require__(27);
          Stream.Duplex = __webpack_require__(28);
          Stream.Transform = __webpack_require__(29);
          Stream.PassThrough = __webpack_require__(30);
          Stream.Stream = Stream;
          function Stream() {
            EE.call(this);
          }
          Stream.prototype.pipe = function(dest, options2) {
            var source = this;
            function ondata(chunk) {
              if (dest.writable) {
                if (false === dest.write(chunk) && source.pause) {
                  source.pause();
                }
              }
            }
            source.on("data", ondata);
            function ondrain() {
              if (source.readable && source.resume) {
                source.resume();
              }
            }
            dest.on("drain", ondrain);
            if (!dest._isStdio && (!options2 || options2.end !== false)) {
              source.on("end", onend);
              source.on("close", onclose);
            }
            var didOnEnd = false;
            function onend() {
              if (didOnEnd)
                return;
              didOnEnd = true;
              dest.end();
            }
            function onclose() {
              if (didOnEnd)
                return;
              didOnEnd = true;
              if (typeof dest.destroy === "function")
                dest.destroy();
            }
            function onerror(er) {
              cleanup();
              if (EE.listenerCount(this, "error") === 0) {
                throw er;
              }
            }
            source.on("error", onerror);
            dest.on("error", onerror);
            function cleanup() {
              source.removeListener("data", ondata);
              dest.removeListener("drain", ondrain);
              source.removeListener("end", onend);
              source.removeListener("close", onclose);
              source.removeListener("error", onerror);
              dest.removeListener("error", onerror);
              source.removeListener("end", cleanup);
              source.removeListener("close", cleanup);
              dest.removeListener("close", cleanup);
            }
            source.on("end", cleanup);
            source.on("close", cleanup);
            dest.on("close", cleanup);
            dest.emit("pipe", source);
            return dest;
          };
        },
        function(module2, exports2) {
          if (typeof Object.create === "function") {
            module2.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            };
          } else {
            module2.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {
              };
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            };
          }
        },
        function(module2, exports2, __webpack_require__) {
          (function(process2) {
            var Stream = function() {
              try {
                return __webpack_require__(11);
              } catch (_2) {
              }
            }();
            exports2 = module2.exports = __webpack_require__(14);
            exports2.Stream = Stream || exports2;
            exports2.Readable = exports2;
            exports2.Writable = __webpack_require__(22);
            exports2.Duplex = __webpack_require__(21);
            exports2.Transform = __webpack_require__(25);
            exports2.PassThrough = __webpack_require__(26);
            if (!process2.browser && process2.env.READABLE_STREAM === "disable" && Stream) {
              module2.exports = Stream;
            }
          }).call(exports2, __webpack_require__(6));
        },
        function(module2, exports2, __webpack_require__) {
          (function(process2) {
            "use strict";
            module2.exports = Readable;
            var processNextTick = __webpack_require__(15);
            var isArray = __webpack_require__(16);
            var Duplex;
            Readable.ReadableState = ReadableState;
            var EE = __webpack_require__(8).EventEmitter;
            var EElistenerCount = function(emitter, type) {
              return emitter.listeners(type).length;
            };
            var Stream;
            (function() {
              try {
                Stream = __webpack_require__(11);
              } catch (_2) {
              } finally {
                if (!Stream)
                  Stream = __webpack_require__(8).EventEmitter;
              }
            })();
            var Buffer2 = __webpack_require__(2).Buffer;
            var bufferShim = __webpack_require__(17);
            var util = __webpack_require__(18);
            util.inherits = __webpack_require__(12);
            var debugUtil = __webpack_require__(19);
            var debug = void 0;
            if (debugUtil && debugUtil.debuglog) {
              debug = debugUtil.debuglog("stream");
            } else {
              debug = function() {
              };
            }
            var BufferList = __webpack_require__(20);
            var StringDecoder;
            util.inherits(Readable, Stream);
            function prependListener(emitter, event, fn) {
              if (typeof emitter.prependListener === "function") {
                return emitter.prependListener(event, fn);
              } else {
                if (!emitter._events || !emitter._events[event])
                  emitter.on(event, fn);
                else if (isArray(emitter._events[event]))
                  emitter._events[event].unshift(fn);
                else
                  emitter._events[event] = [fn, emitter._events[event]];
              }
            }
            function ReadableState(options2, stream) {
              Duplex = Duplex || __webpack_require__(21);
              options2 = options2 || {};
              this.objectMode = !!options2.objectMode;
              if (stream instanceof Duplex)
                this.objectMode = this.objectMode || !!options2.readableObjectMode;
              var hwm = options2.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
              this.highWaterMark = ~~this.highWaterMark;
              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false;
              this.sync = true;
              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false;
              this.defaultEncoding = options2.defaultEncoding || "utf8";
              this.ranOut = false;
              this.awaitDrain = 0;
              this.readingMore = false;
              this.decoder = null;
              this.encoding = null;
              if (options2.encoding) {
                if (!StringDecoder)
                  StringDecoder = __webpack_require__(24).StringDecoder;
                this.decoder = new StringDecoder(options2.encoding);
                this.encoding = options2.encoding;
              }
            }
            function Readable(options2) {
              Duplex = Duplex || __webpack_require__(21);
              if (!(this instanceof Readable))
                return new Readable(options2);
              this._readableState = new ReadableState(options2, this);
              this.readable = true;
              if (options2 && typeof options2.read === "function")
                this._read = options2.read;
              Stream.call(this);
            }
            Readable.prototype.push = function(chunk, encoding) {
              var state3 = this._readableState;
              if (!state3.objectMode && typeof chunk === "string") {
                encoding = encoding || state3.defaultEncoding;
                if (encoding !== state3.encoding) {
                  chunk = bufferShim.from(chunk, encoding);
                  encoding = "";
                }
              }
              return readableAddChunk(this, state3, chunk, encoding, false);
            };
            Readable.prototype.unshift = function(chunk) {
              var state3 = this._readableState;
              return readableAddChunk(this, state3, chunk, "", true);
            };
            Readable.prototype.isPaused = function() {
              return this._readableState.flowing === false;
            };
            function readableAddChunk(stream, state3, chunk, encoding, addToFront) {
              var er = chunkInvalid(state3, chunk);
              if (er) {
                stream.emit("error", er);
              } else if (chunk === null) {
                state3.reading = false;
                onEofChunk(stream, state3);
              } else if (state3.objectMode || chunk && chunk.length > 0) {
                if (state3.ended && !addToFront) {
                  var e = new Error("stream.push() after EOF");
                  stream.emit("error", e);
                } else if (state3.endEmitted && addToFront) {
                  var _e2 = new Error("stream.unshift() after end event");
                  stream.emit("error", _e2);
                } else {
                  var skipAdd;
                  if (state3.decoder && !addToFront && !encoding) {
                    chunk = state3.decoder.write(chunk);
                    skipAdd = !state3.objectMode && chunk.length === 0;
                  }
                  if (!addToFront)
                    state3.reading = false;
                  if (!skipAdd) {
                    if (state3.flowing && state3.length === 0 && !state3.sync) {
                      stream.emit("data", chunk);
                      stream.read(0);
                    } else {
                      state3.length += state3.objectMode ? 1 : chunk.length;
                      if (addToFront)
                        state3.buffer.unshift(chunk);
                      else
                        state3.buffer.push(chunk);
                      if (state3.needReadable)
                        emitReadable(stream);
                    }
                  }
                  maybeReadMore(stream, state3);
                }
              } else if (!addToFront) {
                state3.reading = false;
              }
              return needMoreData(state3);
            }
            function needMoreData(state3) {
              return !state3.ended && (state3.needReadable || state3.length < state3.highWaterMark || state3.length === 0);
            }
            Readable.prototype.setEncoding = function(enc2) {
              if (!StringDecoder)
                StringDecoder = __webpack_require__(24).StringDecoder;
              this._readableState.decoder = new StringDecoder(enc2);
              this._readableState.encoding = enc2;
              return this;
            };
            var MAX_HWM = 8388608;
            function computeNewHighWaterMark(n) {
              if (n >= MAX_HWM) {
                n = MAX_HWM;
              } else {
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
              }
              return n;
            }
            function howMuchToRead(n, state3) {
              if (n <= 0 || state3.length === 0 && state3.ended)
                return 0;
              if (state3.objectMode)
                return 1;
              if (n !== n) {
                if (state3.flowing && state3.length)
                  return state3.buffer.head.data.length;
                else
                  return state3.length;
              }
              if (n > state3.highWaterMark)
                state3.highWaterMark = computeNewHighWaterMark(n);
              if (n <= state3.length)
                return n;
              if (!state3.ended) {
                state3.needReadable = true;
                return 0;
              }
              return state3.length;
            }
            Readable.prototype.read = function(n) {
              debug("read", n);
              n = parseInt(n, 10);
              var state3 = this._readableState;
              var nOrig = n;
              if (n !== 0)
                state3.emittedReadable = false;
              if (n === 0 && state3.needReadable && (state3.length >= state3.highWaterMark || state3.ended)) {
                debug("read: emitReadable", state3.length, state3.ended);
                if (state3.length === 0 && state3.ended)
                  endReadable(this);
                else
                  emitReadable(this);
                return null;
              }
              n = howMuchToRead(n, state3);
              if (n === 0 && state3.ended) {
                if (state3.length === 0)
                  endReadable(this);
                return null;
              }
              var doRead = state3.needReadable;
              debug("need readable", doRead);
              if (state3.length === 0 || state3.length - n < state3.highWaterMark) {
                doRead = true;
                debug("length less than watermark", doRead);
              }
              if (state3.ended || state3.reading) {
                doRead = false;
                debug("reading or ended", doRead);
              } else if (doRead) {
                debug("do read");
                state3.reading = true;
                state3.sync = true;
                if (state3.length === 0)
                  state3.needReadable = true;
                this._read(state3.highWaterMark);
                state3.sync = false;
                if (!state3.reading)
                  n = howMuchToRead(nOrig, state3);
              }
              var ret;
              if (n > 0)
                ret = fromList(n, state3);
              else
                ret = null;
              if (ret === null) {
                state3.needReadable = true;
                n = 0;
              } else {
                state3.length -= n;
              }
              if (state3.length === 0) {
                if (!state3.ended)
                  state3.needReadable = true;
                if (nOrig !== n && state3.ended)
                  endReadable(this);
              }
              if (ret !== null)
                this.emit("data", ret);
              return ret;
            };
            function chunkInvalid(state3, chunk) {
              var er = null;
              if (!Buffer2.isBuffer(chunk) && typeof chunk !== "string" && chunk !== null && chunk !== void 0 && !state3.objectMode) {
                er = new TypeError("Invalid non-string/buffer chunk");
              }
              return er;
            }
            function onEofChunk(stream, state3) {
              if (state3.ended)
                return;
              if (state3.decoder) {
                var chunk = state3.decoder.end();
                if (chunk && chunk.length) {
                  state3.buffer.push(chunk);
                  state3.length += state3.objectMode ? 1 : chunk.length;
                }
              }
              state3.ended = true;
              emitReadable(stream);
            }
            function emitReadable(stream) {
              var state3 = stream._readableState;
              state3.needReadable = false;
              if (!state3.emittedReadable) {
                debug("emitReadable", state3.flowing);
                state3.emittedReadable = true;
                if (state3.sync)
                  processNextTick(emitReadable_, stream);
                else
                  emitReadable_(stream);
              }
            }
            function emitReadable_(stream) {
              debug("emit readable");
              stream.emit("readable");
              flow(stream);
            }
            function maybeReadMore(stream, state3) {
              if (!state3.readingMore) {
                state3.readingMore = true;
                processNextTick(maybeReadMore_, stream, state3);
              }
            }
            function maybeReadMore_(stream, state3) {
              var len = state3.length;
              while (!state3.reading && !state3.flowing && !state3.ended && state3.length < state3.highWaterMark) {
                debug("maybeReadMore read 0");
                stream.read(0);
                if (len === state3.length)
                  break;
                else
                  len = state3.length;
              }
              state3.readingMore = false;
            }
            Readable.prototype._read = function(n) {
              this.emit("error", new Error("_read() is not implemented"));
            };
            Readable.prototype.pipe = function(dest, pipeOpts) {
              var src = this;
              var state3 = this._readableState;
              switch (state3.pipesCount) {
                case 0:
                  state3.pipes = dest;
                  break;
                case 1:
                  state3.pipes = [state3.pipes, dest];
                  break;
                default:
                  state3.pipes.push(dest);
                  break;
              }
              state3.pipesCount += 1;
              debug("pipe count=%d opts=%j", state3.pipesCount, pipeOpts);
              var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process2.stdout && dest !== process2.stderr;
              var endFn = doEnd ? onend : cleanup;
              if (state3.endEmitted)
                processNextTick(endFn);
              else
                src.once("end", endFn);
              dest.on("unpipe", onunpipe);
              function onunpipe(readable) {
                debug("onunpipe");
                if (readable === src) {
                  cleanup();
                }
              }
              function onend() {
                debug("onend");
                dest.end();
              }
              var ondrain = pipeOnDrain(src);
              dest.on("drain", ondrain);
              var cleanedUp = false;
              function cleanup() {
                debug("cleanup");
                dest.removeListener("close", onclose);
                dest.removeListener("finish", onfinish);
                dest.removeListener("drain", ondrain);
                dest.removeListener("error", onerror);
                dest.removeListener("unpipe", onunpipe);
                src.removeListener("end", onend);
                src.removeListener("end", cleanup);
                src.removeListener("data", ondata);
                cleanedUp = true;
                if (state3.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                  ondrain();
              }
              var increasedAwaitDrain = false;
              src.on("data", ondata);
              function ondata(chunk) {
                debug("ondata");
                increasedAwaitDrain = false;
                var ret = dest.write(chunk);
                if (false === ret && !increasedAwaitDrain) {
                  if ((state3.pipesCount === 1 && state3.pipes === dest || state3.pipesCount > 1 && indexOf(state3.pipes, dest) !== -1) && !cleanedUp) {
                    debug("false write response, pause", src._readableState.awaitDrain);
                    src._readableState.awaitDrain++;
                    increasedAwaitDrain = true;
                  }
                  src.pause();
                }
              }
              function onerror(er) {
                debug("onerror", er);
                unpipe();
                dest.removeListener("error", onerror);
                if (EElistenerCount(dest, "error") === 0)
                  dest.emit("error", er);
              }
              prependListener(dest, "error", onerror);
              function onclose() {
                dest.removeListener("finish", onfinish);
                unpipe();
              }
              dest.once("close", onclose);
              function onfinish() {
                debug("onfinish");
                dest.removeListener("close", onclose);
                unpipe();
              }
              dest.once("finish", onfinish);
              function unpipe() {
                debug("unpipe");
                src.unpipe(dest);
              }
              dest.emit("pipe", src);
              if (!state3.flowing) {
                debug("pipe resume");
                src.resume();
              }
              return dest;
            };
            function pipeOnDrain(src) {
              return function() {
                var state3 = src._readableState;
                debug("pipeOnDrain", state3.awaitDrain);
                if (state3.awaitDrain)
                  state3.awaitDrain--;
                if (state3.awaitDrain === 0 && EElistenerCount(src, "data")) {
                  state3.flowing = true;
                  flow(src);
                }
              };
            }
            Readable.prototype.unpipe = function(dest) {
              var state3 = this._readableState;
              if (state3.pipesCount === 0)
                return this;
              if (state3.pipesCount === 1) {
                if (dest && dest !== state3.pipes)
                  return this;
                if (!dest)
                  dest = state3.pipes;
                state3.pipes = null;
                state3.pipesCount = 0;
                state3.flowing = false;
                if (dest)
                  dest.emit("unpipe", this);
                return this;
              }
              if (!dest) {
                var dests = state3.pipes;
                var len = state3.pipesCount;
                state3.pipes = null;
                state3.pipesCount = 0;
                state3.flowing = false;
                for (var i = 0; i < len; i++) {
                  dests[i].emit("unpipe", this);
                }
                return this;
              }
              var index = indexOf(state3.pipes, dest);
              if (index === -1)
                return this;
              state3.pipes.splice(index, 1);
              state3.pipesCount -= 1;
              if (state3.pipesCount === 1)
                state3.pipes = state3.pipes[0];
              dest.emit("unpipe", this);
              return this;
            };
            Readable.prototype.on = function(ev, fn) {
              var res = Stream.prototype.on.call(this, ev, fn);
              if (ev === "data") {
                if (this._readableState.flowing !== false)
                  this.resume();
              } else if (ev === "readable") {
                var state3 = this._readableState;
                if (!state3.endEmitted && !state3.readableListening) {
                  state3.readableListening = state3.needReadable = true;
                  state3.emittedReadable = false;
                  if (!state3.reading) {
                    processNextTick(nReadingNextTick, this);
                  } else if (state3.length) {
                    emitReadable(this, state3);
                  }
                }
              }
              return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;
            function nReadingNextTick(self2) {
              debug("readable nexttick read 0");
              self2.read(0);
            }
            Readable.prototype.resume = function() {
              var state3 = this._readableState;
              if (!state3.flowing) {
                debug("resume");
                state3.flowing = true;
                resume(this, state3);
              }
              return this;
            };
            function resume(stream, state3) {
              if (!state3.resumeScheduled) {
                state3.resumeScheduled = true;
                processNextTick(resume_, stream, state3);
              }
            }
            function resume_(stream, state3) {
              if (!state3.reading) {
                debug("resume read 0");
                stream.read(0);
              }
              state3.resumeScheduled = false;
              state3.awaitDrain = 0;
              stream.emit("resume");
              flow(stream);
              if (state3.flowing && !state3.reading)
                stream.read(0);
            }
            Readable.prototype.pause = function() {
              debug("call pause flowing=%j", this._readableState.flowing);
              if (false !== this._readableState.flowing) {
                debug("pause");
                this._readableState.flowing = false;
                this.emit("pause");
              }
              return this;
            };
            function flow(stream) {
              var state3 = stream._readableState;
              debug("flow", state3.flowing);
              while (state3.flowing && stream.read() !== null) {
              }
            }
            Readable.prototype.wrap = function(stream) {
              var state3 = this._readableState;
              var paused = false;
              var self2 = this;
              stream.on("end", function() {
                debug("wrapped end");
                if (state3.decoder && !state3.ended) {
                  var chunk = state3.decoder.end();
                  if (chunk && chunk.length)
                    self2.push(chunk);
                }
                self2.push(null);
              });
              stream.on("data", function(chunk) {
                debug("wrapped data");
                if (state3.decoder)
                  chunk = state3.decoder.write(chunk);
                if (state3.objectMode && (chunk === null || chunk === void 0))
                  return;
                else if (!state3.objectMode && (!chunk || !chunk.length))
                  return;
                var ret = self2.push(chunk);
                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              });
              for (var i in stream) {
                if (this[i] === void 0 && typeof stream[i] === "function") {
                  this[i] = function(method) {
                    return function() {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              }
              var events = ["error", "close", "destroy", "pause", "resume"];
              forEach(events, function(ev) {
                stream.on(ev, self2.emit.bind(self2, ev));
              });
              self2._read = function(n) {
                debug("wrapped _read", n);
                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };
              return self2;
            };
            Readable._fromList = fromList;
            function fromList(n, state3) {
              if (state3.length === 0)
                return null;
              var ret;
              if (state3.objectMode)
                ret = state3.buffer.shift();
              else if (!n || n >= state3.length) {
                if (state3.decoder)
                  ret = state3.buffer.join("");
                else if (state3.buffer.length === 1)
                  ret = state3.buffer.head.data;
                else
                  ret = state3.buffer.concat(state3.length);
                state3.buffer.clear();
              } else {
                ret = fromListPartial(n, state3.buffer, state3.decoder);
              }
              return ret;
            }
            function fromListPartial(n, list, hasStrings) {
              var ret;
              if (n < list.head.data.length) {
                ret = list.head.data.slice(0, n);
                list.head.data = list.head.data.slice(n);
              } else if (n === list.head.data.length) {
                ret = list.shift();
              } else {
                ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
              }
              return ret;
            }
            function copyFromBufferString(n, list) {
              var p = list.head;
              var c = 1;
              var ret = p.data;
              n -= ret.length;
              while (p = p.next) {
                var str2 = p.data;
                var nb = n > str2.length ? str2.length : n;
                if (nb === str2.length)
                  ret += str2;
                else
                  ret += str2.slice(0, n);
                n -= nb;
                if (n === 0) {
                  if (nb === str2.length) {
                    ++c;
                    if (p.next)
                      list.head = p.next;
                    else
                      list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = str2.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list.length -= c;
              return ret;
            }
            function copyFromBuffer(n, list) {
              var ret = bufferShim.allocUnsafe(n);
              var p = list.head;
              var c = 1;
              p.data.copy(ret);
              n -= p.data.length;
              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next)
                      list.head = p.next;
                    else
                      list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list.length -= c;
              return ret;
            }
            function endReadable(stream) {
              var state3 = stream._readableState;
              if (state3.length > 0)
                throw new Error('"endReadable()" called on non-empty stream');
              if (!state3.endEmitted) {
                state3.ended = true;
                processNextTick(endReadableNT, state3, stream);
              }
            }
            function endReadableNT(state3, stream) {
              if (!state3.endEmitted && state3.length === 0) {
                state3.endEmitted = true;
                stream.readable = false;
                stream.emit("end");
              }
            }
            function forEach(xs, f) {
              for (var i = 0, l = xs.length; i < l; i++) {
                f(xs[i], i);
              }
            }
            function indexOf(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x)
                  return i;
              }
              return -1;
            }
          }).call(exports2, __webpack_require__(6));
        },
        function(module2, exports2, __webpack_require__) {
          (function(process2) {
            "use strict";
            if (!process2.version || process2.version.indexOf("v0.") === 0 || process2.version.indexOf("v1.") === 0 && process2.version.indexOf("v1.8.") !== 0) {
              module2.exports = nextTick;
            } else {
              module2.exports = process2.nextTick;
            }
            function nextTick(fn, arg1, arg2, arg3) {
              if (typeof fn !== "function") {
                throw new TypeError('"callback" argument must be a function');
              }
              var len = arguments.length;
              var args, i;
              switch (len) {
                case 0:
                case 1:
                  return process2.nextTick(fn);
                case 2:
                  return process2.nextTick(function afterTickOne() {
                    fn.call(null, arg1);
                  });
                case 3:
                  return process2.nextTick(function afterTickTwo() {
                    fn.call(null, arg1, arg2);
                  });
                case 4:
                  return process2.nextTick(function afterTickThree() {
                    fn.call(null, arg1, arg2, arg3);
                  });
                default:
                  args = new Array(len - 1);
                  i = 0;
                  while (i < args.length) {
                    args[i++] = arguments[i];
                  }
                  return process2.nextTick(function afterTick() {
                    fn.apply(null, args);
                  });
              }
            }
          }).call(exports2, __webpack_require__(6));
        },
        function(module2, exports2) {
          var toString = {}.toString;
          module2.exports = Array.isArray || function(arr) {
            return toString.call(arr) == "[object Array]";
          };
        },
        function(module2, exports2, __webpack_require__) {
          (function(global2) {
            "use strict";
            var buffer = __webpack_require__(2);
            var Buffer2 = buffer.Buffer;
            var SlowBuffer = buffer.SlowBuffer;
            var MAX_LEN = buffer.kMaxLength || 2147483647;
            exports2.alloc = function alloc(size, fill, encoding) {
              if (typeof Buffer2.alloc === "function") {
                return Buffer2.alloc(size, fill, encoding);
              }
              if (typeof encoding === "number") {
                throw new TypeError("encoding must not be number");
              }
              if (typeof size !== "number") {
                throw new TypeError("size must be a number");
              }
              if (size > MAX_LEN) {
                throw new RangeError("size is too large");
              }
              var enc2 = encoding;
              var _fill = fill;
              if (_fill === void 0) {
                enc2 = void 0;
                _fill = 0;
              }
              var buf = new Buffer2(size);
              if (typeof _fill === "string") {
                var fillBuf = new Buffer2(_fill, enc2);
                var flen = fillBuf.length;
                var i = -1;
                while (++i < size) {
                  buf[i] = fillBuf[i % flen];
                }
              } else {
                buf.fill(_fill);
              }
              return buf;
            };
            exports2.allocUnsafe = function allocUnsafe(size) {
              if (typeof Buffer2.allocUnsafe === "function") {
                return Buffer2.allocUnsafe(size);
              }
              if (typeof size !== "number") {
                throw new TypeError("size must be a number");
              }
              if (size > MAX_LEN) {
                throw new RangeError("size is too large");
              }
              return new Buffer2(size);
            };
            exports2.from = function from2(value, encodingOrOffset, length) {
              if (typeof Buffer2.from === "function" && (!global2.Uint8Array || Uint8Array.from !== Buffer2.from)) {
                return Buffer2.from(value, encodingOrOffset, length);
              }
              if (typeof value === "number") {
                throw new TypeError('"value" argument must not be a number');
              }
              if (typeof value === "string") {
                return new Buffer2(value, encodingOrOffset);
              }
              if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
                var offset = encodingOrOffset;
                if (arguments.length === 1) {
                  return new Buffer2(value);
                }
                if (typeof offset === "undefined") {
                  offset = 0;
                }
                var len = length;
                if (typeof len === "undefined") {
                  len = value.byteLength - offset;
                }
                if (offset >= value.byteLength) {
                  throw new RangeError("'offset' is out of bounds");
                }
                if (len > value.byteLength - offset) {
                  throw new RangeError("'length' is out of bounds");
                }
                return new Buffer2(value.slice(offset, offset + len));
              }
              if (Buffer2.isBuffer(value)) {
                var out = new Buffer2(value.length);
                value.copy(out, 0, 0, value.length);
                return out;
              }
              if (value) {
                if (Array.isArray(value) || typeof ArrayBuffer !== "undefined" && value.buffer instanceof ArrayBuffer || "length" in value) {
                  return new Buffer2(value);
                }
                if (value.type === "Buffer" && Array.isArray(value.data)) {
                  return new Buffer2(value.data);
                }
              }
              throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            };
            exports2.allocUnsafeSlow = function allocUnsafeSlow(size) {
              if (typeof Buffer2.allocUnsafeSlow === "function") {
                return Buffer2.allocUnsafeSlow(size);
              }
              if (typeof size !== "number") {
                throw new TypeError("size must be a number");
              }
              if (size >= MAX_LEN) {
                throw new RangeError("size is too large");
              }
              return new SlowBuffer(size);
            };
          }).call(exports2, function() {
            return this;
          }());
        },
        function(module2, exports2, __webpack_require__) {
          (function(Buffer2) {
            function isArray(arg) {
              if (Array.isArray) {
                return Array.isArray(arg);
              }
              return objectToString(arg) === "[object Array]";
            }
            exports2.isArray = isArray;
            function isBoolean(arg) {
              return typeof arg === "boolean";
            }
            exports2.isBoolean = isBoolean;
            function isNull(arg) {
              return arg === null;
            }
            exports2.isNull = isNull;
            function isNullOrUndefined(arg) {
              return arg == null;
            }
            exports2.isNullOrUndefined = isNullOrUndefined;
            function isNumber(arg) {
              return typeof arg === "number";
            }
            exports2.isNumber = isNumber;
            function isString(arg) {
              return typeof arg === "string";
            }
            exports2.isString = isString;
            function isSymbol(arg) {
              return typeof arg === "symbol";
            }
            exports2.isSymbol = isSymbol;
            function isUndefined(arg) {
              return arg === void 0;
            }
            exports2.isUndefined = isUndefined;
            function isRegExp(re2) {
              return objectToString(re2) === "[object RegExp]";
            }
            exports2.isRegExp = isRegExp;
            function isObject(arg) {
              return typeof arg === "object" && arg !== null;
            }
            exports2.isObject = isObject;
            function isDate(d2) {
              return objectToString(d2) === "[object Date]";
            }
            exports2.isDate = isDate;
            function isError(e) {
              return objectToString(e) === "[object Error]" || e instanceof Error;
            }
            exports2.isError = isError;
            function isFunction(arg) {
              return typeof arg === "function";
            }
            exports2.isFunction = isFunction;
            function isPrimitive(arg) {
              return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
            }
            exports2.isPrimitive = isPrimitive;
            exports2.isBuffer = Buffer2.isBuffer;
            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }
          }).call(exports2, __webpack_require__(1));
        },
        function(module2, exports2) {
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var Buffer2 = __webpack_require__(2).Buffer;
          var bufferShim = __webpack_require__(17);
          module2.exports = BufferList;
          function BufferList() {
            this.head = null;
            this.tail = null;
            this.length = 0;
          }
          BufferList.prototype.push = function(v) {
            var entry = { data: v, next: null };
            if (this.length > 0)
              this.tail.next = entry;
            else
              this.head = entry;
            this.tail = entry;
            ++this.length;
          };
          BufferList.prototype.unshift = function(v) {
            var entry = { data: v, next: this.head };
            if (this.length === 0)
              this.tail = entry;
            this.head = entry;
            ++this.length;
          };
          BufferList.prototype.shift = function() {
            if (this.length === 0)
              return;
            var ret = this.head.data;
            if (this.length === 1)
              this.head = this.tail = null;
            else
              this.head = this.head.next;
            --this.length;
            return ret;
          };
          BufferList.prototype.clear = function() {
            this.head = this.tail = null;
            this.length = 0;
          };
          BufferList.prototype.join = function(s) {
            if (this.length === 0)
              return "";
            var p = this.head;
            var ret = "" + p.data;
            while (p = p.next) {
              ret += s + p.data;
            }
            return ret;
          };
          BufferList.prototype.concat = function(n) {
            if (this.length === 0)
              return bufferShim.alloc(0);
            if (this.length === 1)
              return this.head.data;
            var ret = bufferShim.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              p.data.copy(ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          };
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var objectKeys = Object.keys || function(obj) {
            var keys2 = [];
            for (var key in obj) {
              keys2.push(key);
            }
            return keys2;
          };
          module2.exports = Duplex;
          var processNextTick = __webpack_require__(15);
          var util = __webpack_require__(18);
          util.inherits = __webpack_require__(12);
          var Readable = __webpack_require__(14);
          var Writable = __webpack_require__(22);
          util.inherits(Duplex, Readable);
          var keys = objectKeys(Writable.prototype);
          for (var v = 0; v < keys.length; v++) {
            var method = keys[v];
            if (!Duplex.prototype[method])
              Duplex.prototype[method] = Writable.prototype[method];
          }
          function Duplex(options2) {
            if (!(this instanceof Duplex))
              return new Duplex(options2);
            Readable.call(this, options2);
            Writable.call(this, options2);
            if (options2 && options2.readable === false)
              this.readable = false;
            if (options2 && options2.writable === false)
              this.writable = false;
            this.allowHalfOpen = true;
            if (options2 && options2.allowHalfOpen === false)
              this.allowHalfOpen = false;
            this.once("end", onend);
          }
          function onend() {
            if (this.allowHalfOpen || this._writableState.ended)
              return;
            processNextTick(onEndNT, this);
          }
          function onEndNT(self2) {
            self2.end();
          }
          function forEach(xs, f) {
            for (var i = 0, l = xs.length; i < l; i++) {
              f(xs[i], i);
            }
          }
        },
        function(module2, exports2, __webpack_require__) {
          (function(process2) {
            "use strict";
            module2.exports = Writable;
            var processNextTick = __webpack_require__(15);
            var asyncWrite = !process2.browser && ["v0.10", "v0.9."].indexOf(process2.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
            var Duplex;
            Writable.WritableState = WritableState;
            var util = __webpack_require__(18);
            util.inherits = __webpack_require__(12);
            var internalUtil = {
              deprecate: __webpack_require__(23)
            };
            var Stream;
            (function() {
              try {
                Stream = __webpack_require__(11);
              } catch (_2) {
              } finally {
                if (!Stream)
                  Stream = __webpack_require__(8).EventEmitter;
              }
            })();
            var Buffer2 = __webpack_require__(2).Buffer;
            var bufferShim = __webpack_require__(17);
            util.inherits(Writable, Stream);
            function nop() {
            }
            function WriteReq(chunk, encoding, cb) {
              this.chunk = chunk;
              this.encoding = encoding;
              this.callback = cb;
              this.next = null;
            }
            function WritableState(options2, stream) {
              Duplex = Duplex || __webpack_require__(21);
              options2 = options2 || {};
              this.objectMode = !!options2.objectMode;
              if (stream instanceof Duplex)
                this.objectMode = this.objectMode || !!options2.writableObjectMode;
              var hwm = options2.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
              this.highWaterMark = ~~this.highWaterMark;
              this.needDrain = false;
              this.ending = false;
              this.ended = false;
              this.finished = false;
              var noDecode = options2.decodeStrings === false;
              this.decodeStrings = !noDecode;
              this.defaultEncoding = options2.defaultEncoding || "utf8";
              this.length = 0;
              this.writing = false;
              this.corked = 0;
              this.sync = true;
              this.bufferProcessing = false;
              this.onwrite = function(er) {
                onwrite(stream, er);
              };
              this.writecb = null;
              this.writelen = 0;
              this.bufferedRequest = null;
              this.lastBufferedRequest = null;
              this.pendingcb = 0;
              this.prefinished = false;
              this.errorEmitted = false;
              this.bufferedRequestCount = 0;
              this.corkedRequestsFree = new CorkedRequest(this);
            }
            WritableState.prototype.getBuffer = function getBuffer() {
              var current = this.bufferedRequest;
              var out = [];
              while (current) {
                out.push(current);
                current = current.next;
              }
              return out;
            };
            (function() {
              try {
                Object.defineProperty(WritableState.prototype, "buffer", {
                  get: internalUtil.deprecate(function() {
                    return this.getBuffer();
                  }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")
                });
              } catch (_2) {
              }
            })();
            var realHasInstance;
            if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
              realHasInstance = Function.prototype[Symbol.hasInstance];
              Object.defineProperty(Writable, Symbol.hasInstance, {
                value: function(object) {
                  if (realHasInstance.call(this, object))
                    return true;
                  return object && object._writableState instanceof WritableState;
                }
              });
            } else {
              realHasInstance = function(object) {
                return object instanceof this;
              };
            }
            function Writable(options2) {
              Duplex = Duplex || __webpack_require__(21);
              if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                return new Writable(options2);
              }
              this._writableState = new WritableState(options2, this);
              this.writable = true;
              if (options2) {
                if (typeof options2.write === "function")
                  this._write = options2.write;
                if (typeof options2.writev === "function")
                  this._writev = options2.writev;
              }
              Stream.call(this);
            }
            Writable.prototype.pipe = function() {
              this.emit("error", new Error("Cannot pipe, not readable"));
            };
            function writeAfterEnd(stream, cb) {
              var er = new Error("write after end");
              stream.emit("error", er);
              processNextTick(cb, er);
            }
            function validChunk(stream, state3, chunk, cb) {
              var valid2 = true;
              var er = false;
              if (chunk === null) {
                er = new TypeError("May not write null values to stream");
              } else if (typeof chunk !== "string" && chunk !== void 0 && !state3.objectMode) {
                er = new TypeError("Invalid non-string/buffer chunk");
              }
              if (er) {
                stream.emit("error", er);
                processNextTick(cb, er);
                valid2 = false;
              }
              return valid2;
            }
            Writable.prototype.write = function(chunk, encoding, cb) {
              var state3 = this._writableState;
              var ret = false;
              var isBuf = Buffer2.isBuffer(chunk);
              if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (isBuf)
                encoding = "buffer";
              else if (!encoding)
                encoding = state3.defaultEncoding;
              if (typeof cb !== "function")
                cb = nop;
              if (state3.ended)
                writeAfterEnd(this, cb);
              else if (isBuf || validChunk(this, state3, chunk, cb)) {
                state3.pendingcb++;
                ret = writeOrBuffer(this, state3, isBuf, chunk, encoding, cb);
              }
              return ret;
            };
            Writable.prototype.cork = function() {
              var state3 = this._writableState;
              state3.corked++;
            };
            Writable.prototype.uncork = function() {
              var state3 = this._writableState;
              if (state3.corked) {
                state3.corked--;
                if (!state3.writing && !state3.corked && !state3.finished && !state3.bufferProcessing && state3.bufferedRequest)
                  clearBuffer(this, state3);
              }
            };
            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              if (typeof encoding === "string")
                encoding = encoding.toLowerCase();
              if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
                throw new TypeError("Unknown encoding: " + encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };
            function decodeChunk(state3, chunk, encoding) {
              if (!state3.objectMode && state3.decodeStrings !== false && typeof chunk === "string") {
                chunk = bufferShim.from(chunk, encoding);
              }
              return chunk;
            }
            function writeOrBuffer(stream, state3, isBuf, chunk, encoding, cb) {
              if (!isBuf) {
                chunk = decodeChunk(state3, chunk, encoding);
                if (Buffer2.isBuffer(chunk))
                  encoding = "buffer";
              }
              var len = state3.objectMode ? 1 : chunk.length;
              state3.length += len;
              var ret = state3.length < state3.highWaterMark;
              if (!ret)
                state3.needDrain = true;
              if (state3.writing || state3.corked) {
                var last = state3.lastBufferedRequest;
                state3.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
                if (last) {
                  last.next = state3.lastBufferedRequest;
                } else {
                  state3.bufferedRequest = state3.lastBufferedRequest;
                }
                state3.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state3, false, len, chunk, encoding, cb);
              }
              return ret;
            }
            function doWrite(stream, state3, writev, len, chunk, encoding, cb) {
              state3.writelen = len;
              state3.writecb = cb;
              state3.writing = true;
              state3.sync = true;
              if (writev)
                stream._writev(chunk, state3.onwrite);
              else
                stream._write(chunk, encoding, state3.onwrite);
              state3.sync = false;
            }
            function onwriteError(stream, state3, sync, er, cb) {
              --state3.pendingcb;
              if (sync)
                processNextTick(cb, er);
              else
                cb(er);
              stream._writableState.errorEmitted = true;
              stream.emit("error", er);
            }
            function onwriteStateUpdate(state3) {
              state3.writing = false;
              state3.writecb = null;
              state3.length -= state3.writelen;
              state3.writelen = 0;
            }
            function onwrite(stream, er) {
              var state3 = stream._writableState;
              var sync = state3.sync;
              var cb = state3.writecb;
              onwriteStateUpdate(state3);
              if (er)
                onwriteError(stream, state3, sync, er, cb);
              else {
                var finished = needFinish(state3);
                if (!finished && !state3.corked && !state3.bufferProcessing && state3.bufferedRequest) {
                  clearBuffer(stream, state3);
                }
                if (sync) {
                  asyncWrite(afterWrite, stream, state3, finished, cb);
                } else {
                  afterWrite(stream, state3, finished, cb);
                }
              }
            }
            function afterWrite(stream, state3, finished, cb) {
              if (!finished)
                onwriteDrain(stream, state3);
              state3.pendingcb--;
              cb();
              finishMaybe(stream, state3);
            }
            function onwriteDrain(stream, state3) {
              if (state3.length === 0 && state3.needDrain) {
                state3.needDrain = false;
                stream.emit("drain");
              }
            }
            function clearBuffer(stream, state3) {
              state3.bufferProcessing = true;
              var entry = state3.bufferedRequest;
              if (stream._writev && entry && entry.next) {
                var l = state3.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state3.corkedRequestsFree;
                holder.entry = entry;
                var count = 0;
                while (entry) {
                  buffer[count] = entry;
                  entry = entry.next;
                  count += 1;
                }
                doWrite(stream, state3, true, state3.length, buffer, "", holder.finish);
                state3.pendingcb++;
                state3.lastBufferedRequest = null;
                if (holder.next) {
                  state3.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state3.corkedRequestsFree = new CorkedRequest(state3);
                }
              } else {
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state3.objectMode ? 1 : chunk.length;
                  doWrite(stream, state3, false, len, chunk, encoding, cb);
                  entry = entry.next;
                  if (state3.writing) {
                    break;
                  }
                }
                if (entry === null)
                  state3.lastBufferedRequest = null;
              }
              state3.bufferedRequestCount = 0;
              state3.bufferedRequest = entry;
              state3.bufferProcessing = false;
            }
            Writable.prototype._write = function(chunk, encoding, cb) {
              cb(new Error("_write() is not implemented"));
            };
            Writable.prototype._writev = null;
            Writable.prototype.end = function(chunk, encoding, cb) {
              var state3 = this._writableState;
              if (typeof chunk === "function") {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (chunk !== null && chunk !== void 0)
                this.write(chunk, encoding);
              if (state3.corked) {
                state3.corked = 1;
                this.uncork();
              }
              if (!state3.ending && !state3.finished)
                endWritable(this, state3, cb);
            };
            function needFinish(state3) {
              return state3.ending && state3.length === 0 && state3.bufferedRequest === null && !state3.finished && !state3.writing;
            }
            function prefinish(stream, state3) {
              if (!state3.prefinished) {
                state3.prefinished = true;
                stream.emit("prefinish");
              }
            }
            function finishMaybe(stream, state3) {
              var need = needFinish(state3);
              if (need) {
                if (state3.pendingcb === 0) {
                  prefinish(stream, state3);
                  state3.finished = true;
                  stream.emit("finish");
                } else {
                  prefinish(stream, state3);
                }
              }
              return need;
            }
            function endWritable(stream, state3, cb) {
              state3.ending = true;
              finishMaybe(stream, state3);
              if (cb) {
                if (state3.finished)
                  processNextTick(cb);
                else
                  stream.once("finish", cb);
              }
              state3.ended = true;
              stream.writable = false;
            }
            function CorkedRequest(state3) {
              var _this = this;
              this.next = null;
              this.entry = null;
              this.finish = function(err) {
                var entry = _this.entry;
                _this.entry = null;
                while (entry) {
                  var cb = entry.callback;
                  state3.pendingcb--;
                  cb(err);
                  entry = entry.next;
                }
                if (state3.corkedRequestsFree) {
                  state3.corkedRequestsFree.next = _this;
                } else {
                  state3.corkedRequestsFree = _this;
                }
              };
            }
          }).call(exports2, __webpack_require__(6));
        },
        function(module2, exports2) {
          (function(global2) {
            module2.exports = deprecate;
            function deprecate(fn, msg) {
              if (config("noDeprecation")) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (config("throwDeprecation")) {
                    throw new Error(msg);
                  } else if (config("traceDeprecation")) {
                    console.trace(msg);
                  } else {
                    console.warn(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            }
            function config(name2) {
              try {
                if (!global2.localStorage)
                  return false;
              } catch (_2) {
                return false;
              }
              var val = global2.localStorage[name2];
              if (null == val)
                return false;
              return String(val).toLowerCase() === "true";
            }
          }).call(exports2, function() {
            return this;
          }());
        },
        function(module2, exports2, __webpack_require__) {
          var Buffer2 = __webpack_require__(2).Buffer;
          var isBufferEncoding = Buffer2.isEncoding || function(encoding) {
            switch (encoding && encoding.toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
              case "raw":
                return true;
              default:
                return false;
            }
          };
          function assertEncoding(encoding) {
            if (encoding && !isBufferEncoding(encoding)) {
              throw new Error("Unknown encoding: " + encoding);
            }
          }
          var StringDecoder = exports2.StringDecoder = function(encoding) {
            this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
            assertEncoding(encoding);
            switch (this.encoding) {
              case "utf8":
                this.surrogateSize = 3;
                break;
              case "ucs2":
              case "utf16le":
                this.surrogateSize = 2;
                this.detectIncompleteChar = utf16DetectIncompleteChar;
                break;
              case "base64":
                this.surrogateSize = 3;
                this.detectIncompleteChar = base64DetectIncompleteChar;
                break;
              default:
                this.write = passThroughWrite;
                return;
            }
            this.charBuffer = new Buffer2(6);
            this.charReceived = 0;
            this.charLength = 0;
          };
          StringDecoder.prototype.write = function(buffer) {
            var charStr = "";
            while (this.charLength) {
              var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
              buffer.copy(this.charBuffer, this.charReceived, 0, available);
              this.charReceived += available;
              if (this.charReceived < this.charLength) {
                return "";
              }
              buffer = buffer.slice(available, buffer.length);
              charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
              var charCode = charStr.charCodeAt(charStr.length - 1);
              if (charCode >= 55296 && charCode <= 56319) {
                this.charLength += this.surrogateSize;
                charStr = "";
                continue;
              }
              this.charReceived = this.charLength = 0;
              if (buffer.length === 0) {
                return charStr;
              }
              break;
            }
            this.detectIncompleteChar(buffer);
            var end = buffer.length;
            if (this.charLength) {
              buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
              end -= this.charReceived;
            }
            charStr += buffer.toString(this.encoding, 0, end);
            var end = charStr.length - 1;
            var charCode = charStr.charCodeAt(end);
            if (charCode >= 55296 && charCode <= 56319) {
              var size = this.surrogateSize;
              this.charLength += size;
              this.charReceived += size;
              this.charBuffer.copy(this.charBuffer, size, 0, size);
              buffer.copy(this.charBuffer, 0, 0, size);
              return charStr.substring(0, end);
            }
            return charStr;
          };
          StringDecoder.prototype.detectIncompleteChar = function(buffer) {
            var i = buffer.length >= 3 ? 3 : buffer.length;
            for (; i > 0; i--) {
              var c = buffer[buffer.length - i];
              if (i == 1 && c >> 5 == 6) {
                this.charLength = 2;
                break;
              }
              if (i <= 2 && c >> 4 == 14) {
                this.charLength = 3;
                break;
              }
              if (i <= 3 && c >> 3 == 30) {
                this.charLength = 4;
                break;
              }
            }
            this.charReceived = i;
          };
          StringDecoder.prototype.end = function(buffer) {
            var res = "";
            if (buffer && buffer.length)
              res = this.write(buffer);
            if (this.charReceived) {
              var cr = this.charReceived;
              var buf = this.charBuffer;
              var enc2 = this.encoding;
              res += buf.slice(0, cr).toString(enc2);
            }
            return res;
          };
          function passThroughWrite(buffer) {
            return buffer.toString(this.encoding);
          }
          function utf16DetectIncompleteChar(buffer) {
            this.charReceived = buffer.length % 2;
            this.charLength = this.charReceived ? 2 : 0;
          }
          function base64DetectIncompleteChar(buffer) {
            this.charReceived = buffer.length % 3;
            this.charLength = this.charReceived ? 3 : 0;
          }
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          module2.exports = Transform;
          var Duplex = __webpack_require__(21);
          var util = __webpack_require__(18);
          util.inherits = __webpack_require__(12);
          util.inherits(Transform, Duplex);
          function TransformState(stream) {
            this.afterTransform = function(er, data) {
              return afterTransform(stream, er, data);
            };
            this.needTransform = false;
            this.transforming = false;
            this.writecb = null;
            this.writechunk = null;
            this.writeencoding = null;
          }
          function afterTransform(stream, er, data) {
            var ts = stream._transformState;
            ts.transforming = false;
            var cb = ts.writecb;
            if (!cb)
              return stream.emit("error", new Error("no writecb in Transform class"));
            ts.writechunk = null;
            ts.writecb = null;
            if (data !== null && data !== void 0)
              stream.push(data);
            cb(er);
            var rs = stream._readableState;
            rs.reading = false;
            if (rs.needReadable || rs.length < rs.highWaterMark) {
              stream._read(rs.highWaterMark);
            }
          }
          function Transform(options2) {
            if (!(this instanceof Transform))
              return new Transform(options2);
            Duplex.call(this, options2);
            this._transformState = new TransformState(this);
            var stream = this;
            this._readableState.needReadable = true;
            this._readableState.sync = false;
            if (options2) {
              if (typeof options2.transform === "function")
                this._transform = options2.transform;
              if (typeof options2.flush === "function")
                this._flush = options2.flush;
            }
            this.once("prefinish", function() {
              if (typeof this._flush === "function")
                this._flush(function(er, data) {
                  done(stream, er, data);
                });
              else
                done(stream);
            });
          }
          Transform.prototype.push = function(chunk, encoding) {
            this._transformState.needTransform = false;
            return Duplex.prototype.push.call(this, chunk, encoding);
          };
          Transform.prototype._transform = function(chunk, encoding, cb) {
            throw new Error("_transform() is not implemented");
          };
          Transform.prototype._write = function(chunk, encoding, cb) {
            var ts = this._transformState;
            ts.writecb = cb;
            ts.writechunk = chunk;
            ts.writeencoding = encoding;
            if (!ts.transforming) {
              var rs = this._readableState;
              if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
                this._read(rs.highWaterMark);
            }
          };
          Transform.prototype._read = function(n) {
            var ts = this._transformState;
            if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
              ts.transforming = true;
              this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
            } else {
              ts.needTransform = true;
            }
          };
          function done(stream, er, data) {
            if (er)
              return stream.emit("error", er);
            if (data !== null && data !== void 0)
              stream.push(data);
            var ws = stream._writableState;
            var ts = stream._transformState;
            if (ws.length)
              throw new Error("Calling transform done when ws.length != 0");
            if (ts.transforming)
              throw new Error("Calling transform done when still transforming");
            return stream.push(null);
          }
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          module2.exports = PassThrough;
          var Transform = __webpack_require__(25);
          var util = __webpack_require__(18);
          util.inherits = __webpack_require__(12);
          util.inherits(PassThrough, Transform);
          function PassThrough(options2) {
            if (!(this instanceof PassThrough))
              return new PassThrough(options2);
            Transform.call(this, options2);
          }
          PassThrough.prototype._transform = function(chunk, encoding, cb) {
            cb(null, chunk);
          };
        },
        function(module2, exports2, __webpack_require__) {
          module2.exports = __webpack_require__(22);
        },
        function(module2, exports2, __webpack_require__) {
          module2.exports = __webpack_require__(21);
        },
        function(module2, exports2, __webpack_require__) {
          module2.exports = __webpack_require__(25);
        },
        function(module2, exports2, __webpack_require__) {
          module2.exports = __webpack_require__(26);
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var zlib_inflate = __webpack_require__(32);
          var utils = __webpack_require__(33);
          var strings = __webpack_require__(38);
          var c = __webpack_require__(39);
          var msg = __webpack_require__(40);
          var ZStream = __webpack_require__(41);
          var GZheader = __webpack_require__(42);
          var toString = Object.prototype.toString;
          function Inflate(options2) {
            if (!(this instanceof Inflate))
              return new Inflate(options2);
            this.options = utils.assign({
              chunkSize: 16384,
              windowBits: 0,
              to: ""
            }, options2 || {});
            var opt = this.options;
            if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
              opt.windowBits = -opt.windowBits;
              if (opt.windowBits === 0) {
                opt.windowBits = -15;
              }
            }
            if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options2 && options2.windowBits)) {
              opt.windowBits += 32;
            }
            if (opt.windowBits > 15 && opt.windowBits < 48) {
              if ((opt.windowBits & 15) === 0) {
                opt.windowBits |= 15;
              }
            }
            this.err = 0;
            this.msg = "";
            this.ended = false;
            this.chunks = [];
            this.strm = new ZStream();
            this.strm.avail_out = 0;
            var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);
            if (status !== c.Z_OK) {
              throw new Error(msg[status]);
            }
            this.header = new GZheader();
            zlib_inflate.inflateGetHeader(this.strm, this.header);
          }
          Inflate.prototype.push = function(data, mode) {
            var strm = this.strm;
            var chunkSize = this.options.chunkSize;
            var dictionary = this.options.dictionary;
            var status, _mode2;
            var next_out_utf8, tail, utf8str;
            var dict;
            var allowBufError = false;
            if (this.ended) {
              return false;
            }
            _mode2 = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH;
            if (typeof data === "string") {
              strm.input = strings.binstring2buf(data);
            } else if (toString.call(data) === "[object ArrayBuffer]") {
              strm.input = new Uint8Array(data);
            } else {
              strm.input = data;
            }
            strm.next_in = 0;
            strm.avail_in = strm.input.length;
            do {
              if (strm.avail_out === 0) {
                strm.output = new utils.Buf8(chunkSize);
                strm.next_out = 0;
                strm.avail_out = chunkSize;
              }
              status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
              if (status === c.Z_NEED_DICT && dictionary) {
                if (typeof dictionary === "string") {
                  dict = strings.string2buf(dictionary);
                } else if (toString.call(dictionary) === "[object ArrayBuffer]") {
                  dict = new Uint8Array(dictionary);
                } else {
                  dict = dictionary;
                }
                status = zlib_inflate.inflateSetDictionary(this.strm, dict);
              }
              if (status === c.Z_BUF_ERROR && allowBufError === true) {
                status = c.Z_OK;
                allowBufError = false;
              }
              if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
                this.onEnd(status);
                this.ended = true;
                return false;
              }
              if (strm.next_out) {
                if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode2 === c.Z_FINISH || _mode2 === c.Z_SYNC_FLUSH)) {
                  if (this.options.to === "string") {
                    next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                    tail = strm.next_out - next_out_utf8;
                    utf8str = strings.buf2string(strm.output, next_out_utf8);
                    strm.next_out = tail;
                    strm.avail_out = chunkSize - tail;
                    if (tail) {
                      utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                    }
                    this.onData(utf8str);
                  } else {
                    this.onData(utils.shrinkBuf(strm.output, strm.next_out));
                  }
                }
              }
              if (strm.avail_in === 0 && strm.avail_out === 0) {
                allowBufError = true;
              }
            } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);
            if (status === c.Z_STREAM_END) {
              _mode2 = c.Z_FINISH;
            }
            if (_mode2 === c.Z_FINISH) {
              status = zlib_inflate.inflateEnd(this.strm);
              this.onEnd(status);
              this.ended = true;
              return status === c.Z_OK;
            }
            if (_mode2 === c.Z_SYNC_FLUSH) {
              this.onEnd(c.Z_OK);
              strm.avail_out = 0;
              return true;
            }
            return true;
          };
          Inflate.prototype.onData = function(chunk) {
            this.chunks.push(chunk);
          };
          Inflate.prototype.onEnd = function(status) {
            if (status === c.Z_OK) {
              if (this.options.to === "string") {
                this.result = this.chunks.join("");
              } else {
                this.result = utils.flattenChunks(this.chunks);
              }
            }
            this.chunks = [];
            this.err = status;
            this.msg = this.strm.msg;
          };
          function inflate(input, options2) {
            var inflator = new Inflate(options2);
            inflator.push(input, true);
            if (inflator.err) {
              throw inflator.msg || msg[inflator.err];
            }
            return inflator.result;
          }
          function inflateRaw(input, options2) {
            options2 = options2 || {};
            options2.raw = true;
            return inflate(input, options2);
          }
          exports2.Inflate = Inflate;
          exports2.inflate = inflate;
          exports2.inflateRaw = inflateRaw;
          exports2.ungzip = inflate;
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var utils = __webpack_require__(33);
          var adler32 = __webpack_require__(34);
          var crc32 = __webpack_require__(35);
          var inflate_fast = __webpack_require__(36);
          var inflate_table = __webpack_require__(37);
          var CODES = 0;
          var LENS = 1;
          var DISTS = 2;
          var Z_FINISH = 4;
          var Z_BLOCK = 5;
          var Z_TREES = 6;
          var Z_OK = 0;
          var Z_STREAM_END = 1;
          var Z_NEED_DICT = 2;
          var Z_STREAM_ERROR = -2;
          var Z_DATA_ERROR = -3;
          var Z_MEM_ERROR = -4;
          var Z_BUF_ERROR = -5;
          var Z_DEFLATED = 8;
          var HEAD = 1;
          var FLAGS = 2;
          var TIME = 3;
          var OS = 4;
          var EXLEN = 5;
          var EXTRA = 6;
          var NAME = 7;
          var COMMENT = 8;
          var HCRC = 9;
          var DICTID = 10;
          var DICT = 11;
          var TYPE = 12;
          var TYPEDO = 13;
          var STORED = 14;
          var COPY_ = 15;
          var COPY = 16;
          var TABLE = 17;
          var LENLENS = 18;
          var CODELENS = 19;
          var LEN_ = 20;
          var LEN = 21;
          var LENEXT = 22;
          var DIST = 23;
          var DISTEXT = 24;
          var MATCH = 25;
          var LIT = 26;
          var CHECK = 27;
          var LENGTH = 28;
          var DONE = 29;
          var BAD = 30;
          var MEM = 31;
          var SYNC = 32;
          var ENOUGH_LENS = 852;
          var ENOUGH_DISTS = 592;
          var MAX_WBITS = 15;
          var DEF_WBITS = MAX_WBITS;
          function zswap32(q2) {
            return (q2 >>> 24 & 255) + (q2 >>> 8 & 65280) + ((q2 & 65280) << 8) + ((q2 & 255) << 24);
          }
          function InflateState() {
            this.mode = 0;
            this.last = false;
            this.wrap = 0;
            this.havedict = false;
            this.flags = 0;
            this.dmax = 0;
            this.check = 0;
            this.total = 0;
            this.head = null;
            this.wbits = 0;
            this.wsize = 0;
            this.whave = 0;
            this.wnext = 0;
            this.window = null;
            this.hold = 0;
            this.bits = 0;
            this.length = 0;
            this.offset = 0;
            this.extra = 0;
            this.lencode = null;
            this.distcode = null;
            this.lenbits = 0;
            this.distbits = 0;
            this.ncode = 0;
            this.nlen = 0;
            this.ndist = 0;
            this.have = 0;
            this.next = null;
            this.lens = new utils.Buf16(320);
            this.work = new utils.Buf16(288);
            this.lendyn = null;
            this.distdyn = null;
            this.sane = 0;
            this.back = 0;
            this.was = 0;
          }
          function inflateResetKeep(strm) {
            var state3;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state3 = strm.state;
            strm.total_in = strm.total_out = state3.total = 0;
            strm.msg = "";
            if (state3.wrap) {
              strm.adler = state3.wrap & 1;
            }
            state3.mode = HEAD;
            state3.last = 0;
            state3.havedict = 0;
            state3.dmax = 32768;
            state3.head = null;
            state3.hold = 0;
            state3.bits = 0;
            state3.lencode = state3.lendyn = new utils.Buf32(ENOUGH_LENS);
            state3.distcode = state3.distdyn = new utils.Buf32(ENOUGH_DISTS);
            state3.sane = 1;
            state3.back = -1;
            return Z_OK;
          }
          function inflateReset(strm) {
            var state3;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state3 = strm.state;
            state3.wsize = 0;
            state3.whave = 0;
            state3.wnext = 0;
            return inflateResetKeep(strm);
          }
          function inflateReset2(strm, windowBits) {
            var wrap;
            var state3;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state3 = strm.state;
            if (windowBits < 0) {
              wrap = 0;
              windowBits = -windowBits;
            } else {
              wrap = (windowBits >> 4) + 1;
              if (windowBits < 48) {
                windowBits &= 15;
              }
            }
            if (windowBits && (windowBits < 8 || windowBits > 15)) {
              return Z_STREAM_ERROR;
            }
            if (state3.window !== null && state3.wbits !== windowBits) {
              state3.window = null;
            }
            state3.wrap = wrap;
            state3.wbits = windowBits;
            return inflateReset(strm);
          }
          function inflateInit2(strm, windowBits) {
            var ret;
            var state3;
            if (!strm) {
              return Z_STREAM_ERROR;
            }
            state3 = new InflateState();
            strm.state = state3;
            state3.window = null;
            ret = inflateReset2(strm, windowBits);
            if (ret !== Z_OK) {
              strm.state = null;
            }
            return ret;
          }
          function inflateInit(strm) {
            return inflateInit2(strm, DEF_WBITS);
          }
          var virgin = true;
          var lenfix, distfix;
          function fixedtables(state3) {
            if (virgin) {
              var sym;
              lenfix = new utils.Buf32(512);
              distfix = new utils.Buf32(32);
              sym = 0;
              while (sym < 144) {
                state3.lens[sym++] = 8;
              }
              while (sym < 256) {
                state3.lens[sym++] = 9;
              }
              while (sym < 280) {
                state3.lens[sym++] = 7;
              }
              while (sym < 288) {
                state3.lens[sym++] = 8;
              }
              inflate_table(LENS, state3.lens, 0, 288, lenfix, 0, state3.work, { bits: 9 });
              sym = 0;
              while (sym < 32) {
                state3.lens[sym++] = 5;
              }
              inflate_table(DISTS, state3.lens, 0, 32, distfix, 0, state3.work, { bits: 5 });
              virgin = false;
            }
            state3.lencode = lenfix;
            state3.lenbits = 9;
            state3.distcode = distfix;
            state3.distbits = 5;
          }
          function updatewindow(strm, src, end, copy) {
            var dist;
            var state3 = strm.state;
            if (state3.window === null) {
              state3.wsize = 1 << state3.wbits;
              state3.wnext = 0;
              state3.whave = 0;
              state3.window = new utils.Buf8(state3.wsize);
            }
            if (copy >= state3.wsize) {
              utils.arraySet(state3.window, src, end - state3.wsize, state3.wsize, 0);
              state3.wnext = 0;
              state3.whave = state3.wsize;
            } else {
              dist = state3.wsize - state3.wnext;
              if (dist > copy) {
                dist = copy;
              }
              utils.arraySet(state3.window, src, end - copy, dist, state3.wnext);
              copy -= dist;
              if (copy) {
                utils.arraySet(state3.window, src, end - copy, copy, 0);
                state3.wnext = copy;
                state3.whave = state3.wsize;
              } else {
                state3.wnext += dist;
                if (state3.wnext === state3.wsize) {
                  state3.wnext = 0;
                }
                if (state3.whave < state3.wsize) {
                  state3.whave += dist;
                }
              }
            }
            return 0;
          }
          function inflate(strm, flush) {
            var state3;
            var input, output;
            var next;
            var put;
            var have, left;
            var hold;
            var bits;
            var _in, _out;
            var copy;
            var from2;
            var from_source;
            var here = 0;
            var here_bits, here_op, here_val;
            var last_bits, last_op, last_val;
            var len;
            var ret;
            var hbuf = new utils.Buf8(4);
            var opts;
            var n;
            var order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
              return Z_STREAM_ERROR;
            }
            state3 = strm.state;
            if (state3.mode === TYPE) {
              state3.mode = TYPEDO;
            }
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state3.hold;
            bits = state3.bits;
            _in = have;
            _out = left;
            ret = Z_OK;
            inf_leave:
              for (; ; ) {
                switch (state3.mode) {
                  case HEAD:
                    if (state3.wrap === 0) {
                      state3.mode = TYPEDO;
                      break;
                    }
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (state3.wrap & 2 && hold === 35615) {
                      state3.check = 0;
                      hbuf[0] = hold & 255;
                      hbuf[1] = hold >>> 8 & 255;
                      state3.check = crc32(state3.check, hbuf, 2, 0);
                      hold = 0;
                      bits = 0;
                      state3.mode = FLAGS;
                      break;
                    }
                    state3.flags = 0;
                    if (state3.head) {
                      state3.head.done = false;
                    }
                    if (!(state3.wrap & 1) || (((hold & 255) << 8) + (hold >> 8)) % 31) {
                      strm.msg = "incorrect header check";
                      state3.mode = BAD;
                      break;
                    }
                    if ((hold & 15) !== Z_DEFLATED) {
                      strm.msg = "unknown compression method";
                      state3.mode = BAD;
                      break;
                    }
                    hold >>>= 4;
                    bits -= 4;
                    len = (hold & 15) + 8;
                    if (state3.wbits === 0) {
                      state3.wbits = len;
                    } else if (len > state3.wbits) {
                      strm.msg = "invalid window size";
                      state3.mode = BAD;
                      break;
                    }
                    state3.dmax = 1 << len;
                    strm.adler = state3.check = 1;
                    state3.mode = hold & 512 ? DICTID : TYPE;
                    hold = 0;
                    bits = 0;
                    break;
                  case FLAGS:
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state3.flags = hold;
                    if ((state3.flags & 255) !== Z_DEFLATED) {
                      strm.msg = "unknown compression method";
                      state3.mode = BAD;
                      break;
                    }
                    if (state3.flags & 57344) {
                      strm.msg = "unknown header flags set";
                      state3.mode = BAD;
                      break;
                    }
                    if (state3.head) {
                      state3.head.text = hold >> 8 & 1;
                    }
                    if (state3.flags & 512) {
                      hbuf[0] = hold & 255;
                      hbuf[1] = hold >>> 8 & 255;
                      state3.check = crc32(state3.check, hbuf, 2, 0);
                    }
                    hold = 0;
                    bits = 0;
                    state3.mode = TIME;
                  case TIME:
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (state3.head) {
                      state3.head.time = hold;
                    }
                    if (state3.flags & 512) {
                      hbuf[0] = hold & 255;
                      hbuf[1] = hold >>> 8 & 255;
                      hbuf[2] = hold >>> 16 & 255;
                      hbuf[3] = hold >>> 24 & 255;
                      state3.check = crc32(state3.check, hbuf, 4, 0);
                    }
                    hold = 0;
                    bits = 0;
                    state3.mode = OS;
                  case OS:
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (state3.head) {
                      state3.head.xflags = hold & 255;
                      state3.head.os = hold >> 8;
                    }
                    if (state3.flags & 512) {
                      hbuf[0] = hold & 255;
                      hbuf[1] = hold >>> 8 & 255;
                      state3.check = crc32(state3.check, hbuf, 2, 0);
                    }
                    hold = 0;
                    bits = 0;
                    state3.mode = EXLEN;
                  case EXLEN:
                    if (state3.flags & 1024) {
                      while (bits < 16) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      state3.length = hold;
                      if (state3.head) {
                        state3.head.extra_len = hold;
                      }
                      if (state3.flags & 512) {
                        hbuf[0] = hold & 255;
                        hbuf[1] = hold >>> 8 & 255;
                        state3.check = crc32(state3.check, hbuf, 2, 0);
                      }
                      hold = 0;
                      bits = 0;
                    } else if (state3.head) {
                      state3.head.extra = null;
                    }
                    state3.mode = EXTRA;
                  case EXTRA:
                    if (state3.flags & 1024) {
                      copy = state3.length;
                      if (copy > have) {
                        copy = have;
                      }
                      if (copy) {
                        if (state3.head) {
                          len = state3.head.extra_len - state3.length;
                          if (!state3.head.extra) {
                            state3.head.extra = new Array(state3.head.extra_len);
                          }
                          utils.arraySet(state3.head.extra, input, next, copy, len);
                        }
                        if (state3.flags & 512) {
                          state3.check = crc32(state3.check, input, copy, next);
                        }
                        have -= copy;
                        next += copy;
                        state3.length -= copy;
                      }
                      if (state3.length) {
                        break inf_leave;
                      }
                    }
                    state3.length = 0;
                    state3.mode = NAME;
                  case NAME:
                    if (state3.flags & 2048) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      copy = 0;
                      do {
                        len = input[next + copy++];
                        if (state3.head && len && state3.length < 65536) {
                          state3.head.name += String.fromCharCode(len);
                        }
                      } while (len && copy < have);
                      if (state3.flags & 512) {
                        state3.check = crc32(state3.check, input, copy, next);
                      }
                      have -= copy;
                      next += copy;
                      if (len) {
                        break inf_leave;
                      }
                    } else if (state3.head) {
                      state3.head.name = null;
                    }
                    state3.length = 0;
                    state3.mode = COMMENT;
                  case COMMENT:
                    if (state3.flags & 4096) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      copy = 0;
                      do {
                        len = input[next + copy++];
                        if (state3.head && len && state3.length < 65536) {
                          state3.head.comment += String.fromCharCode(len);
                        }
                      } while (len && copy < have);
                      if (state3.flags & 512) {
                        state3.check = crc32(state3.check, input, copy, next);
                      }
                      have -= copy;
                      next += copy;
                      if (len) {
                        break inf_leave;
                      }
                    } else if (state3.head) {
                      state3.head.comment = null;
                    }
                    state3.mode = HCRC;
                  case HCRC:
                    if (state3.flags & 512) {
                      while (bits < 16) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      if (hold !== (state3.check & 65535)) {
                        strm.msg = "header crc mismatch";
                        state3.mode = BAD;
                        break;
                      }
                      hold = 0;
                      bits = 0;
                    }
                    if (state3.head) {
                      state3.head.hcrc = state3.flags >> 9 & 1;
                      state3.head.done = true;
                    }
                    strm.adler = state3.check = 0;
                    state3.mode = TYPE;
                    break;
                  case DICTID:
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    strm.adler = state3.check = zswap32(hold);
                    hold = 0;
                    bits = 0;
                    state3.mode = DICT;
                  case DICT:
                    if (state3.havedict === 0) {
                      strm.next_out = put;
                      strm.avail_out = left;
                      strm.next_in = next;
                      strm.avail_in = have;
                      state3.hold = hold;
                      state3.bits = bits;
                      return Z_NEED_DICT;
                    }
                    strm.adler = state3.check = 1;
                    state3.mode = TYPE;
                  case TYPE:
                    if (flush === Z_BLOCK || flush === Z_TREES) {
                      break inf_leave;
                    }
                  case TYPEDO:
                    if (state3.last) {
                      hold >>>= bits & 7;
                      bits -= bits & 7;
                      state3.mode = CHECK;
                      break;
                    }
                    while (bits < 3) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state3.last = hold & 1;
                    hold >>>= 1;
                    bits -= 1;
                    switch (hold & 3) {
                      case 0:
                        state3.mode = STORED;
                        break;
                      case 1:
                        fixedtables(state3);
                        state3.mode = LEN_;
                        if (flush === Z_TREES) {
                          hold >>>= 2;
                          bits -= 2;
                          break inf_leave;
                        }
                        break;
                      case 2:
                        state3.mode = TABLE;
                        break;
                      case 3:
                        strm.msg = "invalid block type";
                        state3.mode = BAD;
                    }
                    hold >>>= 2;
                    bits -= 2;
                    break;
                  case STORED:
                    hold >>>= bits & 7;
                    bits -= bits & 7;
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                      strm.msg = "invalid stored block lengths";
                      state3.mode = BAD;
                      break;
                    }
                    state3.length = hold & 65535;
                    hold = 0;
                    bits = 0;
                    state3.mode = COPY_;
                    if (flush === Z_TREES) {
                      break inf_leave;
                    }
                  case COPY_:
                    state3.mode = COPY;
                  case COPY:
                    copy = state3.length;
                    if (copy) {
                      if (copy > have) {
                        copy = have;
                      }
                      if (copy > left) {
                        copy = left;
                      }
                      if (copy === 0) {
                        break inf_leave;
                      }
                      utils.arraySet(output, input, next, copy, put);
                      have -= copy;
                      next += copy;
                      left -= copy;
                      put += copy;
                      state3.length -= copy;
                      break;
                    }
                    state3.mode = TYPE;
                    break;
                  case TABLE:
                    while (bits < 14) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state3.nlen = (hold & 31) + 257;
                    hold >>>= 5;
                    bits -= 5;
                    state3.ndist = (hold & 31) + 1;
                    hold >>>= 5;
                    bits -= 5;
                    state3.ncode = (hold & 15) + 4;
                    hold >>>= 4;
                    bits -= 4;
                    if (state3.nlen > 286 || state3.ndist > 30) {
                      strm.msg = "too many length or distance symbols";
                      state3.mode = BAD;
                      break;
                    }
                    state3.have = 0;
                    state3.mode = LENLENS;
                  case LENLENS:
                    while (state3.have < state3.ncode) {
                      while (bits < 3) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      state3.lens[order[state3.have++]] = hold & 7;
                      hold >>>= 3;
                      bits -= 3;
                    }
                    while (state3.have < 19) {
                      state3.lens[order[state3.have++]] = 0;
                    }
                    state3.lencode = state3.lendyn;
                    state3.lenbits = 7;
                    opts = { bits: state3.lenbits };
                    ret = inflate_table(CODES, state3.lens, 0, 19, state3.lencode, 0, state3.work, opts);
                    state3.lenbits = opts.bits;
                    if (ret) {
                      strm.msg = "invalid code lengths set";
                      state3.mode = BAD;
                      break;
                    }
                    state3.have = 0;
                    state3.mode = CODELENS;
                  case CODELENS:
                    while (state3.have < state3.nlen + state3.ndist) {
                      for (; ; ) {
                        here = state3.lencode[hold & (1 << state3.lenbits) - 1];
                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 255;
                        here_val = here & 65535;
                        if (here_bits <= bits) {
                          break;
                        }
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      if (here_val < 16) {
                        hold >>>= here_bits;
                        bits -= here_bits;
                        state3.lens[state3.have++] = here_val;
                      } else {
                        if (here_val === 16) {
                          n = here_bits + 2;
                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          hold >>>= here_bits;
                          bits -= here_bits;
                          if (state3.have === 0) {
                            strm.msg = "invalid bit length repeat";
                            state3.mode = BAD;
                            break;
                          }
                          len = state3.lens[state3.have - 1];
                          copy = 3 + (hold & 3);
                          hold >>>= 2;
                          bits -= 2;
                        } else if (here_val === 17) {
                          n = here_bits + 3;
                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          hold >>>= here_bits;
                          bits -= here_bits;
                          len = 0;
                          copy = 3 + (hold & 7);
                          hold >>>= 3;
                          bits -= 3;
                        } else {
                          n = here_bits + 7;
                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          hold >>>= here_bits;
                          bits -= here_bits;
                          len = 0;
                          copy = 11 + (hold & 127);
                          hold >>>= 7;
                          bits -= 7;
                        }
                        if (state3.have + copy > state3.nlen + state3.ndist) {
                          strm.msg = "invalid bit length repeat";
                          state3.mode = BAD;
                          break;
                        }
                        while (copy--) {
                          state3.lens[state3.have++] = len;
                        }
                      }
                    }
                    if (state3.mode === BAD) {
                      break;
                    }
                    if (state3.lens[256] === 0) {
                      strm.msg = "invalid code -- missing end-of-block";
                      state3.mode = BAD;
                      break;
                    }
                    state3.lenbits = 9;
                    opts = { bits: state3.lenbits };
                    ret = inflate_table(LENS, state3.lens, 0, state3.nlen, state3.lencode, 0, state3.work, opts);
                    state3.lenbits = opts.bits;
                    if (ret) {
                      strm.msg = "invalid literal/lengths set";
                      state3.mode = BAD;
                      break;
                    }
                    state3.distbits = 6;
                    state3.distcode = state3.distdyn;
                    opts = { bits: state3.distbits };
                    ret = inflate_table(DISTS, state3.lens, state3.nlen, state3.ndist, state3.distcode, 0, state3.work, opts);
                    state3.distbits = opts.bits;
                    if (ret) {
                      strm.msg = "invalid distances set";
                      state3.mode = BAD;
                      break;
                    }
                    state3.mode = LEN_;
                    if (flush === Z_TREES) {
                      break inf_leave;
                    }
                  case LEN_:
                    state3.mode = LEN;
                  case LEN:
                    if (have >= 6 && left >= 258) {
                      strm.next_out = put;
                      strm.avail_out = left;
                      strm.next_in = next;
                      strm.avail_in = have;
                      state3.hold = hold;
                      state3.bits = bits;
                      inflate_fast(strm, _out);
                      put = strm.next_out;
                      output = strm.output;
                      left = strm.avail_out;
                      next = strm.next_in;
                      input = strm.input;
                      have = strm.avail_in;
                      hold = state3.hold;
                      bits = state3.bits;
                      if (state3.mode === TYPE) {
                        state3.back = -1;
                      }
                      break;
                    }
                    state3.back = 0;
                    for (; ; ) {
                      here = state3.lencode[hold & (1 << state3.lenbits) - 1];
                      here_bits = here >>> 24;
                      here_op = here >>> 16 & 255;
                      here_val = here & 65535;
                      if (here_bits <= bits) {
                        break;
                      }
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (here_op && (here_op & 240) === 0) {
                      last_bits = here_bits;
                      last_op = here_op;
                      last_val = here_val;
                      for (; ; ) {
                        here = state3.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 255;
                        here_val = here & 65535;
                        if (last_bits + here_bits <= bits) {
                          break;
                        }
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      hold >>>= last_bits;
                      bits -= last_bits;
                      state3.back += last_bits;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    state3.back += here_bits;
                    state3.length = here_val;
                    if (here_op === 0) {
                      state3.mode = LIT;
                      break;
                    }
                    if (here_op & 32) {
                      state3.back = -1;
                      state3.mode = TYPE;
                      break;
                    }
                    if (here_op & 64) {
                      strm.msg = "invalid literal/length code";
                      state3.mode = BAD;
                      break;
                    }
                    state3.extra = here_op & 15;
                    state3.mode = LENEXT;
                  case LENEXT:
                    if (state3.extra) {
                      n = state3.extra;
                      while (bits < n) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      state3.length += hold & (1 << state3.extra) - 1;
                      hold >>>= state3.extra;
                      bits -= state3.extra;
                      state3.back += state3.extra;
                    }
                    state3.was = state3.length;
                    state3.mode = DIST;
                  case DIST:
                    for (; ; ) {
                      here = state3.distcode[hold & (1 << state3.distbits) - 1];
                      here_bits = here >>> 24;
                      here_op = here >>> 16 & 255;
                      here_val = here & 65535;
                      if (here_bits <= bits) {
                        break;
                      }
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if ((here_op & 240) === 0) {
                      last_bits = here_bits;
                      last_op = here_op;
                      last_val = here_val;
                      for (; ; ) {
                        here = state3.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 255;
                        here_val = here & 65535;
                        if (last_bits + here_bits <= bits) {
                          break;
                        }
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      hold >>>= last_bits;
                      bits -= last_bits;
                      state3.back += last_bits;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    state3.back += here_bits;
                    if (here_op & 64) {
                      strm.msg = "invalid distance code";
                      state3.mode = BAD;
                      break;
                    }
                    state3.offset = here_val;
                    state3.extra = here_op & 15;
                    state3.mode = DISTEXT;
                  case DISTEXT:
                    if (state3.extra) {
                      n = state3.extra;
                      while (bits < n) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      state3.offset += hold & (1 << state3.extra) - 1;
                      hold >>>= state3.extra;
                      bits -= state3.extra;
                      state3.back += state3.extra;
                    }
                    if (state3.offset > state3.dmax) {
                      strm.msg = "invalid distance too far back";
                      state3.mode = BAD;
                      break;
                    }
                    state3.mode = MATCH;
                  case MATCH:
                    if (left === 0) {
                      break inf_leave;
                    }
                    copy = _out - left;
                    if (state3.offset > copy) {
                      copy = state3.offset - copy;
                      if (copy > state3.whave) {
                        if (state3.sane) {
                          strm.msg = "invalid distance too far back";
                          state3.mode = BAD;
                          break;
                        }
                      }
                      if (copy > state3.wnext) {
                        copy -= state3.wnext;
                        from2 = state3.wsize - copy;
                      } else {
                        from2 = state3.wnext - copy;
                      }
                      if (copy > state3.length) {
                        copy = state3.length;
                      }
                      from_source = state3.window;
                    } else {
                      from_source = output;
                      from2 = put - state3.offset;
                      copy = state3.length;
                    }
                    if (copy > left) {
                      copy = left;
                    }
                    left -= copy;
                    state3.length -= copy;
                    do {
                      output[put++] = from_source[from2++];
                    } while (--copy);
                    if (state3.length === 0) {
                      state3.mode = LEN;
                    }
                    break;
                  case LIT:
                    if (left === 0) {
                      break inf_leave;
                    }
                    output[put++] = state3.length;
                    left--;
                    state3.mode = LEN;
                    break;
                  case CHECK:
                    if (state3.wrap) {
                      while (bits < 32) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold |= input[next++] << bits;
                        bits += 8;
                      }
                      _out -= left;
                      strm.total_out += _out;
                      state3.total += _out;
                      if (_out) {
                        strm.adler = state3.check = state3.flags ? crc32(state3.check, output, _out, put - _out) : adler32(state3.check, output, _out, put - _out);
                      }
                      _out = left;
                      if ((state3.flags ? hold : zswap32(hold)) !== state3.check) {
                        strm.msg = "incorrect data check";
                        state3.mode = BAD;
                        break;
                      }
                      hold = 0;
                      bits = 0;
                    }
                    state3.mode = LENGTH;
                  case LENGTH:
                    if (state3.wrap && state3.flags) {
                      while (bits < 32) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      if (hold !== (state3.total & 4294967295)) {
                        strm.msg = "incorrect length check";
                        state3.mode = BAD;
                        break;
                      }
                      hold = 0;
                      bits = 0;
                    }
                    state3.mode = DONE;
                  case DONE:
                    ret = Z_STREAM_END;
                    break inf_leave;
                  case BAD:
                    ret = Z_DATA_ERROR;
                    break inf_leave;
                  case MEM:
                    return Z_MEM_ERROR;
                  case SYNC:
                  default:
                    return Z_STREAM_ERROR;
                }
              }
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state3.hold = hold;
            state3.bits = bits;
            if (state3.wsize || _out !== strm.avail_out && state3.mode < BAD && (state3.mode < CHECK || flush !== Z_FINISH)) {
              if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
                state3.mode = MEM;
                return Z_MEM_ERROR;
              }
            }
            _in -= strm.avail_in;
            _out -= strm.avail_out;
            strm.total_in += _in;
            strm.total_out += _out;
            state3.total += _out;
            if (state3.wrap && _out) {
              strm.adler = state3.check = state3.flags ? crc32(state3.check, output, _out, strm.next_out - _out) : adler32(state3.check, output, _out, strm.next_out - _out);
            }
            strm.data_type = state3.bits + (state3.last ? 64 : 0) + (state3.mode === TYPE ? 128 : 0) + (state3.mode === LEN_ || state3.mode === COPY_ ? 256 : 0);
            if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
              ret = Z_BUF_ERROR;
            }
            return ret;
          }
          function inflateEnd(strm) {
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            var state3 = strm.state;
            if (state3.window) {
              state3.window = null;
            }
            strm.state = null;
            return Z_OK;
          }
          function inflateGetHeader(strm, head) {
            var state3;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state3 = strm.state;
            if ((state3.wrap & 2) === 0) {
              return Z_STREAM_ERROR;
            }
            state3.head = head;
            head.done = false;
            return Z_OK;
          }
          function inflateSetDictionary(strm, dictionary) {
            var dictLength = dictionary.length;
            var state3;
            var dictid;
            var ret;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state3 = strm.state;
            if (state3.wrap !== 0 && state3.mode !== DICT) {
              return Z_STREAM_ERROR;
            }
            if (state3.mode === DICT) {
              dictid = 1;
              dictid = adler32(dictid, dictionary, dictLength, 0);
              if (dictid !== state3.check) {
                return Z_DATA_ERROR;
              }
            }
            ret = updatewindow(strm, dictionary, dictLength, dictLength);
            if (ret) {
              state3.mode = MEM;
              return Z_MEM_ERROR;
            }
            state3.havedict = 1;
            return Z_OK;
          }
          exports2.inflateReset = inflateReset;
          exports2.inflateReset2 = inflateReset2;
          exports2.inflateResetKeep = inflateResetKeep;
          exports2.inflateInit = inflateInit;
          exports2.inflateInit2 = inflateInit2;
          exports2.inflate = inflate;
          exports2.inflateEnd = inflateEnd;
          exports2.inflateGetHeader = inflateGetHeader;
          exports2.inflateSetDictionary = inflateSetDictionary;
          exports2.inflateInfo = "pako inflate (from Nodeca project)";
        },
        function(module2, exports2) {
          "use strict";
          var TYPED_OK = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined";
          exports2.assign = function(obj) {
            var sources = Array.prototype.slice.call(arguments, 1);
            while (sources.length) {
              var source = sources.shift();
              if (!source) {
                continue;
              }
              if (typeof source !== "object") {
                throw new TypeError(source + "must be non-object");
              }
              for (var p in source) {
                if (source.hasOwnProperty(p)) {
                  obj[p] = source[p];
                }
              }
            }
            return obj;
          };
          exports2.shrinkBuf = function(buf, size) {
            if (buf.length === size) {
              return buf;
            }
            if (buf.subarray) {
              return buf.subarray(0, size);
            }
            buf.length = size;
            return buf;
          };
          var fnTyped = {
            arraySet: function(dest, src, src_offs, len, dest_offs) {
              if (src.subarray && dest.subarray) {
                dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
                return;
              }
              for (var i = 0; i < len; i++) {
                dest[dest_offs + i] = src[src_offs + i];
              }
            },
            flattenChunks: function(chunks) {
              var i, l, len, pos, chunk, result;
              len = 0;
              for (i = 0, l = chunks.length; i < l; i++) {
                len += chunks[i].length;
              }
              result = new Uint8Array(len);
              pos = 0;
              for (i = 0, l = chunks.length; i < l; i++) {
                chunk = chunks[i];
                result.set(chunk, pos);
                pos += chunk.length;
              }
              return result;
            }
          };
          var fnUntyped = {
            arraySet: function(dest, src, src_offs, len, dest_offs) {
              for (var i = 0; i < len; i++) {
                dest[dest_offs + i] = src[src_offs + i];
              }
            },
            flattenChunks: function(chunks) {
              return [].concat.apply([], chunks);
            }
          };
          exports2.setTyped = function(on2) {
            if (on2) {
              exports2.Buf8 = Uint8Array;
              exports2.Buf16 = Uint16Array;
              exports2.Buf32 = Int32Array;
              exports2.assign(exports2, fnTyped);
            } else {
              exports2.Buf8 = Array;
              exports2.Buf16 = Array;
              exports2.Buf32 = Array;
              exports2.assign(exports2, fnUntyped);
            }
          };
          exports2.setTyped(TYPED_OK);
        },
        function(module2, exports2) {
          "use strict";
          function adler32(adler, buf, len, pos) {
            var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
            while (len !== 0) {
              n = len > 2e3 ? 2e3 : len;
              len -= n;
              do {
                s1 = s1 + buf[pos++] | 0;
                s2 = s2 + s1 | 0;
              } while (--n);
              s1 %= 65521;
              s2 %= 65521;
            }
            return s1 | s2 << 16 | 0;
          }
          module2.exports = adler32;
        },
        function(module2, exports2) {
          "use strict";
          function makeTable() {
            var c, table = [];
            for (var n = 0; n < 256; n++) {
              c = n;
              for (var k = 0; k < 8; k++) {
                c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
              }
              table[n] = c;
            }
            return table;
          }
          var crcTable = makeTable();
          function crc32(crc, buf, len, pos) {
            var t = crcTable, end = pos + len;
            crc ^= -1;
            for (var i = pos; i < end; i++) {
              crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
            }
            return crc ^ -1;
          }
          module2.exports = crc32;
        },
        function(module2, exports2) {
          "use strict";
          var BAD = 30;
          var TYPE = 12;
          module2.exports = function inflate_fast(strm, start) {
            var state3;
            var _in;
            var last;
            var _out;
            var beg;
            var end;
            var dmax;
            var wsize;
            var whave;
            var wnext;
            var s_window;
            var hold;
            var bits;
            var lcode;
            var dcode;
            var lmask;
            var dmask;
            var here;
            var op;
            var len;
            var dist;
            var from2;
            var from_source;
            var input, output;
            state3 = strm.state;
            _in = strm.next_in;
            input = strm.input;
            last = _in + (strm.avail_in - 5);
            _out = strm.next_out;
            output = strm.output;
            beg = _out - (start - strm.avail_out);
            end = _out + (strm.avail_out - 257);
            dmax = state3.dmax;
            wsize = state3.wsize;
            whave = state3.whave;
            wnext = state3.wnext;
            s_window = state3.window;
            hold = state3.hold;
            bits = state3.bits;
            lcode = state3.lencode;
            dcode = state3.distcode;
            lmask = (1 << state3.lenbits) - 1;
            dmask = (1 << state3.distbits) - 1;
            top:
              do {
                if (bits < 15) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  hold += input[_in++] << bits;
                  bits += 8;
                }
                here = lcode[hold & lmask];
                dolen:
                  for (; ; ) {
                    op = here >>> 24;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 255;
                    if (op === 0) {
                      output[_out++] = here & 65535;
                    } else if (op & 16) {
                      len = here & 65535;
                      op &= 15;
                      if (op) {
                        if (bits < op) {
                          hold += input[_in++] << bits;
                          bits += 8;
                        }
                        len += hold & (1 << op) - 1;
                        hold >>>= op;
                        bits -= op;
                      }
                      if (bits < 15) {
                        hold += input[_in++] << bits;
                        bits += 8;
                        hold += input[_in++] << bits;
                        bits += 8;
                      }
                      here = dcode[hold & dmask];
                      dodist:
                        for (; ; ) {
                          op = here >>> 24;
                          hold >>>= op;
                          bits -= op;
                          op = here >>> 16 & 255;
                          if (op & 16) {
                            dist = here & 65535;
                            op &= 15;
                            if (bits < op) {
                              hold += input[_in++] << bits;
                              bits += 8;
                              if (bits < op) {
                                hold += input[_in++] << bits;
                                bits += 8;
                              }
                            }
                            dist += hold & (1 << op) - 1;
                            if (dist > dmax) {
                              strm.msg = "invalid distance too far back";
                              state3.mode = BAD;
                              break top;
                            }
                            hold >>>= op;
                            bits -= op;
                            op = _out - beg;
                            if (dist > op) {
                              op = dist - op;
                              if (op > whave) {
                                if (state3.sane) {
                                  strm.msg = "invalid distance too far back";
                                  state3.mode = BAD;
                                  break top;
                                }
                              }
                              from2 = 0;
                              from_source = s_window;
                              if (wnext === 0) {
                                from2 += wsize - op;
                                if (op < len) {
                                  len -= op;
                                  do {
                                    output[_out++] = s_window[from2++];
                                  } while (--op);
                                  from2 = _out - dist;
                                  from_source = output;
                                }
                              } else if (wnext < op) {
                                from2 += wsize + wnext - op;
                                op -= wnext;
                                if (op < len) {
                                  len -= op;
                                  do {
                                    output[_out++] = s_window[from2++];
                                  } while (--op);
                                  from2 = 0;
                                  if (wnext < len) {
                                    op = wnext;
                                    len -= op;
                                    do {
                                      output[_out++] = s_window[from2++];
                                    } while (--op);
                                    from2 = _out - dist;
                                    from_source = output;
                                  }
                                }
                              } else {
                                from2 += wnext - op;
                                if (op < len) {
                                  len -= op;
                                  do {
                                    output[_out++] = s_window[from2++];
                                  } while (--op);
                                  from2 = _out - dist;
                                  from_source = output;
                                }
                              }
                              while (len > 2) {
                                output[_out++] = from_source[from2++];
                                output[_out++] = from_source[from2++];
                                output[_out++] = from_source[from2++];
                                len -= 3;
                              }
                              if (len) {
                                output[_out++] = from_source[from2++];
                                if (len > 1) {
                                  output[_out++] = from_source[from2++];
                                }
                              }
                            } else {
                              from2 = _out - dist;
                              do {
                                output[_out++] = output[from2++];
                                output[_out++] = output[from2++];
                                output[_out++] = output[from2++];
                                len -= 3;
                              } while (len > 2);
                              if (len) {
                                output[_out++] = output[from2++];
                                if (len > 1) {
                                  output[_out++] = output[from2++];
                                }
                              }
                            }
                          } else if ((op & 64) === 0) {
                            here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                            continue dodist;
                          } else {
                            strm.msg = "invalid distance code";
                            state3.mode = BAD;
                            break top;
                          }
                          break;
                        }
                    } else if ((op & 64) === 0) {
                      here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                      continue dolen;
                    } else if (op & 32) {
                      state3.mode = TYPE;
                      break top;
                    } else {
                      strm.msg = "invalid literal/length code";
                      state3.mode = BAD;
                      break top;
                    }
                    break;
                  }
              } while (_in < last && _out < end);
            len = bits >> 3;
            _in -= len;
            bits -= len << 3;
            hold &= (1 << bits) - 1;
            strm.next_in = _in;
            strm.next_out = _out;
            strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
            strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
            state3.hold = hold;
            state3.bits = bits;
            return;
          };
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var utils = __webpack_require__(33);
          var MAXBITS = 15;
          var ENOUGH_LENS = 852;
          var ENOUGH_DISTS = 592;
          var CODES = 0;
          var LENS = 1;
          var DISTS = 2;
          var lbase = [
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            13,
            15,
            17,
            19,
            23,
            27,
            31,
            35,
            43,
            51,
            59,
            67,
            83,
            99,
            115,
            131,
            163,
            195,
            227,
            258,
            0,
            0
          ];
          var lext = [
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            17,
            17,
            17,
            17,
            18,
            18,
            18,
            18,
            19,
            19,
            19,
            19,
            20,
            20,
            20,
            20,
            21,
            21,
            21,
            21,
            16,
            72,
            78
          ];
          var dbase = [
            1,
            2,
            3,
            4,
            5,
            7,
            9,
            13,
            17,
            25,
            33,
            49,
            65,
            97,
            129,
            193,
            257,
            385,
            513,
            769,
            1025,
            1537,
            2049,
            3073,
            4097,
            6145,
            8193,
            12289,
            16385,
            24577,
            0,
            0
          ];
          var dext = [
            16,
            16,
            16,
            16,
            17,
            17,
            18,
            18,
            19,
            19,
            20,
            20,
            21,
            21,
            22,
            22,
            23,
            23,
            24,
            24,
            25,
            25,
            26,
            26,
            27,
            27,
            28,
            28,
            29,
            29,
            64,
            64
          ];
          module2.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
            var bits = opts.bits;
            var len = 0;
            var sym = 0;
            var min = 0, max = 0;
            var root = 0;
            var curr = 0;
            var drop = 0;
            var left = 0;
            var used = 0;
            var huff = 0;
            var incr;
            var fill;
            var low;
            var mask;
            var next;
            var base = null;
            var base_index = 0;
            var end;
            var count = new utils.Buf16(MAXBITS + 1);
            var offs = new utils.Buf16(MAXBITS + 1);
            var extra = null;
            var extra_index = 0;
            var here_bits, here_op, here_val;
            for (len = 0; len <= MAXBITS; len++) {
              count[len] = 0;
            }
            for (sym = 0; sym < codes; sym++) {
              count[lens[lens_index + sym]]++;
            }
            root = bits;
            for (max = MAXBITS; max >= 1; max--) {
              if (count[max] !== 0) {
                break;
              }
            }
            if (root > max) {
              root = max;
            }
            if (max === 0) {
              table[table_index++] = 1 << 24 | 64 << 16 | 0;
              table[table_index++] = 1 << 24 | 64 << 16 | 0;
              opts.bits = 1;
              return 0;
            }
            for (min = 1; min < max; min++) {
              if (count[min] !== 0) {
                break;
              }
            }
            if (root < min) {
              root = min;
            }
            left = 1;
            for (len = 1; len <= MAXBITS; len++) {
              left <<= 1;
              left -= count[len];
              if (left < 0) {
                return -1;
              }
            }
            if (left > 0 && (type === CODES || max !== 1)) {
              return -1;
            }
            offs[1] = 0;
            for (len = 1; len < MAXBITS; len++) {
              offs[len + 1] = offs[len] + count[len];
            }
            for (sym = 0; sym < codes; sym++) {
              if (lens[lens_index + sym] !== 0) {
                work[offs[lens[lens_index + sym]]++] = sym;
              }
            }
            if (type === CODES) {
              base = extra = work;
              end = 19;
            } else if (type === LENS) {
              base = lbase;
              base_index -= 257;
              extra = lext;
              extra_index -= 257;
              end = 256;
            } else {
              base = dbase;
              extra = dext;
              end = -1;
            }
            huff = 0;
            sym = 0;
            len = min;
            next = table_index;
            curr = root;
            drop = 0;
            low = -1;
            used = 1 << root;
            mask = used - 1;
            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
              return 1;
            }
            for (; ; ) {
              here_bits = len - drop;
              if (work[sym] < end) {
                here_op = 0;
                here_val = work[sym];
              } else if (work[sym] > end) {
                here_op = extra[extra_index + work[sym]];
                here_val = base[base_index + work[sym]];
              } else {
                here_op = 32 + 64;
                here_val = 0;
              }
              incr = 1 << len - drop;
              fill = 1 << curr;
              min = fill;
              do {
                fill -= incr;
                table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
              } while (fill !== 0);
              incr = 1 << len - 1;
              while (huff & incr) {
                incr >>= 1;
              }
              if (incr !== 0) {
                huff &= incr - 1;
                huff += incr;
              } else {
                huff = 0;
              }
              sym++;
              if (--count[len] === 0) {
                if (len === max) {
                  break;
                }
                len = lens[lens_index + work[sym]];
              }
              if (len > root && (huff & mask) !== low) {
                if (drop === 0) {
                  drop = root;
                }
                next += min;
                curr = len - drop;
                left = 1 << curr;
                while (curr + drop < max) {
                  left -= count[curr + drop];
                  if (left <= 0) {
                    break;
                  }
                  curr++;
                  left <<= 1;
                }
                used += 1 << curr;
                if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                  return 1;
                }
                low = huff & mask;
                table[low] = root << 24 | curr << 16 | next - table_index | 0;
              }
            }
            if (huff !== 0) {
              table[next + huff] = len - drop << 24 | 64 << 16 | 0;
            }
            opts.bits = root;
            return 0;
          };
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var utils = __webpack_require__(33);
          var STR_APPLY_OK = true;
          var STR_APPLY_UIA_OK = true;
          try {
            String.fromCharCode.apply(null, [0]);
          } catch (__) {
            STR_APPLY_OK = false;
          }
          try {
            String.fromCharCode.apply(null, new Uint8Array(1));
          } catch (__) {
            STR_APPLY_UIA_OK = false;
          }
          var _utf8len = new utils.Buf8(256);
          for (var q2 = 0; q2 < 256; q2++) {
            _utf8len[q2] = q2 >= 252 ? 6 : q2 >= 248 ? 5 : q2 >= 240 ? 4 : q2 >= 224 ? 3 : q2 >= 192 ? 2 : 1;
          }
          _utf8len[254] = _utf8len[254] = 1;
          exports2.string2buf = function(str2) {
            var buf, c, c2, m_pos, i, str_len = str2.length, buf_len = 0;
            for (m_pos = 0; m_pos < str_len; m_pos++) {
              c = str2.charCodeAt(m_pos);
              if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                c2 = str2.charCodeAt(m_pos + 1);
                if ((c2 & 64512) === 56320) {
                  c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                  m_pos++;
                }
              }
              buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
            }
            buf = new utils.Buf8(buf_len);
            for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
              c = str2.charCodeAt(m_pos);
              if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                c2 = str2.charCodeAt(m_pos + 1);
                if ((c2 & 64512) === 56320) {
                  c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                  m_pos++;
                }
              }
              if (c < 128) {
                buf[i++] = c;
              } else if (c < 2048) {
                buf[i++] = 192 | c >>> 6;
                buf[i++] = 128 | c & 63;
              } else if (c < 65536) {
                buf[i++] = 224 | c >>> 12;
                buf[i++] = 128 | c >>> 6 & 63;
                buf[i++] = 128 | c & 63;
              } else {
                buf[i++] = 240 | c >>> 18;
                buf[i++] = 128 | c >>> 12 & 63;
                buf[i++] = 128 | c >>> 6 & 63;
                buf[i++] = 128 | c & 63;
              }
            }
            return buf;
          };
          function buf2binstring(buf, len) {
            if (len < 65537) {
              if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {
                return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
              }
            }
            var result = "";
            for (var i = 0; i < len; i++) {
              result += String.fromCharCode(buf[i]);
            }
            return result;
          }
          exports2.buf2binstring = function(buf) {
            return buf2binstring(buf, buf.length);
          };
          exports2.binstring2buf = function(str2) {
            var buf = new utils.Buf8(str2.length);
            for (var i = 0, len = buf.length; i < len; i++) {
              buf[i] = str2.charCodeAt(i);
            }
            return buf;
          };
          exports2.buf2string = function(buf, max) {
            var i, out, c, c_len;
            var len = max || buf.length;
            var utf16buf = new Array(len * 2);
            for (out = 0, i = 0; i < len; ) {
              c = buf[i++];
              if (c < 128) {
                utf16buf[out++] = c;
                continue;
              }
              c_len = _utf8len[c];
              if (c_len > 4) {
                utf16buf[out++] = 65533;
                i += c_len - 1;
                continue;
              }
              c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
              while (c_len > 1 && i < len) {
                c = c << 6 | buf[i++] & 63;
                c_len--;
              }
              if (c_len > 1) {
                utf16buf[out++] = 65533;
                continue;
              }
              if (c < 65536) {
                utf16buf[out++] = c;
              } else {
                c -= 65536;
                utf16buf[out++] = 55296 | c >> 10 & 1023;
                utf16buf[out++] = 56320 | c & 1023;
              }
            }
            return buf2binstring(utf16buf, out);
          };
          exports2.utf8border = function(buf, max) {
            var pos;
            max = max || buf.length;
            if (max > buf.length) {
              max = buf.length;
            }
            pos = max - 1;
            while (pos >= 0 && (buf[pos] & 192) === 128) {
              pos--;
            }
            if (pos < 0) {
              return max;
            }
            if (pos === 0) {
              return max;
            }
            return pos + _utf8len[buf[pos]] > max ? pos : max;
          };
        },
        function(module2, exports2) {
          "use strict";
          module2.exports = {
            Z_NO_FLUSH: 0,
            Z_PARTIAL_FLUSH: 1,
            Z_SYNC_FLUSH: 2,
            Z_FULL_FLUSH: 3,
            Z_FINISH: 4,
            Z_BLOCK: 5,
            Z_TREES: 6,
            Z_OK: 0,
            Z_STREAM_END: 1,
            Z_NEED_DICT: 2,
            Z_ERRNO: -1,
            Z_STREAM_ERROR: -2,
            Z_DATA_ERROR: -3,
            Z_BUF_ERROR: -5,
            Z_NO_COMPRESSION: 0,
            Z_BEST_SPEED: 1,
            Z_BEST_COMPRESSION: 9,
            Z_DEFAULT_COMPRESSION: -1,
            Z_FILTERED: 1,
            Z_HUFFMAN_ONLY: 2,
            Z_RLE: 3,
            Z_FIXED: 4,
            Z_DEFAULT_STRATEGY: 0,
            Z_BINARY: 0,
            Z_TEXT: 1,
            Z_UNKNOWN: 2,
            Z_DEFLATED: 8
          };
        },
        function(module2, exports2) {
          "use strict";
          module2.exports = {
            2: "need dictionary",
            1: "stream end",
            0: "",
            "-1": "file error",
            "-2": "stream error",
            "-3": "data error",
            "-4": "insufficient memory",
            "-5": "buffer error",
            "-6": "incompatible version"
          };
        },
        function(module2, exports2) {
          "use strict";
          function ZStream() {
            this.input = null;
            this.next_in = 0;
            this.avail_in = 0;
            this.total_in = 0;
            this.output = null;
            this.next_out = 0;
            this.avail_out = 0;
            this.total_out = 0;
            this.msg = "";
            this.state = null;
            this.data_type = 2;
            this.adler = 0;
          }
          module2.exports = ZStream;
        },
        function(module2, exports2) {
          "use strict";
          function GZheader() {
            this.text = 0;
            this.time = 0;
            this.xflags = 0;
            this.os = 0;
            this.extra = null;
            this.extra_len = 0;
            this.name = "";
            this.comment = "";
            this.hcrc = 0;
            this.done = false;
          }
          module2.exports = GZheader;
        }
      ]);
    });
  }
});

// ../graphscript/examples/audiofeedback/node_modules/howler/dist/howler.js
var require_howler = __commonJS({
  "../graphscript/examples/audiofeedback/node_modules/howler/dist/howler.js"(exports) {
    (function() {
      "use strict";
      var HowlerGlobal2 = function() {
        this.init();
      };
      HowlerGlobal2.prototype = {
        init: function() {
          var self2 = this || Howler3;
          self2._counter = 1e3;
          self2._html5AudioPool = [];
          self2.html5PoolSize = 10;
          self2._codecs = {};
          self2._howls = [];
          self2._muted = false;
          self2._volume = 1;
          self2._canPlayEvent = "canplaythrough";
          self2._navigator = typeof window !== "undefined" && window.navigator ? window.navigator : null;
          self2.masterGain = null;
          self2.noAudio = false;
          self2.usingWebAudio = true;
          self2.autoSuspend = true;
          self2.ctx = null;
          self2.autoUnlock = true;
          self2._setup();
          return self2;
        },
        volume: function(vol) {
          var self2 = this || Howler3;
          vol = parseFloat(vol);
          if (!self2.ctx) {
            setupAudioContext();
          }
          if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
            self2._volume = vol;
            if (self2._muted) {
              return self2;
            }
            if (self2.usingWebAudio) {
              self2.masterGain.gain.setValueAtTime(vol, Howler3.ctx.currentTime);
            }
            for (var i = 0; i < self2._howls.length; i++) {
              if (!self2._howls[i]._webAudio) {
                var ids = self2._howls[i]._getSoundIds();
                for (var j = 0; j < ids.length; j++) {
                  var sound = self2._howls[i]._soundById(ids[j]);
                  if (sound && sound._node) {
                    sound._node.volume = sound._volume * vol;
                  }
                }
              }
            }
            return self2;
          }
          return self2._volume;
        },
        mute: function(muted) {
          var self2 = this || Howler3;
          if (!self2.ctx) {
            setupAudioContext();
          }
          self2._muted = muted;
          if (self2.usingWebAudio) {
            self2.masterGain.gain.setValueAtTime(muted ? 0 : self2._volume, Howler3.ctx.currentTime);
          }
          for (var i = 0; i < self2._howls.length; i++) {
            if (!self2._howls[i]._webAudio) {
              var ids = self2._howls[i]._getSoundIds();
              for (var j = 0; j < ids.length; j++) {
                var sound = self2._howls[i]._soundById(ids[j]);
                if (sound && sound._node) {
                  sound._node.muted = muted ? true : sound._muted;
                }
              }
            }
          }
          return self2;
        },
        stop: function() {
          var self2 = this || Howler3;
          for (var i = 0; i < self2._howls.length; i++) {
            self2._howls[i].stop();
          }
          return self2;
        },
        unload: function() {
          var self2 = this || Howler3;
          for (var i = self2._howls.length - 1; i >= 0; i--) {
            self2._howls[i].unload();
          }
          if (self2.usingWebAudio && self2.ctx && typeof self2.ctx.close !== "undefined") {
            self2.ctx.close();
            self2.ctx = null;
            setupAudioContext();
          }
          return self2;
        },
        codecs: function(ext) {
          return (this || Howler3)._codecs[ext.replace(/^x-/, "")];
        },
        _setup: function() {
          var self2 = this || Howler3;
          self2.state = self2.ctx ? self2.ctx.state || "suspended" : "suspended";
          self2._autoSuspend();
          if (!self2.usingWebAudio) {
            if (typeof Audio !== "undefined") {
              try {
                var test = new Audio();
                if (typeof test.oncanplaythrough === "undefined") {
                  self2._canPlayEvent = "canplay";
                }
              } catch (e) {
                self2.noAudio = true;
              }
            } else {
              self2.noAudio = true;
            }
          }
          try {
            var test = new Audio();
            if (test.muted) {
              self2.noAudio = true;
            }
          } catch (e) {
          }
          if (!self2.noAudio) {
            self2._setupCodecs();
          }
          return self2;
        },
        _setupCodecs: function() {
          var self2 = this || Howler3;
          var audioTest = null;
          try {
            audioTest = typeof Audio !== "undefined" ? new Audio() : null;
          } catch (err) {
            return self2;
          }
          if (!audioTest || typeof audioTest.canPlayType !== "function") {
            return self2;
          }
          var mpegTest = audioTest.canPlayType("audio/mpeg;").replace(/^no$/, "");
          var ua = self2._navigator ? self2._navigator.userAgent : "";
          var checkOpera = ua.match(/OPR\/([0-6].)/g);
          var isOldOpera = checkOpera && parseInt(checkOpera[0].split("/")[1], 10) < 33;
          var checkSafari = ua.indexOf("Safari") !== -1 && ua.indexOf("Chrome") === -1;
          var safariVersion = ua.match(/Version\/(.*?) /);
          var isOldSafari = checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15;
          self2._codecs = {
            mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType("audio/mp3;").replace(/^no$/, ""))),
            mpeg: !!mpegTest,
            opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
            ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
            oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
            wav: !!(audioTest.canPlayType('audio/wav; codecs="1"') || audioTest.canPlayType("audio/wav")).replace(/^no$/, ""),
            aac: !!audioTest.canPlayType("audio/aac;").replace(/^no$/, ""),
            caf: !!audioTest.canPlayType("audio/x-caf;").replace(/^no$/, ""),
            m4a: !!(audioTest.canPlayType("audio/x-m4a;") || audioTest.canPlayType("audio/m4a;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
            m4b: !!(audioTest.canPlayType("audio/x-m4b;") || audioTest.canPlayType("audio/m4b;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
            mp4: !!(audioTest.canPlayType("audio/x-mp4;") || audioTest.canPlayType("audio/mp4;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
            weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
            webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
            dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
            flac: !!(audioTest.canPlayType("audio/x-flac;") || audioTest.canPlayType("audio/flac;")).replace(/^no$/, "")
          };
          return self2;
        },
        _unlockAudio: function() {
          var self2 = this || Howler3;
          if (self2._audioUnlocked || !self2.ctx) {
            return;
          }
          self2._audioUnlocked = false;
          self2.autoUnlock = false;
          if (!self2._mobileUnloaded && self2.ctx.sampleRate !== 44100) {
            self2._mobileUnloaded = true;
            self2.unload();
          }
          self2._scratchBuffer = self2.ctx.createBuffer(1, 1, 22050);
          var unlock = function(e) {
            while (self2._html5AudioPool.length < self2.html5PoolSize) {
              try {
                var audioNode = new Audio();
                audioNode._unlocked = true;
                self2._releaseHtml5Audio(audioNode);
              } catch (e2) {
                self2.noAudio = true;
                break;
              }
            }
            for (var i = 0; i < self2._howls.length; i++) {
              if (!self2._howls[i]._webAudio) {
                var ids = self2._howls[i]._getSoundIds();
                for (var j = 0; j < ids.length; j++) {
                  var sound = self2._howls[i]._soundById(ids[j]);
                  if (sound && sound._node && !sound._node._unlocked) {
                    sound._node._unlocked = true;
                    sound._node.load();
                  }
                }
              }
            }
            self2._autoResume();
            var source = self2.ctx.createBufferSource();
            source.buffer = self2._scratchBuffer;
            source.connect(self2.ctx.destination);
            if (typeof source.start === "undefined") {
              source.noteOn(0);
            } else {
              source.start(0);
            }
            if (typeof self2.ctx.resume === "function") {
              self2.ctx.resume();
            }
            source.onended = function() {
              source.disconnect(0);
              self2._audioUnlocked = true;
              document.removeEventListener("touchstart", unlock, true);
              document.removeEventListener("touchend", unlock, true);
              document.removeEventListener("click", unlock, true);
              document.removeEventListener("keydown", unlock, true);
              for (var i2 = 0; i2 < self2._howls.length; i2++) {
                self2._howls[i2]._emit("unlock");
              }
            };
          };
          document.addEventListener("touchstart", unlock, true);
          document.addEventListener("touchend", unlock, true);
          document.addEventListener("click", unlock, true);
          document.addEventListener("keydown", unlock, true);
          return self2;
        },
        _obtainHtml5Audio: function() {
          var self2 = this || Howler3;
          if (self2._html5AudioPool.length) {
            return self2._html5AudioPool.pop();
          }
          var testPlay = new Audio().play();
          if (testPlay && typeof Promise !== "undefined" && (testPlay instanceof Promise || typeof testPlay.then === "function")) {
            testPlay.catch(function() {
              console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.");
            });
          }
          return new Audio();
        },
        _releaseHtml5Audio: function(audio) {
          var self2 = this || Howler3;
          if (audio._unlocked) {
            self2._html5AudioPool.push(audio);
          }
          return self2;
        },
        _autoSuspend: function() {
          var self2 = this;
          if (!self2.autoSuspend || !self2.ctx || typeof self2.ctx.suspend === "undefined" || !Howler3.usingWebAudio) {
            return;
          }
          for (var i = 0; i < self2._howls.length; i++) {
            if (self2._howls[i]._webAudio) {
              for (var j = 0; j < self2._howls[i]._sounds.length; j++) {
                if (!self2._howls[i]._sounds[j]._paused) {
                  return self2;
                }
              }
            }
          }
          if (self2._suspendTimer) {
            clearTimeout(self2._suspendTimer);
          }
          self2._suspendTimer = setTimeout(function() {
            if (!self2.autoSuspend) {
              return;
            }
            self2._suspendTimer = null;
            self2.state = "suspending";
            var handleSuspension = function() {
              self2.state = "suspended";
              if (self2._resumeAfterSuspend) {
                delete self2._resumeAfterSuspend;
                self2._autoResume();
              }
            };
            self2.ctx.suspend().then(handleSuspension, handleSuspension);
          }, 3e4);
          return self2;
        },
        _autoResume: function() {
          var self2 = this;
          if (!self2.ctx || typeof self2.ctx.resume === "undefined" || !Howler3.usingWebAudio) {
            return;
          }
          if (self2.state === "running" && self2.ctx.state !== "interrupted" && self2._suspendTimer) {
            clearTimeout(self2._suspendTimer);
            self2._suspendTimer = null;
          } else if (self2.state === "suspended" || self2.state === "running" && self2.ctx.state === "interrupted") {
            self2.ctx.resume().then(function() {
              self2.state = "running";
              for (var i = 0; i < self2._howls.length; i++) {
                self2._howls[i]._emit("resume");
              }
            });
            if (self2._suspendTimer) {
              clearTimeout(self2._suspendTimer);
              self2._suspendTimer = null;
            }
          } else if (self2.state === "suspending") {
            self2._resumeAfterSuspend = true;
          }
          return self2;
        }
      };
      var Howler3 = new HowlerGlobal2();
      var Howl3 = function(o) {
        var self2 = this;
        if (!o.src || o.src.length === 0) {
          console.error("An array of source files must be passed with any new Howl.");
          return;
        }
        self2.init(o);
      };
      Howl3.prototype = {
        init: function(o) {
          var self2 = this;
          if (!Howler3.ctx) {
            setupAudioContext();
          }
          self2._autoplay = o.autoplay || false;
          self2._format = typeof o.format !== "string" ? o.format : [o.format];
          self2._html5 = o.html5 || false;
          self2._muted = o.mute || false;
          self2._loop = o.loop || false;
          self2._pool = o.pool || 5;
          self2._preload = typeof o.preload === "boolean" || o.preload === "metadata" ? o.preload : true;
          self2._rate = o.rate || 1;
          self2._sprite = o.sprite || {};
          self2._src = typeof o.src !== "string" ? o.src : [o.src];
          self2._volume = o.volume !== void 0 ? o.volume : 1;
          self2._xhr = {
            method: o.xhr && o.xhr.method ? o.xhr.method : "GET",
            headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,
            withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false
          };
          self2._duration = 0;
          self2._state = "unloaded";
          self2._sounds = [];
          self2._endTimers = {};
          self2._queue = [];
          self2._playLock = false;
          self2._onend = o.onend ? [{ fn: o.onend }] : [];
          self2._onfade = o.onfade ? [{ fn: o.onfade }] : [];
          self2._onload = o.onload ? [{ fn: o.onload }] : [];
          self2._onloaderror = o.onloaderror ? [{ fn: o.onloaderror }] : [];
          self2._onplayerror = o.onplayerror ? [{ fn: o.onplayerror }] : [];
          self2._onpause = o.onpause ? [{ fn: o.onpause }] : [];
          self2._onplay = o.onplay ? [{ fn: o.onplay }] : [];
          self2._onstop = o.onstop ? [{ fn: o.onstop }] : [];
          self2._onmute = o.onmute ? [{ fn: o.onmute }] : [];
          self2._onvolume = o.onvolume ? [{ fn: o.onvolume }] : [];
          self2._onrate = o.onrate ? [{ fn: o.onrate }] : [];
          self2._onseek = o.onseek ? [{ fn: o.onseek }] : [];
          self2._onunlock = o.onunlock ? [{ fn: o.onunlock }] : [];
          self2._onresume = [];
          self2._webAudio = Howler3.usingWebAudio && !self2._html5;
          if (typeof Howler3.ctx !== "undefined" && Howler3.ctx && Howler3.autoUnlock) {
            Howler3._unlockAudio();
          }
          Howler3._howls.push(self2);
          if (self2._autoplay) {
            self2._queue.push({
              event: "play",
              action: function() {
                self2.play();
              }
            });
          }
          if (self2._preload && self2._preload !== "none") {
            self2.load();
          }
          return self2;
        },
        load: function() {
          var self2 = this;
          var url2 = null;
          if (Howler3.noAudio) {
            self2._emit("loaderror", null, "No audio support.");
            return;
          }
          if (typeof self2._src === "string") {
            self2._src = [self2._src];
          }
          for (var i = 0; i < self2._src.length; i++) {
            var ext, str2;
            if (self2._format && self2._format[i]) {
              ext = self2._format[i];
            } else {
              str2 = self2._src[i];
              if (typeof str2 !== "string") {
                self2._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              ext = /^data:audio\/([^;,]+);/i.exec(str2);
              if (!ext) {
                ext = /\.([^.]+)$/.exec(str2.split("?", 1)[0]);
              }
              if (ext) {
                ext = ext[1].toLowerCase();
              }
            }
            if (!ext) {
              console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
            }
            if (ext && Howler3.codecs(ext)) {
              url2 = self2._src[i];
              break;
            }
          }
          if (!url2) {
            self2._emit("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
          self2._src = url2;
          self2._state = "loading";
          if (window.location.protocol === "https:" && url2.slice(0, 5) === "http:") {
            self2._html5 = true;
            self2._webAudio = false;
          }
          new Sound2(self2);
          if (self2._webAudio) {
            loadBuffer(self2);
          }
          return self2;
        },
        play: function(sprite, internal) {
          var self2 = this;
          var id = null;
          if (typeof sprite === "number") {
            id = sprite;
            sprite = null;
          } else if (typeof sprite === "string" && self2._state === "loaded" && !self2._sprite[sprite]) {
            return null;
          } else if (typeof sprite === "undefined") {
            sprite = "__default";
            if (!self2._playLock) {
              var num = 0;
              for (var i = 0; i < self2._sounds.length; i++) {
                if (self2._sounds[i]._paused && !self2._sounds[i]._ended) {
                  num++;
                  id = self2._sounds[i]._id;
                }
              }
              if (num === 1) {
                sprite = null;
              } else {
                id = null;
              }
            }
          }
          var sound = id ? self2._soundById(id) : self2._inactiveSound();
          if (!sound) {
            return null;
          }
          if (id && !sprite) {
            sprite = sound._sprite || "__default";
          }
          if (self2._state !== "loaded") {
            sound._sprite = sprite;
            sound._ended = false;
            var soundId = sound._id;
            self2._queue.push({
              event: "play",
              action: function() {
                self2.play(soundId);
              }
            });
            return soundId;
          }
          if (id && !sound._paused) {
            if (!internal) {
              self2._loadQueue("play");
            }
            return sound._id;
          }
          if (self2._webAudio) {
            Howler3._autoResume();
          }
          var seek = Math.max(0, sound._seek > 0 ? sound._seek : self2._sprite[sprite][0] / 1e3);
          var duration = Math.max(0, (self2._sprite[sprite][0] + self2._sprite[sprite][1]) / 1e3 - seek);
          var timeout = duration * 1e3 / Math.abs(sound._rate);
          var start = self2._sprite[sprite][0] / 1e3;
          var stop = (self2._sprite[sprite][0] + self2._sprite[sprite][1]) / 1e3;
          sound._sprite = sprite;
          sound._ended = false;
          var setParams = function() {
            sound._paused = false;
            sound._seek = seek;
            sound._start = start;
            sound._stop = stop;
            sound._loop = !!(sound._loop || self2._sprite[sprite][2]);
          };
          if (seek >= stop) {
            self2._ended(sound);
            return;
          }
          var node = sound._node;
          if (self2._webAudio) {
            var playWebAudio = function() {
              self2._playLock = false;
              setParams();
              self2._refreshBuffer(sound);
              var vol = sound._muted || self2._muted ? 0 : sound._volume;
              node.gain.setValueAtTime(vol, Howler3.ctx.currentTime);
              sound._playStart = Howler3.ctx.currentTime;
              if (typeof node.bufferSource.start === "undefined") {
                sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
              } else {
                sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
              }
              if (timeout !== Infinity) {
                self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
              }
              if (!internal) {
                setTimeout(function() {
                  self2._emit("play", sound._id);
                  self2._loadQueue();
                }, 0);
              }
            };
            if (Howler3.state === "running" && Howler3.ctx.state !== "interrupted") {
              playWebAudio();
            } else {
              self2._playLock = true;
              self2.once("resume", playWebAudio);
              self2._clearTimer(sound._id);
            }
          } else {
            var playHtml5 = function() {
              node.currentTime = seek;
              node.muted = sound._muted || self2._muted || Howler3._muted || node.muted;
              node.volume = sound._volume * Howler3.volume();
              node.playbackRate = sound._rate;
              try {
                var play = node.play();
                if (play && typeof Promise !== "undefined" && (play instanceof Promise || typeof play.then === "function")) {
                  self2._playLock = true;
                  setParams();
                  play.then(function() {
                    self2._playLock = false;
                    node._unlocked = true;
                    if (!internal) {
                      self2._emit("play", sound._id);
                    } else {
                      self2._loadQueue();
                    }
                  }).catch(function() {
                    self2._playLock = false;
                    self2._emit("playerror", sound._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                    sound._ended = true;
                    sound._paused = true;
                  });
                } else if (!internal) {
                  self2._playLock = false;
                  setParams();
                  self2._emit("play", sound._id);
                }
                node.playbackRate = sound._rate;
                if (node.paused) {
                  self2._emit("playerror", sound._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                  return;
                }
                if (sprite !== "__default" || sound._loop) {
                  self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
                } else {
                  self2._endTimers[sound._id] = function() {
                    self2._ended(sound);
                    node.removeEventListener("ended", self2._endTimers[sound._id], false);
                  };
                  node.addEventListener("ended", self2._endTimers[sound._id], false);
                }
              } catch (err) {
                self2._emit("playerror", sound._id, err);
              }
            };
            if (node.src === "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA") {
              node.src = self2._src;
              node.load();
            }
            var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler3._navigator.isCocoonJS;
            if (node.readyState >= 3 || loadedNoReadyState) {
              playHtml5();
            } else {
              self2._playLock = true;
              self2._state = "loading";
              var listener = function() {
                self2._state = "loaded";
                playHtml5();
                node.removeEventListener(Howler3._canPlayEvent, listener, false);
              };
              node.addEventListener(Howler3._canPlayEvent, listener, false);
              self2._clearTimer(sound._id);
            }
          }
          return sound._id;
        },
        pause: function(id) {
          var self2 = this;
          if (self2._state !== "loaded" || self2._playLock) {
            self2._queue.push({
              event: "pause",
              action: function() {
                self2.pause(id);
              }
            });
            return self2;
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            self2._clearTimer(ids[i]);
            var sound = self2._soundById(ids[i]);
            if (sound && !sound._paused) {
              sound._seek = self2.seek(ids[i]);
              sound._rateSeek = 0;
              sound._paused = true;
              self2._stopFade(ids[i]);
              if (sound._node) {
                if (self2._webAudio) {
                  if (!sound._node.bufferSource) {
                    continue;
                  }
                  if (typeof sound._node.bufferSource.stop === "undefined") {
                    sound._node.bufferSource.noteOff(0);
                  } else {
                    sound._node.bufferSource.stop(0);
                  }
                  self2._cleanBuffer(sound._node);
                } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                  sound._node.pause();
                }
              }
            }
            if (!arguments[1]) {
              self2._emit("pause", sound ? sound._id : null);
            }
          }
          return self2;
        },
        stop: function(id, internal) {
          var self2 = this;
          if (self2._state !== "loaded" || self2._playLock) {
            self2._queue.push({
              event: "stop",
              action: function() {
                self2.stop(id);
              }
            });
            return self2;
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            self2._clearTimer(ids[i]);
            var sound = self2._soundById(ids[i]);
            if (sound) {
              sound._seek = sound._start || 0;
              sound._rateSeek = 0;
              sound._paused = true;
              sound._ended = true;
              self2._stopFade(ids[i]);
              if (sound._node) {
                if (self2._webAudio) {
                  if (sound._node.bufferSource) {
                    if (typeof sound._node.bufferSource.stop === "undefined") {
                      sound._node.bufferSource.noteOff(0);
                    } else {
                      sound._node.bufferSource.stop(0);
                    }
                    self2._cleanBuffer(sound._node);
                  }
                } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                  sound._node.currentTime = sound._start || 0;
                  sound._node.pause();
                  if (sound._node.duration === Infinity) {
                    self2._clearSound(sound._node);
                  }
                }
              }
              if (!internal) {
                self2._emit("stop", sound._id);
              }
            }
          }
          return self2;
        },
        mute: function(muted, id) {
          var self2 = this;
          if (self2._state !== "loaded" || self2._playLock) {
            self2._queue.push({
              event: "mute",
              action: function() {
                self2.mute(muted, id);
              }
            });
            return self2;
          }
          if (typeof id === "undefined") {
            if (typeof muted === "boolean") {
              self2._muted = muted;
            } else {
              return self2._muted;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            var sound = self2._soundById(ids[i]);
            if (sound) {
              sound._muted = muted;
              if (sound._interval) {
                self2._stopFade(sound._id);
              }
              if (self2._webAudio && sound._node) {
                sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler3.ctx.currentTime);
              } else if (sound._node) {
                sound._node.muted = Howler3._muted ? true : muted;
              }
              self2._emit("mute", sound._id);
            }
          }
          return self2;
        },
        volume: function() {
          var self2 = this;
          var args = arguments;
          var vol, id;
          if (args.length === 0) {
            return self2._volume;
          } else if (args.length === 1 || args.length === 2 && typeof args[1] === "undefined") {
            var ids = self2._getSoundIds();
            var index = ids.indexOf(args[0]);
            if (index >= 0) {
              id = parseInt(args[0], 10);
            } else {
              vol = parseFloat(args[0]);
            }
          } else if (args.length >= 2) {
            vol = parseFloat(args[0]);
            id = parseInt(args[1], 10);
          }
          var sound;
          if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "volume",
                action: function() {
                  self2.volume.apply(self2, args);
                }
              });
              return self2;
            }
            if (typeof id === "undefined") {
              self2._volume = vol;
            }
            id = self2._getSoundIds(id);
            for (var i = 0; i < id.length; i++) {
              sound = self2._soundById(id[i]);
              if (sound) {
                sound._volume = vol;
                if (!args[2]) {
                  self2._stopFade(id[i]);
                }
                if (self2._webAudio && sound._node && !sound._muted) {
                  sound._node.gain.setValueAtTime(vol, Howler3.ctx.currentTime);
                } else if (sound._node && !sound._muted) {
                  sound._node.volume = vol * Howler3.volume();
                }
                self2._emit("volume", sound._id);
              }
            }
          } else {
            sound = id ? self2._soundById(id) : self2._sounds[0];
            return sound ? sound._volume : 0;
          }
          return self2;
        },
        fade: function(from2, to2, len, id) {
          var self2 = this;
          if (self2._state !== "loaded" || self2._playLock) {
            self2._queue.push({
              event: "fade",
              action: function() {
                self2.fade(from2, to2, len, id);
              }
            });
            return self2;
          }
          from2 = Math.min(Math.max(0, parseFloat(from2)), 1);
          to2 = Math.min(Math.max(0, parseFloat(to2)), 1);
          len = parseFloat(len);
          self2.volume(from2, id);
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            var sound = self2._soundById(ids[i]);
            if (sound) {
              if (!id) {
                self2._stopFade(ids[i]);
              }
              if (self2._webAudio && !sound._muted) {
                var currentTime = Howler3.ctx.currentTime;
                var end = currentTime + len / 1e3;
                sound._volume = from2;
                sound._node.gain.setValueAtTime(from2, currentTime);
                sound._node.gain.linearRampToValueAtTime(to2, end);
              }
              self2._startFadeInterval(sound, from2, to2, len, ids[i], typeof id === "undefined");
            }
          }
          return self2;
        },
        _startFadeInterval: function(sound, from2, to2, len, id, isGroup) {
          var self2 = this;
          var vol = from2;
          var diff = to2 - from2;
          var steps = Math.abs(diff / 0.01);
          var stepLen = Math.max(4, steps > 0 ? len / steps : len);
          var lastTick = Date.now();
          sound._fadeTo = to2;
          sound._interval = setInterval(function() {
            var tick = (Date.now() - lastTick) / len;
            lastTick = Date.now();
            vol += diff * tick;
            vol = Math.round(vol * 100) / 100;
            if (diff < 0) {
              vol = Math.max(to2, vol);
            } else {
              vol = Math.min(to2, vol);
            }
            if (self2._webAudio) {
              sound._volume = vol;
            } else {
              self2.volume(vol, sound._id, true);
            }
            if (isGroup) {
              self2._volume = vol;
            }
            if (to2 < from2 && vol <= to2 || to2 > from2 && vol >= to2) {
              clearInterval(sound._interval);
              sound._interval = null;
              sound._fadeTo = null;
              self2.volume(to2, sound._id);
              self2._emit("fade", sound._id);
            }
          }, stepLen);
        },
        _stopFade: function(id) {
          var self2 = this;
          var sound = self2._soundById(id);
          if (sound && sound._interval) {
            if (self2._webAudio) {
              sound._node.gain.cancelScheduledValues(Howler3.ctx.currentTime);
            }
            clearInterval(sound._interval);
            sound._interval = null;
            self2.volume(sound._fadeTo, id);
            sound._fadeTo = null;
            self2._emit("fade", id);
          }
          return self2;
        },
        loop: function() {
          var self2 = this;
          var args = arguments;
          var loop, id, sound;
          if (args.length === 0) {
            return self2._loop;
          } else if (args.length === 1) {
            if (typeof args[0] === "boolean") {
              loop = args[0];
              self2._loop = loop;
            } else {
              sound = self2._soundById(parseInt(args[0], 10));
              return sound ? sound._loop : false;
            }
          } else if (args.length === 2) {
            loop = args[0];
            id = parseInt(args[1], 10);
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            sound = self2._soundById(ids[i]);
            if (sound) {
              sound._loop = loop;
              if (self2._webAudio && sound._node && sound._node.bufferSource) {
                sound._node.bufferSource.loop = loop;
                if (loop) {
                  sound._node.bufferSource.loopStart = sound._start || 0;
                  sound._node.bufferSource.loopEnd = sound._stop;
                  if (self2.playing(ids[i])) {
                    self2.pause(ids[i], true);
                    self2.play(ids[i], true);
                  }
                }
              }
            }
          }
          return self2;
        },
        rate: function() {
          var self2 = this;
          var args = arguments;
          var rate, id;
          if (args.length === 0) {
            id = self2._sounds[0]._id;
          } else if (args.length === 1) {
            var ids = self2._getSoundIds();
            var index = ids.indexOf(args[0]);
            if (index >= 0) {
              id = parseInt(args[0], 10);
            } else {
              rate = parseFloat(args[0]);
            }
          } else if (args.length === 2) {
            rate = parseFloat(args[0]);
            id = parseInt(args[1], 10);
          }
          var sound;
          if (typeof rate === "number") {
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "rate",
                action: function() {
                  self2.rate.apply(self2, args);
                }
              });
              return self2;
            }
            if (typeof id === "undefined") {
              self2._rate = rate;
            }
            id = self2._getSoundIds(id);
            for (var i = 0; i < id.length; i++) {
              sound = self2._soundById(id[i]);
              if (sound) {
                if (self2.playing(id[i])) {
                  sound._rateSeek = self2.seek(id[i]);
                  sound._playStart = self2._webAudio ? Howler3.ctx.currentTime : sound._playStart;
                }
                sound._rate = rate;
                if (self2._webAudio && sound._node && sound._node.bufferSource) {
                  sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler3.ctx.currentTime);
                } else if (sound._node) {
                  sound._node.playbackRate = rate;
                }
                var seek = self2.seek(id[i]);
                var duration = (self2._sprite[sound._sprite][0] + self2._sprite[sound._sprite][1]) / 1e3 - seek;
                var timeout = duration * 1e3 / Math.abs(sound._rate);
                if (self2._endTimers[id[i]] || !sound._paused) {
                  self2._clearTimer(id[i]);
                  self2._endTimers[id[i]] = setTimeout(self2._ended.bind(self2, sound), timeout);
                }
                self2._emit("rate", sound._id);
              }
            }
          } else {
            sound = self2._soundById(id);
            return sound ? sound._rate : self2._rate;
          }
          return self2;
        },
        seek: function() {
          var self2 = this;
          var args = arguments;
          var seek, id;
          if (args.length === 0) {
            if (self2._sounds.length) {
              id = self2._sounds[0]._id;
            }
          } else if (args.length === 1) {
            var ids = self2._getSoundIds();
            var index = ids.indexOf(args[0]);
            if (index >= 0) {
              id = parseInt(args[0], 10);
            } else if (self2._sounds.length) {
              id = self2._sounds[0]._id;
              seek = parseFloat(args[0]);
            }
          } else if (args.length === 2) {
            seek = parseFloat(args[0]);
            id = parseInt(args[1], 10);
          }
          if (typeof id === "undefined") {
            return 0;
          }
          if (typeof seek === "number" && (self2._state !== "loaded" || self2._playLock)) {
            self2._queue.push({
              event: "seek",
              action: function() {
                self2.seek.apply(self2, args);
              }
            });
            return self2;
          }
          var sound = self2._soundById(id);
          if (sound) {
            if (typeof seek === "number" && seek >= 0) {
              var playing = self2.playing(id);
              if (playing) {
                self2.pause(id, true);
              }
              sound._seek = seek;
              sound._ended = false;
              self2._clearTimer(id);
              if (!self2._webAudio && sound._node && !isNaN(sound._node.duration)) {
                sound._node.currentTime = seek;
              }
              var seekAndEmit = function() {
                if (playing) {
                  self2.play(id, true);
                }
                self2._emit("seek", id);
              };
              if (playing && !self2._webAudio) {
                var emitSeek = function() {
                  if (!self2._playLock) {
                    seekAndEmit();
                  } else {
                    setTimeout(emitSeek, 0);
                  }
                };
                setTimeout(emitSeek, 0);
              } else {
                seekAndEmit();
              }
            } else {
              if (self2._webAudio) {
                var realTime = self2.playing(id) ? Howler3.ctx.currentTime - sound._playStart : 0;
                var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
                return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
              } else {
                return sound._node.currentTime;
              }
            }
          }
          return self2;
        },
        playing: function(id) {
          var self2 = this;
          if (typeof id === "number") {
            var sound = self2._soundById(id);
            return sound ? !sound._paused : false;
          }
          for (var i = 0; i < self2._sounds.length; i++) {
            if (!self2._sounds[i]._paused) {
              return true;
            }
          }
          return false;
        },
        duration: function(id) {
          var self2 = this;
          var duration = self2._duration;
          var sound = self2._soundById(id);
          if (sound) {
            duration = self2._sprite[sound._sprite][1] / 1e3;
          }
          return duration;
        },
        state: function() {
          return this._state;
        },
        unload: function() {
          var self2 = this;
          var sounds = self2._sounds;
          for (var i = 0; i < sounds.length; i++) {
            if (!sounds[i]._paused) {
              self2.stop(sounds[i]._id);
            }
            if (!self2._webAudio) {
              self2._clearSound(sounds[i]._node);
              sounds[i]._node.removeEventListener("error", sounds[i]._errorFn, false);
              sounds[i]._node.removeEventListener(Howler3._canPlayEvent, sounds[i]._loadFn, false);
              sounds[i]._node.removeEventListener("ended", sounds[i]._endFn, false);
              Howler3._releaseHtml5Audio(sounds[i]._node);
            }
            delete sounds[i]._node;
            self2._clearTimer(sounds[i]._id);
          }
          var index = Howler3._howls.indexOf(self2);
          if (index >= 0) {
            Howler3._howls.splice(index, 1);
          }
          var remCache = true;
          for (i = 0; i < Howler3._howls.length; i++) {
            if (Howler3._howls[i]._src === self2._src || self2._src.indexOf(Howler3._howls[i]._src) >= 0) {
              remCache = false;
              break;
            }
          }
          if (cache2 && remCache) {
            delete cache2[self2._src];
          }
          Howler3.noAudio = false;
          self2._state = "unloaded";
          self2._sounds = [];
          self2 = null;
          return null;
        },
        on: function(event, fn, id, once) {
          var self2 = this;
          var events = self2["_on" + event];
          if (typeof fn === "function") {
            events.push(once ? { id, fn, once } : { id, fn });
          }
          return self2;
        },
        off: function(event, fn, id) {
          var self2 = this;
          var events = self2["_on" + event];
          var i = 0;
          if (typeof fn === "number") {
            id = fn;
            fn = null;
          }
          if (fn || id) {
            for (i = 0; i < events.length; i++) {
              var isId = id === events[i].id;
              if (fn === events[i].fn && isId || !fn && isId) {
                events.splice(i, 1);
                break;
              }
            }
          } else if (event) {
            self2["_on" + event] = [];
          } else {
            var keys = Object.keys(self2);
            for (i = 0; i < keys.length; i++) {
              if (keys[i].indexOf("_on") === 0 && Array.isArray(self2[keys[i]])) {
                self2[keys[i]] = [];
              }
            }
          }
          return self2;
        },
        once: function(event, fn, id) {
          var self2 = this;
          self2.on(event, fn, id, 1);
          return self2;
        },
        _emit: function(event, id, msg) {
          var self2 = this;
          var events = self2["_on" + event];
          for (var i = events.length - 1; i >= 0; i--) {
            if (!events[i].id || events[i].id === id || event === "load") {
              setTimeout(function(fn) {
                fn.call(this, id, msg);
              }.bind(self2, events[i].fn), 0);
              if (events[i].once) {
                self2.off(event, events[i].fn, events[i].id);
              }
            }
          }
          self2._loadQueue(event);
          return self2;
        },
        _loadQueue: function(event) {
          var self2 = this;
          if (self2._queue.length > 0) {
            var task = self2._queue[0];
            if (task.event === event) {
              self2._queue.shift();
              self2._loadQueue();
            }
            if (!event) {
              task.action();
            }
          }
          return self2;
        },
        _ended: function(sound) {
          var self2 = this;
          var sprite = sound._sprite;
          if (!self2._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
            setTimeout(self2._ended.bind(self2, sound), 100);
            return self2;
          }
          var loop = !!(sound._loop || self2._sprite[sprite][2]);
          self2._emit("end", sound._id);
          if (!self2._webAudio && loop) {
            self2.stop(sound._id, true).play(sound._id);
          }
          if (self2._webAudio && loop) {
            self2._emit("play", sound._id);
            sound._seek = sound._start || 0;
            sound._rateSeek = 0;
            sound._playStart = Howler3.ctx.currentTime;
            var timeout = (sound._stop - sound._start) * 1e3 / Math.abs(sound._rate);
            self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
          }
          if (self2._webAudio && !loop) {
            sound._paused = true;
            sound._ended = true;
            sound._seek = sound._start || 0;
            sound._rateSeek = 0;
            self2._clearTimer(sound._id);
            self2._cleanBuffer(sound._node);
            Howler3._autoSuspend();
          }
          if (!self2._webAudio && !loop) {
            self2.stop(sound._id, true);
          }
          return self2;
        },
        _clearTimer: function(id) {
          var self2 = this;
          if (self2._endTimers[id]) {
            if (typeof self2._endTimers[id] !== "function") {
              clearTimeout(self2._endTimers[id]);
            } else {
              var sound = self2._soundById(id);
              if (sound && sound._node) {
                sound._node.removeEventListener("ended", self2._endTimers[id], false);
              }
            }
            delete self2._endTimers[id];
          }
          return self2;
        },
        _soundById: function(id) {
          var self2 = this;
          for (var i = 0; i < self2._sounds.length; i++) {
            if (id === self2._sounds[i]._id) {
              return self2._sounds[i];
            }
          }
          return null;
        },
        _inactiveSound: function() {
          var self2 = this;
          self2._drain();
          for (var i = 0; i < self2._sounds.length; i++) {
            if (self2._sounds[i]._ended) {
              return self2._sounds[i].reset();
            }
          }
          return new Sound2(self2);
        },
        _drain: function() {
          var self2 = this;
          var limit = self2._pool;
          var cnt = 0;
          var i = 0;
          if (self2._sounds.length < limit) {
            return;
          }
          for (i = 0; i < self2._sounds.length; i++) {
            if (self2._sounds[i]._ended) {
              cnt++;
            }
          }
          for (i = self2._sounds.length - 1; i >= 0; i--) {
            if (cnt <= limit) {
              return;
            }
            if (self2._sounds[i]._ended) {
              if (self2._webAudio && self2._sounds[i]._node) {
                self2._sounds[i]._node.disconnect(0);
              }
              self2._sounds.splice(i, 1);
              cnt--;
            }
          }
        },
        _getSoundIds: function(id) {
          var self2 = this;
          if (typeof id === "undefined") {
            var ids = [];
            for (var i = 0; i < self2._sounds.length; i++) {
              ids.push(self2._sounds[i]._id);
            }
            return ids;
          } else {
            return [id];
          }
        },
        _refreshBuffer: function(sound) {
          var self2 = this;
          sound._node.bufferSource = Howler3.ctx.createBufferSource();
          sound._node.bufferSource.buffer = cache2[self2._src];
          if (sound._panner) {
            sound._node.bufferSource.connect(sound._panner);
          } else {
            sound._node.bufferSource.connect(sound._node);
          }
          sound._node.bufferSource.loop = sound._loop;
          if (sound._loop) {
            sound._node.bufferSource.loopStart = sound._start || 0;
            sound._node.bufferSource.loopEnd = sound._stop || 0;
          }
          sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler3.ctx.currentTime);
          return self2;
        },
        _cleanBuffer: function(node) {
          var self2 = this;
          var isIOS = Howler3._navigator && Howler3._navigator.vendor.indexOf("Apple") >= 0;
          if (Howler3._scratchBuffer && node.bufferSource) {
            node.bufferSource.onended = null;
            node.bufferSource.disconnect(0);
            if (isIOS) {
              try {
                node.bufferSource.buffer = Howler3._scratchBuffer;
              } catch (e) {
              }
            }
          }
          node.bufferSource = null;
          return self2;
        },
        _clearSound: function(node) {
          var checkIE = /MSIE |Trident\//.test(Howler3._navigator && Howler3._navigator.userAgent);
          if (!checkIE) {
            node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
          }
        }
      };
      var Sound2 = function(howl) {
        this._parent = howl;
        this.init();
      };
      Sound2.prototype = {
        init: function() {
          var self2 = this;
          var parent = self2._parent;
          self2._muted = parent._muted;
          self2._loop = parent._loop;
          self2._volume = parent._volume;
          self2._rate = parent._rate;
          self2._seek = 0;
          self2._paused = true;
          self2._ended = true;
          self2._sprite = "__default";
          self2._id = ++Howler3._counter;
          parent._sounds.push(self2);
          self2.create();
          return self2;
        },
        create: function() {
          var self2 = this;
          var parent = self2._parent;
          var volume = Howler3._muted || self2._muted || self2._parent._muted ? 0 : self2._volume;
          if (parent._webAudio) {
            self2._node = typeof Howler3.ctx.createGain === "undefined" ? Howler3.ctx.createGainNode() : Howler3.ctx.createGain();
            self2._node.gain.setValueAtTime(volume, Howler3.ctx.currentTime);
            self2._node.paused = true;
            self2._node.connect(Howler3.masterGain);
          } else if (!Howler3.noAudio) {
            self2._node = Howler3._obtainHtml5Audio();
            self2._errorFn = self2._errorListener.bind(self2);
            self2._node.addEventListener("error", self2._errorFn, false);
            self2._loadFn = self2._loadListener.bind(self2);
            self2._node.addEventListener(Howler3._canPlayEvent, self2._loadFn, false);
            self2._endFn = self2._endListener.bind(self2);
            self2._node.addEventListener("ended", self2._endFn, false);
            self2._node.src = parent._src;
            self2._node.preload = parent._preload === true ? "auto" : parent._preload;
            self2._node.volume = volume * Howler3.volume();
            self2._node.load();
          }
          return self2;
        },
        reset: function() {
          var self2 = this;
          var parent = self2._parent;
          self2._muted = parent._muted;
          self2._loop = parent._loop;
          self2._volume = parent._volume;
          self2._rate = parent._rate;
          self2._seek = 0;
          self2._rateSeek = 0;
          self2._paused = true;
          self2._ended = true;
          self2._sprite = "__default";
          self2._id = ++Howler3._counter;
          return self2;
        },
        _errorListener: function() {
          var self2 = this;
          self2._parent._emit("loaderror", self2._id, self2._node.error ? self2._node.error.code : 0);
          self2._node.removeEventListener("error", self2._errorFn, false);
        },
        _loadListener: function() {
          var self2 = this;
          var parent = self2._parent;
          parent._duration = Math.ceil(self2._node.duration * 10) / 10;
          if (Object.keys(parent._sprite).length === 0) {
            parent._sprite = { __default: [0, parent._duration * 1e3] };
          }
          if (parent._state !== "loaded") {
            parent._state = "loaded";
            parent._emit("load");
            parent._loadQueue();
          }
          self2._node.removeEventListener(Howler3._canPlayEvent, self2._loadFn, false);
        },
        _endListener: function() {
          var self2 = this;
          var parent = self2._parent;
          if (parent._duration === Infinity) {
            parent._duration = Math.ceil(self2._node.duration * 10) / 10;
            if (parent._sprite.__default[1] === Infinity) {
              parent._sprite.__default[1] = parent._duration * 1e3;
            }
            parent._ended(self2);
          }
          self2._node.removeEventListener("ended", self2._endFn, false);
        }
      };
      var cache2 = {};
      var loadBuffer = function(self2) {
        var url2 = self2._src;
        if (cache2[url2]) {
          self2._duration = cache2[url2].duration;
          loadSound(self2);
          return;
        }
        if (/^data:[^;]+;base64,/.test(url2)) {
          var data = atob(url2.split(",")[1]);
          var dataView = new Uint8Array(data.length);
          for (var i = 0; i < data.length; ++i) {
            dataView[i] = data.charCodeAt(i);
          }
          decodeAudioData(dataView.buffer, self2);
        } else {
          var xhr = new XMLHttpRequest();
          xhr.open(self2._xhr.method, url2, true);
          xhr.withCredentials = self2._xhr.withCredentials;
          xhr.responseType = "arraybuffer";
          if (self2._xhr.headers) {
            Object.keys(self2._xhr.headers).forEach(function(key) {
              xhr.setRequestHeader(key, self2._xhr.headers[key]);
            });
          }
          xhr.onload = function() {
            var code = (xhr.status + "")[0];
            if (code !== "0" && code !== "2" && code !== "3") {
              self2._emit("loaderror", null, "Failed loading audio file with status: " + xhr.status + ".");
              return;
            }
            decodeAudioData(xhr.response, self2);
          };
          xhr.onerror = function() {
            if (self2._webAudio) {
              self2._html5 = true;
              self2._webAudio = false;
              self2._sounds = [];
              delete cache2[url2];
              self2.load();
            }
          };
          safeXhrSend(xhr);
        }
      };
      var safeXhrSend = function(xhr) {
        try {
          xhr.send();
        } catch (e) {
          xhr.onerror();
        }
      };
      var decodeAudioData = function(arraybuffer, self2) {
        var error = function() {
          self2._emit("loaderror", null, "Decoding audio data failed.");
        };
        var success = function(buffer) {
          if (buffer && self2._sounds.length > 0) {
            cache2[self2._src] = buffer;
            loadSound(self2, buffer);
          } else {
            error();
          }
        };
        if (typeof Promise !== "undefined" && Howler3.ctx.decodeAudioData.length === 1) {
          Howler3.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
        } else {
          Howler3.ctx.decodeAudioData(arraybuffer, success, error);
        }
      };
      var loadSound = function(self2, buffer) {
        if (buffer && !self2._duration) {
          self2._duration = buffer.duration;
        }
        if (Object.keys(self2._sprite).length === 0) {
          self2._sprite = { __default: [0, self2._duration * 1e3] };
        }
        if (self2._state !== "loaded") {
          self2._state = "loaded";
          self2._emit("load");
          self2._loadQueue();
        }
      };
      var setupAudioContext = function() {
        if (!Howler3.usingWebAudio) {
          return;
        }
        try {
          if (typeof AudioContext !== "undefined") {
            Howler3.ctx = new AudioContext();
          } else if (typeof webkitAudioContext !== "undefined") {
            Howler3.ctx = new webkitAudioContext();
          } else {
            Howler3.usingWebAudio = false;
          }
        } catch (e) {
          Howler3.usingWebAudio = false;
        }
        if (!Howler3.ctx) {
          Howler3.usingWebAudio = false;
        }
        var iOS = /iP(hone|od|ad)/.test(Howler3._navigator && Howler3._navigator.platform);
        var appVersion = Howler3._navigator && Howler3._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
        var version2 = appVersion ? parseInt(appVersion[1], 10) : null;
        if (iOS && version2 && version2 < 9) {
          var safari = /safari/.test(Howler3._navigator && Howler3._navigator.userAgent.toLowerCase());
          if (Howler3._navigator && !safari) {
            Howler3.usingWebAudio = false;
          }
        }
        if (Howler3.usingWebAudio) {
          Howler3.masterGain = typeof Howler3.ctx.createGain === "undefined" ? Howler3.ctx.createGainNode() : Howler3.ctx.createGain();
          Howler3.masterGain.gain.setValueAtTime(Howler3._muted ? 0 : Howler3._volume, Howler3.ctx.currentTime);
          Howler3.masterGain.connect(Howler3.ctx.destination);
        }
        Howler3._setup();
      };
      if (typeof define === "function" && define.amd) {
        define([], function() {
          return {
            Howler: Howler3,
            Howl: Howl3
          };
        });
      }
      if (typeof exports !== "undefined") {
        exports.Howler = Howler3;
        exports.Howl = Howl3;
      }
      if (typeof global !== "undefined") {
        global.HowlerGlobal = HowlerGlobal2;
        global.Howler = Howler3;
        global.Howl = Howl3;
        global.Sound = Sound2;
      } else if (typeof window !== "undefined") {
        window.HowlerGlobal = HowlerGlobal2;
        window.Howler = Howler3;
        window.Howl = Howl3;
        window.Sound = Sound2;
      }
    })();
    (function() {
      "use strict";
      HowlerGlobal.prototype._pos = [0, 0, 0];
      HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
      HowlerGlobal.prototype.stereo = function(pan) {
        var self2 = this;
        if (!self2.ctx || !self2.ctx.listener) {
          return self2;
        }
        for (var i = self2._howls.length - 1; i >= 0; i--) {
          self2._howls[i].stereo(pan);
        }
        return self2;
      };
      HowlerGlobal.prototype.pos = function(x, y, z2) {
        var self2 = this;
        if (!self2.ctx || !self2.ctx.listener) {
          return self2;
        }
        y = typeof y !== "number" ? self2._pos[1] : y;
        z2 = typeof z2 !== "number" ? self2._pos[2] : z2;
        if (typeof x === "number") {
          self2._pos = [x, y, z2];
          if (typeof self2.ctx.listener.positionX !== "undefined") {
            self2.ctx.listener.positionX.setTargetAtTime(self2._pos[0], Howler.ctx.currentTime, 0.1);
            self2.ctx.listener.positionY.setTargetAtTime(self2._pos[1], Howler.ctx.currentTime, 0.1);
            self2.ctx.listener.positionZ.setTargetAtTime(self2._pos[2], Howler.ctx.currentTime, 0.1);
          } else {
            self2.ctx.listener.setPosition(self2._pos[0], self2._pos[1], self2._pos[2]);
          }
        } else {
          return self2._pos;
        }
        return self2;
      };
      HowlerGlobal.prototype.orientation = function(x, y, z2, xUp, yUp, zUp) {
        var self2 = this;
        if (!self2.ctx || !self2.ctx.listener) {
          return self2;
        }
        var or = self2._orientation;
        y = typeof y !== "number" ? or[1] : y;
        z2 = typeof z2 !== "number" ? or[2] : z2;
        xUp = typeof xUp !== "number" ? or[3] : xUp;
        yUp = typeof yUp !== "number" ? or[4] : yUp;
        zUp = typeof zUp !== "number" ? or[5] : zUp;
        if (typeof x === "number") {
          self2._orientation = [x, y, z2, xUp, yUp, zUp];
          if (typeof self2.ctx.listener.forwardX !== "undefined") {
            self2.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
            self2.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
            self2.ctx.listener.forwardZ.setTargetAtTime(z2, Howler.ctx.currentTime, 0.1);
            self2.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);
            self2.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);
            self2.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);
          } else {
            self2.ctx.listener.setOrientation(x, y, z2, xUp, yUp, zUp);
          }
        } else {
          return or;
        }
        return self2;
      };
      Howl.prototype.init = function(_super) {
        return function(o) {
          var self2 = this;
          self2._orientation = o.orientation || [1, 0, 0];
          self2._stereo = o.stereo || null;
          self2._pos = o.pos || null;
          self2._pannerAttr = {
            coneInnerAngle: typeof o.coneInnerAngle !== "undefined" ? o.coneInnerAngle : 360,
            coneOuterAngle: typeof o.coneOuterAngle !== "undefined" ? o.coneOuterAngle : 360,
            coneOuterGain: typeof o.coneOuterGain !== "undefined" ? o.coneOuterGain : 0,
            distanceModel: typeof o.distanceModel !== "undefined" ? o.distanceModel : "inverse",
            maxDistance: typeof o.maxDistance !== "undefined" ? o.maxDistance : 1e4,
            panningModel: typeof o.panningModel !== "undefined" ? o.panningModel : "HRTF",
            refDistance: typeof o.refDistance !== "undefined" ? o.refDistance : 1,
            rolloffFactor: typeof o.rolloffFactor !== "undefined" ? o.rolloffFactor : 1
          };
          self2._onstereo = o.onstereo ? [{ fn: o.onstereo }] : [];
          self2._onpos = o.onpos ? [{ fn: o.onpos }] : [];
          self2._onorientation = o.onorientation ? [{ fn: o.onorientation }] : [];
          return _super.call(this, o);
        };
      }(Howl.prototype.init);
      Howl.prototype.stereo = function(pan, id) {
        var self2 = this;
        if (!self2._webAudio) {
          return self2;
        }
        if (self2._state !== "loaded") {
          self2._queue.push({
            event: "stereo",
            action: function() {
              self2.stereo(pan, id);
            }
          });
          return self2;
        }
        var pannerType = typeof Howler.ctx.createStereoPanner === "undefined" ? "spatial" : "stereo";
        if (typeof id === "undefined") {
          if (typeof pan === "number") {
            self2._stereo = pan;
            self2._pos = [pan, 0, 0];
          } else {
            return self2._stereo;
          }
        }
        var ids = self2._getSoundIds(id);
        for (var i = 0; i < ids.length; i++) {
          var sound = self2._soundById(ids[i]);
          if (sound) {
            if (typeof pan === "number") {
              sound._stereo = pan;
              sound._pos = [pan, 0, 0];
              if (sound._node) {
                sound._pannerAttr.panningModel = "equalpower";
                if (!sound._panner || !sound._panner.pan) {
                  setupPanner(sound, pannerType);
                }
                if (pannerType === "spatial") {
                  if (typeof sound._panner.positionX !== "undefined") {
                    sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
                    sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
                    sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
                  } else {
                    sound._panner.setPosition(pan, 0, 0);
                  }
                } else {
                  sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
                }
              }
              self2._emit("stereo", sound._id);
            } else {
              return sound._stereo;
            }
          }
        }
        return self2;
      };
      Howl.prototype.pos = function(x, y, z2, id) {
        var self2 = this;
        if (!self2._webAudio) {
          return self2;
        }
        if (self2._state !== "loaded") {
          self2._queue.push({
            event: "pos",
            action: function() {
              self2.pos(x, y, z2, id);
            }
          });
          return self2;
        }
        y = typeof y !== "number" ? 0 : y;
        z2 = typeof z2 !== "number" ? -0.5 : z2;
        if (typeof id === "undefined") {
          if (typeof x === "number") {
            self2._pos = [x, y, z2];
          } else {
            return self2._pos;
          }
        }
        var ids = self2._getSoundIds(id);
        for (var i = 0; i < ids.length; i++) {
          var sound = self2._soundById(ids[i]);
          if (sound) {
            if (typeof x === "number") {
              sound._pos = [x, y, z2];
              if (sound._node) {
                if (!sound._panner || sound._panner.pan) {
                  setupPanner(sound, "spatial");
                }
                if (typeof sound._panner.positionX !== "undefined") {
                  sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
                  sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
                  sound._panner.positionZ.setValueAtTime(z2, Howler.ctx.currentTime);
                } else {
                  sound._panner.setPosition(x, y, z2);
                }
              }
              self2._emit("pos", sound._id);
            } else {
              return sound._pos;
            }
          }
        }
        return self2;
      };
      Howl.prototype.orientation = function(x, y, z2, id) {
        var self2 = this;
        if (!self2._webAudio) {
          return self2;
        }
        if (self2._state !== "loaded") {
          self2._queue.push({
            event: "orientation",
            action: function() {
              self2.orientation(x, y, z2, id);
            }
          });
          return self2;
        }
        y = typeof y !== "number" ? self2._orientation[1] : y;
        z2 = typeof z2 !== "number" ? self2._orientation[2] : z2;
        if (typeof id === "undefined") {
          if (typeof x === "number") {
            self2._orientation = [x, y, z2];
          } else {
            return self2._orientation;
          }
        }
        var ids = self2._getSoundIds(id);
        for (var i = 0; i < ids.length; i++) {
          var sound = self2._soundById(ids[i]);
          if (sound) {
            if (typeof x === "number") {
              sound._orientation = [x, y, z2];
              if (sound._node) {
                if (!sound._panner) {
                  if (!sound._pos) {
                    sound._pos = self2._pos || [0, 0, -0.5];
                  }
                  setupPanner(sound, "spatial");
                }
                if (typeof sound._panner.orientationX !== "undefined") {
                  sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
                  sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
                  sound._panner.orientationZ.setValueAtTime(z2, Howler.ctx.currentTime);
                } else {
                  sound._panner.setOrientation(x, y, z2);
                }
              }
              self2._emit("orientation", sound._id);
            } else {
              return sound._orientation;
            }
          }
        }
        return self2;
      };
      Howl.prototype.pannerAttr = function() {
        var self2 = this;
        var args = arguments;
        var o, id, sound;
        if (!self2._webAudio) {
          return self2;
        }
        if (args.length === 0) {
          return self2._pannerAttr;
        } else if (args.length === 1) {
          if (typeof args[0] === "object") {
            o = args[0];
            if (typeof id === "undefined") {
              if (!o.pannerAttr) {
                o.pannerAttr = {
                  coneInnerAngle: o.coneInnerAngle,
                  coneOuterAngle: o.coneOuterAngle,
                  coneOuterGain: o.coneOuterGain,
                  distanceModel: o.distanceModel,
                  maxDistance: o.maxDistance,
                  refDistance: o.refDistance,
                  rolloffFactor: o.rolloffFactor,
                  panningModel: o.panningModel
                };
              }
              self2._pannerAttr = {
                coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== "undefined" ? o.pannerAttr.coneInnerAngle : self2._coneInnerAngle,
                coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== "undefined" ? o.pannerAttr.coneOuterAngle : self2._coneOuterAngle,
                coneOuterGain: typeof o.pannerAttr.coneOuterGain !== "undefined" ? o.pannerAttr.coneOuterGain : self2._coneOuterGain,
                distanceModel: typeof o.pannerAttr.distanceModel !== "undefined" ? o.pannerAttr.distanceModel : self2._distanceModel,
                maxDistance: typeof o.pannerAttr.maxDistance !== "undefined" ? o.pannerAttr.maxDistance : self2._maxDistance,
                refDistance: typeof o.pannerAttr.refDistance !== "undefined" ? o.pannerAttr.refDistance : self2._refDistance,
                rolloffFactor: typeof o.pannerAttr.rolloffFactor !== "undefined" ? o.pannerAttr.rolloffFactor : self2._rolloffFactor,
                panningModel: typeof o.pannerAttr.panningModel !== "undefined" ? o.pannerAttr.panningModel : self2._panningModel
              };
            }
          } else {
            sound = self2._soundById(parseInt(args[0], 10));
            return sound ? sound._pannerAttr : self2._pannerAttr;
          }
        } else if (args.length === 2) {
          o = args[0];
          id = parseInt(args[1], 10);
        }
        var ids = self2._getSoundIds(id);
        for (var i = 0; i < ids.length; i++) {
          sound = self2._soundById(ids[i]);
          if (sound) {
            var pa = sound._pannerAttr;
            pa = {
              coneInnerAngle: typeof o.coneInnerAngle !== "undefined" ? o.coneInnerAngle : pa.coneInnerAngle,
              coneOuterAngle: typeof o.coneOuterAngle !== "undefined" ? o.coneOuterAngle : pa.coneOuterAngle,
              coneOuterGain: typeof o.coneOuterGain !== "undefined" ? o.coneOuterGain : pa.coneOuterGain,
              distanceModel: typeof o.distanceModel !== "undefined" ? o.distanceModel : pa.distanceModel,
              maxDistance: typeof o.maxDistance !== "undefined" ? o.maxDistance : pa.maxDistance,
              refDistance: typeof o.refDistance !== "undefined" ? o.refDistance : pa.refDistance,
              rolloffFactor: typeof o.rolloffFactor !== "undefined" ? o.rolloffFactor : pa.rolloffFactor,
              panningModel: typeof o.panningModel !== "undefined" ? o.panningModel : pa.panningModel
            };
            var panner = sound._panner;
            if (panner) {
              panner.coneInnerAngle = pa.coneInnerAngle;
              panner.coneOuterAngle = pa.coneOuterAngle;
              panner.coneOuterGain = pa.coneOuterGain;
              panner.distanceModel = pa.distanceModel;
              panner.maxDistance = pa.maxDistance;
              panner.refDistance = pa.refDistance;
              panner.rolloffFactor = pa.rolloffFactor;
              panner.panningModel = pa.panningModel;
            } else {
              if (!sound._pos) {
                sound._pos = self2._pos || [0, 0, -0.5];
              }
              setupPanner(sound, "spatial");
            }
          }
        }
        return self2;
      };
      Sound.prototype.init = function(_super) {
        return function() {
          var self2 = this;
          var parent = self2._parent;
          self2._orientation = parent._orientation;
          self2._stereo = parent._stereo;
          self2._pos = parent._pos;
          self2._pannerAttr = parent._pannerAttr;
          _super.call(this);
          if (self2._stereo) {
            parent.stereo(self2._stereo);
          } else if (self2._pos) {
            parent.pos(self2._pos[0], self2._pos[1], self2._pos[2], self2._id);
          }
        };
      }(Sound.prototype.init);
      Sound.prototype.reset = function(_super) {
        return function() {
          var self2 = this;
          var parent = self2._parent;
          self2._orientation = parent._orientation;
          self2._stereo = parent._stereo;
          self2._pos = parent._pos;
          self2._pannerAttr = parent._pannerAttr;
          if (self2._stereo) {
            parent.stereo(self2._stereo);
          } else if (self2._pos) {
            parent.pos(self2._pos[0], self2._pos[1], self2._pos[2], self2._id);
          } else if (self2._panner) {
            self2._panner.disconnect(0);
            self2._panner = void 0;
            parent._refreshBuffer(self2);
          }
          return _super.call(this);
        };
      }(Sound.prototype.reset);
      var setupPanner = function(sound, type) {
        type = type || "spatial";
        if (type === "spatial") {
          sound._panner = Howler.ctx.createPanner();
          sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
          sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
          sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
          sound._panner.distanceModel = sound._pannerAttr.distanceModel;
          sound._panner.maxDistance = sound._pannerAttr.maxDistance;
          sound._panner.refDistance = sound._pannerAttr.refDistance;
          sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
          sound._panner.panningModel = sound._pannerAttr.panningModel;
          if (typeof sound._panner.positionX !== "undefined") {
            sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
            sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
            sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
          } else {
            sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
          }
          if (typeof sound._panner.orientationX !== "undefined") {
            sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
            sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
            sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
          } else {
            sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
          }
        } else {
          sound._panner = Howler.ctx.createStereoPanner();
          sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
        }
        sound._panner.connect(sound._node);
        if (!sound._paused) {
          sound._parent.pause(sound._id, true).play(sound._id, true);
        }
      };
    })();
  }
});

// src/common/utils/path.ts
var fullSuffix = (fileName = "") => fileName.split(".").slice(1);
var suffix = (fileName = "") => {
  const suffix2 = fullSuffix(fileName);
  return suffix2.join(".");
};

// node_modules/remote-esm/utils/path.js
var urlSep = "://";
var get = (path2, rel = "", keepRelativeImports = false) => {
  let prefix = "";
  const getPrefix = (str2) => {
    prefix = str2.includes(urlSep) ? str2.split(urlSep).splice(0, 1) : void 0;
    if (prefix)
      return str2.replace(`${prefix}${urlSep}`, "");
    else
      return str2;
  };
  if (path2.includes(urlSep))
    path2 = getPrefix(path2);
  if (rel.includes(urlSep))
    rel = getPrefix(rel);
  if (!keepRelativeImports)
    rel = rel.split("/").filter((v) => v != "..").join("/");
  if (rel[rel.length - 1] === "/")
    rel = rel.slice(0, -1);
  let dirTokens = rel.split("/");
  if (dirTokens.length === 1 && dirTokens[0] === "")
    dirTokens = [];
  const potentialFile = dirTokens.pop();
  if (potentialFile) {
    const splitPath2 = potentialFile.split(".");
    if (splitPath2.length == 1 || splitPath2.length > 1 && splitPath2.includes(""))
      dirTokens.push(potentialFile);
  }
  const splitPath = path2.split("/");
  const pathTokens = splitPath.filter((str2, i) => !!str2);
  const extensionTokens = pathTokens.filter((str2, i) => {
    if (str2 === "..") {
      dirTokens.pop();
      return false;
    } else if (str2 === ".")
      return false;
    else
      return true;
  });
  const newPath = [...dirTokens, ...extensionTokens].join("/");
  if (prefix)
    return prefix + "://" + newPath;
  else
    return newPath;
};

// node_modules/remote-esm/utils/request.js
var getURL = (path2) => {
  let url2;
  try {
    url2 = new URL(path2).href;
  } catch {
    url2 = get(path2, globalThis.location.href);
  }
  return url2;
};
var handleFetch = async (path2, options2 = {}, progressCallback) => {
  if (!options2.mode)
    options2.mode = "cors";
  const url2 = getURL(path2);
  const response = await fetchRemote(url2, options2, progressCallback);
  if (!response)
    throw new Error("No response received.");
  const type = response.type.split(";")[0];
  return {
    url: url2,
    type,
    buffer: response.buffer
  };
};
var fetchRemote = async (url2, options2 = {}, progressCallback) => {
  const response = await globalThis.fetch(url2, options2);
  return new Promise(async (resolve2) => {
    if (response) {
      const type = response.headers.get("Content-Type");
      if (globalThis.REMOTEESM_NODE) {
        const buffer = await response.arrayBuffer();
        resolve2({ buffer, type });
      } else {
        const reader = response.body.getReader();
        const bytes = parseInt(response.headers.get("Content-Length"), 10);
        let bytesReceived = 0;
        let buffer = [];
        const processBuffer = async ({ done, value }) => {
          if (done) {
            const config = {};
            if (typeof type === "string")
              config.type = type;
            const blob = new Blob(buffer, config);
            const ab = await blob.arrayBuffer();
            resolve2({ buffer: new Uint8Array(ab), type });
            return;
          }
          bytesReceived += value.length;
          const chunk = value;
          buffer.push(chunk);
          if (progressCallback instanceof Function)
            progressCallback(response.headers.get("Range"), bytesReceived / bytes, bytes);
          return reader.read().then(processBuffer);
        };
        reader.read().then(processBuffer);
      }
    } else {
      console.warn("Response not received!", options2.headers);
      resolve2(void 0);
    }
  });
};

// node_modules/remote-esm/index.js
var datauri = {};
var ready = new Promise(async (resolve2, reject) => {
  try {
    if (typeof process === "object") {
      globalThis.fetch = (await import("node-fetch")).default;
      if (typeof globalThis.fetch !== "function")
        globalThis.fetch = fetch;
      const Blob3 = (await Promise.resolve().then(() => (init_browser(), browser_exports))).default;
      globalThis.Blob = Blob3;
      if (typeof globalThis.Blob !== "function")
        globalThis.Blob = Blob3;
      resolve2(true);
    } else
      resolve2(true);
  } catch (err) {
    console.log(err);
    reject(err);
  }
});
var jsType = "application/javascript";
var mimeTypeMap = {
  "js": jsType,
  "mjs": jsType,
  "cjs": jsType,
  "json": "application/json",
  "html": "text/html",
  "css": "text/css",
  "txt": "text/plain",
  "svg": "image/svg+xml",
  "png": "image/png",
  "jpg": "image/jpeg",
  "jpeg": "image/jpeg",
  "gif": "image/gif",
  "webp": "image/webp",
  "mp3": "audio/mpeg",
  "mp4": "video/mp4",
  "webm": "video/webm",
  "ogg": "application/ogg",
  "wav": "audio/wav"
};
var getMimeType = (extension) => mimeTypeMap[extension];
var re = /import([ \n\t]*(?:(?:\* (?:as .+))|(?:[^ \n\t\{\}]+[ \n\t]*,?)|(?:[ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\}))[ \n\t]*)from[ \n\t]*(['"])([^'"\n]+)(?:['"])([ \n\t]*assert[ \n\t]*{type:[ \n\t]*(['"])([^'"\n]+)(?:['"])})?/g;
function _arrayBufferToBase64(buffer) {
  var binary = "";
  var bytes = new Uint8Array(buffer);
  var len = bytes.byteLength;
  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}
var moduleDataURI = (o, mimeType = "text/javascript", method, safe = false) => {
  const base64 = method === "buffer" ? _arrayBufferToBase64(o) : btoa(safe ? unescape(encodeURIComponent(o)) : o);
  return `data:${mimeType};base64,` + base64;
};
var catchFailedModule = async (uri, e) => {
  if (e.message.includes("The string to be encoded contains characters outside of the Latin1 range.")) {
    return await new Promise((resolve2, reject) => {
      const script = document.createElement("script");
      let r = false;
      script.onload = script.onreadystatechange = function() {
        if (!r && (!this.readyState || this.readyState == "complete")) {
          r = true;
          resolve2(window);
        }
      };
      script.onerror = reject;
      script.src = uri;
      document.body.insertAdjacentElement("beforeend", script);
    });
  } else
    throw e;
};
var importResponse = async (info, path2, collection = {}, type = "buffer") => {
  const extension = path2.split(".").slice(-1)[0];
  const isJSON = extension === "json";
  let mimeType = getMimeType(extension);
  let reference = null;
  let imported = null;
  const importURI = async (uri) => await (isJSON ? import(uri, { assert: { type: "json" } }) : import(uri)).catch((e) => {
    throw e;
  });
  try {
    reference = moduleDataURI(info, mimeType, type);
    imported = await importURI(reference).catch((e) => {
      throw e;
    });
  } catch (e) {
    reference = moduleDataURI(info, mimeType, type, true);
    if (mimeType === jsType)
      imported = reference = await catchFailedModule(reference, e).catch((e2) => {
        throw e2;
      });
    else
      imported = reference;
  }
  collection[path2] = reference;
  return imported;
};
var resolve = get;
var enc = new TextDecoder("utf-8");
var getResponse = async (uri) => {
  const response = await globalThis.fetch(uri);
  const buffer = await response.arrayBuffer();
  return {
    response,
    buffer,
    text: enc.decode(buffer)
  };
};
var safeImport = async (uri, opts = {}) => {
  const {
    root,
    onImport = () => {
    },
    outputText,
    forceImportFromText,
    nodeModules = "node_modules",
    rootRelativeTo = "./"
  } = opts;
  const uriCollection = opts.datauri || datauri;
  await ready;
  if (opts.dependencies)
    opts.dependencies[uri] = {};
  const extension = uri.split(".").slice(-1)[0];
  const isJSON = extension === "json";
  let module = !forceImportFromText ? await (isJSON ? import(uri, { assert: { type: "json" } }) : import(uri)).catch(() => {
  }) : void 0;
  let text, originalText;
  if (!module || outputText) {
    const response = await getResponse(uri);
    text = originalText = response.text;
    try {
      module = await importResponse(response.buffer, uri, uriCollection);
    } catch (e) {
      const importInfo = [];
      let m;
      do {
        m = re.exec(text);
        if (m == null)
          m = re.exec(text);
        if (m) {
          text = text.replace(m[0], ``);
          const wildcard = !!m[1].match(/\*\s+as/);
          const variables = m[1].replace(/\*\s+as/, "").trim();
          importInfo.push({
            path: m[3],
            variables,
            wildcard
          });
        }
      } while (m);
      for (let i in importInfo) {
        const { variables, wildcard, path: path2 } = importInfo[i];
        const isAbsolute = path2[0] !== ".";
        let correctPath = get(path2, uri);
        if (isAbsolute) {
          const base = get(path2, nodeModules);
          const getPath = (path3) => get(get(path3, base), rootRelativeTo, true);
          const pkgPath = getPath("package.json", base);
          try {
            const pkg = (await import(pkgPath, { assert: { type: "json" } })).default;
            const destination = pkg.module || pkg.main || "index.js";
            correctPath = getPath(destination);
          } catch (e2) {
            console.warn(`${base} does not exist or is not at the root of the project.`);
          }
        }
        const dependentFilePath = get(correctPath);
        const dependentFileWithoutRoot = get(dependentFilePath.replace(root ?? "", ""));
        if (opts.dependencies)
          opts.dependencies[uri][dependentFileWithoutRoot] = importInfo[i];
        let filesystemFallback = false;
        let ref = uriCollection[dependentFilePath];
        if (!ref) {
          const extension2 = correctPath.split(".").slice(-1)[0];
          const info = await handleFetch(correctPath, opts?.callbacks?.progress);
          let blob = new Blob([info.buffer], { type: info.type });
          const isJS = extension2.includes("js");
          const newURI = dependentFileWithoutRoot;
          const newText = await blob.text();
          let importedText = isJS ? await new Promise(async (resolve2, reject) => {
            await safeImport(newURI, {
              ...opts,
              root: uri,
              onImport: (path3, info2) => {
                onImport(path3, info2);
                if (path3 == newURI)
                  resolve2(info2.text);
              },
              outputText: true,
              datauri: uriCollection
            }).catch((e2) => {
              const urlNoBase = isAbsolute ? path2 : correctPath.replace(`${rootRelativeTo.split("/").slice(0, -1).join("/")}/`, "");
              console.warn(`Failed to fetch ${newURI}. Checking filesystem references...`);
              filesystemFallback = opts.filesystem?._fallbacks?.[urlNoBase];
              if (filesystemFallback) {
                console.warn(`Got fallback reference for ${newURI}.`);
                resolve2();
              } else {
                const middle = "was not resolved locally. You can provide a direct reference to use in";
                if (e2.message.includes(middle))
                  reject(e2);
                else
                  reject(new Error(`${newURI} ${middle} options.filesystem._fallbacks['${urlNoBase}'].`));
              }
            });
          }) : newText;
          if (filesystemFallback)
            uriCollection[correctPath] = filesystemFallback;
          else
            await importResponse(importedText, correctPath, uriCollection, "text");
        }
        if (typeof uriCollection[correctPath] === "string") {
          text = `import ${wildcard ? "* as " : ""}${variables} from "${uriCollection[correctPath]}";
                ${text}`;
        } else {
          if (!window.GLOBAL_REMOTEESM_COLLECTION)
            window.GLOBAL_REMOTEESM_COLLECTION = {};
          window.GLOBAL_REMOTEESM_COLLECTION[correctPath] = uriCollection[correctPath];
          text = `const ${variables} = window.GLOBAL_REMOTEESM_COLLECTION["${correctPath}"];
                ${text}`;
        }
      }
      module = await importResponse(text, uri, uriCollection, "text");
    }
  }
  onImport(uri, {
    text,
    file: outputText ? originalText : void 0,
    module
  });
  return module;
};
var remote_esm_default = safeImport;

// src/common/get.ts
var cache = {};
var get2 = async (relPath, relativeTo = "", onImport, options2 = {}) => {
  let type = suffix(relPath);
  const isJSON = !type || type.includes("json");
  const fullPath = relPath[0] === "." ? resolve(relPath, relativeTo) : relPath;
  const isFunc = typeof onImport === "function";
  const imported = cache[fullPath]?.imported ?? [];
  if (!cache[fullPath]) {
    const imported2 = [];
    cache[fullPath] = remote_esm_default(fullPath, {
      onImport: (...args) => {
        if (isFunc) {
          imported2.push(args);
          onImport(...args);
        }
      },
      outputText: true,
      filesystem: options2.filesystem,
      nodeModules: options2.nodeModules,
      rootRelativeTo: options2.relativeTo,
      forceImportFromText: true
    }).catch((e) => {
      throw e;
    });
    cache[fullPath].imported = imported2;
    const res = await cache[fullPath];
    if (isJSON)
      cache[fullPath] = res?.default ?? {};
    else
      cache[fullPath] = res;
  } else if (isFunc)
    imported.forEach((args) => onImport(...args));
  return isJSON ? JSON.parse(JSON.stringify(cache[fullPath])) : cache[fullPath];
};
var get_default = get2;

// src/common/utils/check.ts
var valid = (input, options2, location) => {
  const errors = [];
  const isUndefined = options2?.relativeTo === void 0;
  const isString = typeof input === "string";
  const isObject = typeof input === "object";
  let error;
  if (isString) {
    const hasRelTo = !isUndefined && "relativeTo" in options2;
    if (!hasRelTo && !options2._remote) {
      if (import.meta.url) {
        error = { message: "Not a valid relativeTo key (required) in options", file: input };
        console.warn(`[wasl-${location}] Import Mode Error: Please pass a valid string to options.relativeTo (ideally import.meta.url).`);
      } else {
        error = { message: "import.meta.url is not supported", file: input };
        console.warn(`[wasl-${location}] Import Mode Error: import.meta.url is not available. Does your bundler support it?`);
      }
    }
  } else if (!isObject) {
    error = { message: "Not a valid object passed in the first argument", file: null };
    console.warn(`[wasl-${location}] Reference Mode Error: Please pass a valid object in the first argument and pass file object references via the options.filesystem field.`);
  }
  if (error) {
    error.function = location;
    errors.push(error);
  }
  return errors;
};

// src/core/utils.ts
var merge = (main, override) => {
  const copy = Object.assign({}, main);
  if (override) {
    const keys = Object.keys(copy);
    const newKeys = new Set(Object.keys(override));
    keys.forEach((k) => {
      if (k === "channels")
        copy[k] = Object.assign({}, copy[k]);
      newKeys.delete(k);
      if (typeof override[k] === "object" && !Array.isArray(override[k])) {
        if (typeof copy[k] === "object")
          copy[k] = merge(copy[k], override[k]);
        else
          copy[k] = override[k];
      } else if (k in override)
        copy[k] = override[k];
    });
    newKeys.forEach((k) => {
      copy[k] = override[k];
    });
  }
  return copy;
};
var checkFiles = (key, filesystem) => {
  const isJSON = suffix(key).slice(-4) === "json" ? true : false;
  const output = isJSON && filesystem[key] ? JSON.parse(JSON.stringify(filesystem[key])) : filesystem[key];
  return output;
};
var remove = (original, search, key = original, o, message) => {
  if (message)
    console.error(message);
  else
    console.error(`Source was not ${original ? `resolved for ${original}` : `specified for ${key}`}. ${search ? `If available, refer to this object directly as options.filesystem["${search}"]. ` : ""}${o ? `Automatically removing ${key} from the WASL file.` : ""}`);
  if (o)
    delete o[key];
};

// src/core/html.ts
function updateKey(key) {
  let newK = key;
  const match = newK.match(/[A-Z]/g);
  if (match)
    match.forEach((str2) => newK = newK.replace(str2, `-${str2.toLowerCase()}`));
  return newK;
}
function getAttributes(obj, opts, path2 = []) {
  const acc = {};
  for (let key in obj) {
    if (typeof obj[key] === "object") {
      const res = getAttributes(obj[key], opts, [...path2, key]);
      for (let k in res) {
        acc[updateKey(k)] = res[k];
      }
    } else {
      const updatedKey = updateKey(key);
      const updatedVal = catchKeys[key] instanceof Function ? catchKeys[key](obj[key], opts) : obj[key];
      acc[path2.length ? `${path2.join(".")}.${updatedKey}` : updatedKey] = updatedVal;
    }
  }
  return acc;
}
var catchKeys = {
  src: (val, opts) => {
    let isRemote = false;
    try {
      new URL(val);
      isRemote = true;
    } catch {
    }
    const url2 = isRemote ? val : resolve(val, opts.path ?? "");
    return url2;
  }
};
function handleComponents(name2, parentObject, parent, opts) {
  const attrs = getAttributes(parentObject[name2], opts);
  console.log("attrs", attrs);
  const el = document.createElement(attrs["tag-name"] ?? "div");
  el.id = name2;
  parent.appendChild(el);
  for (let key in attrs) {
    el.setAttribute(key, attrs[key]);
  }
  to(parentObject[name2], opts, el);
}
function to(wasl, opts, parent) {
  if (!parent)
    parent = opts.parentNode ?? document.body;
  for (let key in wasl) {
    if (key === "components") {
      for (let name2 in wasl[key])
        handleComponents(name2, wasl[key], parent, opts);
    }
  }
  return parent;
}
function from(element, options2) {
  options2.parentNode = element;
  const ref = { components: {} };
  const toIgnore = ["id"];
  const drill = (el, ref2) => {
    if (ref2.components) {
      for (let child of el.children) {
        const childRef = ref2.components[child.id] = { element: child };
        if (child.children.length > 0)
          childRef.components = {};
        for (let attribute of child.attributes) {
          if (!toIgnore.includes(attribute.name)) {
            const split = attribute.name.split(".");
            let target = childRef;
            split.forEach((substr, i) => {
              substr = substr.split("-").map((str2, i2) => {
                if (i2 > 0)
                  return str2[0].toUpperCase() + str2.slice(1);
                else
                  return str2;
              }).join("");
              if (i === split.length - 1) {
                const val = attribute.value;
                if (val !== "") {
                  if (!isNaN(val))
                    target[substr] = Number(val);
                  else
                    target[substr] = val;
                } else
                  target[substr] = true;
              } else {
                if (!target[substr])
                  target[substr] = {};
                target = target[substr];
              }
            });
          }
        }
        drill(child, childRef);
      }
    }
  };
  drill(element, ref);
  return ref;
}

// node_modules/es-plugins/dist/index.esm.js
function parseFunctionFromText(method = "") {
  let getFunctionBody = (methodString) => {
    return methodString.replace(/^\W*(function[^{]+\{([\s\S]*)\}|[^=]+=>[^{]*\{([\s\S]*)\}|[^=]+=>(.+))/i, "$2$3$4");
  };
  let getFunctionHead = (methodString) => {
    let startindex = methodString.indexOf("=>") + 1;
    if (startindex <= 0) {
      startindex = methodString.indexOf("){");
    }
    if (startindex <= 0) {
      startindex = methodString.indexOf(") {");
    }
    return methodString.slice(0, methodString.indexOf("{", startindex) + 1);
  };
  let newFuncHead = getFunctionHead(method);
  let newFuncBody = getFunctionBody(method);
  let newFunc;
  if (newFuncHead.includes("function")) {
    let varName = newFuncHead.split("(")[1].split(")")[0];
    newFunc = new Function(varName, newFuncBody);
  } else {
    if (newFuncHead.substring(0, 6) === newFuncBody.substring(0, 6)) {
      let varName = newFuncHead.split("(")[1].split(")")[0];
      newFunc = new Function(varName, newFuncBody.substring(newFuncBody.indexOf("{") + 1, newFuncBody.length - 1));
    } else {
      try {
        newFunc = (0, eval)(newFuncHead + newFuncBody + "}");
      } catch {
      }
    }
  }
  return newFunc;
}
var EventHandler = class {
  constructor() {
    this.pushToState = {};
    this.data = {};
    this.triggers = {};
    this.setState = (updateObj) => {
      Object.assign(this.data, updateObj);
      for (const prop of Object.getOwnPropertyNames(updateObj)) {
        if (this.triggers[prop])
          this.triggers[prop].forEach((obj) => obj.onchange(this.data[prop]));
      }
      return this.data;
    };
    this.subscribeTrigger = (key, onchange) => {
      if (key) {
        if (!this.triggers[key]) {
          this.triggers[key] = [];
        }
        let l = this.triggers[key].length;
        this.triggers[key].push({ idx: l, onchange });
        return this.triggers[key].length - 1;
      } else
        return void 0;
    };
    this.unsubscribeTrigger = (key, sub) => {
      let triggers = this.triggers[key];
      if (triggers) {
        if (!sub)
          delete this.triggers[key];
        else {
          let idx = void 0;
          let obj = triggers.find((o, i) => {
            if (o.idx === sub) {
              idx = i;
              return true;
            }
          });
          if (obj)
            triggers.splice(idx, 1);
          return true;
        }
      }
    };
    this.subscribeTriggerOnce = (key, onchange) => {
      let sub;
      let changed = (value) => {
        onchange(value);
        this.unsubscribeTrigger(key, sub);
      };
      sub = this.subscribeTrigger(key, changed);
    };
  }
};
var state = new EventHandler();
function addLocalState(props) {
  if (!this._state)
    this._state = {};
  for (let k in props) {
    if (k === "_state" || k === "graph")
      continue;
    else {
      this._state[k] = props[k];
      if (k in this)
        this[k] = props[k];
      else
        Object.defineProperty(this, k, {
          get: () => {
            this._state[k];
          },
          set: (v) => {
            this._state[k] = v;
            if (this.state.triggers[this._unique])
              this.setState({ [this._unique]: this._state });
          },
          enumerable: true,
          configurable: true
        });
    }
  }
}
var GraphNode = class {
  constructor(properties = {}, parent, graph) {
    this.nodes = /* @__PURE__ */ new Map();
    this._initial = {};
    this._unique = `${Math.random()}`;
    this.state = state;
    this.isLooping = false;
    this.isAnimating = false;
    this.looper = void 0;
    this.animation = void 0;
    this.forward = true;
    this.backward = false;
    this.reactive = false;
    this.runSync = false;
    this.firstRun = true;
    this.DEBUGNODE = false;
    this.addLocalState = addLocalState;
    this.operator = (...args) => {
      return args;
    };
    this.runOp = (...args) => {
      if (this.DEBUGNODE)
        console.time(this.tag);
      let result = this.operator(...args);
      if (result instanceof Promise) {
        result.then((res) => {
          if (res !== void 0)
            this.setState({ [this.tag]: res });
          if (this.DEBUGNODE) {
            console.timeEnd(this.tag);
            if (result !== void 0)
              console.log(`${this.tag} result:`, result);
          }
          ;
          return res;
        });
      } else {
        if (result !== void 0)
          this.setState({ [this.tag]: result });
        if (this.DEBUGNODE) {
          console.timeEnd(this.tag);
          if (result !== void 0)
            console.log(`${this.tag} result:`, result);
        }
        ;
      }
      return result;
    };
    this.setOperator = (operator) => {
      if (typeof operator !== "function")
        return operator;
      this.operator = operator.bind(this);
      return operator;
    };
    this.runAsync = (...args) => {
      return new Promise((res, rej) => {
        res(this.run(...args));
      });
    };
    this.transformArgs = (args = []) => args;
    this.isRunSync = () => {
      return !(this.children && this.forward || this.parent && this.backward || this.repeat || this.delay || this.frame || this.recursive || this.branch);
    };
    this.run = (...args) => {
      if (typeof this.transformArgs === "function")
        args = this.transformArgs(args, this);
      if (this.firstRun) {
        this.firstRun = false;
        this.runSync = this.isRunSync();
        if (this.animate && !this.isAnimating) {
          this.runAnimation(this.animation, args);
        }
        if (this.loop && typeof this.loop === "number" && !this.isLooping) {
          this.runLoop(this.looper, args);
        }
        if (this.loop || this.animate)
          return;
      }
      if (this.runSync) {
        let res = this.runOp(...args);
        return res;
      }
      return new Promise(async (resolve2) => {
        if (this) {
          let run = (node, tick = 0, ...input) => {
            return new Promise(async (r) => {
              tick++;
              let res = await node.runOp(...input);
              if (node.repeat) {
                while (tick < node.repeat) {
                  if (node.delay) {
                    setTimeout(async () => {
                      r(await run(node, tick, ...input));
                    }, node.delay);
                    break;
                  } else if (node.frame && window?.requestAnimationFrame) {
                    requestAnimationFrame(async () => {
                      r(await run(node, tick, ...input));
                    });
                    break;
                  } else
                    res = await node.runOp(...input);
                  tick++;
                }
                if (tick === node.repeat) {
                  r(res);
                  return;
                }
              } else if (node.recursive) {
                while (tick < node.recursive) {
                  if (node.delay) {
                    setTimeout(async () => {
                      r(await run(node, tick, ...res));
                    }, node.delay);
                    break;
                  } else if (node.frame && window?.requestAnimationFrame) {
                    requestAnimationFrame(async () => {
                      r(await run(node, tick, ...res));
                    });
                    break;
                  } else
                    res = await node.runOp(...res);
                  tick++;
                }
                if (tick === node.recursive) {
                  r(res);
                  return;
                }
              } else {
                r(res);
                return;
              }
            });
          };
          let runnode = async () => {
            let res = await run(this, void 0, ...args);
            if (res !== void 0) {
              if (this.backward && this.parent instanceof GraphNode) {
                if (Array.isArray(res))
                  await this.runParent(this, ...res);
                else
                  await this.runParent(this, res);
              }
              if (this.children && this.forward) {
                if (Array.isArray(res))
                  await this.runChildren(this, ...res);
                else
                  await this.runChildren(this, res);
              }
              if (this.branch) {
                this.runBranch(this, res);
              }
            }
            return res;
          };
          if (this.delay) {
            setTimeout(async () => {
              resolve2(await runnode());
            }, this.delay);
          } else if (this.frame && window?.requestAnimationFrame) {
            requestAnimationFrame(async () => {
              resolve2(await runnode());
            });
          } else {
            resolve2(await runnode());
          }
        } else
          resolve2(void 0);
      });
    };
    this.runParent = async (n, ...args) => {
      if (n.backward && n.parent) {
        if (typeof n.parent === "string") {
          if (n.graph && n.graph?.get(n.parent)) {
            n.parent = n.graph;
            if (n.parent)
              this.nodes.set(n.parent.tag, n.parent);
          } else
            n.parent = this.nodes.get(n.parent);
        }
        if (n.parent instanceof GraphNode)
          await n.parent.run(...args);
      }
    };
    this.runChildren = async (n, ...args) => {
      if (typeof n.children === "object") {
        for (const key in n.children) {
          if (typeof n.children[key] === "string") {
            if (n.graph && n.graph?.get(n.children[key])) {
              n.children[key] = n.graph.get(n.children[key]);
              if (!n.nodes.get(n.children[key].tag))
                n.nodes.set(n.children[key].tag, n.children[key]);
            }
            if (!n.children[key] && n.nodes.get(n.children[key]))
              n.children[key] = n.nodes.get(n.children[key]);
          } else if (typeof n.children[key] === "undefined" || n.children[key] === true) {
            if (n.graph && n.graph?.get(key)) {
              n.children[key] = n.graph.get(key);
              if (!n.nodes.get(n.children[key].tag))
                n.nodes.set(n.children[key].tag, n.children[key]);
            }
            if (!n.children[key] && n.nodes.get(key))
              n.children[key] = n.nodes.get(key);
          }
          if (n.children[key]?.runOp)
            await n.children[key].run(...args);
        }
      }
    };
    this.runBranch = async (n, output) => {
      if (n.branch) {
        let keys = Object.keys(n.branch);
        await Promise.all(keys.map(async (k) => {
          if (typeof n.branch[k].if === "object")
            n.branch[k].if = stringifyFast(n.branch[k].if);
          let pass = false;
          if (typeof n.branch[k].if === "function") {
            pass = n.branch[k].if(output);
          } else {
            if (typeof output === "object") {
              if (stringifyFast(output) === n.branch[k].if)
                pass = true;
            } else if (output === n.branch[k].if)
              pass = true;
          }
          if (pass) {
            if (n.branch[k].then.run) {
              if (Array.isArray(output))
                await n.branch[k].then.run(...output);
              else
                await n.branch[k].then.run(...output);
            } else if (typeof n.branch[k].then === "function") {
              if (Array.isArray(output))
                await n.branch[k].then(...output);
              else
                await n.branch[k].then(output);
            } else if (typeof n.branch[k].then === "string") {
              if (n.graph)
                n.branch[k].then = n.graph.nodes.get(n.branch[k].then);
              else
                n.branch[k].then = n.nodes.get(n.branch[k].then);
              if (n.branch[k].then.run) {
                if (Array.isArray(output))
                  await n.branch[k].then.run(...output);
                else
                  await n.branch[k].then.run(...output);
              }
            }
          }
          return pass;
        }));
      }
    };
    this.runAnimation = (animation2 = this.animation, args = []) => {
      this.animation = animation2;
      if (!animation2)
        this.animation = this.operator;
      if (this.animate && !this.isAnimating && "requestAnimationFrame" in window) {
        this.isAnimating = true;
        let anim = async () => {
          if (this.isAnimating) {
            if (this.DEBUGNODE)
              console.time(this.tag);
            let result = this.animation.call(this, ...args);
            if (result instanceof Promise) {
              result = await result;
            }
            if (this.DEBUGNODE) {
              console.timeEnd(this.tag);
              if (result !== void 0)
                console.log(`${this.tag} result:`, result);
            }
            ;
            if (result !== void 0) {
              if (this.tag)
                this.setState({ [this.tag]: result });
              if (this.backward && this.parent?.run) {
                if (Array.isArray(result))
                  await this.runParent(this, ...result);
                else
                  await this.runParent(this, result);
              }
              if (this.children && this.forward) {
                if (Array.isArray(result))
                  await this.runChildren(this, ...result);
                else
                  await this.runChildren(this, result);
              }
              if (this.branch) {
                this.runBranch(this, result);
              }
              this.setState({ [this.tag]: result });
            }
            requestAnimationFrame(anim);
          }
        };
        requestAnimationFrame(anim);
      }
    };
    this.runLoop = (loop = this.looper, args = [], timeout = this.loop) => {
      this.looper = loop;
      if (!loop)
        this.looper = this.operator;
      if (typeof timeout === "number" && !this.isLooping) {
        this.isLooping = true;
        let looping = async () => {
          if (this.isLooping) {
            if (this.DEBUGNODE)
              console.time(this.tag);
            let result = this.looper.call(this, ...args);
            if (result instanceof Promise) {
              result = await result;
            }
            if (this.DEBUGNODE) {
              console.timeEnd(this.tag);
              if (result !== void 0)
                console.log(`${this.tag} result:`, result);
            }
            ;
            if (result !== void 0) {
              if (this.tag)
                this.setState({ [this.tag]: result });
              if (this.backward && this.parent?.run) {
                if (Array.isArray(result))
                  await this.runParent(this, ...result);
                else
                  await this.runParent(this, result);
              }
              if (this.children && this.forward) {
                if (Array.isArray(result))
                  await this.runChildren(this, ...result);
                else
                  await this.runChildren(this, result);
              }
              if (this.branch) {
                this.runBranch(this, result);
              }
              this.setState({ [this.tag]: result });
            }
            setTimeout(async () => {
              await looping();
            }, timeout);
          }
        };
        looping();
      }
    };
    this.setParent = (parent2) => {
      this.parent = parent2;
      if (this.backward)
        this.runSync = false;
    };
    this.setChildren = (children) => {
      this.children = children;
      if (this.forward)
        this.runSync = false;
    };
    this.add = (n = {}) => {
      if (typeof n === "function")
        n = { operator: n };
      if (n?.node instanceof GraphNode)
        n = n.node;
      if (!(n instanceof GraphNode))
        n = new GraphNode(n.node ?? n, this, this.graph);
      this.nodes.set(n.tag, n);
      if (this.graph) {
        this.graph.nodes.set(n.tag, n);
        this.graph.nNodes = this.graph.nodes.size;
      }
      return n;
    };
    this.remove = (n) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.tag) {
        this.nodes.delete(n.tag);
        if (this.children[n.tag])
          delete this.children[n.tag];
        if (this.graph) {
          this.graph.nodes.delete(n.tag);
          this.graph.nNodes = this.graph.nodes.size;
        }
        this.nodes.forEach((n2) => {
          if (n2.nodes.get(n2.tag)) {
            n2.nodes.delete(n2.tag);
            if (n2.children[n2.tag])
              delete n2.children[n2.tag];
            if (n2.parent?.tag === n2.tag)
              delete n2.parent;
          }
        });
        if (n.ondelete)
          n.ondelete(n);
      }
      if (typeof this._state === "object") {
        this.state.unsubscribeTrigger(this._unique);
      }
    };
    this.append = (n, parentNode = this) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.nodes) {
        parentNode.addChildren(n);
        if (n.forward)
          n.runSync = false;
      }
    };
    this.subscribe = (callback, tag = this.tag) => {
      if (typeof callback === "string") {
        if (this.graph)
          callback = this.graph.get(callback);
        else
          callback = this.nodes.get(callback);
      }
      if (typeof callback === "function") {
        return this.state.subscribeTrigger(tag, callback);
      } else if (callback)
        return this.state.subscribeTrigger(tag, (res) => {
          callback.run(res);
        });
    };
    this.unsubscribe = (sub, tag = this.tag) => {
      return this.state.unsubscribeTrigger(tag, sub);
    };
    this.subscribeState = (callback) => {
      if (!this.reactive) {
        return void 0;
      } else {
        if (typeof callback === "string") {
          if (this.graph)
            callback = this.graph.get(callback);
          else
            callback = this.nodes.get(callback);
        }
        if (typeof callback === "function") {
          return this.state.subscribeTrigger(this._unique, callback);
        } else if (callback)
          return this.state.subscribeTrigger(this._unique, (_state) => {
            callback.run(_state);
          });
      }
    };
    this.addChildren = (children) => {
      if (!this.children)
        this.children = {};
      if (typeof children === "object") {
        Object.assign(this.children, children);
      }
      this.convertChildrenToNodes();
      if (this.forward)
        this.runSync = false;
    };
    this.callParent = (...args) => {
      if (typeof this.parent === "string") {
        if (this.graph && this.graph?.get(this.parent)) {
          this.parent = this.graph;
          if (this.parent)
            this.nodes.set(this.parent.tag, this.parent);
        } else
          this.parent = this.nodes.get(this.parent);
      }
      if (typeof this.parent?.operator === "function")
        return this.parent.runOp(...args);
    };
    this.callChildren = (...args) => {
      let result;
      if (typeof this.children === "object") {
        for (const key in this.children) {
          if (this.children[key]?.runOp)
            this.children[key].runOp(...args);
        }
      }
      return result;
    };
    this.getProps = (n = this, getInitial = true) => {
      let baseprops = {
        tag: n.tag,
        operator: n.operator,
        graph: n.graph,
        children: n.children,
        parent: n.parent,
        forward: n.forward,
        backward: n.bacward,
        loop: n.loop,
        animate: n.animate,
        frame: n.frame,
        delay: n.delay,
        recursive: n.recursive,
        repeat: n.repeat,
        branch: n.branch,
        oncreate: n.oncreate,
        reactive: n.reactive,
        DEBUGNODE: n.DEBUGNODE
      };
      if (!getInitial) {
        let uniqueprops = {};
        for (const key in this._initial) {
          uniqueprops[key] = this[key];
        }
        return Object.assign(baseprops, uniqueprops);
      } else
        return {
          tag: n.tag,
          operator: n.operator,
          graph: n.graph,
          children: n.children,
          parent: n.parent,
          forward: n.forward,
          backward: n.bacward,
          loop: n.loop,
          animate: n.animate,
          frame: n.frame,
          delay: n.delay,
          recursive: n.recursive,
          repeat: n.repeat,
          branch: n.branch,
          oncreate: n.oncreate,
          reactive: n.reactive,
          DEBUGNODE: n.DEBUGNODE,
          ...this._initial
        };
    };
    this.setProps = (props = {}) => {
      let tmp = Object.assign({}, props);
      if (tmp.children) {
        this.addChildren(props.children);
        delete tmp.children;
      }
      if (tmp.operator) {
        this.setOperator(props.operator);
        delete tmp.operator;
      }
      Object.assign(tmp, props);
      this.runSync = this.isRunSync();
    };
    this.removeTree = (n) => {
      if (n) {
        if (typeof n === "string")
          n = this.nodes.get(n);
      }
      if (n?.nodes) {
        let checked = {};
        const recursivelyRemove = (node) => {
          if (typeof node.children === "object" && !checked[node.tag]) {
            checked[node.tag] = true;
            for (const key in node.children) {
              if (node.children[key].stopNode)
                node.children[key].stopNode();
              if (node.children[key].tag) {
                if (this.nodes.get(node.children[key].tag))
                  this.nodes.delete(node.children[key].tag);
                this.nodes.forEach((n2) => {
                  if (n2.nodes.get(node.children[key].tag))
                    n2.nodes.delete(node.children[key].tag);
                  if (n2.children?.[key] instanceof GraphNode)
                    delete n2.children[key];
                });
                if (node.children[key].ondelete && !this.graph)
                  node.children[key].ondelete(node.children[key]);
                recursivelyRemove(node.children[key]);
              }
            }
          }
        };
        if (n.stopNode)
          n.stopNode();
        if (n.tag) {
          this.nodes.delete(n.tag);
          if (this.children?.[n.tag])
            delete this.children[n.tag];
          if (this.parent?.tag === n.tag)
            delete this.parent;
          if (this[n.tag] instanceof GraphNode)
            delete this[n.tag];
          this.nodes.forEach((n2) => {
            if (n2?.tag) {
              if (n2.nodes.get(n2.tag))
                n2.nodes.delete(n2.tag);
              if (n2.children?.[n2.tag] instanceof GraphNode)
                delete n2.children[n2.tag];
            }
          });
          recursivelyRemove(n);
          if (this.graph)
            this.graph.removeTree(n, checked);
          else if (n.ondelete)
            n.ondelete(n);
        }
      }
    };
    this.checkNodesHaveChildMapped = (n, child, checked = {}) => {
      let tag = n.tag;
      if (!tag)
        tag = n.name;
      if (!checked[tag]) {
        checked[tag] = true;
        if (n.children) {
          if (child.tag in n.children) {
            if (n.children[child.tag] instanceof GraphNode) {
              if (!n.nodes.get(child.tag))
                n.nodes.set(child.tag, child);
              n.children[child.tag] = child;
              if (!n.firstRun)
                n.firstRun = true;
            }
          }
        }
        if (n.parent instanceof GraphNode) {
          if (n.nodes.get(child.tag))
            n.parent.nodes.set(child.tag, child);
          if (n.parent.children) {
            this.checkNodesHaveChildMapped(n.parent, child, checked);
          } else if (n.nodes) {
            n.nodes.forEach((n2) => {
              if (!checked[n2.tag]) {
                this.checkNodesHaveChildMapped(n2, child, checked);
              }
            });
          }
        }
        if (n.graph) {
          if (n.parent && n.parent.name !== n.graph.name) {
            n.graph.nodes.forEach((n2) => {
              if (!checked[n2.tag]) {
                this.checkNodesHaveChildMapped(n2, child, checked);
              }
            });
          }
        }
      }
    };
    this.convertChildrenToNodes = (n = this) => {
      if (n?.children) {
        for (const key in n.children) {
          if (!(n.children[key] instanceof GraphNode)) {
            if (typeof n.children[key] === "object") {
              if (!n.children[key].tag)
                n.children[key].tag = key;
              if (!n.nodes.get(n.children[key].tag)) {
                n.children[key] = new GraphNode(n.children[key], n, n.graph);
                this.checkNodesHaveChildMapped(n, n.children[key]);
              }
            } else {
              if (typeof n.children[key] === "undefined" || n.children[key] == true) {
                n.children[key] = n.graph.get(key);
                if (!n.children[key])
                  n.children[key] = n.nodes.get(key);
              } else if (typeof n.children[key] === "string") {
                let k = n.children[key];
                n.children[key] = n.graph.get(k);
                if (!n.children[key])
                  n.children[key] = n.nodes.get(key);
              }
              if (n.children[key] instanceof GraphNode) {
                n.nodes.set(n.children[key].tag, n.children[key]);
                this.checkNodesHaveChildMapped(n, n.children[key]);
                if (!(n.children[key].tag in n))
                  n[n.children[key].tag] = n.children[key];
              }
            }
          }
        }
      }
      return n.children;
    };
    this.stopLooping = (n = this) => {
      n.isLooping = false;
    };
    this.stopAnimating = (n = this) => {
      n.isAnimating = false;
    };
    this.stopNode = (n = this) => {
      n.stopAnimating(n);
      n.stopLooping(n);
    };
    this.subscribeNode = (n) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n.tag)
        this.nodes.set(n.tag, n);
      if (n)
        return this.state.subscribeTrigger(this.tag, (res) => {
          if (Array.isArray(res))
            n.run(...res);
          else
            n.run(res);
        });
    };
    this.print = (n = this, printChildren = true, nodesPrinted = []) => {
      let dummyNode = new GraphNode();
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n instanceof GraphNode) {
        nodesPrinted.push(n.tag);
        let jsonToPrint = {
          tag: n.tag,
          operator: n.operator.toString()
        };
        if (n.parent)
          jsonToPrint.parent = n.parent.tag;
        if (typeof n.children === "object") {
          for (const key in n.children) {
            if (typeof n.children[key] === "string")
              return n.children[key];
            if (nodesPrinted.includes(n.children[key].tag))
              return n.children[key].tag;
            else if (!printChildren) {
              return n.children[key].tag;
            } else
              return n.children[key].print(n.children[key], printChildren, nodesPrinted);
          }
        }
        for (const prop in n) {
          if (prop === "parent" || prop === "children")
            continue;
          if (typeof dummyNode[prop] === "undefined") {
            if (typeof n[prop] === "function") {
              jsonToPrint[prop] = n[prop].toString();
            } else if (typeof n[prop] === "object") {
              jsonToPrint[prop] = JSON.stringifyWithCircularRefs(n[prop]);
            } else {
              jsonToPrint[prop] = n[prop];
            }
          }
        }
        return JSON.stringify(jsonToPrint);
      }
    };
    this.reconstruct = (json) => {
      let parsed = reconstructObject(json);
      if (parsed)
        return this.add(parsed);
    };
    this.setState = (data) => {
      this.state.setState(data);
    };
    this.DEBUGNODES = (debugging = true) => {
      this.DEBUGNODE = debugging;
      this.nodes.forEach((n) => {
        if (debugging)
          n.DEBUGNODE = true;
        else
          n.DEBUGNODE = false;
      });
    };
    if (typeof properties === "function") {
      properties = { operator: properties };
    }
    if (typeof properties === "object") {
      if (properties instanceof GraphNode && properties._initial)
        Object.assign(properties, properties._initial);
      if (properties instanceof Graph) {
        let source = properties;
        properties = {
          source,
          operator: (input) => {
            if (typeof input === "object") {
              let result = {};
              for (const key in input) {
                if (typeof source[key] === "function") {
                  if (Array.isArray(input[key]))
                    result[key] = source[key](...input[key]);
                  else
                    result[key] = source[key](input[key]);
                } else {
                  source[key] = input[key];
                  result[key] = source[key];
                }
              }
              return result;
            }
            return source;
          }
        };
        if (source.operator)
          properties.operator = source.operator;
        if (source.children)
          properties.children = source.children;
        if (source.forward)
          properties.forward = source.forward;
        if (source.backward)
          properties.backward = source.backward;
        if (source.repeat)
          properties.repeat = source.repeat;
        if (source.recursive)
          properties.recursive = source.recursive;
        if (source.loop)
          properties.loop = source.loop;
        if (source.animate)
          properties.animate = source.animate;
        if (source.looper)
          properties.looper = source.looper;
        if (source.animation)
          properties.animation = source.animation;
        if (source.delay)
          properties.delay = source.delay;
        if (source.oncreate)
          properties.oncreate = source.oncreate;
        if (source.node) {
          if (source.node._initial)
            Object.assign(properties, source.node._initial);
        }
        if (source._initial)
          Object.assign(properties, source._initial);
        if (source.tag)
          properties.tag = source.tag;
        this.nodes = source.nodes;
        source.node = this;
        if (graph) {
          source.nodes.forEach((n) => {
            if (!graph.nodes.get(n.tag)) {
              graph.nodes.set(n.tag, n);
              graph.nNodes++;
            }
          });
        }
      }
      if (typeof parent === "string") {
        if (graph)
          parent = graph.nodes.get(parent);
        else
          parent = void 0;
      }
      if (properties.tag && (graph || parent)) {
        let hasnode;
        if (graph?.nodes) {
          hasnode = graph.nodes.get(properties.tag);
        }
        if (!hasnode && parent?.nodes) {
          hasnode = parent.nodes.get(properties.tag);
        }
        if (hasnode) {
          if (this.reactive) {
            this.addLocalState(hasnode);
          }
          if (!this.source)
            this.source = hasnode;
          let props = hasnode.getProps();
          delete props.graph;
          delete props.parent;
          for (let k in props) {
            const desc = Object.getOwnPropertyDescriptor(properties, k);
            if (desc && desc.get && !desc.set)
              properties = Object.assign({}, properties);
            else
              properties[k] = props[k];
          }
        }
      }
      if (properties?.operator) {
        properties.operator = this.setOperator(properties.operator);
      }
      if (!properties.tag && graph) {
        properties.tag = `node${graph.nNodes}`;
      } else if (!properties.tag) {
        properties.tag = `node${Math.floor(Math.random() * 1e10)}`;
      }
      let keys = Object.getOwnPropertyNames(this);
      for (const key in properties) {
        if (!keys.includes(key))
          this._initial[key] = properties[key];
      }
      if (properties.children)
        this._initial.children = Object.assign({}, properties.children);
      Object.assign(this, properties);
      if (!this.tag) {
        if (graph) {
          this.tag = `node${graph.nNodes}`;
        } else {
          this.tag = `node${Math.floor(Math.random() * 1e10)}`;
        }
      }
      if (graph) {
        this.graph = graph;
        if (graph.nodes.get(this.tag)) {
          this.tag = `${this.tag}${graph.nNodes + 1}`;
        }
        graph.nodes.set(this.tag, this);
        graph.nNodes++;
        this.state = graph.state;
      }
      if (this.reactive) {
        addLocalState(properties);
        if (typeof this.reactive === "function") {
          this.state.subscribeTrigger(this._unique, this.reactive);
        }
      }
      if (typeof parent === "object") {
        this.parent = parent;
        if (parent instanceof GraphNode || parent instanceof Graph)
          parent.nodes.set(this.tag, this);
      }
      if (typeof properties.tree === "object") {
        for (const key in properties.tree) {
          if (typeof properties.tree[key] === "object") {
            if ((!properties.tree[key]).tag) {
              properties.tree[key].tag = key;
            }
          }
          let node = new GraphNode(properties.tree[key], this, graph);
          this.nodes.set(node.tag, node);
        }
      }
      if (this.children)
        this.convertChildrenToNodes(this);
      if (this.parent instanceof GraphNode || this.parent instanceof Graph)
        this.checkNodesHaveChildMapped(this.parent, this);
      if (typeof this.oncreate === "function")
        this.oncreate(this);
      if (!this.firstRun)
        this.firstRun = true;
      if (this.animation && !this.animate)
        this.animate = true;
    } else
      return properties;
  }
};
var Graph = class {
  constructor(tree, tag, props) {
    this.nNodes = 0;
    this.nodes = /* @__PURE__ */ new Map();
    this.state = new EventHandler();
    this._unique = `${Math.random()}`;
    this.tree = {};
    this.addLocalState = addLocalState;
    this.add = (n = {}) => {
      if (n?.node instanceof GraphNode)
        n = n.node;
      let props2 = n;
      if (!(n instanceof GraphNode))
        n = new GraphNode(props2?.node ?? props2, this, this);
      else {
        this.nNodes = this.nodes.size;
        if (n.tag) {
          this.tree[n.tag] = props2;
          this.nodes.set(n.tag, n);
        }
      }
      return n;
    };
    this.setTree = (tree2 = this.tree) => {
      if (!tree2)
        return;
      for (const node in tree2) {
        const n = this.nodes.get(node);
        if (!n) {
          if (typeof tree2[node] === "function") {
            this.add({ tag: node, operator: tree2[node] });
          } else if (typeof tree2[node] === "object" && !Array.isArray(tree2[node])) {
            if (!tree2[node].tag)
              tree2[node].tag = node;
            let newNode = this.add(tree2[node]);
            if (tree2[node].aliases) {
              tree2[node].aliases.forEach((a) => {
                this.nodes.set(a, newNode);
              });
            }
          } else {
            this.add({ tag: node, operator: (...args) => {
              return tree2[node];
            } });
          }
        } else {
          if (typeof tree2[node] === "function") {
            n.setOperator(tree2[node]);
          } else if (typeof tree2[node] === "object") {
            if (tree2[node] instanceof GraphNode) {
              this.add(tree2[node]);
            } else if (tree2[node] instanceof Graph) {
              let source = tree2[node];
              let properties = {};
              if (source.operator)
                properties.operator = source.operator;
              if (source.children)
                properties.children = source.children;
              if (source.forward)
                properties.forward = source.forward;
              if (source.backward)
                properties.backward = source.backward;
              if (source.repeat)
                properties.repeat = source.repeat;
              if (source.recursive)
                properties.recursive = source.recursive;
              if (source.loop)
                properties.loop = source.loop;
              if (source.animate)
                properties.animate = source.animate;
              if (source.looper)
                properties.looper = source.looper;
              if (source.animation)
                properties.animation = source.animation;
              if (source.delay)
                properties.delay = source.delay;
              if (source.tag)
                properties.tag = source.tag;
              if (source.oncreate)
                properties.oncreate = source.oncreate;
              if (source.node?._initial)
                Object.assign(properties, source.node._initial);
              properties.nodes = source.nodes;
              properties.source = source;
              n.setProps(properties);
            } else {
              n.setProps(tree2[node]);
            }
          }
        }
      }
      this.nodes.forEach((node) => {
        if (typeof node.children === "object") {
          for (const key in node.children) {
            if (typeof node.children[key] === "string") {
              if (this.nodes.get(node.children[key])) {
                node.children[key] = this.nodes.get(node.children[key]);
              }
            } else if (node.children[key] === true || typeof node.children[key] === "undefined") {
              if (this.nodes.get(key)) {
                node.children[key] = this.nodes.get(key);
              }
            }
            if (node.children[key] instanceof GraphNode) {
              node.checkNodesHaveChildMapped(node, node.children[key]);
            }
          }
        }
        if (typeof node.parent === "string") {
          if (this.nodes.get(node.parent)) {
            node.parent = this.nodes.get(node.parent);
            node.nodes.set(node.parent.tag, node.parent);
          }
        }
      });
    };
    this.get = (tag2) => {
      return this.nodes.get(tag2);
    };
    this.set = (n) => {
      return this.nodes.set(n.tag, n);
    };
    this.run = (n, ...args) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.run)
        return n.run(...args);
      else
        return void 0;
    };
    this.runAsync = (n, ...args) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.run)
        return new Promise((res, rej) => {
          res(n.run(...args));
        });
      else
        return new Promise((res, rej) => {
          res(void 0);
        });
    };
    this.removeTree = (n, checked) => {
      if (n) {
        if (typeof n === "string")
          n = this.nodes.get(n);
      }
      if (n?.nodes) {
        let checked2 = {};
        const recursivelyRemove = (node) => {
          if (typeof node.children === "object" && !checked2[node.tag]) {
            checked2[node.tag] = true;
            for (const key in node.children) {
              if (node.children[key]?.stopNode)
                node.children[key].stopNode();
              if (node.children[key]?.tag) {
                if (this.nodes.get(node.children[key].tag))
                  this.nodes.delete(node.children[key].tag);
                this.nodes.forEach((n2) => {
                  if (n2.nodes.get(node.children[key].tag))
                    n2.nodes.delete(node.children[key].tag);
                  if (n2.children?.[key] instanceof GraphNode)
                    delete n2.children[key];
                });
                if (node.children[key].ondelete)
                  node.children[key].ondelete(node.children[key]);
                recursivelyRemove(node.children[key]);
              }
            }
          }
        };
        if (n.stopNode)
          n.stopNode();
        if (n.tag) {
          this.nodes.delete(n.tag);
          if (this.parent?.tag === n.tag)
            delete this.parent;
          if (this[n.tag] instanceof GraphNode)
            delete this[n.tag];
          this.nodes.forEach((n2) => {
            if (n2?.tag) {
              if (n2.nodes.get(n2.tag))
                n2.nodes.delete(n2.tag);
              if (n2.children?.[n2.tag] instanceof GraphNode)
                delete n2.children[n2.tag];
            }
          });
          recursivelyRemove(n);
          if (n.ondelete)
            n.ondelete(n);
        }
      }
    };
    this.remove = (n) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.nodes) {
        if (n.stopNode)
          n.stopNode();
        if (n?.tag) {
          if (this.nodes.get(n.tag)) {
            this.nodes.delete(n.tag);
            this.nodes.forEach((n2) => {
              if (n2.nodes.get(n2.tag))
                n2.nodes.delete(n2.tag);
            });
          }
        }
        if (n.ondelete)
          n.ondelete(n);
      }
      return n;
    };
    this.append = (n, parentNode) => {
      parentNode.addChildren(n);
    };
    this.callParent = async (n, ...args) => {
      if (n?.parent) {
        return await n.callParent(...args);
      }
    };
    this.callChildren = async (n, ...args) => {
      if (n?.children) {
        return await n.callChildren(...args);
      }
    };
    this.subscribe = (n, callback) => {
      if (!callback)
        return;
      if (n?.subscribe && typeof callback === "function") {
        return n.subscribe(callback);
      } else if (callback instanceof GraphNode || typeof callback === "string")
        return this.subscribeNode(n, callback);
      else if (typeof n == "string") {
        return this.state.subscribeTrigger(n, callback);
      }
    };
    this.unsubscribe = (tag2, sub) => {
      return this.state.unsubscribeTrigger(tag2, sub);
    };
    this.subscribeState = (callback) => {
      if (!this.reactive) {
        return void 0;
      } else {
        if (typeof callback === "string") {
          if (this.graph)
            callback = this.graph.get(callback);
          else
            callback = this.nodes.get(callback);
        }
        if (typeof callback === "function") {
          return this.state.subscribeTrigger(this._unique, callback);
        } else if (callback)
          return this.state.subscribeTrigger(this._unique, (_state) => {
            callback.run(_state);
          });
      }
    };
    this.subscribeNode = (inputNode, outputNode) => {
      let tag2;
      if (inputNode?.tag)
        tag2 = inputNode.tag;
      else if (typeof inputNode === "string")
        tag2 = inputNode;
      if (typeof outputNode === "string")
        outputNode = this.nodes.get(outputNode);
      if (inputNode && outputNode) {
        let sub = this.state.subscribeTrigger(tag2, (res) => {
          if (Array.isArray(res))
            outputNode.run(...res);
          else
            outputNode.run(res);
        });
        return sub;
      }
    };
    this.stopNode = (n) => {
      if (typeof n === "string") {
        n = this.nodes.get(n);
      }
      if (n?.stopNode) {
        n.stopNode();
      }
    };
    this.print = (n, printChildren = true) => {
      if (n?.print)
        return n.print(n, printChildren);
      else {
        let printed = `{`;
        this.nodes.forEach((n2) => {
          printed += `
"${n2.tag}:${n2.print(n2, printChildren)}"`;
        });
        return printed;
      }
    };
    this.reconstruct = (json) => {
      let parsed = reconstructObject(json);
      if (parsed)
        return this.add(parsed);
    };
    this.create = (operator, parentNode, props2) => {
      return createNode(operator, parentNode, props2, this);
    };
    this.setState = (data) => {
      this.state.setState(data);
    };
    this.DEBUGNODES = (debugging = true) => {
      this.nodes.forEach((n) => {
        if (debugging)
          n.DEBUGNODE = true;
        else
          n.DEBUGNODE = false;
      });
    };
    this.tag = tag ? tag : `graph${Math.floor(Math.random() * 1e11)}`;
    if (props) {
      if (props.reactive) {
        this.addLocalState(props);
      } else
        Object.assign(this, props);
      this._initial = props;
    }
    if (tree || Object.keys(this.tree).length > 0)
      this.setTree(tree);
  }
};
function reconstructObject(json = "{}") {
  try {
    let parsed = typeof json === "string" ? JSON.parse(json) : json;
    const parseObj = (obj) => {
      for (const prop in obj) {
        if (typeof obj[prop] === "string") {
          let funcParsed = parseFunctionFromText(obj[prop]);
          if (typeof funcParsed === "function") {
            obj[prop] = funcParsed;
          }
        } else if (typeof obj[prop] === "object") {
          parseObj(obj[prop]);
        }
      }
      return obj;
    };
    return parseObj(parsed);
  } catch (err) {
    console.error(err);
    return void 0;
  }
}
var stringifyWithCircularRefs = function() {
  const refs = /* @__PURE__ */ new Map();
  const parents = [];
  const path2 = ["this"];
  function clear() {
    refs.clear();
    parents.length = 0;
    path2.length = 1;
  }
  function updateParents(key, value) {
    var idx = parents.length - 1;
    var prev = parents[idx];
    if (typeof prev === "object") {
      if (prev[key] === value || idx === 0) {
        path2.push(key);
        parents.push(value.pushed);
      } else {
        while (idx-- >= 0) {
          prev = parents[idx];
          if (typeof prev === "object") {
            if (prev[key] === value) {
              idx += 2;
              parents.length = idx;
              path2.length = idx;
              --idx;
              parents[idx] = value;
              path2[idx] = key;
              break;
            }
          }
          idx--;
        }
      }
    }
  }
  function checkCircular(key, value) {
    if (value != null) {
      if (typeof value === "object") {
        if (key) {
          updateParents(key, value);
        }
        let other = refs.get(value);
        if (other) {
          return "[Circular Reference]" + other;
        } else {
          refs.set(value, path2.join("."));
        }
      }
    }
    return value;
  }
  return function stringifyWithCircularRefs22(obj, space) {
    try {
      parents.push(obj);
      return JSON.stringify(obj, checkCircular, space);
    } finally {
      clear();
    }
  };
}();
if (JSON.stringifyWithCircularRefs === void 0) {
  JSON.stringifyWithCircularRefs = stringifyWithCircularRefs;
}
var stringifyFast = function() {
  const refs = /* @__PURE__ */ new Map();
  const parents = [];
  const path2 = ["this"];
  function clear() {
    refs.clear();
    parents.length = 0;
    path2.length = 1;
  }
  function updateParents(key, value) {
    var idx = parents.length - 1;
    if (parents[idx]) {
      var prev = parents[idx];
      if (typeof prev === "object") {
        if (prev[key] === value || idx === 0) {
          path2.push(key);
          parents.push(value.pushed);
        } else {
          while (idx-- >= 0) {
            prev = parents[idx];
            if (typeof prev === "object") {
              if (prev[key] === value) {
                idx += 2;
                parents.length = idx;
                path2.length = idx;
                --idx;
                parents[idx] = value;
                path2[idx] = key;
                break;
              }
            }
            idx++;
          }
        }
      }
    }
  }
  function checkValues(key, value) {
    let val;
    if (value != null) {
      if (typeof value === "object") {
        let c = value.constructor.name;
        if (key && c === "Object") {
          updateParents(key, value);
        }
        let other = refs.get(value);
        if (other) {
          return "[Circular Reference]" + other;
        } else {
          refs.set(value, path2.join("."));
        }
        if (c === "Array") {
          if (value.length > 20) {
            val = value.slice(value.length - 20);
          } else
            val = value;
        } else if (c.includes("Set")) {
          val = Array.from(value);
        } else if (c !== "Object" && c !== "Number" && c !== "String" && c !== "Boolean") {
          val = "instanceof_" + c;
        } else if (c === "Object") {
          let obj = {};
          for (const prop in value) {
            if (value[prop] == null) {
              obj[prop] = value[prop];
            } else if (Array.isArray(value[prop])) {
              if (value[prop].length > 20)
                obj[prop] = value[prop].slice(value[prop].length - 20);
              else
                obj[prop] = value[prop];
            } else if (value[prop].constructor.name === "Object") {
              obj[prop] = {};
              for (const p in value[prop]) {
                if (Array.isArray(value[prop][p])) {
                  if (value[prop][p].length > 20)
                    obj[prop][p] = value[prop][p].slice(value[prop][p].length - 20);
                  else
                    obj[prop][p] = value[prop][p];
                } else {
                  if (value[prop][p] != null) {
                    let con = value[prop][p].constructor.name;
                    if (con.includes("Set")) {
                      obj[prop][p] = Array.from(value[prop][p]);
                    } else if (con !== "Number" && con !== "String" && con !== "Boolean") {
                      obj[prop][p] = "instanceof_" + con;
                    } else {
                      obj[prop][p] = value[prop][p];
                    }
                  } else {
                    obj[prop][p] = value[prop][p];
                  }
                }
              }
            } else {
              let con = value[prop].constructor.name;
              if (con.includes("Set")) {
                obj[prop] = Array.from(value[prop]);
              } else if (con !== "Number" && con !== "String" && con !== "Boolean") {
                obj[prop] = "instanceof_" + con;
              } else {
                obj[prop] = value[prop];
              }
            }
          }
          val = obj;
        } else {
          val = value;
        }
      } else {
        val = value;
      }
    }
    return val;
  }
  return function stringifyFast22(obj, space) {
    parents.push(obj);
    let res = JSON.stringify(obj, checkValues, space);
    clear();
    return res;
  };
}();
if (JSON.stringifyFast === void 0) {
  JSON.stringifyFast = stringifyFast;
}
function createNode(operator, parentNode, props, graph) {
  if (typeof props === "object") {
    props.operator = operator;
    return new GraphNode(props, parentNode, graph);
  }
  return new GraphNode({ operator }, parentNode, graph);
}
var DOMElement = class extends HTMLElement {
  template = function(self2 = this, props) {
    return `<div> Custom Fragment Props: ${JSON.stringify(props)} </div>`;
  };
  props = {};
  useShadow = false;
  styles;
  oncreate;
  onresize;
  ondelete;
  onchanged;
  renderonchanged = false;
  FRAGMENT;
  STYLE;
  attachedShadow = false;
  obsAttributes = ["props", "options", "onchanged", "onresize", "ondelete", "oncreate", "template"];
  get observedAttributes() {
    return this.obsAttributes;
  }
  get obsAttributes() {
    return this.obsAttributes;
  }
  set obsAttributes(att) {
    if (typeof att === "string") {
      this.obsAttributes.push(att);
    } else if (Array.isArray(att))
      this.obsAttributes = att;
  }
  static get tag() {
    return this.name.toLowerCase() + "-";
  }
  static addElement(tag = this.tag, cls = this, extend = void 0) {
    addCustomElement(cls, tag, extend);
  }
  attributeChangedCallback = (name2, old, val) => {
    if (name2 === "onchanged") {
      let onchanged = val;
      if (typeof onchanged === "string")
        onchanged = parseFunctionFromText2(onchanged);
      if (typeof onchanged === "function") {
        this.onchanged = onchanged;
        this.state.data.props = this.props;
        this.state.unsubscribeTrigger("props");
        this.state.subscribeTrigger("props", this.onchanged);
        let changed = new CustomEvent("changed", { detail: { props: this.props, self: this } });
        this.state.subscribeTrigger("props", () => {
          this.dispatchEvent(changed);
        });
      }
    } else if (name2 === "onresize") {
      let onresize = val;
      if (typeof onresize === "string")
        onresize = parseFunctionFromText2(onresize);
      if (typeof onresize === "function") {
        if (this.ONRESIZE) {
          try {
            window.removeEventListener("resize", this.ONRESIZE);
          } catch (err) {
          }
        }
        this.ONRESIZE = (ev) => {
          this.onresize(this.props, this);
        };
        this.onresize = onresize;
        window.addEventListener("resize", this.ONRESIZE);
      }
    } else if (name2 === "ondelete") {
      let ondelete = val;
      if (typeof ondelete === "string")
        ondelete = parseFunctionFromText2(ondelete);
      if (typeof ondelete === "function") {
        this.ondelete = () => {
          if (this.ONRESIZE)
            window.removeEventListener("resize", this.ONRESIZE);
          this.state.unsubscribeTrigger("props");
          if (ondelete)
            ondelete(this.props, this);
        };
      }
    } else if (name2 === "oncreate") {
      let oncreate2 = val;
      if (typeof oncreate2 === "string")
        oncreate2 = parseFunctionFromText2(oncreate2);
      if (typeof oncreate2 === "function") {
        this.oncreate = oncreate2;
      }
    } else if (name2 === "renderonchanged") {
      let rpc = val;
      if (typeof this.renderonchanged === "number")
        this.unsubscribeTrigger(this.renderonchanged);
      if (typeof rpc === "string")
        rpc = parseFunctionFromText2(rpc);
      if (typeof rpc === "function") {
        this.renderonchanged = this.state.subscribeTrigger("props", (p) => {
          this.render(p);
          rpc(this, p);
        });
      } else if (rpc != false)
        this.renderonchanged = this.state.subscribeTrigger("props", this.render);
    } else if (name2 === "props") {
      let newProps = val;
      if (typeof newProps === "string")
        newProps = JSON.parse(newProps);
      Object.assign(this.props, newProps);
      this.state.setState({ props: this.props });
    } else if (name2 === "template") {
      let template = val;
      this.template = template;
      this.render(this.props);
      let created = new CustomEvent("created", { detail: { props: this.props } });
      this.dispatchEvent(created);
    } else {
      let parsed = val;
      if (name2.includes("eval_")) {
        name2 = name2.split("_");
        name2.shift();
        name2 = name2.join();
        parsed = parseFunctionFromText2(val);
      } else if (typeof val === "string") {
        try {
          parsed = JSON.parse(val);
        } catch (err) {
          parsed = val;
        }
      }
      this[name2] = parsed;
      if (name2 !== "props" && this.props)
        this.props[name2] = parsed;
    }
  };
  connectedCallback() {
    if (!this.props)
      this.props = {};
    let newProps = this.getAttribute("props");
    if (typeof newProps === "string")
      newProps = JSON.parse(newProps);
    Object.assign(this.props, newProps);
    this.state.setState({ props: this.props });
    Array.from(this.attributes).forEach((att) => {
      let name2 = att.name;
      let parsed = att.value;
      if (name2.includes("eval_") || name2.includes("()")) {
        if (name2.includes("eval_"))
          name2 = name2.split("_");
        else if (name2.includes("()"))
          name2 = name2.substring(0, name2.indexOf("("));
        name2.shift();
        name2 = name2.join();
        parsed = parseFunctionFromText2(att.value);
      } else if (typeof att.value === "string") {
        try {
          parsed = JSON.parse(att.value);
        } catch (err) {
          parsed = att.value;
        }
      }
      if (!this[name2]) {
        Object.defineProperties(this, att, {
          value: parsed,
          writable: true,
          get() {
            return this[name2];
          },
          set(val) {
            this.setAttribute(name2, val);
          }
        });
      }
      this[name2] = parsed;
      if (name2 !== "props")
        this.props[name2] = parsed;
      this.obsAttributes.push(name2);
    });
    let resizeevent = new CustomEvent("resized", { detail: { props: this.props, self: this } });
    let changed = new CustomEvent("changed", { detail: { props: this.props, self: this } });
    let deleted = new CustomEvent("deleted", { detail: { props: this.props, self: this } });
    let created = new CustomEvent("created", { detail: { props: this.props, self: this } });
    this.render(this.props);
    this.dispatchEvent(created);
    this.state.subscribeTrigger("props", () => {
      this.dispatchEvent(changed);
    });
    if (typeof this.onresize === "function") {
      if (this.ONRESIZE) {
        try {
          window.removeEventListener("resize", this.ONRESIZE);
        } catch (err) {
        }
      }
      this.ONRESIZE = (ev) => {
        this.onresize(this, this.props);
        this.dispatchEvent(resizeevent);
      };
      window.addEventListener("resize", this.ONRESIZE);
    }
    if (typeof this.ondelete === "function") {
      let ondelete = this.ondelete;
      this.ondelete = (props = this.props) => {
        if (this.ONRESIZE)
          window.removeEventListener("resize", this.ONRESIZE);
        this.state.unsubscribeTrigger("props");
        this.dispatchEvent(deleted);
        ondelete(this, props);
      };
    }
    if (typeof this.onchanged === "function") {
      this.state.data.props = this.props;
      this.state.subscribeTrigger("props", this.onchanged);
    }
    if (this.renderonchanged) {
      let rpc = this.renderonchanged;
      if (typeof this.renderonchanged === "number")
        this.unsubscribeTrigger(this.renderonchanged);
      if (typeof rpc === "string")
        rpc = parseFunctionFromText2(rpc);
      if (typeof rpc === "function") {
        this.renderonchanged = this.state.subscribeTrigger("props", (p) => {
          this.render(p);
          rpc(this, p);
        });
      } else if (rpc !== false)
        this.renderonchanged = this.state.subscribeTrigger("props", this.render);
    }
  }
  constructor() {
    super();
  }
  delete = () => {
    this.remove();
    if (typeof this.ondelete === "function")
      this.ondelete(this.props);
  };
  render = (props = this.props) => {
    if (typeof this.template === "function")
      this.templateResult = this.template(this, props);
    else
      this.templateResult = this.template;
    if (this.styles)
      this.templateResult = `<style>${this.styles}</style>${this.templateResult}`;
    const t = document.createElement("template");
    if (typeof this.templateResult === "string")
      t.innerHTML = this.templateResult;
    else if (this.templateResult instanceof HTMLElement) {
      if (this.templateResult.parentNode) {
        this.templateResult.parentNode.removeChild(this.templateResult);
      }
      t.appendChild(this.templateResult);
    }
    const fragment = t.content;
    if (this.FRAGMENT) {
      if (this.useShadow) {
        if (this.STYLE)
          this.shadowRoot.removeChild(this.STYLE);
        this.shadowRoot.removeChild(this.FRAGMENT);
      } else
        this.removeChild(this.FRAGMENT);
    }
    if (this.useShadow) {
      if (!this.attachedShadow) {
        this.attachShadow({ mode: "open" }).innerHTML = "<slot></slot>";
        this.attachedShadow = true;
      }
      if (this.styles) {
        let style3 = document.createElement("style");
        style3.textContent = this.styles;
        this.shadowRoot.prepend(style3);
        this.STYLE = style3;
      }
      this.shadowRoot.prepend(fragment);
      this.FRAGMENT = this.shadowRoot.childNodes[0];
    } else {
      this.prepend(fragment);
      this.FRAGMENT = this.childNodes[0];
    }
    let rendered = new CustomEvent("rendered", { detail: { props: this.props, self: this } });
    this.dispatchEvent(rendered);
    if (this.oncreate)
      this.oncreate(this, props);
  };
  state = {
    pushToState: {},
    data: {},
    triggers: {},
    setState(updateObj) {
      Object.assign(this.pushToState, updateObj);
      if (Object.keys(this.triggers).length > 0) {
        for (const prop of Object.getOwnPropertyNames(this.triggers)) {
          if (this.pushToState[prop]) {
            this.data[prop] = this.pushToState[prop];
            delete this.pushToState[prop];
            this.triggers[prop].forEach((obj) => {
              obj.onchanged(this.data[prop]);
            });
          }
        }
      }
      return this.pushToState;
    },
    subscribeTrigger(key, onchanged = (res) => {
    }) {
      if (key) {
        if (!this.triggers[key]) {
          this.triggers[key] = [];
        }
        let l = this.triggers[key].length;
        this.triggers[key].push({ idx: l, onchanged });
        return this.triggers[key].length - 1;
      } else
        return void 0;
    },
    unsubscribeTrigger(key, sub) {
      let triggers = this.triggers[key];
      if (triggers) {
        if (!sub)
          delete this.triggers[key];
        else {
          let idx = void 0;
          let obj = triggers.find((o, i) => {
            if (o.idx === sub) {
              idx = i;
              return true;
            }
          });
          if (obj)
            triggers.splice(idx, 1);
          return true;
        }
      }
    },
    subscribeTriggerOnce(key = void 0, onchanged = (value) => {
    }) {
      let sub;
      let changed = (value) => {
        onchanged(value);
        this.unsubscribeTrigger(key, sub);
      };
      sub = this.subscribeTrigger(key, changed);
    }
  };
  get props() {
    return this.props;
  }
  set props(newProps = {}) {
    this.setAttribute("props", newProps);
  }
  get template() {
    return this.template;
  }
  set template(template) {
    this.setAttribute("template", template);
  }
  get render() {
    return this.render;
  }
  get delete() {
    return this.delete;
  }
  get state() {
    return this.state;
  }
  get onchanged() {
    return this.onchanged;
  }
  set onchanged(onchanged) {
    this.setAttribute("onchanged", onchanged);
  }
  get styles() {
    return this.styles;
  }
  set styles(templateStr) {
    this.styles = templateStr;
    if (this.querySelector("style")) {
      this.querySelector("style").innerHTML = templateStr;
    } else {
      this.render();
    }
  }
  get renderonchanged() {
    return this.renderonchanged;
  }
  set renderonchanged(onchanged) {
    this.setAttribute("renderonchanged", onchanged);
  }
  get onresize() {
    return this.props;
  }
  set onresize(onresize) {
    this.setAttribute("onresize", onresize);
  }
  get ondelete() {
    return this.props;
  }
  set ondelete(ondelete) {
    this.setAttribute("ondelete", ondelete);
  }
  get oncreate() {
    return this.oncreate;
  }
  set oncreate(oncreate2) {
    this.setAttribute("oncreated", oncreate2);
  }
};
function addCustomElement(cls, tag, extend = null) {
  try {
    if (extend) {
      if (tag)
        window.customElements.define(tag, cls, { extends: extend });
      else
        window.customElements.define(cls.name.toLowerCase() + "-", cls, { extends: extend });
    } else {
      if (tag)
        window.customElements.define(tag, cls);
      else
        window.customElements.define(cls.name.toLowerCase() + "-", cls);
    }
  } catch (err) {
  }
}
function parseFunctionFromText2(method) {
  let getFunctionBody = (methodString) => {
    return methodString.replace(/^\W*(function[^{]+\{([\s\S]*)\}|[^=]+=>[^{]*\{([\s\S]*)\}|[^=]+=>(.+))/i, "$2$3$4");
  };
  let getFunctionHead = (methodString) => {
    let startindex = methodString.indexOf(")");
    return methodString.slice(0, methodString.indexOf("{", startindex) + 1);
  };
  let newFuncHead = getFunctionHead(method);
  let newFuncBody = getFunctionBody(method);
  let newFunc;
  try {
    if (newFuncHead.includes("function")) {
      let varName = newFuncHead.split("(")[1].split(")")[0];
      newFunc = new Function(varName, newFuncBody);
    } else {
      if (newFuncHead.substring(0, 6) === newFuncBody.substring(0, 6)) {
        let varName = newFuncHead.split("(")[1].split(")")[0];
        newFunc = new Function(varName, newFuncBody.substring(newFuncBody.indexOf("{") + 1, newFuncBody.length - 1));
      } else {
        try {
          newFunc = (0, eval)(newFuncHead + newFuncBody + "}");
        } catch (err) {
          newFunc = (0, eval)(method);
        }
      }
    }
  } catch (err) {
  }
  return newFunc;
}
var Service = class extends Graph {
  constructor(options2 = {}) {
    super(void 0, options2.name ? options2.name : `service${Math.floor(Math.random() * 1e14)}`, options2.props);
    this.routes = {};
    this.loadDefaultRoutes = false;
    this.keepState = true;
    this.firstLoad = true;
    this.customRoutes = {};
    this.customChildren = {};
    this.init = (options3) => {
      if (options3)
        options3 = Object.assign({}, options3);
      else
        options3 = {};
      if (options3.customRoutes)
        Object.assign(options3.customRoutes, this.customRoutes);
      else
        options3.customRoutes = this.customRoutes;
      if (options3.customChildren)
        Object.assign(options3.customChildren, this.customChildren);
      else
        options3.customChildren = this.customChildren;
      if (Array.isArray(options3.routes)) {
        options3.routes.forEach((r) => {
          this.load(r, options3.includeClassName, options3.routeFormat, options3.customRoutes, options3.customChildren, options3.sharedState);
        });
      } else if (options3.routes || (Object.keys(this.routes).length > 0 || this.loadDefaultRoutes) && this.firstLoad)
        this.load(options3.routes, options3.includeClassName, options3.routeFormat, options3.customRoutes, options3.customChildren, options3.sharedState);
    };
    this.load = (routes, includeClassName = true, routeFormat = ".", customRoutes = this.customRoutes, customChildren = this.customChildren, sharedState = true) => {
      if (!routes && !this.loadDefaultRoutes && (Object.keys(this.routes).length > 0 || this.firstLoad))
        return;
      if (this.firstLoad)
        this.firstLoad = false;
      if (customRoutes)
        customRoutes = Object.assign(this.customRoutes, customRoutes);
      else
        customRoutes = this.customRoutes;
      let service;
      let allRoutes = {};
      if (routes) {
        if (!(routes instanceof Graph) && routes?.name && !routes.setTree) {
          if (routes.module) {
            let mod = routes;
            routes = {};
            Object.getOwnPropertyNames(routes.module).forEach((prop) => {
              if (includeClassName)
                routes[mod.name + routeFormat + prop] = routes.module[prop];
              else
                routes[prop] = routes.module[prop];
            });
          } else if (typeof routes === "function") {
            service = new routes({ loadDefaultRoutes: this.loadDefaultRoutes });
            service.load();
            if (sharedState)
              service.state = this.state;
            routes = service.routes;
            if (service.customRoutes && !this.customRoutes)
              this.customRoutes = service.customRoutes;
            else if (service.customRoutes && this.customRoutes)
              Object.assign(this.customRoutes, service.customRoutes);
            if (service.customChildren && !this.customChildren)
              this.customChildren = service.customChildren;
            else if (service.customChildren && this.customChildren)
              Object.assign(this.customChildren, service.customChildren);
          }
        } else if (routes instanceof Graph || routes.source instanceof Graph || routes.setTree) {
          service = routes;
          routes = {};
          if (sharedState)
            service.state = this.state;
          if (includeClassName) {
            let name2 = service.name;
            if (!name2) {
              name2 = service.tag;
              service.name = name2;
            }
            if (!name2) {
              name2 = `graph${Math.floor(Math.random() * 1e15)}`;
              service.name = name2;
              service.tag = name2;
            }
          }
          if (service.customRoutes && !this.customRoutes)
            this.customRoutes = service.customRoutes;
          else if (service.customRoutes && this.customRoutes)
            Object.assign(this.customRoutes, service.customRoutes);
          if (service.customChildren && !this.customChildren)
            this.customChildren = service.customChildren;
          else if (service.customChildren && this.customChildren)
            Object.assign(this.customChildren, service.customChildren);
          service.nodes.forEach((node) => {
            routes[node.tag] = node;
            let checked = {};
            let checkChildGraphNodes = (nd, par) => {
              if (!checked[nd.tag] || par && includeClassName && !checked[par?.tag + routeFormat + nd.tag]) {
                if (!par)
                  checked[nd.tag] = true;
                else
                  checked[par.tag + routeFormat + nd.tag] = true;
                if (nd instanceof Graph || nd.source instanceof Graph || nd.setTree) {
                  if (sharedState)
                    nd.state = this.state;
                  if (includeClassName) {
                    let nm = nd.name;
                    if (!nm) {
                      nm = nd.tag;
                      nd.name = nm;
                    }
                    if (!nm) {
                      nm = `graph${Math.floor(Math.random() * 1e15)}`;
                      nd.name = nm;
                      nd.tag = nm;
                    }
                  }
                  nd.nodes.forEach((n) => {
                    if (includeClassName && !routes[nd.tag + routeFormat + n.tag])
                      routes[nd.tag + routeFormat + n.tag] = n;
                    else if (!routes[n.tag])
                      routes[n.tag] = n;
                    checkChildGraphNodes(n, nd);
                  });
                }
              }
            };
            checkChildGraphNodes(node);
          });
        } else if (typeof routes === "object") {
          let name2 = routes.constructor.name;
          if (name2 === "Object") {
            name2 = Object.prototype.toString.call(routes);
            if (name2)
              name2 = name2.split(" ")[1];
            if (name2)
              name2 = name2.split("]")[0];
          }
          if (name2 && name2 !== "Object") {
            let module = routes;
            routes = {};
            Object.getOwnPropertyNames(module).forEach((route) => {
              if (includeClassName)
                routes[name2 + routeFormat + route] = module[route];
              else
                routes[route] = module[route];
            });
          }
        }
        if ((service instanceof Graph || service?.setTree) && service.name && includeClassName) {
          routes = Object.assign({}, routes);
          for (const prop in routes) {
            let route = routes[prop];
            delete routes[prop];
            routes[service.name + routeFormat + prop] = route;
          }
        }
      }
      if (this.loadDefaultRoutes) {
        let rts2 = Object.assign({}, this.defaultRoutes);
        if (routes) {
          Object.assign(rts2, this.routes);
          routes = Object.assign(rts2, routes);
        } else
          routes = Object.assign(rts2, this.routes);
        this.loadDefaultRoutes = false;
      }
      if (!routes)
        routes = this.routes;
      let incr = 0;
      for (const tag in routes) {
        incr++;
        let childrenIter = (route, routeKey) => {
          if (typeof route === "object") {
            if (!route.tag)
              route.tag = routeKey;
            if (typeof route?.children === "object") {
              nested:
                for (const key in route.children) {
                  incr++;
                  if (typeof route.children[key] === "object") {
                    let rt = route.children[key];
                    if (rt.tag && allRoutes[rt.tag])
                      continue;
                    if (customChildren) {
                      for (const k2 in customChildren) {
                        rt = customChildren[k2](rt, key, route, routes, allRoutes);
                        if (!rt)
                          continue nested;
                      }
                    }
                    if (rt.id && !rt.tag) {
                      rt.tag = rt.id;
                    }
                    let k;
                    if (rt.tag) {
                      if (allRoutes[rt.tag]) {
                        let randkey = `${rt.tag}${incr}`;
                        allRoutes[randkey] = rt;
                        rt.tag = randkey;
                        childrenIter(allRoutes[randkey], key);
                        k = randkey;
                      } else {
                        allRoutes[rt.tag] = rt;
                        childrenIter(allRoutes[rt.tag], key);
                        k = rt.tag;
                      }
                    } else {
                      if (allRoutes[key]) {
                        let randkey = `${key}${incr}`;
                        allRoutes[randkey] = rt;
                        rt.tag = randkey;
                        childrenIter(allRoutes[randkey], key);
                        k = randkey;
                      } else {
                        allRoutes[key] = rt;
                        childrenIter(allRoutes[key], key);
                        k = key;
                      }
                    }
                    if (service?.name && includeClassName) {
                      allRoutes[service.name + routeFormat + k] = rt;
                      delete allRoutes[k];
                    } else
                      allRoutes[k] = rt;
                  }
                }
            }
          }
        };
        allRoutes[tag] = routes[tag];
        childrenIter(routes[tag], tag);
      }
      top:
        for (const route in allRoutes) {
          if (typeof allRoutes[route] === "object") {
            let r = allRoutes[route];
            if (typeof r === "object") {
              if (customRoutes) {
                for (const key in customRoutes) {
                  r = customRoutes[key](r, route, allRoutes);
                  if (!r)
                    continue top;
                }
              }
              if (r.get) {
                if (typeof r.get == "object") {
                }
              }
              if (r.post) {
              }
              if (r.delete) {
              }
              if (r.put) {
              }
              if (r.head) {
              }
              if (r.patch) {
              }
              if (r.options) {
              }
              if (r.connect) {
              }
              if (r.trace) {
              }
              if (r.post && !r.operator) {
                allRoutes[route].operator = r.post;
              } else if (!r.operator && typeof r.get == "function") {
                allRoutes[route].operator = r.get;
              }
            }
          }
        }
      for (const route in routes) {
        if (typeof routes[route] === "object") {
          if (this.routes[route]) {
            if (typeof this.routes[route] === "object")
              Object.assign(this.routes[route], routes[route]);
            else
              this.routes[route] = routes[route];
          } else
            this.routes[route] = routes[route];
        } else if (this.routes[route]) {
          if (typeof this.routes[route] === "object")
            Object.assign(this.routes[route], routes[route]);
          else
            this.routes[route] = routes[route];
        } else
          this.routes[route] = routes[route];
      }
      if (service) {
        for (const key in this.routes) {
          if (this.routes[key] instanceof GraphNode || this.routes[key].constructor.name.includes("GraphNode")) {
            this.nodes.set(key, this.routes[key]);
            this.nNodes = this.nodes.size;
          }
        }
      } else
        this.setTree(this.routes);
      for (const prop in routes) {
        if (this.routes[prop]?.aliases) {
          let aliases = this.routes[prop].aliases;
          aliases.forEach((a) => {
            if (service?.name && includeClassName)
              routes[service.name + routeFormat + a] = this.routes[prop];
            else
              routes[a] = this.routes[prop];
          });
        }
      }
      return this.routes;
    };
    this.unload = (routes = this.routes) => {
      if (!routes)
        return;
      let service;
      if (!(routes instanceof Service) && typeof routes === "function") {
        service = new Service();
        routes = service.routes;
      } else if (routes instanceof Service) {
        routes = routes.routes;
      }
      for (const r in routes) {
        delete this.routes[r];
        if (this.nodes.get(r))
          this.remove(r);
      }
      return this.routes;
    };
    this.handleMethod = (route, method, args) => {
      let m = method.toLowerCase();
      let src = this.nodes.get(route);
      if (!src) {
        src = this.routes[route];
        if (!src)
          src = this.tree[route];
      }
      if (src?.[m]) {
        if (!(src[m] instanceof Function)) {
          if (args)
            src[m] = args;
          return src[m];
        } else
          return src[m](args);
      } else
        return this.handleServiceMessage({ route, args, method });
    };
    this.transmit = (...args) => {
      if (typeof args[0] === "object") {
        if (args[0].method) {
          return this.handleMethod(args[0].route, args[0].method, args[0].args);
        } else if (args[0].route) {
          return this.handleServiceMessage(args[0]);
        } else if (args[0].node) {
          return this.handleGraphNodeCall(args[0].node, args[0].args);
        } else if (this.keepState) {
          if (args[0].route)
            this.setState({ [args[0].route]: args[0].args });
          if (args[0].node)
            this.setState({ [args[0].node]: args[0].args });
        }
        return args;
      } else
        return args;
    };
    this.receive = (...args) => {
      if (args[0]) {
        if (typeof args[0] === "string") {
          let substr = args[0].substring(0, 8);
          if (substr.includes("{") || substr.includes("[")) {
            if (substr.includes("\\"))
              args[0] = args[0].replace(/\\/g, "");
            if (args[0][0] === '"') {
              args[0] = args[0].substring(1, args[0].length - 1);
            }
            ;
            args[0] = JSON.parse(args[0]);
          }
        }
      }
      if (typeof args[0] === "object") {
        if (args[0].method) {
          return this.handleMethod(args[0].route, args[0].method, args[0].args);
        } else if (args[0].route) {
          return this.handleServiceMessage(args[0]);
        } else if (args[0].node) {
          return this.handleGraphNodeCall(args[0].node, args[0].args);
        } else if (this.keepState) {
          if (args[0].route)
            this.setState({ [args[0].route]: args[0].args });
          if (args[0].node)
            this.setState({ [args[0].node]: args[0].args });
        }
        return args;
      } else
        return args;
    };
    this.pipe = (source, destination, endpoint, method, callback) => {
      if (source instanceof GraphNode) {
        if (callback)
          return source.subscribe((res) => {
            let mod = callback(res);
            if (mod !== void 0)
              this.transmit({ route: destination, args: mod, method });
            else
              this.transmit({ route: destination, args: res, method }, endpoint);
          });
        else
          return this.subscribe(source, (res) => {
            this.transmit({ route: destination, args: res, method }, endpoint);
          });
      } else if (typeof source === "string")
        return this.subscribe(source, (res) => {
          this.transmit({ route: destination, args: res, method }, endpoint);
        });
    };
    this.pipeOnce = (source, destination, endpoint, method, callback) => {
      if (source instanceof GraphNode) {
        if (callback)
          return source.state.subscribeTriggerOnce(source.tag, (res) => {
            let mod = callback(res);
            if (mod !== void 0)
              this.transmit({ route: destination, args: mod, method });
            else
              this.transmit({ route: destination, args: res, method }, endpoint);
          });
        else
          return this.state.subscribeTriggerOnce(source.tag, (res) => {
            this.transmit({ route: destination, args: res, method }, endpoint);
          });
      } else if (typeof source === "string")
        return this.state.subscribeTriggerOnce(source, (res) => {
          this.transmit({ route: destination, args: res, method }, endpoint);
        });
    };
    this.terminate = (...args) => {
      this.nodes.forEach((n) => {
        n.stopNode();
      });
    };
    this.recursivelyAssign = (target, obj) => {
      for (const key in obj) {
        if (typeof obj[key] === "object" && !Array.isArray(obj[key])) {
          if (typeof target[key] === "object" && !Array.isArray(target[key]))
            this.recursivelyAssign(target[key], obj[key]);
          else
            target[key] = this.recursivelyAssign({}, obj[key]);
        } else
          target[key] = obj[key];
      }
      return target;
    };
    this.defaultRoutes = {
      "/": {
        get: () => {
          return this.print();
        },
        aliases: [""]
      },
      ping: () => {
        console.log("ping");
        return "pong";
      },
      echo: (...args) => {
        this.transmit(...args);
        return args;
      },
      assign: (source) => {
        if (typeof source === "object") {
          Object.assign(this, source);
          return true;
        }
        return false;
      },
      recursivelyAssign: (source) => {
        if (typeof source === "object") {
          this.recursivelyAssign(this, source);
          return true;
        }
        return false;
      },
      log: {
        post: (...args) => {
          console.log("Log: ", ...args);
        },
        aliases: ["info"]
      },
      error: (message) => {
        let er = new Error(message);
        console.error(message);
        return er;
      },
      state: (key) => {
        if (key) {
          return this.state.data[key];
        } else
          return this.state.data;
      },
      printState: (key) => {
        if (key) {
          return stringifyWithCircularRefs(this.state.data[key]);
        } else
          return stringifyWithCircularRefs(this.state.data);
      },
      spliceTypedArray: this.spliceTypedArray,
      transmit: this.transmit,
      receive: this.receive,
      load: this.load,
      unload: this.unload,
      pipe: this.pipe,
      terminate: this.terminate,
      run: this.run,
      subscribe: this.subscribe,
      subscribeNode: this.subscribeNode,
      unsubscribe: this.unsubscribe,
      stopNode: this.stopNode,
      get: this.get,
      add: this.add,
      remove: this.remove,
      setTree: this.setTree,
      setState: this.setState,
      print: this.print,
      reconstruct: this.reconstruct,
      handleMethod: this.handleMethod,
      handleServiceMessage: this.handleServiceMessage,
      handleGraphNodeCall: this.handleGraphNodeCall
    };
    if (options2.name)
      this.name = options2.name;
    else
      options2.name = this.tag;
    if ("loadDefaultRoutes" in options2) {
      this.loadDefaultRoutes = options2.loadDefaultRoutes;
      this.routes = Object.assign(this.defaultRoutes, this.routes);
    }
    if (options2 || Object.keys(this.routes).length > 0)
      this.init(options2);
  }
  handleServiceMessage(message) {
    let call;
    if (typeof message === "object") {
      if (message.route)
        call = message.route;
      else if (message.node)
        call = message.node;
    }
    if (call) {
      if (Array.isArray(message.args))
        return this.run(call, ...message.args);
      else
        return this.run(call, message.args);
    } else
      return message;
  }
  handleGraphNodeCall(route, args) {
    if (!route)
      return args;
    if (args?.args) {
      this.handleServiceMessage(args);
    } else if (Array.isArray(args))
      return this.run(route, ...args);
    else
      return this.run(route, args);
  }
  isTypedArray(x) {
    return ArrayBuffer.isView(x) && Object.prototype.toString.call(x) !== "[object DataView]";
  }
  spliceTypedArray(arr, start, end) {
    let s = arr.subarray(0, start);
    let e;
    if (end) {
      e = arr.subarray(end + 1);
    }
    let n;
    if (s.length > 0 || e?.length > 0)
      n = new arr.constructor(s.length + e.length);
    if (s.length > 0)
      n.set(s);
    if (e && e.length > 0)
      n.set(e, s.length);
    return n;
  }
};
var DOMService = class extends Service {
  constructor(options2, parentNode, interpreters) {
    super({ props: options2?.props, name: options2?.name ? options2.name : `dom${Math.floor(Math.random() * 1e15)}` });
    this.loadDefaultRoutes = false;
    this.keepState = true;
    this.parentNode = document.body;
    this.interpreters = {
      md: (template, options3) => {
        if (typeof markdownit === "undefined") {
          document.head.insertAdjacentHTML("beforeend", `
                    <script src='https://unpkg.com/markdown-it@latest/dist/markdown-it.min.js'><\/script>`);
        }
        let md = globalThis.markdownit();
        let html = md.render(template);
        options3.template = html;
      },
      jsx: (template, options3) => {
        if (!options3.parentNode)
          options3.parentNode = this.parentNode;
        if (typeof options3.parentNode === "string")
          options3.parentNode = document.getElementById(options3.parentNode);
        if (typeof ReactDOM === "undefined") {
          document.head.insertAdjacentHTML("beforeend", `
                    <script src='https://unpkg.com/react@latest/umd/react.production.min.js'><\/script>
                    <script src='https://unpkg.com/react-dom@latest/umd/react-dom.production.min.js'><\/script>`);
        }
        options3.template = "";
        let onrender5 = options3.onrender;
        options3.onrender = (self2, info) => {
          const modal = ReactDOM.createPortal(template, options3.id);
          onrender5(self2, info);
        };
      }
    };
    this.customRoutes = {
      "dom": (r, route, routes) => {
        if (!(r instanceof GraphNode)) {
          if (r.element?.parentNode?.id && r.graph?.parentNode?.id) {
            if (r.graph.parentNode.id === r.element.id) {
              r.parentNode = this.parentNode;
            }
          } else {
            if (r.template) {
              if (!r.tag)
                r.tag = route;
              this.addComponent(r, r.generateChildElementNodes);
            } else if (r.context) {
              if (!r.tag)
                r.tag = route;
              this.addCanvasComponent(r);
            } else if (r.tagName || r.element) {
              if (!r.tag)
                r.tag = route;
              this.addElement(r, r.generateChildElementNodes);
            }
          }
        }
        return r;
      }
    };
    this.customChildren = {
      "dom": (rt, routeKey, parent, routes, checked) => {
        if ((parent.tag || parent.id) && (parent.template || parent.context || parent.tagName || parent.element) && (rt.template || rt.context || rt.tagName || rt.element) && !rt.parentNode) {
          if (parent.tag)
            rt.parentNode = parent.tag;
          if (parent.id)
            rt.parentNode = parent.id;
        }
        return rt;
      }
    };
    this.elements = {};
    this.components = {};
    this.templates = {};
    this.addElement = (options3, generateChildElementNodes = false) => {
      let elm = this.createElement(options3);
      if (!options3.element)
        options3.element = elm;
      if (!options3.operator)
        options3.operator = function(props) {
          if (typeof props === "object")
            for (const key in props) {
              if (this.element) {
                if (typeof this.element[key] === "function" && typeof props[key] !== "function") {
                  if (Array.isArray(props[key]))
                    this.element[key](...props[key]);
                  else
                    this.element[key](props[key]);
                } else if (key === "style") {
                  Object.assign(this.element[key], props[key]);
                } else
                  this.element[key] = props[key];
              }
            }
          return props;
        };
      let node = this.resolveGraphNode(elm, options3);
      let divs = Array.from(elm.querySelectorAll("*"));
      if (generateChildElementNodes) {
        divs = divs.map((d2, i) => this.addElement({ element: d2 }));
      }
      this.elements[options3.id] = { element: elm, node, parentNode: options3.parentNode, divs };
      if (!node.ondelete)
        node.ondelete = (node2) => {
          elm.remove();
          if (options3.onremove)
            options3.onremove.call(this.elements[options3.id].node, elm, this.elements[options3.id]);
        };
      if (options3.onresize) {
        let onresize = options3.onresize;
        options3.onresize = (ev) => {
          onresize.call(this.elements[options3.id].node, ev, elm, this.elements[options3.id]);
        };
        window.addEventListener("resize", options3.onresize);
      }
      return this.elements[options3.id];
    };
    this.createElement = (options3) => {
      let elm;
      if (options3.element) {
        if (typeof options3.element === "string") {
          elm = document.querySelector(options3.element);
          if (!elm)
            elm = document.getElementById(options3.element);
        } else
          elm = options3.element;
      } else if (options3.tagName)
        elm = document.createElement(options3.tagName);
      else if (options3.id && document.getElementById(options3.id))
        elm = document.getElementById(options3.id);
      if (!elm)
        return void 0;
      this.updateOptions(options3, elm);
      return elm;
    };
    this.updateOptions = (options3, element) => {
      if (!options3.id && options3.tag)
        options3.id = options3.tag;
      if (!options3.tag && options3.id)
        options3.tag = options3.id;
      if (!options3.id)
        options3.id = `${options3.tagName ?? "element"}${Math.floor(Math.random() * 1e15)}`;
      let p = options3.parentNode;
      delete options3.parentNode;
      Object.defineProperty(options3, "parentNode", {
        get: function() {
          return element.parentNode;
        },
        set: (v) => {
          if (element.parentNode) {
            element.parentNode.removeChild(element);
          }
          this.resolveParentNode(element, v ? v : this.parentNode, options3, options3.onrender);
        },
        enumerable: true,
        configurable: true
      });
      options3.parentNode = p ? p : this.parentNode;
      element.id = options3.id;
      if (options3.style)
        Object.assign(element.style, options3.style);
      if (options3.attributes) {
        for (let key in options3.attributes) {
          if (typeof options3.attributes[key] === "function")
            element[key] = (...args) => options3.attributes[key](...args);
          else
            element[key] = options3.attributes[key];
        }
      }
      if (!options3.attributes?.innerHTML && options3.innerHTML) {
        element.innerHTML = options3.innerHTML;
      } else if (!options3.attributes?.innerText && options3.innerText) {
        element.innerText = options3.innerText;
      }
      return options3;
    };
    this.resolveParentNode = (elm, parentNode2, options3, oncreate2) => {
      if (!elm.parentNode) {
        setTimeout(() => {
          if (typeof parentNode2 === "string")
            parentNode2 = document.getElementById(parentNode2);
          if (parentNode2 && typeof parentNode2 === "object") {
            parentNode2.appendChild(elm);
          }
          if (oncreate2)
            oncreate2.call(elm.node, elm, this.elements[options3.id]);
          if (elm.node.animation || elm.node.animate) {
            elm.node.runAnimation();
          }
          if (elm.node.looper || typeof elm.node.loop === "number" && elm.node.loop) {
            elm.node.runLoop();
          }
        }, 0.01);
      }
    };
    this.resolveGraphNode = (element, options3) => {
      let node;
      if (this.nodes.get(options3.id)?.element?.parentNode?.id === options3.parentNode || this.nodes.get(options3.id)?.parentNode === options3.parentNode) {
        node = this.nodes.get(options3.id);
      } else {
        let parentId = options3.parentNode instanceof HTMLElement ? options3.parentNode?.id : typeof options3.parentNode === "string" ? options3.parentNode : void 0;
        let parent;
        if (parentId)
          parent = this.nodes.get(parentId);
        node = new GraphNode(options3 instanceof Graph ? options3 : Object.assign({}, options3), parent, this);
      }
      delete node.parentNode;
      Object.defineProperty(node, "parentNode", {
        get: function() {
          return element.parentNode;
        },
        set: (v) => {
          if (element.parentNode) {
            element.parentNode.removeChild(element);
          }
          this.resolveParentNode(element, v ? v : this.parentNode, options3, options3.onrender);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(node, "element", {
        get: () => element,
        set: (v) => {
          element = v;
          node.nodes.forEach((n) => {
            if (node.source?._unique === n.graph?._unique)
              n.parentNode = element;
          });
        }
      });
      node.element = element;
      element.node = node;
      let initialOptions = options3._initial ?? options3;
      for (let key in initialOptions) {
        if (typeof initialOptions[key] === "function") {
          const desc = Object.getOwnPropertyDescriptor(initialOptions, key);
          if (desc && desc.get && !desc.set)
            initialOptions = Object.assign({}, initialOptions);
          initialOptions[key] = initialOptions[key].bind(node);
        } else if (key === "attributes") {
          for (let key2 in initialOptions.attributes) {
            if (typeof initialOptions.attributes[key2] === "function") {
              initialOptions.attributes[key2] = initialOptions.attributes[key2].bind(node);
            }
          }
        }
      }
      return node;
    };
    this.addComponent = (options3, generateChildElementNodes = true) => {
      if (options3.onrender) {
        let oncreate2 = options3.onrender;
        options3.onrender = (element) => {
          oncreate2.call(element.node, element, options3);
        };
      }
      if (options3.onresize) {
        let onresize = options3.onresize;
        options3.onresize = (element) => {
          onresize.call(element.node, element, options3);
        };
      }
      if (options3.onremove) {
        let ondelete = options3.onremove;
        options3.onremove = (element) => {
          ondelete.call(element.node, self, options3);
        };
      }
      if (typeof options3.renderonchanged === "function") {
        let renderonchanged = options3.renderonchanged;
        options3.renderonchanged = (element) => {
          renderonchanged.call(element.node, element, options3);
        };
      }
      if (options3.interpreter && options3.interpreter !== "wc") {
        this.interpreters[options3.interpreter](options3.template, options3);
      }
      class CustomElement extends DOMElement {
        constructor() {
          super(...arguments);
          this.props = options3.props;
          this.styles = options3.styles;
          this.useShadow = options3.useShadow;
          this.template = options3.template;
          this.oncreate = options3.onrender;
          this.onresize = options3.onresize;
          this.ondelete = options3.onremove;
          this.renderonchanged = options3.renderonchanged;
        }
      }
      if (!options3.tagName)
        options3.tagName = `custom-element${Math.random() * 1e15}`;
      CustomElement.addElement(options3.tagName);
      let elm = document.createElement(options3.tagName);
      let completeOptions = this.updateOptions(options3, elm);
      this.templates[completeOptions.id] = completeOptions;
      let divs = Array.from(elm.querySelectorAll("*"));
      if (generateChildElementNodes) {
        divs = divs.map((d2) => this.addElement({ element: d2 }));
      }
      if (!options3.element)
        options3.element = elm;
      if (!options3.operator)
        options3.operator = function op(props) {
          if (typeof props === "object")
            for (const key in props) {
              if (this.element) {
                if (typeof this.element[key] === "function" && typeof props[key] !== "function") {
                  if (Array.isArray(props[key]))
                    this.element[key](...props[key]);
                  else
                    this.element[key](props[key]);
                } else if (key === "style") {
                  Object.assign(this.element[key], props[key]);
                } else
                  this.element[key] = props[key];
              }
            }
          return props;
        };
      let node = this.resolveGraphNode(elm, options3);
      if (!node.ondelete)
        node.ondelete = (node2) => {
          elm.delete();
        };
      this.components[completeOptions.id] = {
        element: elm,
        class: CustomElement,
        node,
        divs,
        ...completeOptions
      };
      return this.components[completeOptions.id];
    };
    this.addCanvasComponent = (options3) => {
      if (!options3.canvas) {
        options3.template = `<canvas `;
        if (options3.width)
          options3.template += `width="${options3.width}"`;
        if (options3.height)
          options3.template += `height="${options3.height}"`;
        options3.template += ` ></canvas>`;
      } else
        options3.template = options3.canvas;
      if (options3.onrender) {
        let oncreate2 = options3.onrender;
        options3.onrender = (element) => {
          oncreate2.call(element.node, element, options3);
        };
      }
      if (options3.onresize) {
        let onresize = options3.onresize;
        options3.onresize = (element) => {
          onresize.call(element.node, element, options3);
        };
      }
      if (options3.ondelete) {
        let ondelete = options3.onremove;
        options3.onremove = (element) => {
          ondelete.call(element.node, element, options3);
        };
      }
      if (typeof options3.renderonchanged === "function") {
        let renderonchanged = options3.renderonchanged;
        options3.renderonchanged = (element) => {
          renderonchanged.call(element.node, element, options3);
        };
      }
      class CustomElement extends DOMElement {
        constructor() {
          super(...arguments);
          this.props = options3.props;
          this.styles = options3.styles;
          this.template = options3.template;
          this.oncreate = options3.onrender;
          this.onresize = options3.onresize;
          this.ondelete = options3.onremove;
          this.renderonchanged = options3.renderonchanged;
        }
      }
      if (!options3.tagName)
        options3.tagName = `custom-element${Math.random() * 1e15}`;
      CustomElement.addElement(options3.tagName);
      let elm = document.createElement(options3.tagName);
      const completeOptions = this.updateOptions(options3, elm);
      let animation2 = () => {
        if (this.components[completeOptions.id]?.animating) {
          this.components[completeOptions.id].draw(this.components[completeOptions.id].element, this.components[completeOptions.id]);
          requestAnimationFrame(animation2);
        }
      };
      this.templates[completeOptions.id] = completeOptions;
      if (!options3.element)
        options3.element = elm;
      if (!options3.operator)
        options3.operator = function op(props) {
          if (typeof props === "object")
            for (const key in props) {
              if (this.element) {
                if (typeof this.element[key] === "function" && typeof props[key] !== "function") {
                  if (Array.isArray(props[key]))
                    this.element[key](...props[key]);
                  else
                    this.element[key](props[key]);
                } else if (key === "style") {
                  Object.assign(this.element[key], props[key]);
                } else
                  this.element[key] = props[key];
              }
            }
          return props;
        };
      let node = this.resolveGraphNode(elm, options3);
      if (!node.ondelete)
        node.ondelete = (node2) => {
          elm.delete();
        };
      let canvas = elm.querySelector("canvas");
      if (completeOptions.style)
        Object.assign(canvas.style, completeOptions.style);
      let context;
      if (typeof completeOptions.context === "object")
        context = options3.context;
      else if (typeof completeOptions.context === "string")
        context = canvas.getContext(completeOptions.context);
      this.components[completeOptions.id] = {
        element: elm,
        class: CustomElement,
        template: completeOptions.template,
        canvas,
        node,
        ...completeOptions
      };
      this.components[completeOptions.id].context = context;
      elm.canvas = canvas;
      elm.context = context;
      node.canvas = canvas;
      node.context = context;
      return this.components[completeOptions.id];
    };
    this.terminate = (element) => {
      if (typeof element === "object") {
        if (element.animating)
          element.animating = false;
        if (element.element)
          element = element.element;
      } else if (typeof element === "string" && this.components[element]) {
        if (this.components[element].node.isAnimating)
          this.components[element].node.stopNode();
        if (this.components[element].divs)
          this.components[element].divs.forEach((d2) => this.terminate(d2));
        let temp = this.components[element].element;
        delete this.components[element];
        element = temp;
      } else if (typeof element === "string" && this.elements[element]) {
        if (this.elements[element].divs)
          this.elements[element].divs.forEach((d2) => this.terminate(d2));
        let temp = this.elements[element].element;
        if (this.elements[element].onresize)
          window.removeEventListener("resize", this.elements[element].onresize);
        if (this.elements[element].ondelete)
          this.elements[element].ondelete(temp, this.elements[element]);
        delete this.elements[element];
        element = temp;
      }
      if (element) {
        if (this.nodes.get(element.id)) {
          this.removeTree(element.id);
        }
        if (element instanceof DOMElement)
          element.delete();
        else if (element?.parentNode) {
          element.parentNode.removeChild(element);
        }
        return true;
      }
      return false;
    };
    this.defaultRoutes = {
      addElement: this.addElement,
      addComponent: this.addComponent,
      addCanvasComponent: this.addCanvasComponent,
      terminate: this.terminate
    };
    if (options2?.parentNode)
      parentNode = options2.parentNode;
    if (typeof parentNode === "string")
      parentNode = document.getElementById(parentNode);
    if (parentNode instanceof HTMLElement)
      this.parentNode = parentNode;
    if (interpreters) {
      Object.assign(this.interpreters, interpreters);
    }
    this.init(options2);
  }
};
var Router = class extends Service {
  constructor(options2) {
    super(options2);
    this.name = "router";
    this.connections = {};
    this.sources = {};
    this.services = {};
    this.serviceConnections = {};
    this.users = {};
    this.addUser = async (info, connections, config, receiving) => {
      if (!info._id) {
        info._id = `user${Math.floor(Math.random() * 1e15)}`;
      }
      let user = Object.assign({}, info);
      if (connections) {
        for (const key in connections) {
          if (typeof connections[key] === "object") {
            if (!connections[key].connection._id) {
              await new Promise((res, rej) => {
                let start = performance.now();
                let checker = () => {
                  if (!connections[key].connection._id) {
                    if (performance.now() - start > 3e3) {
                      delete connections[key];
                      rej(false);
                    } else {
                      setTimeout(() => {
                        checker();
                      }, 100);
                    }
                  } else {
                    res(true);
                  }
                };
                checker();
              }).catch((er) => {
                console.error("Connections timed out:", er);
              });
            }
          }
        }
        for (const key in connections) {
          connections[key] = this.addConnection(connections[key], user._id);
        }
      }
      if (config) {
        for (const c in config) {
          this.openConnection(config[c].service, config[c], user._id, config[c].args);
        }
      }
      let send = (message, ...a) => {
        let connection = this.getConnection(user._id, "send");
        if (connection?.send)
          return connection.send(message, ...a);
      };
      let request = (message, method, ...a) => {
        let connection = this.getConnection(user._id, "request");
        if (connection?.request)
          return connection.request(message, method, ...a);
      };
      let post = (route, args, method, ...a) => {
        let connection = this.getConnection(user._id, "post");
        if (connection?.post)
          return connection.post(route, args, method, ...a);
      };
      let run = (route, args, method, ...a) => {
        let connection = this.getConnection(user._id, "run");
        if (connection?.run)
          return connection.run(route, args, method, ...a);
      };
      let subscribe = (route, callback, ...a) => {
        let connection = this.getConnection(user._id, "subscribe");
        if (connection?.subscribe)
          return connection.subscribe(route, callback, ...a);
      };
      let unsubscribe = (route, sub, ...a) => {
        let connection = this.getConnection(user._id, "unsubscribe");
        if (connection?.unsubscribe)
          return connection.unsubscribe(route, sub, ...a);
      };
      let terminate = () => {
        return this.removeUser(user);
      };
      user.send = send;
      user.request = request;
      user.post = post;
      user.run = run;
      user.subscribe = subscribe;
      user.unsubscribe = unsubscribe;
      user.terminate = terminate;
      this.users[user._id] = user;
      if (connections && !receiving) {
        let connectionIds = {};
        let pass = false;
        Object.keys(connections).map((k, i) => {
          if (connections[k]?._id) {
            connectionIds[`${i}`] = connections[k]?._id;
            pass = true;
          }
        });
        if (pass) {
          user.send({
            route: "addUser",
            args: [
              { _id: user._id },
              connectionIds,
              void 0,
              true
            ]
          });
        }
      }
      return user;
    };
    this.getConnection = (sourceId, hasMethod) => {
      if (this.sources[sourceId]) {
        if (this.order) {
          for (let i = 0; i < this.order.length; i++) {
            let k = this.order[i];
            for (const key in this.sources[sourceId]) {
              if (this.sources[sourceId][key].service) {
                if (typeof this.sources[sourceId][key].service === "object") {
                  if (this.sources[sourceId][key].service.tag === k) {
                    if (this.sources[sourceId][key].connectionType && this.sources[sourceId][key].service?.name) {
                      if (!this.serviceConnections[this.sources[sourceId][key].service.name]) {
                        this.removeConnection(this.sources[sourceId][key]);
                        continue;
                      }
                    }
                    return this.sources[sourceId][key];
                  }
                } else if (this.sources[sourceId][key].service === k) {
                  if (this.sources[sourceId][key].connectionType && this.sources[sourceId][key].service?.name) {
                    if (!this.serviceConnections[this.sources[sourceId][key].service.name])
                      this.removeConnection(this.sources[sourceId][key]);
                    continue;
                  }
                  return this.sources[sourceId][key];
                }
              }
            }
          }
        } else {
          for (const k in this.sources[sourceId]) {
            if (this.sources[sourceId][k].connectionType && this.sources[sourceId][k].service?.name) {
              if (!this.serviceConnections[this.sources[sourceId][k].service.name]) {
                this.removeConnection(this.sources[sourceId][k]);
                continue;
              }
            }
            if (hasMethod && this.sources[sourceId][k][hasMethod]) {
              return this.sources[sourceId][k];
            } else {
              return this.sources[sourceId][k];
            }
          }
        }
      } else if (this.order) {
        for (let i = 0; i < this.order.length; i++) {
          let k = this.order[i];
          if (this.sources[k]?.[sourceId]) {
            if (this.sources[k][sourceId].connectionType && this.sources[k][sourceId].service?.name) {
              if (!this.serviceConnections[this.sources[k][sourceId].service.service.name]) {
                this.removeConnection(this.sources[k][sourceId].service);
                continue;
              }
            }
            if (hasMethod && this.sources[k][sourceId]?.[hasMethod]) {
              return this.sources[k][sourceId];
            } else {
              return this.sources[k][sourceId];
            }
          }
        }
      }
      if (typeof sourceId === "string" && this.connections[sourceId] && this.connections[sourceId].send) {
        return this.connections[sourceId];
      }
    };
    this.getConnections = (sourceId, hasMethod, props) => {
      if (this.sources[sourceId]) {
        if (!props && !hasMethod)
          return this.sources[sourceId];
        let found = {};
        for (const key in this.sources[sourceId]) {
          if (typeof this.sources[sourceId][key] === "object") {
            if (!this.sources[sourceId][key]._id) {
              for (const k in this.sources[sourceId][key]) {
                if (typeof this.sources[sourceId][key][k] === "object") {
                  let pass = true;
                  if (hasMethod && !this.sources[sourceId][key][k][hasMethod])
                    pass = false;
                  for (const p in props) {
                    if (typeof this.sources[sourceId][key][k][p] === "object" && typeof props[p] === "object") {
                      for (const pp in props[p]) {
                        if (props[p][pp] !== this.sources[sourceId][key][k][p][pp]) {
                          pass = false;
                          break;
                        }
                      }
                    } else if (this.sources[sourceId][key][k][p] !== props[p]) {
                      pass = false;
                    } else {
                      pass = false;
                      break;
                    }
                  }
                  if (pass) {
                    found[this.sources[sourceId][key][k]._id] = this.sources[sourceId][key][k];
                  }
                }
              }
            } else {
              let pass = true;
              if (hasMethod && !this.sources[sourceId][key][hasMethod])
                pass = false;
              for (const p in props) {
                if (typeof this.sources[sourceId][key][p] === "object" && typeof props[p] === "object") {
                  for (const pp in props[p]) {
                    if (props[p][pp] !== this.sources[sourceId][key][p][pp]) {
                      pass = false;
                      break;
                    }
                  }
                } else if (this.sources[sourceId][key][p] !== props[p]) {
                  pass = false;
                } else {
                  pass = false;
                  break;
                }
              }
              if (pass) {
                if (this.getConnection(this.sources[sourceId][key], hasMethod))
                  found[this.sources[sourceId][key]._id] = this.sources[sourceId][key];
              }
            }
          }
        }
      }
    };
    this.addConnection = (options3, source) => {
      let settings = {};
      if (typeof options3 === "string") {
        if (this.connections[options3]) {
          options3 = this.connections[options3];
        } else {
          for (const j in this.serviceConnections) {
            for (const k in this.serviceConnections[j]) {
              if (this.serviceConnections[j][k][options3]) {
                options3 = { connection: this.serviceConnections[j][k][options3] };
                options3.service = j;
                settings.connectionType = j;
                settings.connectionsKey = k;
                break;
              }
            }
          }
        }
        if (typeof options3 === "string" && this.nodes.get(options3))
          options3 = { connection: this.nodes.get(options3) };
      }
      if (!options3 || typeof options3 === "string")
        return void 0;
      if (source)
        settings.source = source;
      if (options3.connection instanceof GraphNode) {
        settings.connection = options3.connection;
        let node = settings.connection;
        settings.send = async (message) => {
          if (message.method) {
            if (Array.isArray(message.args)) {
              return node[message.method]?.(...message.args);
            } else
              return node[message.method]?.(message.args);
          } else {
            if (Array.isArray(message.args)) {
              return node.run(...message.args);
            } else
              return node.run(message.args);
          }
        };
        settings.request = async (message, method) => {
          if (method) {
            if (Array.isArray(message.args)) {
              return node[method]?.(...message.args);
            } else
              return node[method]?.(message.args);
          } else {
            if (Array.isArray(message.args)) {
              return node.run(...message.args);
            } else
              return node.run(message.args);
          }
        };
        settings.post = async (route, args, method) => {
          if (route && node.get(route)) {
            let n = node.get(route);
            if (method) {
              if (Array.isArray(args)) {
                return n[method]?.(...args);
              } else
                return n[method]?.(args);
            } else {
              if (Array.isArray(args)) {
                return n.run(...args);
              } else
                return n.run(args);
            }
          } else {
            if (method) {
              if (Array.isArray(args)) {
                return node[method]?.(...args);
              } else
                return node[method]?.(args);
            } else {
              if (Array.isArray(args)) {
                return node.run(...args);
              } else
                return node.run(args);
            }
          }
        };
        settings.run = settings.post;
        settings.subscribe = async (route, callback) => {
          return node.subscribe(callback, route);
        };
        settings.unsubscribe = async (route, sub) => {
          return node.unsubscribe(sub, route);
        };
        settings.terminate = () => {
          node.graph.remove(node);
          return true;
        };
        settings.onclose = options3.onclose;
        if (settings.onclose) {
          let oldondelete;
          if (node.ondelete)
            oldondelete = node.ondelete;
          node.ondelete = (n) => {
            if (settings.onclose)
              settings.onclose(settings, n);
            if (oldondelete)
              oldondelete(n);
          };
        }
      } else if (options3.connection instanceof Graph) {
        if (options3.connection.nodes.get("open"))
          settings.service = options3.connection;
        let graph = settings.connection;
        settings.send = async (message) => {
          if (Array.isArray(message.args))
            graph.run(message.route, ...message.args);
          else
            graph.run(message.route, message.args);
        };
        settings.request = async (message, method) => {
          if (!message.route)
            return void 0;
          if (method) {
            if (Array.isArray(message.args)) {
              return graph.nodes.get(message.route)[method]?.(...message.args);
            } else
              return graph.nodes.get(message.route)[method]?.(message.args);
          } else {
            if (Array.isArray(message.args)) {
              return graph.run(message.route, ...message.args);
            } else
              return graph.run(message.route, message.args);
          }
        };
        settings.post = async (route, args, method) => {
          if (route && graph.get(route)) {
            let n = graph.get(route);
            if (method) {
              if (Array.isArray(args)) {
                return n[method]?.(...args);
              } else
                return n[method]?.(args);
            } else {
              if (Array.isArray(args)) {
                return n.run(...args);
              } else
                return n.run(args);
            }
          }
        };
        settings.run = settings.post;
        settings.subscribe = async (route, callback) => {
          return graph.subscribe(route, callback);
        };
        settings.unsubscribe = async (route, sub) => {
          return graph.unsubscribe(route, sub);
        };
        settings.terminate = (n) => {
          graph.remove(n);
          return true;
        };
      } else if (!(options3._id && this.connections[options3._id])) {
        let c = options3.connection;
        if (typeof c === "string") {
          if (this.connections[c])
            c = this.connections[c];
          else if (options3.service) {
            if (typeof options3.service === "string") {
              options3.service = this.services[options3.service];
            }
            if (typeof options3.service === "object") {
              if (options3.service.connections) {
                for (const key in options3.service.connections) {
                  if (options3.service.connections[key][c]) {
                    c = options3.service.connections[key][c];
                    settings.connectionType = key;
                    settings.connectionsKey = c;
                    break;
                  }
                }
              }
            }
          } else {
            for (const j in this.serviceConnections) {
              for (const k in this.serviceConnections[j]) {
                if (this.serviceConnections[j][k][c]) {
                  c = this.serviceConnections[j][k][c];
                  options3.service = j;
                  settings.connectionType = j;
                  settings.connectionsKey = k;
                  break;
                }
              }
            }
          }
        }
        if (typeof c !== "object")
          return void 0;
        settings._id = c._id;
        settings.send = c.send;
        settings.request = c.request;
        settings.run = c.run;
        settings.post = c.post;
        settings.subscribe = c.subscribe;
        settings.unsubscribe = c.unsubscribe;
        settings.terminate = c.terminate;
        settings.onclose = options3.onclose;
        if (settings.onclose) {
          if (!(c.onclose && settings.onclose.toString() === c.onclose.toString())) {
            let oldonclose = c.onclose;
            c.onclose = (...args) => {
              if (settings.onclose)
                settings.onclose(settings, ...args);
              if (this.users[settings.source] && Object.keys(this.sources[settings.source]).length === 0) {
                this.removeUser(settings.source, false);
              }
              if (oldonclose)
                oldonclose(...args);
            };
          }
        } else {
          let oldonclose = c.onclose;
          c.onclose = (...args) => {
            this.removeConnection(settings);
            if (this.users[settings.source] && Object.keys(this.sources[settings.source]).length === 0) {
              this.removeUser(settings.source, false);
            }
            if (oldonclose)
              oldonclose(...args);
          };
        }
        if (options3.service) {
          if (typeof options3.service === "string")
            options3.service = this.services[options3.service];
          settings.service = options3.service;
        } else if (c.graph)
          settings.service = c.graph;
      }
      if (!settings.source && options3.source) {
        settings.source = options3.source;
      } else if (!settings.source && options3.service) {
        settings.source = typeof options3.service === "object" ? options3.service.name : void 0;
      } else if (!settings.source && (settings.connection instanceof GraphNode || settings.connection instanceof Graph)) {
        settings.source = "local";
        if (!this.order.indexOf("local"))
          this.order.unshift("local");
      }
      if (!settings._id)
        settings._id = `connection${Math.floor(Math.random() * 1e15)}`;
      if (settings.source) {
        if (!this.sources[settings.source])
          this.sources[settings.source] = {};
        this.sources[settings.source][settings._id] = settings;
      }
      if (!this.connections[settings._id])
        this.connections[settings._id] = settings;
      return settings;
    };
    this.removeConnection = (connection, terminate = false) => {
      if (typeof connection === "object" && connection._id)
        connection = connection._id;
      if (typeof connection === "string") {
        if (this.connections[connection]) {
          if (terminate && this.connections[connection])
            this.connections[connection].terminate();
          delete this.connections[connection];
          for (const key in this.sources) {
            if (this.sources[key][connection])
              delete this.sources[key][connection];
            else {
              for (const k in this.sources[key]) {
                if (this.sources[key][k]?.[connection]) {
                  delete this.sources[key][connection];
                }
              }
            }
          }
          return true;
        } else if (this.sources[connection]) {
          for (const key in this.sources[connection]) {
            this.removeConnection(this.sources[connection][key], terminate);
          }
          return true;
        }
      }
    };
    this.addService = (service, connections, includeClassName, routeFormat, syncServices, source, order) => {
      this.load(service, includeClassName, routeFormat, this.customRoutes, this.customChildren);
      this.services[service.name] = service;
      if (connections) {
        if (typeof connections === "string")
          this.addServiceConnections(service, connections, source);
        else {
          for (const c in connections) {
            this.addServiceConnections(service, c, source);
          }
        }
      }
      if (syncServices)
        this.syncServices();
      if (order)
        this.order = order;
      else {
        if (!this.order)
          this.order = [];
        this.order.push(service.name);
      }
    };
    this.addServiceConnections = (service, connectionsKey, source) => {
      if (typeof service === "string") {
        service = this.services[service];
      }
      if (connectionsKey && service[connectionsKey]) {
        let newConnections = {};
        if (!this.serviceConnections[service.name])
          this.serviceConnections[service.name] = {};
        this.serviceConnections[service.name][connectionsKey] = service[connectionsKey];
        for (const key in service[connectionsKey]) {
          if (!this.connections[key]) {
            newConnections[key] = this.addConnection({ connection: service[connectionsKey][key], service }, source);
            newConnections[key].connectionType = connectionsKey;
          }
        }
        return newConnections;
      }
    };
    this.openConnection = async (service, options3, source, ...args) => {
      if (typeof service === "string") {
        service = this.services[service];
      }
      if (service instanceof Service) {
        let connection = service.run("open", options3, ...args);
        if (connection instanceof Promise) {
          return connection.then(async (info) => {
            if (!info._id) {
              await new Promise((res, rej) => {
                let start = performance.now();
                let checker = () => {
                  if (!info._id) {
                    if (performance.now() - start > 3e3) {
                      rej(false);
                    } else {
                      setTimeout(() => {
                        checker();
                      }, 100);
                    }
                  } else {
                    res(true);
                  }
                };
                checker();
              }).catch((er) => {
                console.error("Connections timed out:", er);
              });
            }
            if (info._id)
              this.addConnection({ connection: info, service }, source);
          });
        } else if (connection) {
          if (!connection._id) {
            await new Promise((res, rej) => {
              let start = performance.now();
              let checker = () => {
                if (!connection._id) {
                  if (performance.now() - start > 3e3) {
                    rej(false);
                  } else {
                    setTimeout(() => {
                      checker();
                    }, 100);
                  }
                } else {
                  res(true);
                }
              };
              checker();
            }).catch((er) => {
              console.error("Connections timed out:", er);
            });
          }
          if (connection._id)
            return this.addConnection({ connection, service }, source);
        }
      }
    };
    this.terminate = (connection) => {
      if (typeof connection === "string")
        connection = this.connections[connection];
      return connection.terminate();
    };
    this.subscribeThroughConnection = (route, relay, endpoint, callback, ...args) => {
      if (typeof relay === "string") {
        relay = this.getConnection(relay, "run");
      }
      if (typeof relay === "object")
        return new Promise((res, rej) => {
          relay.run("routeConnections", [route, endpoint, relay._id, ...args]).then((sub) => {
            this.subscribe(endpoint, (res2) => {
              if (res2?.callbackId === route) {
                if (!callback)
                  this.setState({ [endpoint]: res2.args });
                else if (typeof callback === "string") {
                  this.setState({ [callback]: res2.args });
                } else
                  callback(res2.args);
              }
            });
            res(sub);
          }).catch(rej);
        });
    };
    this.routeConnections = (route, transmitter, receiver, ...args) => {
      let rxsrc;
      if (typeof receiver === "string") {
        if (this.sources[receiver]) {
          rxsrc = receiver;
        }
        receiver = this.getConnection(receiver, "send");
      }
      if (typeof transmitter === "string") {
        transmitter = this.getConnection(transmitter, "subscribe");
      }
      if (transmitter?.subscribe && receiver?.send) {
        let res = new Promise((res2, rej) => {
          transmitter.subscribe(route, transmitter._id, (res3) => {
            if (!this.connections[receiver._id] && rxsrc) {
              if (this.sources[rxsrc]) {
                rxsrc = receiver;
                Object.keys(this.sources[rxsrc]).forEach((k) => {
                  if (this.sources[receiver][k].send) {
                    receiver = this.sources[receiver][k];
                  }
                });
              }
            }
            if (this.connections[receiver._id])
              receiver.send({ callbackId: route, args: res3 });
          }, ...args).then((sub) => {
            res2(sub);
          });
        });
        return res;
      }
    };
    this.syncServices = () => {
      for (const name2 in this.services) {
        if ("users" in this.services[name2])
          this.services[name2].users = this.users;
        this.nodes.forEach((n, tag) => {
          if (!this.services[name2].nodes.get(n.tag)) {
            this.services[name2].nodes.set(n.tag, n);
          } else {
            if (!this.services[name2].nodes.get(tag) && n._UNIQUE !== this.services[name2].nodes.get(n.tag)._UNIQUE)
              this.services[name2].nodes.set(tag, n);
          }
        });
      }
    };
    this.setUserData = (user, data) => {
      if (user) {
        if (typeof user === "string") {
          user = this.users[user];
          if (!user)
            return false;
        }
      }
      if (data) {
        if (typeof data === "string") {
          data = JSON.parse(data);
        }
      }
      if (typeof data === "object") {
        this.recursivelyAssign(user, data);
        return true;
      }
    };
    this.routes = {
      addUser: this.addUser,
      removeUser: this.removeUser,
      getConnection: this.getConnection,
      addConnection: this.addConnection,
      removeConnection: this.removeConnection,
      addService: this.addService,
      addServiceConnections: this.addServiceConnections,
      openConnection: this.openConnection,
      terminate: this.terminate,
      routeConnections: this.routeConnections,
      subscribeThroughConnection: this.subscribeThroughConnection,
      syncServices: this.syncServices
    };
    this.load(this.routes);
    if (options2) {
      if (options2.order)
        this.order = options2.order;
      if (options2.services) {
        for (const key in options2.services) {
          let opt = options2.services[key];
          if (opt instanceof Service) {
            opt.service.name = key;
            opt.service.tag = key;
            this.addService(opt.service, opt.connections, options2.includeClassName, options2.routeFormat, options2.syncServices);
          } else if (typeof opt === "function") {
            let service = new opt();
            service.name = key;
            service.tag = key;
            if (service)
              this.addService(service, service.connections, options2.includeClassName, options2.routeFormat, options2.syncServices);
          } else {
            if (typeof opt.service === "function") {
              let service = new opt.service({ name: key });
              service.name = key;
              service.tag = key;
              if (service)
                this.addService(service, void 0, options2.includeClassName, options2.routeFormat, options2.syncServices);
              opt.service = service;
            } else if (opt.service instanceof Service) {
              opt.service.name = key;
              opt.service.tag = key;
              this.addService(opt.service, void 0, options2.includeClassName, options2.routeFormat, options2.syncServices);
            }
            if (typeof opt.service === "object") {
              if (opt.connections) {
                if (Array.isArray(opt.connections)) {
                  opt.connections.forEach((k) => {
                    this.addServiceConnections(opt[key].service, k);
                  });
                } else
                  this.addServiceConnections(opt.service, opt.connections);
              }
              if (opt.config) {
                for (const c in opt.config) {
                  this.openConnection(opt.service, opt.config[c], opt.config[c].source, opt.config[c].args);
                }
              }
            }
          }
        }
      }
    }
  }
  removeUser(profile, terminate) {
    if (terminate)
      this.removeConnection(profile, terminate);
    if (typeof profile === "string")
      profile = this.users[profile];
    if (typeof profile === "object" && profile._id) {
      delete this.users[profile._id];
      if (profile.onclose)
        profile.onclose(profile);
    }
    return true;
  }
};
var transform_default = (tag, node) => {
  const args = node.arguments;
  let graph;
  Array.from(args.keys()).forEach((arg, i) => node[`${arg}`] = args.get(arg).state);
  const originalOperator = node.operator;
  if (typeof originalOperator === "function") {
    node.operator = function(...argsArr) {
      let updatedArgs = [];
      let i = 0;
      args.forEach((o, k) => {
        const argO = args.get(k);
        const proxy = `${k}`;
        const currentArg = argO.spread ? argsArr.slice(i) : argsArr[i];
        const target = graph.node ?? graph;
        let update = currentArg !== void 0 ? currentArg : target[proxy];
        target[proxy] = update;
        if (!argO.spread)
          update = [update];
        updatedArgs.push(...update);
        i++;
      });
      return originalOperator.call(this ?? node, ...updatedArgs);
    };
  } else {
    console.error("Operator is not a function for", node.tag, node, originalOperator);
    node.operator = (...args2) => args2;
  }
  graph = new Graph({}, tag, node);
  return graph;
};
var ARGUMENT_NAMES = /([^,]*)/g;
function getFnParamInfo(fn) {
  var fstr = fn.toString();
  const openPar = fstr.indexOf("(");
  const closePar = fstr.indexOf(")");
  const getFirstBracket = (str2, offset = 0) => {
    const fb = offset + str2.indexOf("{");
    if (fb < closePar && fb > openPar) {
      return getFirstBracket(str2.slice(fb), offset + fb);
    } else
      return fb;
  };
  const firstBracket = getFirstBracket(fstr);
  let innerMatch;
  if (firstBracket === -1 || closePar < firstBracket)
    innerMatch = fstr.slice(fstr.indexOf("(") + 1, fstr.indexOf(")"));
  else
    innerMatch = fstr.match(/([a-zA-Z]\w*|\([a-zA-Z]\w*(,\s*[a-zA-Z]\w*)*\)) =>/)?.[1];
  if (!innerMatch)
    return void 0;
  const matches = innerMatch.match(ARGUMENT_NAMES).filter((e) => !!e);
  const info = /* @__PURE__ */ new Map();
  matches.forEach((v) => {
    let [name2, value] = v.split("=");
    name2 = name2.trim();
    name2 = name2.replace(/\d+$/, "");
    const spread = name2.includes("...");
    name2 = name2.replace("...", "");
    try {
      if (name2)
        info.set(name2, {
          state: value ? (0, eval)(`(${value})`) : value,
          spread
        });
    } catch (e) {
      info.set(name2, {});
      console.warn(`Argument ${name2} could not be parsed for`, fn.toString(), value);
    }
  });
  return info;
}
var parse_default = getFnParamInfo;
var isNode = "process" in globalThis;
var ESPlugin = class {
  #initial;
  #options;
  #instance;
  #graph;
  #router;
  #cache = {};
  #plugins = {};
  #active = false;
  listeners = {
    pool: {
      in: {},
      out: {}
    },
    active: {},
    includeParent: {}
  };
  plugins = {};
  #toRun = false;
  #runProps = true;
  get initial() {
    return this.#initial;
  }
  get instance() {
    return this.#instance;
  }
  get graph() {
    return this.#graph;
  }
  set graph(v) {
    this.#graph = v;
  }
  constructor(node, options2 = {}) {
    this.#initial = node;
    this.#options = options2;
    this.#router = options2._router ? options2._router : options2._router = new Router({
      linkServices: false,
      includeClassName: false
    });
    do {
      this.#initial = this.initial.initial ?? this.initial;
    } while (this.initial instanceof ESPlugin);
    const isFunction = typeof this.initial === "function";
    const hasDefault = "default" in this.initial;
    let hasComponents = !!node.components;
    if (!hasDefault && !hasComponents) {
      let newNode = { components: {} };
      for (let namedExport in node)
        newNode.components[namedExport] = { default: node[namedExport] };
      this.#initial = newNode;
      hasComponents = true;
      this.#runProps = false;
    }
    if (hasDefault || isFunction)
      this.graph = this.#create(options2.tag ?? "defaultESPluginTag", this.initial);
    if (hasComponents) {
      const toNotify = [];
      const components = this.initial.components;
      for (let tag in components) {
        const node2 = components[tag];
        if (!(node2 instanceof ESPlugin)) {
          const clonedOptions = Object.assign({}, Object.assign(options2));
          const plugin = new ESPlugin(node2, Object.assign(clonedOptions, { tag }));
          this.#plugins[tag] = plugin;
          toNotify.push(plugin);
        } else
          this.#cache[tag] = this.#plugins[tag] = node2;
      }
      const thisTag = this.#options.tag;
      toNotify.forEach((o) => {
        let tag = o.#options.tag;
        if (thisTag)
          tag = `${thisTag}.${tag}`;
        this.plugins[o.#options.tag] = o;
        if (typeof options2.onPlugin === "function")
          options2.onPlugin(tag, o);
      });
    }
    Object.defineProperty(this, "tag", {
      get: () => this.graph?.tag,
      enumerable: true
    });
  }
  #createTree = () => {
    let tree = {};
    for (let tag in this.#plugins) {
      let thisNode = this.#plugins[tag].graph;
      if (this.#cache[tag]) {
        let gs2 = this.#cache[tag].graph;
        const ref = gs2.node ? gs2.node : gs2;
        thisNode = {};
        for (let key in ref._initial)
          thisNode[key] = ref[key];
        thisNode.tag = tag;
        gs2.state.triggers = {};
      }
      tree[tag] = this.#create(tag, thisNode);
    }
    return tree;
  };
  #activate = () => {
    if (this.initial.components) {
      let tree = this.#createTree();
      const props = this.#instance ?? this.initial;
      this.graph = isNode ? new Graph(tree, this.#options.tag, props) : new DOMService({ routes: tree, name: this.#options.tag, props: this.#runProps ? props : void 0 }, this.#options.parentNode);
      this.#router.load(this.graph);
      for (let tag in this.#plugins) {
        const cache2 = this.#cache[tag];
        if (cache2)
          cache2.graph = tree[tag];
      }
    }
  };
  start = async (defer) => {
    if (this.#active === false) {
      this.#active = true;
      const activateFuncs = [];
      for (let key in this.plugins) {
        const o = this.plugins[key];
        await o.start((f2) => {
          activateFuncs.push(f2);
        });
      }
      this.#activate();
      const f = async (top) => {
        const toRun = [];
        for (let f2 of activateFuncs)
          toRun.push(...await f2(top));
        const listeners = [{ reference: {} }, { reference: {} }];
        let toListenTo = {
          ...this.initial.listeners
        };
        let listenTo = false;
        for (let key in this.initial.children) {
          if (!(this.initial.children[key] instanceof GraphNode))
            listenTo = true;
        }
        const basePath = this.getPath();
        if (listenTo) {
          toListenTo[basePath] = true;
        }
        Object.entries(toListenTo).forEach(([key, value]) => {
          for (let target in value)
            listeners[1].reference[target] = true;
          listeners[0].reference[key] = true;
        });
        const targets = [
          {
            reference: this.initial.children,
            condition: (child) => child === void 0
          },
          ...listeners
        ];
        targets.forEach((o) => {
          for (let path2 in o.reference) {
            if (!o.condition || o.condition(o.reference[path2])) {
              const updated = `${top.graph.name}.${path2}`;
              let split = updated.split(".");
              const lastKey = split.pop();
              let absolute, relative;
              let last = top.graph;
              let resolved = this.#router.nodes.get(updated);
              if (resolved)
                last = this.#router.nodes.get(split.join(".")) ?? top.graph;
              else {
                const get3 = (str2, target) => target.nodes.get(str2) ?? target[str2];
                absolute = path2.split(".").slice(0, -1);
                relative = [...basePath ? basePath.split(".") : [], ...absolute];
                split = relative;
                try {
                  split.forEach((str2) => last = get3(str2, last));
                  resolved = lastKey ? get3(lastKey, last) : last;
                } catch {
                  last = top.graph;
                  split = absolute;
                  absolute.forEach((str2) => last = get3(str2, last));
                  resolved = lastKey ? get3(lastKey, last) : last;
                }
              }
              o.reference[path2] = { resolved, last, lastKey, path: {
                used: split.join("."),
                absolute: absolute ? absolute.join(".") : null,
                relative: relative ? relative.join(".") : null
              } };
            }
          }
        });
        let listenerPool = {
          in: listeners[1].reference,
          out: listeners[0].reference
        };
        for (let key in toListenTo)
          top.listeners.active[key] = toListenTo[key];
        for (let key in this.listeners.includeParent)
          top.listeners.includeParent[key] = this.listeners.includeParent[key];
        for (let type in listenerPool) {
          top.listeners.pool[type] = {
            ...listenerPool[type],
            ...top.listeners.pool[type]
          };
        }
        this.listeners = top.listeners;
        for (let key in listenerPool.out) {
          const node = listenerPool.out[key].resolved;
          if (node instanceof GraphNode) {
            const path2 = this.getPath(node, true);
            if (this.listeners.includeParent[path2])
              this.listeners.includeParent[path2] = true;
            this.subscribe(node);
          }
        }
        if (this.#toRun)
          toRun.push(this.run);
        return toRun;
      };
      const graph = this.initial.components;
      if (graph) {
        const ports = graph.ports;
        let firstNode, lastNode;
        if (ports) {
          firstNode = await this.graph.get(ports.input);
          lastNode = this.graph.get(ports.output);
        } else {
          const nodes = Array.from(this.graph.nodes.values());
          firstNode = nodes[0];
          lastNode = nodes.slice(-1)[0];
        }
        if (lastNode) {
          const path2 = this.getPath(lastNode, true);
          this.listeners.includeParent[path2] = lastNode;
        }
        if (firstNode)
          this.#initial.operator = async function(...args) {
            await firstNode.run(...args);
          };
      }
      if (typeof defer === "function")
        defer(f);
      else {
        const toRun = await f(this);
        for (let key in this.listeners.includeParent) {
          const toResolve = this.listeners.includeParent[key];
          if (toResolve !== true) {
            this.subscribe(toResolve);
            this.listeners.includeParent[key] = true;
          }
        }
        await Promise.all(toRun.map((f2) => f2()));
      }
    }
  };
  getPath = (graph = this.graph, includeTag = false) => {
    const basePath = [];
    let target = graph;
    do {
      if (target instanceof GraphNode)
        target = { node: target };
      if (target.node) {
        basePath.push(target.node.name);
        target = target.node.graph;
      }
    } while (target.node);
    if (includeTag)
      return [...basePath.reverse(), graph.tag].join(".");
    else
      return basePath.reverse().join(".");
  };
  subscribe = (node) => {
    const path2 = this.getPath(node) || node.tag;
    const targets = [node.children];
    for (let key in this.listeners.active[path2]) {
      const res = this.listeners.pool.in[key];
      if (res)
        this.listeners.active[path2][key] = res;
      else
        delete this.listeners.active[path2][key];
    }
    targets.push(this.listeners.active[path2]);
    let aggregatedParent = false;
    const aggregate = (arr) => {
      const aggregate2 = {};
      arr.forEach((o) => {
        for (let key in o) {
          if (!(key in aggregate2))
            aggregate2[key] = [o[key]];
          else {
            const ref1 = aggregate2[key];
            const ref2 = o[key];
            const message = `Both children and listeners are declared for ${key}`;
            const getId = (o2) => o2._unique ?? o2.resolved._unique ?? o2.last._unique;
            const aggregateIds = ref1.map(getId);
            if (!aggregateIds.includes(getId(ref2))) {
              console.warn(`${message}. Aggregating`, ref1, ref2);
              ref1.push(ref2);
            } else
              console.warn(`${message}. Removing`, ref2);
          }
        }
      });
      return aggregate2;
    };
    let aggregated = aggregate(targets);
    node.subscribe((args) => {
      if (path2 in this.listeners.includeParent && !aggregatedParent) {
        aggregated = aggregate([aggregated, node.graph.children]);
        aggregatedParent = true;
      }
      for (let tag in aggregated)
        aggregated[tag].forEach((info) => this.resolve(args, info, aggregated));
    });
  };
  resolve = (args, info) => {
    if (info.resolved instanceof GraphNode)
      info = info.resolved;
    if (info instanceof GraphNode) {
      if (Array.isArray(args))
        this.#runGraph(info, ...args);
      else
        this.#runGraph(info, args);
    } else {
      let res;
      if (typeof info.resolved === "function") {
        if (Array.isArray(args))
          res = info.resolved.call(info.last, ...args);
        else
          res = info.resolved.call(info.last, args);
      } else
        res = info.resolved = info.last[info.lastKey] = args;
      let resolved = this.listeners.active[`${info.path.used}.${info.lastKey}`];
      if (!resolved)
        resolved = this.listeners.active[info.lastKey];
      for (let key in resolved)
        this.resolve(res, this.listeners.pool.in[key]);
    }
  };
  stop = () => {
    if (this.#active === true) {
      for (let k in this.nested)
        this.nested[k].stop();
      if (this.graph)
        this.graph.nodes.forEach((n) => {
          this.graph.removeTree(n);
          n.stopNode();
          this.graph.state.triggers = {};
        });
      this.#active = false;
    }
  };
  #create = (tag, info) => {
    if (typeof info === "function")
      info = { default: info };
    if (!("default" in info) || info instanceof Graph)
      return info;
    else {
      let activeInfo;
      if (info instanceof ESPlugin) {
        activeInfo = info.instance;
        info = info.initial;
      }
      const args = parse_default(info.default) ?? /* @__PURE__ */ new Map();
      if (args.size === 0)
        args.set("default", {});
      let argsArray = Array.from(args.entries());
      const input = argsArray[0][0];
      if (info.arguments) {
        const isArray = Array.isArray(info.arguments);
        let i = 0;
        for (let key in info.arguments) {
          const v = info.arguments[key];
          if (isArray) {
            argsArray[i].state = v;
            if (i == 0)
              this.#toRun = true;
          } else {
            const got = args.get(key);
            if (got) {
              got.state = v;
              if (input === key)
                this.#toRun = true;
            }
          }
          i++;
        }
      }
      const gsIn = {
        arguments: args,
        operator: info.default,
        tag,
        default: info.default
      };
      var props = Object.getOwnPropertyNames(info);
      const onActive = ["arguments", "default", "tag", "operator"];
      props.forEach((key) => {
        if (!onActive.includes(key))
          gsIn[key] = info[key];
      });
      if (activeInfo) {
        for (let key in activeInfo) {
          if (!onActive.includes(key))
            gsIn[key] = activeInfo[key];
        }
      }
      this.#instance = gsIn;
      return transform_default(tag, gsIn);
    }
  };
  #runGraph = async (graph = this.graph, ...args) => {
    if (graph instanceof Graph) {
      if (graph.node)
        return graph.node.run(...args);
      else {
        if (args.length === 0)
          return this.#runDefault(graph);
        else if (graph.nodes.has(args[0]))
          return graph.run(...args);
        else
          return this.#runDefault(graph, ...args);
      }
    } else
      return await graph.run(...args);
  };
  #runDefault = (graph, ...args) => graph.run(graph.nodes.values().next().value, ...args);
  run = async (...args) => this.#runGraph(this.graph, ...args);
};
var src_default = ESPlugin;

// src/core/index.ts
var basePkgPath = "./package.json";
var moduleStringTag = "[object Module]";
var _filesystem, _input, _options, _url, _cache, _main, _mode, _onImport, _throw;
var WASL = class {
  constructor(urlOrObject, options2 = {}, url2) {
    this.errors = [];
    this.warnings = [];
    this.files = {};
    this.original = {};
    this.resolved = {};
    this.debug = void 0;
    __privateAdd(this, _filesystem, void 0);
    __privateAdd(this, _input, {});
    __privateAdd(this, _options, {});
    __privateAdd(this, _url, void 0);
    __privateAdd(this, _cache, {});
    __privateAdd(this, _main, "");
    __privateAdd(this, _mode, "import");
    __privateAdd(this, _onImport, (path2, info) => this.files[path2] = info);
    __privateAdd(this, _throw, (e) => {
      const item = {
        message: e.message,
        file: e.file,
        node: e.node
      };
      const arr = e.type === "warning" ? this.warnings : this.errors;
      arr.push(item);
    });
    this.init = async (urlOrObject = __privateGet(this, _input), options2 = __privateGet(this, _options), url2 = "") => {
      this.debug = void 0;
      const internalLoadCall = options2._internal;
      const isFromValidator = !__privateGet(this, _main) && typeof internalLoadCall === "string";
      if (!__privateGet(this, _input))
        __privateSet(this, _input, urlOrObject);
      if (!__privateGet(this, _options))
        __privateSet(this, _options, options2);
      if (!__privateGet(this, _filesystem))
        __privateSet(this, _filesystem, options2.filesystem);
      if (!internalLoadCall) {
        if (!url2)
          url2 = __privateGet(this, _url);
        try {
          new URL(url2 ?? urlOrObject);
          options2.relativeTo = "";
        } catch {
        }
      } else if (internalLoadCall === true)
        url2 = __privateGet(this, _main);
      if (isFromValidator)
        url2 = __privateSet(this, _main, internalLoadCall);
      const clonedOptions = Object.assign({}, options2);
      const innerTopLevel = clonedOptions._top === true;
      const isString = typeof urlOrObject === "string";
      const isHTML = urlOrObject instanceof HTMLElement;
      let mode, object, mainPath;
      if (isHTML) {
        object = from(urlOrObject, options2);
        if (options2.path)
          mode = "import";
        else {
          if (options2.filesystem)
            mode = "reference";
          else
            mode = "import";
        }
      } else if (typeof urlOrObject === "object") {
        object = Object.assign({}, urlOrObject);
        if (typeof internalLoadCall === "string")
          url2 = mainPath = resolve(internalLoadCall);
        mode = "reference";
      } else if (url2 || isString) {
        if (!url2)
          url2 = urlOrObject[0] === "." ? resolve(urlOrObject, options2.relativeTo ?? "") : urlOrObject;
        mode = "import";
      } else
        console.error("Mode is not supported...");
      if (!internalLoadCall)
        __privateSet(this, _mode, mode);
      mode = clonedOptions._modeOverride ?? __privateGet(this, _mode);
      this.errors.push(...valid(urlOrObject, clonedOptions, "load"));
      this.original = object;
      switch (mode) {
        case "reference":
          if (!innerTopLevel) {
            if (__privateGet(this, _filesystem)) {
              const pkgPath = resolve(basePkgPath, url2);
              const pkg = checkFiles(pkgPath, __privateGet(this, _filesystem));
              if (pkg)
                object = Object.assign(pkg, isString ? {} : object);
            }
          }
          break;
        default:
          if (!object) {
            mainPath = await resolve(url2);
            this.original = await this.get(mainPath, void 0);
            object = JSON.parse(JSON.stringify(this.original));
            if (!innerTopLevel) {
              const pkgUrl = resolve(basePkgPath, mainPath, true);
              const pkg = await this.get(pkgUrl, void 0);
              if (pkg)
                object = Object.assign(pkg, object);
            }
          }
          break;
      }
      if (!internalLoadCall)
        __privateSet(this, _main, mainPath);
      else if (__privateGet(this, _mode) === "reference" && !__privateGet(this, _main))
        __privateSet(this, _main, "");
      if (this.errors.length === 0) {
        const copy = isHTML ? this.original : JSON.parse(JSON.stringify(this.original));
        this.resolved = await this.resolve(copy, { mainPath, mode }, options2);
        const drill = (parent, callback) => {
          const nodes = parent.components;
          for (let tag in nodes) {
            const res = callback(nodes[tag], {
              tag,
              parent,
              options: clonedOptions
            });
            if (res)
              nodes[tag] = res;
          }
        };
        const drillToTest = (target) => {
          drill(target, (node, info) => {
            const connections = info.parent.listeners;
            for (let output in connections) {
              const getTarget = (o, str2) => o.components?.[str2] ?? o[str2];
              let outTarget = info.parent.components;
              output.split(".").forEach((str2) => outTarget = getTarget(outTarget, str2));
              if (!outTarget) {
                __privateGet(this, _throw).call(this, {
                  message: `Node '${output}' (output) does not exist to create an edge.`,
                  file: url2
                });
              }
              for (let input in connections[output]) {
                let inTarget = this.resolved.components;
                input.split(".").forEach((str2) => inTarget = getTarget(inTarget, str2));
                if (!inTarget) {
                  __privateGet(this, _throw).call(this, {
                    message: `Node '${input}' (input) does not exist to create an edge.`,
                    file: url2
                  });
                }
              }
            }
          });
        };
        if (internalLoadCall === void 0) {
          if (clonedOptions.output !== "object") {
            this.plugin = new src_default(this.resolved, {
              activate: clonedOptions.activate,
              parentNode: clonedOptions.parentNode
            });
            return this.plugin;
          } else
            this.original = this.resolved;
          drillToTest(this.resolved);
        }
        return this.resolved;
      }
    };
    this.start = async () => {
      if (this.plugin)
        return await this.plugin.start();
    };
    this.stop = async () => {
      if (this.plugin)
        return await this.plugin.stop();
    };
    this.get = async (...args) => await get_default(args[0], args[1], __privateGet(this, _onImport), __privateGet(this, _options)).catch((e) => e);
    this.resolveSource = async (path2, modeOverride, {
      useCache = true,
      mode = "reference"
    } = {}) => {
      const activeMode = modeOverride ?? mode;
      let res = null;
      if (activeMode === "import") {
        if (__privateGet(this, _cache)[path2] && useCache) {
          console.warn("Found cached component", path2);
          res = __privateGet(this, _cache)[path2];
        } else
          res = await this.get(path2, void 0);
      } else if (__privateGet(this, _filesystem))
        res = checkFiles(path2, __privateGet(this, _filesystem));
      else {
        __privateGet(this, _throw).call(this, {
          message: "No options.filesystem field to get JavaScript objects",
          file: path2
        });
      }
      return res;
    };
    this.search = async (input, searchKey = "src", {
      condition = (value) => typeof value === "string",
      onFound = async (o, acc = []) => acc.push(o),
      mainPath,
      nestedKey,
      mode
    }) => {
      const top = input;
      let found;
      const pathMap = {};
      const drill = async (input2, tree = []) => {
        const parentInfo = tree[tree.length - 1];
        const path2 = tree.map((o) => o.key);
        const graphSlice = path2.slice(-3);
        const get3 = (pathInfo = path2) => {
          let target = top;
          pathInfo.forEach((str2, i) => target = target[str2]);
          return target;
        };
        const set = (input3, key = searchKey, pathInfo = path2) => {
          let target = top;
          pathInfo.forEach((str2, i) => target = target[str2]);
          target[key] = input3;
        };
        if (condition(input2[searchKey])) {
          const isComponent = graphSlice.slice(-2)[0] === "components";
          let target = pathMap;
          path2.forEach((str2, i) => target = target[str2] ?? target);
          const pathArray = Array.isArray(target) ? path2.map((str2, i) => target[i] ?? str2) : path2;
          let o = {
            mainPath,
            mode,
            isComponent,
            paths: {
              original: path2,
              remapped: pathArray
            },
            get: get3,
            set,
            key: searchKey,
            value: input2[searchKey],
            setParent: function(input3, path3 = this.paths.remapped, fallbackKey) {
              let target2 = top;
              path3.forEach((str2, i) => {
                if (i === path3.length - 1) {
                  if (fallbackKey && Object.keys(target2[str2]).length > 1) {
                    console.warn(`Setting ${fallbackKey} instead of replacing parent for ${path3.join(".")}`);
                    target2[str2][fallbackKey] = input3;
                  } else
                    target2[str2] = input3;
                } else
                  target2 = target2[str2];
              });
            },
            parent: parentInfo?.reference,
            name: parentInfo?.key
          };
          input2[searchKey] = null;
          if (onFound) {
            const got = await onFound(o, found);
            if (got && typeof got === "object")
              found = got;
          }
        }
        if (nestedKey) {
          const offset = path2.length - graphSlice.length;
          for (let key in nestedKey) {
            let i = 0;
            const pattern = nestedKey[key].pattern;
            const match = pattern ? pattern.reduce((a, o) => {
              let str2 = o?.key ?? o;
              let adjacencies = o?.adjacencies;
              if (typeof str2 === "string")
                a *= graphSlice[i] === str2 ? 1 : 0;
              if (adjacencies)
                a *= adjacencies.reduce((a2, str3) => {
                  a2 *= str3 in get3(path2.slice(0, offset + i)) ? 1 : 0;
                  return a2;
                }, 1);
              i++;
              return a;
            }, 1) : 1;
            const projection = nestedKey[key].projection ?? pattern;
            if (match) {
              await nestedKey[key].function(input2, {
                get: (key2) => get3([...path2, key2]),
                set: (key2, name2, value) => {
                  const base = [...path2.slice(0, offset), ...projection.map((str2, i2) => !str2 ? graphSlice[i2] : str2)];
                  const passed = [...base, name2];
                  set(value, key2, passed);
                  let targets = [
                    {
                      target: pathMap,
                      update: passed,
                      array: graphSlice
                    }
                  ];
                  const create = (target, array) => {
                    array.forEach((str2) => {
                      if (!target[str2])
                        target[str2] = {};
                      target = target[str2];
                    });
                    return target;
                  };
                  targets.forEach((o) => {
                    const target = create(o.target, o.array);
                    if (o.update)
                      target[name2] = o.update;
                    o.target = target;
                  });
                },
                delete: () => delete get3([...path2])[key]
              });
            }
          }
        }
        for (let key in input2) {
          if (input2[key] && typeof input2[key] === "object" && !(input2[key] instanceof HTMLElement))
            await drill(input2[key], [...tree, { reference: input2, key }]);
        }
      };
      await drill(input);
      return found;
    };
    this.findSources = async (graph, events, opts) => {
      return await this.search(graph, void 0, {
        mode: opts.mode,
        nestedKey: events.nested,
        onFound: async (o, acc = {}) => {
          o.type = "local";
          try {
            new URL(o.value);
            o.type = "remote";
          } catch {
          }
          const isRemote = o.type === "remote";
          const main = o.mainPath || __privateGet(this, _main);
          o.path = isRemote ? o.value : main ? resolve(o.value, main) : resolve(o.value);
          if (isRemote)
            o.mode = "import";
          const ext = o.value.split("/").pop().split(".").slice(1).join(".");
          if (ext === "wasl.json") {
            if (events.components)
              await events.components(o);
            return null;
          } else {
            if (!acc[ext])
              acc[ext] = {};
            if (!acc[ext][o.path])
              acc[ext][o.path] = [];
            acc[ext][o.path].push(o);
            return acc;
          }
        },
        mainPath: opts.mainPath
      });
    };
    this.resolve = async (graph, context, opts = {}) => {
      const remote = [];
      const nested = [];
      const foundInternal = {};
      const events = {
        components: (info) => this.handleComponent(info, events, context, opts, remote, foundInternal),
        nested: {
          overrides: {
            pattern: ["components", null, { key: "overrides", adjacencies: ["src"] }],
            projection: ["components", null, "components"],
            function: (value, info) => this.handleOverride(value, info, nested),
            update: (o, info) => {
              o.mainPath = info.path;
            }
          }
        }
      };
      const found = await this.findSources(graph, events, context) ?? {};
      this.flattenInto(foundInternal, found);
      const tic = performance.now();
      const total = Object.keys(found).reduce((acc, key) => acc + Object.keys(found[key]).length, 0);
      let i = 0;
      await Promise.all(Object.values(found).map(async (typeInfo) => {
        await Promise.all(Object.entries(typeInfo).map(async ([path2, pathInfo]) => {
          const res = await this.resolveSource(path2, pathInfo[0].mode);
          await Promise.all(pathInfo.map(async (info) => await this.handleResolved(res, info)));
          i++;
          if (opts.callbacks?.sourceProgress instanceof Function)
            opts.callbacks.sourceProgress(path2, i, total);
        }));
      }));
      const toc = performance.now();
      console.log("Resolved", total, "sources in", toc - tic, "ms");
      return graph;
    };
    this.updateContext = (info, context) => {
      return {
        ...context,
        mainPath: info.path,
        mode: info.type === "remote" ? "import" : context.mode
      };
    };
    this.flattenInto = (o1, o2) => {
      for (let type in o1) {
        for (let path2 in o1[type]) {
          if (!o2[type])
            o2[type] = {};
          if (!o2[type][path2])
            o2[type][path2] = [];
          o2[type][path2].push(...o1[type][path2]);
        }
      }
    };
    this.handleResolved = (res, info) => {
      const ogSrc = info.value;
      const name2 = info.name;
      const isError = res instanceof Error;
      const isModule = res && (!!Object.keys(res).reduce((a, b) => {
        const desc = Object.getOwnPropertyDescriptor(res, b);
        const isModule2 = desc && desc.get && !desc.set ? 1 : 0;
        return a + isModule2;
      }, 0) || Object.prototype.toString.call(res) === moduleStringTag);
      const hasDefault = !!res?.default;
      const isWASL = info.path.includes("wasl.json");
      const deepSource = (!isModule || !info.isComponent) && !isWASL;
      if (res && !isError) {
        if (isModule && !hasDefault && !isWASL)
          __privateGet(this, _throw).call(this, {
            type: "warning",
            message: `Node (${name2}) at ${info.path} does not have a default export.`,
            file: ogSrc
          });
      } else {
        remove(ogSrc, info.path, name2, deepSource ? void 0 : info.parent, res);
        if (res)
          __privateGet(this, _throw).call(this, { message: res.message, file: info.path, type: "warning" });
        return;
      }
      if (res !== void 0) {
        if (deepSource)
          info.setParent(isModule ? res.default : res, void 0, info.key);
        else {
          info.set(res);
          const ref = info.get();
          info.setParent(merge(ref[info.key], ref));
        }
        return res;
      }
    };
    this.handleComponent = async (info, events, context, opts, acc = [], list = {}) => {
      const newContext = this.updateContext(info, context);
      info.mode = newContext.mode;
      const res = await this.resolveSource(info.path, info.mode, newContext);
      const found = await this.findSources(res, events, newContext);
      if (opts.callbacks?.componentProgress instanceof Function)
        opts.callbacks.componentProgress(info.path, acc.length, res);
      if (found)
        this.flattenInto(found, list);
      await this.handleResolved(res, info);
      acc.push(info);
      return acc;
    };
    this.handleOverride = async (value, info, acc = []) => {
      for (let nestedName in value) {
        const nestedNode = info.get(nestedName);
        if (nestedNode) {
          for (let key in value[nestedName]) {
            const newInfo = value[nestedName][key];
            if (newInfo)
              info.set(key, nestedName, newInfo);
          }
        } else
          __privateGet(this, _throw).call(this, {
            message: `Plugin target '${nestedName}' does not exist`,
            node: name
          });
        acc.push(value);
        return acc;
      }
      info.delete();
    };
    __privateSet(this, _input, urlOrObject);
    __privateSet(this, _options, options2);
    __privateSet(this, _url, url2);
  }
};
_filesystem = new WeakMap();
_input = new WeakMap();
_options = new WeakMap();
_url = new WeakMap();
_cache = new WeakMap();
_main = new WeakMap();
_mode = new WeakMap();
_onImport = new WeakMap();
_throw = new WeakMap();
var core_default = WASL;

// src/common/utils/latest.js
var version = "0.0.0";
var latest_default = version;

// versions/0.0.0/component.schema.json
var component_schema_default = {
  $schema: "https://json-schema.org/draft/2020-12/schema",
  $id: "https://raw.github.com/brainsatplay/wasl/versions/0.0.0/component.schema.json",
  title: "Component",
  description: "A component for the Web Application Specification Language",
  type: "object",
  anyOf: [
    {
      properties: {
        name: {
          type: "string"
        },
        description: {
          type: "string"
        },
        version: {
          type: "string",
          pattern: "^([^.]+)(.[^.]+)*?$"
        },
        author: {
          type: "string"
        },
        main: {
          type: "string",
          format: "uri-reference"
        },
        type: {
          type: "string",
          pattern: "^(module|commonjs)$"
        },
        repository: {
          type: "string",
          format: "uri"
        },
        components: {
          type: "object",
          patternProperties: {
            "^(.+)$": {
              $ref: "module.schema.json"
            }
          }
        },
        listeners: {
          description: "Listeners for internal events",
          type: "object",
          patternProperties: {
            "^([^.]+)(.[^.]+)*?$": {
              type: "object",
              patternProperties: {
                "^([^.]+)(.[^.]+)*?$": {
                  type: "boolean"
                }
              },
              additionalProperties: false
            }
          },
          additionalProperties: false
        }
      }
    }
  ]
};

// versions/0.0.0/module.schema.json
var module_schema_default = {
  $schema: "https://json-schema.org/draft/2020-12/schema",
  $id: "https://raw.github.com/brainsatplay/wasl/versions/0.0.0/module.schema.json",
  title: "Module",
  description: "The composable units of the graph",
  type: "object",
  anyOf: [
    {
      properties: {
        src: {
          anyOf: [
            {
              type: "string",
              format: "uri-reference"
            },
            {
              type: "object",
              $ref: "component.schema.json"
            },
            {
              type: "object",
              $comment: "The raw JSON",
              properties: {
                default: {
                  description: "The stringified stateless function that this node uses to handle upstream information in the graph"
                },
                tagName: {
                  type: "string"
                },
                style: {
                  anyOf: [
                    {
                      type: "string",
                      format: "uri-reference"
                    },
                    {
                      type: "object"
                    }
                  ]
                },
                attributes: {
                  type: "object",
                  description: "A set of HTML Element events for the node to listen to",
                  patternProperties: {
                    "^on(.+)$": {
                      description: "A stringified function to handle an event"
                    }
                  }
                },
                oncreate: {
                  description: "A stringified function that responds to when this node's information is rendered as an HTML element"
                }
              },
              required: [
                "default"
              ]
            },
            {
              type: "object",
              properties: {
                language: {
                  type: "string"
                },
                text: {
                  type: "string"
                }
              },
              additionalProperties: false
            }
          ]
        },
        href: {
          anyOf: [
            {
              type: "string"
            }
          ]
        },
        extensions: {
          type: "object",
          patternProperties: {
            "^.*$": {
              type: "object",
              patternProperties: {
                "^.*$": {}
              },
              additionalProperties: false
            }
          },
          additionalProperties: false
        },
        overrides: {
          type: "object",
          patternProperties: {
            "^.*$": {
              type: "object",
              patternProperties: {
                "^.*$": {}
              },
              additionalProperties: false
            }
          },
          additionalProperties: false
        },
        children: {
          description: "The connections for this node",
          type: "object",
          patternProperties: {
            "^([^.]+)(.[^.]+)*?$": {
              type: "boolean"
            }
          },
          additionalProperties: false
        },
        arguments: {
          type: [
            "object",
            "array"
          ],
          $comment: "Generated by wasl.load"
        }
      }
    },
    {
      type: "object",
      $ref: "component.schema.json"
    }
  ]
};

// src/common/utils/schema.registry.js
var schema_registry_default = {
  ["0.0.0"]: {
    "component.schema.json": component_schema_default,
    "module.schema.json": module_schema_default
  }
};

// src/common/utils/get.js
var schemaCache = {};
var getSchema = async (v = latest_default) => {
  if (!schemaCache[v]) {
    schemaCache[v] = {};
    const og = schema_registry_default[v];
    if (!og) {
      console.error("Schema not properly linked in the wasl library", v, name);
    }
    for (let schema in og) {
      const keysWithDollarSign = Object.keys(og[schema]).filter((k) => k.includes("$"));
      keysWithDollarSign.forEach((k) => delete og[schema][k]);
    }
    schemaCache[v] = og;
  }
  return schemaCache[v];
};
var getSchemas = async (v = latest_default, name2 = "component.schema.json") => {
  const o = { main: null, all: [] };
  const schemas = await getSchema(v);
  const keys = Object.keys(schemas);
  o.main = schemas[name2];
  keys.forEach((k) => {
    o.all.push({ ref: schemas[k], name: k });
  });
  return o;
};

// src/validate/index.ts
var import_ajv = __toESM(require_ajv(), 1);
var import_ajv_formats = __toESM(require_dist(), 1);
var activeVersion = null;
var ajv = new import_ajv.default({
  allErrors: true,
  allowUnionTypes: true
});
(0, import_ajv_formats.default)(ajv);
var validate = async (urlOrObject, options2 = {}, load = true) => {
  const clone = Object.assign({ errors: [], warnings: [] }, options2);
  let { version: version2, relativeTo, errors, warnings } = clone;
  if (!version2)
    version2 = latest_default;
  let schemaValid;
  let data = urlOrObject;
  try {
    new URL(urlOrObject);
    clone._remote = urlOrObject;
    delete clone.relativeTo;
    relativeTo = "";
  } catch {
  }
  const inputErrors = valid(urlOrObject, clone, "validate");
  const inputIsValid = inputErrors.length === 0;
  errors.push(...inputErrors);
  if (typeof urlOrObject === "string") {
    data = await get_default(urlOrObject, relativeTo).catch((e) => {
      errors.push({
        message: e.message,
        file: urlOrObject
      });
    });
  }
  if (errors.length === 0) {
    activeVersion = version2;
    let schemas = await getSchemas(version2);
    const schemaCopy = JSON.parse(JSON.stringify(schemas.main));
    schemas.all.forEach((s) => {
      const schema = ajv.getSchema(s.name);
      if (!schema)
        ajv.addSchema(s.ref, s.name);
    });
    const ajvValidate = await ajv.compile(schemaCopy);
    schemaValid = ajvValidate(data);
    if (ajvValidate.errors)
      errors.push(...ajvValidate.errors);
    if (load) {
      if (typeof options2.wasl === "function") {
        if (inputIsValid && !clone._internal) {
          clone.output = "object";
          clone._internal = typeof urlOrObject === "string" ? urlOrObject : void 0;
          const wasl = new options2.wasl(data, clone);
          const loaded = await wasl.init();
          if (loaded)
            schemaValid = await validate(loaded, clone, false);
        }
      } else {
        warnings.push({
          message: 'An options.load class (e.g. from the "wasl" library) was not provided to validate WASL objects with src files resolved.'
        });
      }
    }
  }
  return schemaValid && inputIsValid;
};
var validate_default = validate;

// ../graphscript/examples/audiofeedback/index.wasl.json
var index_wasl_default = {
  components: {
    app: {
      style: {
        "background-color": "black",
        color: "white",
        "font-family": "'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif",
        width: "100%",
        height: "100%",
        overflow: "auto"
      },
      tagName: "div",
      components: {
        devices: {
          tagName: "div",
          components: {
            devicediv: {
              tagName: "div",
              components: {
                connectheader: {
                  src: "./src/plugins/connect/header.js"
                },
                connectmode: {
                  src: "./src/plugins/connect/mode.js"
                },
                selectUSB: {
                  src: "./src/plugins/select/usb.js"
                },
                selectBLE: {
                  src: "./src/plugins/select/ble.js"
                },
                connectDevice: {
                  src: "./src/plugins/connect/device.js"
                }
              }
            }
          }
        },
        output: {
          tagName: "div",
          components: {
            playsounds: {
              tagName: "div",
              components: {
                soundheader: {
                  src: "./src/plugins/output/sound/header.js"
                },
                soundDropdown: {
                  src: "./src/plugins/output/sound/dropdown.js",
                  soundFilePaths: [
                    {
                      label: "Kalimba",
                      src: "./src/assets/kalimba.wav"
                    },
                    {
                      label: "Phonk",
                      src: "./src/assets/phonk.wav"
                    },
                    {
                      label: "Synth Flute",
                      src: "./src/assets/synthflute.wav"
                    }
                  ]
                },
                play: {
                  src: "./src/plugins/output/sound/play.js"
                },
                stop: {
                  src: "./src/plugins/output/sound/stop.js"
                }
              }
            },
            other: {
              tagName: "div",
              components: {
                stats: {
                  src: "./src/plugins/output/stats/start.js"
                },
                resetstats: {
                  src: "./src/plugins/output/stats/reset.js"
                },
                waveform: {
                  src: "./src/plugins/output/waveform.js"
                },
                csvmenu: {
                  src: "./src/plugins/output/csv/menu.js"
                }
              }
            }
          }
        }
      }
    }
  }
};

// ../graphscript/examples/audiofeedback/package.json
var package_default = {
  name: "tinybuildapp7099",
  version: "0.0.0",
  description: "Barebones esbuild and test node server implementation. For building",
  main: "index.js",
  type: "module",
  scripts: {
    start: "tinybuild",
    build: "tinybuild build",
    serve: "tinybuild serve",
    init: "node tinybuild/init.js",
    concurrent: "concurrently \\'npm run python\\' \\'npm start\\'",
    dev: "npm run pip && npm i --save-dev concurrently && npm i --save-dev nodemon && npm run concurrent",
    startdev: "nodemon --exec \\'node tinybuild.js\\' -e ejs,js,ts,jsx,tsx,css,html,jpg,png,scss,txt,csv",
    python: "python python/server.py",
    pip: "pip install quart && pip install websockets",
    pwa: "npm i workbox-cli && workbox generateSW node_server/pwa/workbox-config.js && npm run build && npm start"
  },
  keywords: [
    "esbuild"
  ],
  author: "",
  license: "AGPL-3.0-or-later",
  dependencies: {
    browserfs: "^1.4.3",
    "device-decoder": "~0.2.7",
    graphscript: "~0.1.41",
    "graphscript-services": "~0.1.50",
    howler: "~2.2.3"
  },
  nodemonConfig: {
    env: {
      NODEMON: true
    },
    ignore: [
      "dist/",
      ".temp/"
    ]
  }
};

// ../graphscript/examples/audiofeedback/src/plugins/gameState.js
var GameState = {
  baselineHEG: 0,
  currentHEG: 0,
  shortChange: 0,
  longChange: 0,
  currentTimestamp: Date.now(),
  lastTimestamp: Date.now(),
  dataFrameTime: 0,
  raw: void 0,
  hegDataBuffer: new Array(512).fill(0),
  localMax: 0,
  playing: void 0,
  analyser: void 0,
  audioFFTBuffer: new Uint8Array(2048)
};
var gameState_default = GameState;

// ../graphscript/examples/audiofeedback/src/plugins/output/stats/start.js
var start_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/output/stats/reset.js
var reset_exports = {};
__export(reset_exports, {
  attributes: () => attributes,
  default: () => reset_default,
  tagName: () => tagName
});
var tagName = "button";
var attributes = {
  onclick: () => {
    Object.assign(gameState_default, {
      baselineHEG: 0,
      currentHEG: 0,
      shortChange: 0,
      longChange: 0,
      currentTimestamp: Date.now(),
      lastTimestamp: Date.now(),
      dataFrameTime: 0,
      raw: void 0,
      hegDataBuffer: new Array(512).fill(0),
      localMax: 0
    });
  },
  innerText: "Reset stats"
};
var reset_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/output/waveform.js
var waveform_exports = {};
__export(waveform_exports, {
  animation: () => animation,
  default: () => waveform_default,
  onrender: () => onrender,
  style: () => style,
  tagName: () => tagName2
});
var tagName2 = "canvas";
var style = { width: "100vw", height: "300px" };
var onrender = function(canvas, info) {
  canvas.width = canvas.clientWidth;
  canvas.height = canvas.clientHeight;
  let ctx = canvas.getContext("2d");
  this.canvas = canvas;
  this.ctx = ctx;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
};
var animation = function() {
  this.ctx.fillStyle = "#000";
  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.lineWidth = 2;
  this.ctx.strokeStyle = "limegreen";
  this.ctx.beginPath();
  let sliceWidth = this.canvas.width * 1 / 512;
  let x = 0;
  for (let i = 0; i < 512; i++) {
    let v = 1 - gameState_default.hegDataBuffer[i] / gameState_default.localMax;
    let y = (v * this.canvas.height + this.canvas.height) * 0.5;
    if (i === 0) {
      this.ctx.moveTo(x, y);
    } else {
      this.ctx.lineTo(x, y);
    }
    x += sliceWidth;
  }
  this.ctx.lineTo(this.canvas.width, this.canvas.height);
  this.ctx.stroke();
  if (gameState_default.analyser) {
    gameState_default.analyser.getByteFrequencyData(gameState_default.audioFFTBuffer);
    this.ctx.strokeStyle = "royalblue";
    this.ctx.beginPath();
    x = 0;
    for (let i = 0; i < 512; i++) {
      let v = gameState_default.audioFFTBuffer[i] / 255;
      let y = this.canvas.height - v * this.canvas.height;
      if (i === 0) {
        this.ctx.moveTo(x, y);
      } else {
        this.ctx.lineTo(x, y);
      }
      x += sliceWidth;
    }
    this.ctx.lineTo(this.canvas.width, this.canvas.height);
    this.ctx.stroke();
  }
};
var waveform_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/output/csv/menu.js
var menu_exports = {};
__export(menu_exports, {
  default: () => menu_default,
  innerHTML: () => innerHTML,
  onrender: () => onrender2,
  tagName: () => tagName3
});

// ../graphscript/examples/audiofeedback/extras/storage/csv.js
var CSV = class {
  constructor(onOpen = this.onOpen, saveButtonId = null, openButtonId = null) {
    this.onOpen = onOpen;
    this.notes = [{ idx: 0, text: "comment" }];
    if (saveButtonId !== null) {
      document.getElementById(saveButtonId).addEventListener("click", this.saveCSV);
    }
    if (openButtonId !== null) {
      document.getElementById(openButtonId).addEventListener("click", this.openCSV);
    }
  }
  processArraysForCSV(data = ["1|2|3", "3|2|1"], delimiter = "|", header = "a,b,c", saveNotes = false) {
    let csvDat = header + "\n";
    let noteIdx = 0;
    data.forEach((line, i) => {
      if (data[i] === "string" && delimiter !== ",") {
        csvDat += line.split(delimiter).join(",");
      } else {
        csvData += line.join(",");
      }
      if (saveNotes === true) {
        if (this.notes[noteIdx].idx === i) {
          line += this.notes[noteIdx].text;
          noteIdx++;
        }
      }
      if (line.indexOf("\n") < 0) {
        csvDat += "\n";
      }
    });
    return csvDat;
  }
  static saveCSV(csvDat = "a,b,c\n1,2,3\n3,2,1\n", name2 = new Date().toISOString()) {
    var hiddenElement = document.createElement("a");
    hiddenElement.href = "data:text/csv;charset=utf-8," + encodeURI(csvDat);
    hiddenElement.target = "_blank";
    if (name2 !== "") {
      hiddenElement.download = name2 + ".csv";
    } else {
      hiddenElement.download = Date().toISOString() + ".csv";
    }
    hiddenElement.click();
  }
  static openCSV(delimiter = ",", onOpen = (csvDat, header, path2) => {
    return csvDat, header, path2;
  }) {
    var input = document.createElement("input");
    input.accept = ".csv";
    input.type = "file";
    input.onchange = (e) => {
      var file = e.target.files[0];
      var reader = new FileReader();
      reader.onload = (event) => {
        var tempcsvData = event.target.result;
        var tempcsvArr = tempcsvData.split("\n");
        let header = [];
        var csvDat = [];
        tempcsvArr.pop();
        tempcsvArr.forEach((row, i) => {
          if (i == 0) {
            header = row.split(delimiter);
          } else {
            var temp = row.split(delimiter);
            csvDat.push(temp);
          }
        });
        onOpen(csvDat, header, input.value);
        input.value = "";
      };
      reader.readAsText(file);
    };
    input.click();
  }
  static openCSVRaw(onOpen = (csvDat, path2) => {
    return csvDat, path2;
  }) {
    var input = document.createElement("input");
    input.accept = ".csv";
    input.type = "file";
    input.onchange = (e) => {
      var file = e.target.files[0];
      var reader = new FileReader();
      reader.onload = (event) => {
        var tempcsvData = event.target.result;
        onOpen(tempcsvData, input.value);
        input.value = "";
      };
      reader.readAsText(file);
    };
    input.click();
  }
  onOpen(csvDat = [], header = []) {
    console.log("CSV Opened!", header, csvDat);
  }
};
var parseCSVData = (data, filename, head, hasend = true, parser = (lines, filename2, head2) => {
  let result = {
    filename: filename2
  };
  let header = head2;
  if (typeof head2 === "string")
    header = head2.split(",");
  result.header = header;
  for (let i = 0; i < lines.length; i++) {
    let line = lines[i].split(",");
    for (let j = 0; j < line.length; j++) {
      if (!result[header[j]])
        result[header[j]];
      result[header[j]] = line[j];
    }
  }
  return result;
}) => {
  let lines = data.split("\n");
  if (!head)
    head = lines[0];
  lines.shift();
  if (hasend === false)
    lines.pop();
  let result = parser(lines, filename, head);
  return result;
};
function toISOLocal(d2) {
  d2 = new Date(d2);
  var z2 = (n) => ("0" + n).slice(-2);
  var zz = (n) => ("00" + n).slice(-3);
  var off = d2.getTimezoneOffset();
  var sign = off < 0 ? "+" : "-";
  off = Math.abs(off);
  return d2.getFullYear() + "-" + z2(d2.getMonth() + 1) + "-" + z2(d2.getDate()) + "T" + z2(d2.getHours()) + ":" + z2(d2.getMinutes()) + ":" + z2(d2.getSeconds()) + "." + zz(d2.getMilliseconds()) + "(UTC" + sign + z2(off / 60 | 0) + ":00)";
}

// ../graphscript/examples/audiofeedback/extras/storage/BFSUtils.js
var BrowserFS = __toESM(require_browserfs(), 1);
var fsInited = false;
var fs2 = BrowserFS.BFSRequire("fs");
var BFSBuffer = BrowserFS.BFSRequire("buffer").Buffer;
var initFS = async (dirs = ["data"], oninit = (exists2 = []) => {
}, onerror = (e) => {
}, filesystem = "IndexedDB") => {
  if (fsInited)
    return true;
  else {
    fsInited = true;
    return new Promise((resolve2) => {
      let oldmfs = fs2.getRootFS();
      BrowserFS.FileSystem[filesystem].Create({}, (e, mountableFileSystem) => {
        if (e)
          throw e;
        if (!mountableFileSystem) {
          onerror(e);
          throw new Error(`Error creating BrowserFS`);
        }
        BrowserFS.initialize(mountableFileSystem);
        let promises = [];
        dirs.forEach(async (dir2) => {
          promises.push(dirExists(fs2, dir2));
        });
        Promise.all(promises).then((values) => {
          oninit(values);
          fsInited = true;
          resolve2(true);
        });
      });
    });
  }
};
var exists = async (path2 = "") => {
  if (!fsInited)
    await initFS([path2.split("/")[0]]);
  else
    await dirExists(fs2, path2.split("/")[0]);
  return new Promise((resolve2) => {
    fs2.exists("/" + path2, function(exists2) {
      resolve2(exists2);
    });
  });
};
async function readFileChunk(path2 = "data", begin = 0, end = 5120, onread = (data) => {
}) {
  if (!fsInited)
    await initFS([path2.split("/")[0]]);
  else
    await dirExists(fs2, path2.split("/")[0]);
  if (path2 != "") {
    return new Promise(async (resolve2) => {
      fs2.open("/" + path2, "r", (e, fd) => {
        if (e)
          throw e;
        fs2.read(fd, end, begin, "utf-8", (er, output, bytesRead) => {
          if (er)
            throw er;
          if (bytesRead !== 0) {
            let data = output.toString();
            fs2.close(fd, () => {
              onread(data, path2);
              resolve2(data);
            });
          } else
            resolve2(void 0);
        });
      });
    });
  } else {
    console.error("Path name is not defined");
    return void 0;
  }
}
var writeFile = async (path2, data, onwrite = (data2) => {
}) => {
  if (!fsInited)
    await initFS([path2.split("/")[0]]);
  else
    await dirExists(fs2, path2.split("/")[0]);
  return new Promise((resolve2) => {
    fs2.writeFile("/" + path2, data, (err) => {
      if (err)
        throw err;
      onwrite(data);
      resolve2(true);
    });
  });
};
var appendFile2 = async (path2, data, onwrite = (data2) => {
}) => {
  if (!fsInited)
    await initFS([path2.split("/")[0]]);
  else
    await dirExists(fs2, path2.split("/")[0]);
  return new Promise((resolve2) => {
    fs2.appendFile("/" + path2, data, (err) => {
      if (err)
        throw err;
      onwrite(data);
      resolve2(true);
    });
  });
};
var deleteFile = async (path2 = "data", ondelete = () => {
}) => {
  if (!fsInited)
    await initFS([path2.split("/")[0]]);
  else
    await dirExists(fs2, path2.split("/")[0]);
  return new Promise((resolve2) => {
    if (path2 != "") {
      fs2.unlink("/" + path2, (e) => {
        if (e)
          console.error(e);
        ondelete();
        resolve2(true);
      });
    } else {
      console.error("Path name is not defined");
      resolve2(false);
    }
  });
};
var listFiles = async (dir2 = "data", onload = (directory) => {
}) => {
  if (!fsInited)
    await initFS([dir2]);
  else
    await dirExists(fs2, dir2);
  return new Promise((resolve2) => {
    fs2.readdir("/" + dir2, (e, directory) => {
      if (e)
        throw e;
      if (directory) {
        onload(directory);
      }
      resolve2(directory);
    });
  });
};
var getFileSize = async (path2 = "data", onread = (size) => {
  console.log(size);
}) => {
  if (!fsInited)
    await initFS([path2.split("/")[0]]);
  else
    await dirExists(fs2, path2.split("/")[0]);
  return new Promise((resolve2) => {
    fs2.stat("/" + path2, (e, stats) => {
      if (e)
        throw e;
      let filesize = stats.size;
      onread(filesize);
      resolve2(filesize);
    });
  });
};
var getCSVHeader = async (path2 = "data", onopen = (header, filename) => {
  console.log(header, filename);
}) => {
  if (!fsInited)
    await initFS([path2.split("/")[0]]);
  else
    await dirExists(fs2, path2.split("/")[0]);
  return new Promise((resolve2) => {
    fs2.open("/" + path2, "r", (e, fd) => {
      if (e)
        throw e;
      fs2.read(fd, 65535, 0, "utf-8", (er, output, bytesRead) => {
        if (er)
          throw er;
        if (bytesRead !== 0) {
          let data = output.toString();
          let lines = data.split("\n");
          let header = lines[0];
          fs2.close(fd, () => {
            onopen(header, path2);
            resolve2(header);
          });
        } else
          resolve2(void 0);
      });
    });
  });
};
var writeToCSVFromDB = async (path2 = "data", fileSizeLimitMb = 10) => {
  if (!fsInited)
    await initFS([path2.split("/")[0]]);
  else
    await dirExists(fs2, path2.split("/")[0]);
  return new Promise((resolve2) => {
    if (path2 != "") {
      fs2.stat("/" + path2, (e, stats) => {
        if (e)
          throw e;
        let filesize = stats.size;
        console.log(filesize);
        fs2.open(path2, "r", (e2, fd) => {
          if (e2)
            throw e2;
          let i = 0;
          let maxFileSize = fileSizeLimitMb * 1024 * 1024;
          let end = maxFileSize;
          if (filesize < maxFileSize) {
            end = filesize;
            fs2.read(fd, end, 0, "utf-8", (e3, output, bytesRead) => {
              if (e3)
                throw e3;
              if (bytesRead !== 0)
                CSV.saveCSV(output.toString(), path2);
              fs2.close(fd);
              resolve2(true);
            });
          } else {
            const writeChunkToFile = async () => {
              if (i < filesize) {
                if (i + end > filesize) {
                  end = filesize - i;
                }
                let chunk = 0;
                fs2.read(fd, end, i, "utf-8", (e3, output, bytesRead) => {
                  if (e3)
                    throw e3;
                  if (bytesRead !== 0) {
                    CSV.saveCSV(output.toString(), path2 + "_" + chunk);
                    i += maxFileSize;
                    chunk++;
                    writeChunkToFile();
                    fs2.close(fd);
                    resolve2(true);
                  }
                });
              }
            };
          }
        });
      });
    } else {
      console.error("File name is not defined.");
      resolve2(false);
    }
  });
};
async function readCSVChunkFromDB(path2 = "data", start = 0, end = "end") {
  if (!fsInited)
    await initFS([path2.split("/")[0]]);
  else
    await dirExists(fs2, path2.split("/")[0]);
  let head = await getCSVHeader(path2);
  if (head)
    head = head.split(",");
  else
    return void 0;
  let resultLengths = [];
  let resultNames = [];
  let results = {};
  head.forEach((v) => {
    if (v) {
      resultNames.push(v);
      resultLengths.push(1);
    } else
      resultLengths[resultLengths.length - 1]++;
  });
  let size = await getFileSize(path2);
  if (end === "end")
    end = size;
  else if (end > size) {
    start = size - (end - start);
    end = size;
  }
  let data = await readFileChunk(path2, start, end);
  let headeridx = 0;
  let lastIdx = 0;
  data.forEach((r, i) => {
    let row = r.split(",");
    while (lastIdx < row.length - 1) {
      let l = resultLengths[headeridx];
      if (l === 1) {
        results[resultNames[headeridx]].push(row[lastIdx]);
        lastIdx++;
      } else {
        results[resultNames[headeridx]].push(row[lastIdx].slice(lastIdx, l));
        lastIdx += l;
      }
    }
  });
  return results;
}
var directories = {};
var dirExists = async (fs3, directory) => {
  return new Promise((resolve2, reject) => {
    if (directories[directory] === "exists" || directories[directory] === "created") {
      resolve2();
    } else {
      fs3.exists(`/${directory}`, (exists2) => {
        if (exists2) {
          directories[directory] = "exists";
          console.log(`/${directory} exists!`);
          resolve2();
        } else if (directories[directory] === "creating") {
          console.log(directory + " is still being created.");
          resolve2();
        } else {
          console.log(`creating /${directory}`, fs3);
          directories[directory] = "creating";
          fs3.mkdir(`/${directory}`, 1, (err) => {
            if (err) {
              throw err;
            }
            directories[directory] = "created";
            setTimeout(resolve2, 500);
          });
        }
      });
    }
  });
};

// ../graphscript/examples/audiofeedback/extras/storage/BFS_CSV.js
function lerp(v0, v1, t) {
  return (1 - t) * v0 + t * v1;
}
function interpolerp(v0, v1, fit, floor = true) {
  if (fit <= 2)
    return [v0, v1];
  let a = 1 / fit;
  let result = new Array(fit);
  result[0] = v0;
  for (let i = 1; i <= fit; i++) {
    result[i] = lerp(v0, v1, a * i);
    if (floor)
      result[i] = Math.floor(result[i]);
  }
  return result;
}
var appendCSV = (newData, filename, header) => {
  let csv = CSV_REFERENCE[filename];
  if (!csv) {
    let keys = Array.from(Object.keys(newData));
    if (keys.indexOf("timestamp") > -1)
      keys.splice(keys.indexOf("timestamp"), 1);
    CSV_REFERENCE[filename] = {
      header: header ? header : ["timestamp", "localized", ...keys],
      lastX: void 0
    };
    csv = CSV_REFERENCE[filename];
    header = csv.header;
  }
  if (header)
    csv.header = header;
  let maxLen = 1;
  for (const key in newData) {
    if (csv.header.indexOf(key) > -1 && newData[key]?.length > maxLen) {
      maxLen = newData[key]?.length;
    }
  }
  let x = newData[csv.header[0]];
  if (csv.lastX === void 0)
    csv.lastX = Array.isArray(x) ? x[0] : x;
  if (!x) {
    if (csv.header[0].includes("time")) {
      let now = Date.now();
      if (maxLen === 1)
        x = Date.now();
      else {
        x = interpolerp(csv.lastX, now, maxLen);
        x.shift();
      }
    } else {
      let newX = csv.lastX + 1;
      if (maxLen > 1) {
        x = new Array(maxLen).fill("");
        x[maxLen - 1] = newX;
      } else
        x = newX;
    }
  } else if (maxLen > 1 && x?.length !== maxLen) {
    if (!Array.isArray(x) || x.length === 1) {
      x = interpolerp(csv.lastX, x, maxLen);
      x.shift();
    } else {
      x = interpolerp(x[0], x[x.length - 1], maxLen);
      x.shift();
    }
  }
  let toAppend = [];
  if (Array.isArray(x)) {
    let curIdcs = {};
    for (let i = 0; i < x.length; i++) {
      toAppend.push([]);
      for (let j = 0; j < csv.header.length; j++) {
        let d2 = newData[csv.header[j]];
        if (j === 0) {
          toAppend[i][0] = x[i];
          continue;
        }
        if (csv.header[j] === "localized") {
          toAppend[i][j] = toISOLocal(x[i]);
        } else if (d2 === void 0) {
          toAppend[i][j] = "";
        } else if (Array.isArray(d2)) {
          if (d2.length === x.length)
            toAppend[i][j] = d2[i];
          else {
            if (!(csv.header[j] in curIdcs)) {
              curIdcs[csv.header[j]] = i;
              if (d2.length !== 1)
                toAppend[i][j] = d2[i];
            } else {
              if (d2.length === 1 && i === x.length - 1) {
                toAppend[i][j] = d2[curIdcs[csv.header[j]]];
              } else if (Math.floor(d2.length * i / x.length) > curIdcs[csv.header[j]]) {
                curIdcs[csv.header[j]]++;
                toAppend[i][j] = d2[curIdcs[csv.header[j]]];
              } else {
                toAppend[i][j] = "";
              }
            }
          }
        } else {
          if (i === x.length - 1) {
            toAppend[i][j] = d2;
          } else {
            toAppend[i][j] = "";
          }
        }
      }
    }
  } else {
    toAppend.push([]);
    for (let j = 0; j < csv.header.length; j++) {
      if (csv.header[j] in newData)
        toAppend[0][j] = newData[csv.header[j]];
      else if (csv.header[j] === "localized") {
        toAppend[0][j] === toISOLocal(x);
      } else
        toAppend[0][j] = "";
    }
  }
  let csvProcessed = "";
  if (header)
    csvProcessed += header.join(",") + "\n";
  toAppend.forEach((arr) => {
    csvProcessed += arr.join(",") + "\n";
  });
  csv.lastX = toAppend[toAppend.length - 1][0];
  return new Promise((res, rej) => {
    exists(filename).then((fileExists) => {
      if (!fileExists) {
        writeFile(filename, csvProcessed, (written) => {
          res(written);
        });
      } else {
        appendFile2(filename, csvProcessed, (written) => {
          res(written);
        });
      }
    });
  });
};
var updateCSVHeader = (header, filename) => {
  if (CSV_REFERENCE[filename]) {
    CSV_REFERENCE[filename].header = header;
  }
};
var createCSV = (filename, header) => {
  if (header[0].toLowerCase().includes("time") || header[0].toLowerCase().includes("unix")) {
    header.splice(1, 0, "localized");
  }
  CSV_REFERENCE[filename] = {
    header,
    lastX: header[1] === "localized" ? Date.now() : 0
  };
  return new Promise((res, rej) => {
    writeFile(filename, CSV_REFERENCE[filename].header.join(",") + "\n", (written) => {
      res(written);
    }).catch(rej);
  });
};
var visualizeDirectory = (dir2, parentNode = document.body) => {
  return new Promise(async (res, rej) => {
    if (parentNode.querySelector("#bfs" + dir2))
      parentNode.removeChild(parentNode.querySelector("#bfs" + dir2));
    parentNode.insertAdjacentHTML("beforeend", `<div id='bfs${dir2}' class='bfs${dir2}'></div>`);
    let div = parentNode.querySelector("#bfs" + dir2);
    await listFiles(dir2).then((directory) => {
      if (directory.length === 0)
        div.innerHTML = "No Files!";
      else
        directory.forEach((listing) => {
          div?.insertAdjacentHTML("beforeend", `<div id='${listing}' class='bfsfilediv'>
                        <span class='bfsfiletitle'>Data: </span>
                        <span>${listing}</span>
                        ${listing.toLowerCase().endsWith("csv") ? `<button class='bfsdownloadbtn' id='download${listing}'>Download CSV</button>` : ``}
                        ${listing.indexOf(".") > -1 ? `<button class='bfsdeletebtn' id='delete${listing}'>Delete</button>` : ""}
                    </div>`);
          if (document.getElementById(`delete${listing}`)) {
            document.getElementById(`delete${listing}`).onclick = () => {
              deleteFile(dir2 + "/" + listing, () => {
                visualizeDirectory(dir2, parentNode);
              });
            };
          }
          if (document.getElementById(`download${listing}`)) {
            document.getElementById(`download${listing}`).onclick = () => {
              writeToCSVFromDB(dir2 + "/" + listing, 10);
            };
          }
        });
      res(directory);
    }).catch(rej);
  });
};
var csvRoutes = {
  appendCSV,
  updateCSVHeader,
  createCSV,
  visualizeDirectory,
  openCSV: CSV.openCSV,
  saveCSV: CSV.saveCSV,
  openCSVRaw: CSV.openCSVRaw,
  parseCSVData,
  getCSVHeader,
  writeToCSVFromDB,
  readCSVChunkFromDB,
  toISOLocal
};

// ../graphscript/examples/audiofeedback/src/plugins/output/csv/menu.js
var tagName3 = "div";
var innerHTML = "CSVs";
var onrender2 = (self2) => {
  visualizeDirectory("data", self2);
};
var menu_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/output/sound/stop.js
var stop_exports = {};
__export(stop_exports, {
  attributes: () => attributes2,
  default: () => stop_default,
  tagName: () => tagName4
});
var tagName4 = "button";
var attributes2 = {
  onclick: (ev) => {
    if (gameState_default.playing) {
      gameState_default.playing.stop();
      gameState_default.playing = void 0;
    }
  },
  innerText: "Stop"
};
var stop_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/output/sound/play.js
var play_exports = {};
__export(play_exports, {
  attributes: () => attributes3,
  default: () => play_default,
  tagName: () => tagName5
});
var import_howler = __toESM(require_howler(), 1);
var tagName5 = "button";
var attributes3 = {
  onclick: async (ev) => {
    if (gameState_default.playing) {
      gameState_default.playing.stop();
      gameState_default.playing = void 0;
    }
    gameState_default.playing = new import_howler.Howl({
      src: document.getElementById("soundDropdown").value,
      loop: true,
      autoplay: true,
      volume: 0.5,
      onend: () => {
      },
      onplay: () => {
      },
      onload: () => {
        gameState_default.analyser = import_howler.Howler.ctx.createAnalyser();
        import_howler.Howler.masterGain.connect(gameState_default.analyser);
        gameState_default.analyser.connect(import_howler.Howler.ctx.destination);
      }
    });
  },
  innerText: "Play"
};
var play_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/output/sound/dropdown.js
var dropdown_exports = {};
__export(dropdown_exports, {
  default: () => dropdown_default,
  oncreate: () => oncreate,
  soundFilePaths: () => soundFilePaths,
  tagName: () => tagName6
});
var soundFilePaths = [];
var tagName6 = "select";
var oncreate = function() {
  let target = this;
  let element = target.element;
  if (!element) {
    if (target.source) {
      target = target.source;
      element = target.element;
    }
  }
  if (element)
    element.innerHTML = target.soundFilePaths.map((o) => `<option value='${o.src}'>${o.label}</option>`);
};
var dropdown_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/output/sound/header.js
var header_exports = {};
__export(header_exports, {
  default: () => header_default,
  innerHTML: () => innerHTML2,
  tagName: () => tagName7
});
var tagName7 = "h4";
var innerHTML2 = "Play a sound to modulate with the HEG";
var header_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/connect/device.js
var device_exports = {};
__export(device_exports, {
  attributes: () => attributes4,
  default: () => device_default,
  tagName: () => tagName8
});

// ../graphscript/examples/audiofeedback/node_modules/device-decoder/dist/device.frontend.esm.js
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __require2 = ((x) => typeof __require !== "undefined" ? __require : typeof Proxy !== "undefined" ? new Proxy(x, { get: (a, b) => (typeof __require !== "undefined" ? __require : a)[b] }) : x)(function(x) {
  if (typeof __require !== "undefined")
    return __require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm2 = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
};
var __commonJS2 = (cb, mod) => function __require3() {
  return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export2 = (target, all) => {
  for (var name2 in all)
    __defProp2(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps2 = (to2, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames2(from2))
      if (!__hasOwnProp2.call(to2, key) && key !== except)
        __defProp2(to2, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc2(from2, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
var createCapacitorPlatforms;
var initPlatforms;
var CapacitorPlatforms;
var addPlatform;
var setPlatform;
var ExceptionCode;
var CapacitorException;
var getPlatformId;
var createCapacitor;
var initCapacitorGlobal;
var Capacitor;
var registerPlugin;
var Plugins;
var WebPlugin;
var init_dist = __esm2({ "ble/node_modules/@capacitor/core/dist/index.js"() {
  createCapacitorPlatforms = (win) => {
    const defaultPlatformMap = /* @__PURE__ */ new Map();
    defaultPlatformMap.set("web", { name: "web" });
    const capPlatforms = win.CapacitorPlatforms || { currentPlatform: { name: "web" }, platforms: defaultPlatformMap };
    const addPlatform2 = (name2, platform) => {
      capPlatforms.platforms.set(name2, platform);
    };
    const setPlatform2 = (name2) => {
      if (capPlatforms.platforms.has(name2)) {
        capPlatforms.currentPlatform = capPlatforms.platforms.get(name2);
      }
    };
    capPlatforms.addPlatform = addPlatform2;
    capPlatforms.setPlatform = setPlatform2;
    return capPlatforms;
  };
  initPlatforms = (win) => win.CapacitorPlatforms = createCapacitorPlatforms(win);
  CapacitorPlatforms = initPlatforms(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
  addPlatform = CapacitorPlatforms.addPlatform;
  setPlatform = CapacitorPlatforms.setPlatform;
  (function(ExceptionCode2) {
    ExceptionCode2["Unimplemented"] = "UNIMPLEMENTED";
    ExceptionCode2["Unavailable"] = "UNAVAILABLE";
  })(ExceptionCode || (ExceptionCode = {}));
  CapacitorException = class extends Error {
    constructor(message, code, data) {
      super(message);
      this.message = message;
      this.code = code;
      this.data = data;
    }
  };
  getPlatformId = (win) => {
    var _a, _b;
    if (win === null || win === void 0 ? void 0 : win.androidBridge) {
      return "android";
    } else if ((_b = (_a = win === null || win === void 0 ? void 0 : win.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.bridge) {
      return "ios";
    } else {
      return "web";
    }
  };
  createCapacitor = (win) => {
    var _a, _b, _c, _d, _e2;
    const capCustomPlatform = win.CapacitorCustomPlatform || null;
    const cap = win.Capacitor || {};
    const Plugins2 = cap.Plugins = cap.Plugins || {};
    const capPlatforms = win.CapacitorPlatforms;
    const defaultGetPlatform = () => {
      return capCustomPlatform !== null ? capCustomPlatform.name : getPlatformId(win);
    };
    const getPlatform = ((_a = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _a === void 0 ? void 0 : _a.getPlatform) || defaultGetPlatform;
    const defaultIsNativePlatform = () => getPlatform() !== "web";
    const isNativePlatform = ((_b = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _b === void 0 ? void 0 : _b.isNativePlatform) || defaultIsNativePlatform;
    const defaultIsPluginAvailable = (pluginName) => {
      const plugin = registeredPlugins.get(pluginName);
      if (plugin === null || plugin === void 0 ? void 0 : plugin.platforms.has(getPlatform())) {
        return true;
      }
      if (getPluginHeader(pluginName)) {
        return true;
      }
      return false;
    };
    const isPluginAvailable = ((_c = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _c === void 0 ? void 0 : _c.isPluginAvailable) || defaultIsPluginAvailable;
    const defaultGetPluginHeader = (pluginName) => {
      var _a2;
      return (_a2 = cap.PluginHeaders) === null || _a2 === void 0 ? void 0 : _a2.find((h) => h.name === pluginName);
    };
    const getPluginHeader = ((_d = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _d === void 0 ? void 0 : _d.getPluginHeader) || defaultGetPluginHeader;
    const handleError = (err) => win.console.error(err);
    const pluginMethodNoop = (_target, prop, pluginName) => {
      return Promise.reject(`${pluginName} does not have an implementation of "${prop}".`);
    };
    const registeredPlugins = /* @__PURE__ */ new Map();
    const defaultRegisterPlugin = (pluginName, jsImplementations = {}) => {
      const registeredPlugin = registeredPlugins.get(pluginName);
      if (registeredPlugin) {
        console.warn(`Capacitor plugin "${pluginName}" already registered. Cannot register plugins twice.`);
        return registeredPlugin.proxy;
      }
      const platform = getPlatform();
      const pluginHeader = getPluginHeader(pluginName);
      let jsImplementation;
      const loadPluginImplementation = async () => {
        if (!jsImplementation && platform in jsImplementations) {
          jsImplementation = typeof jsImplementations[platform] === "function" ? jsImplementation = await jsImplementations[platform]() : jsImplementation = jsImplementations[platform];
        } else if (capCustomPlatform !== null && !jsImplementation && "web" in jsImplementations) {
          jsImplementation = typeof jsImplementations["web"] === "function" ? jsImplementation = await jsImplementations["web"]() : jsImplementation = jsImplementations["web"];
        }
        return jsImplementation;
      };
      const createPluginMethod = (impl, prop) => {
        var _a2, _b2;
        if (pluginHeader) {
          const methodHeader = pluginHeader === null || pluginHeader === void 0 ? void 0 : pluginHeader.methods.find((m) => prop === m.name);
          if (methodHeader) {
            if (methodHeader.rtype === "promise") {
              return (options2) => cap.nativePromise(pluginName, prop.toString(), options2);
            } else {
              return (options2, callback) => cap.nativeCallback(pluginName, prop.toString(), options2, callback);
            }
          } else if (impl) {
            return (_a2 = impl[prop]) === null || _a2 === void 0 ? void 0 : _a2.bind(impl);
          }
        } else if (impl) {
          return (_b2 = impl[prop]) === null || _b2 === void 0 ? void 0 : _b2.bind(impl);
        } else {
          throw new CapacitorException(`"${pluginName}" plugin is not implemented on ${platform}`, ExceptionCode.Unimplemented);
        }
      };
      const createPluginMethodWrapper = (prop) => {
        let remove2;
        const wrapper = (...args) => {
          const p = loadPluginImplementation().then((impl) => {
            const fn = createPluginMethod(impl, prop);
            if (fn) {
              const p2 = fn(...args);
              remove2 = p2 === null || p2 === void 0 ? void 0 : p2.remove;
              return p2;
            } else {
              throw new CapacitorException(`"${pluginName}.${prop}()" is not implemented on ${platform}`, ExceptionCode.Unimplemented);
            }
          });
          if (prop === "addListener") {
            p.remove = async () => remove2();
          }
          return p;
        };
        wrapper.toString = () => `${prop.toString()}() { [capacitor code] }`;
        Object.defineProperty(wrapper, "name", { value: prop, writable: false, configurable: false });
        return wrapper;
      };
      const addListener = createPluginMethodWrapper("addListener");
      const removeListener = createPluginMethodWrapper("removeListener");
      const addListenerNative = (eventName, callback) => {
        const call = addListener({ eventName }, callback);
        const remove2 = async () => {
          const callbackId = await call;
          removeListener({ eventName, callbackId }, callback);
        };
        const p = new Promise((resolve2) => call.then(() => resolve2({ remove: remove2 })));
        p.remove = async () => {
          console.warn(`Using addListener() without 'await' is deprecated.`);
          await remove2();
        };
        return p;
      };
      const proxy = new Proxy({}, { get(_2, prop) {
        switch (prop) {
          case "$$typeof":
            return void 0;
          case "toJSON":
            return () => ({});
          case "addListener":
            return pluginHeader ? addListenerNative : addListener;
          case "removeListener":
            return removeListener;
          default:
            return createPluginMethodWrapper(prop);
        }
      } });
      Plugins2[pluginName] = proxy;
      registeredPlugins.set(pluginName, { name: pluginName, proxy, platforms: /* @__PURE__ */ new Set([...Object.keys(jsImplementations), ...pluginHeader ? [platform] : []]) });
      return proxy;
    };
    const registerPlugin2 = ((_e2 = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _e2 === void 0 ? void 0 : _e2.registerPlugin) || defaultRegisterPlugin;
    if (!cap.convertFileSrc) {
      cap.convertFileSrc = (filePath) => filePath;
    }
    cap.getPlatform = getPlatform;
    cap.handleError = handleError;
    cap.isNativePlatform = isNativePlatform;
    cap.isPluginAvailable = isPluginAvailable;
    cap.pluginMethodNoop = pluginMethodNoop;
    cap.registerPlugin = registerPlugin2;
    cap.Exception = CapacitorException;
    cap.DEBUG = !!cap.DEBUG;
    cap.isLoggingEnabled = !!cap.isLoggingEnabled;
    cap.platform = cap.getPlatform();
    cap.isNative = cap.isNativePlatform();
    return cap;
  };
  initCapacitorGlobal = (win) => win.Capacitor = createCapacitor(win);
  Capacitor = initCapacitorGlobal(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
  registerPlugin = Capacitor.registerPlugin;
  Plugins = Capacitor.Plugins;
  WebPlugin = class {
    constructor(config) {
      this.listeners = {};
      this.windowListeners = {};
      if (config) {
        console.warn(`Capacitor WebPlugin "${config.name}" config object was deprecated in v3 and will be removed in v4.`);
        this.config = config;
      }
    }
    addListener(eventName, listenerFunc) {
      const listeners = this.listeners[eventName];
      if (!listeners) {
        this.listeners[eventName] = [];
      }
      this.listeners[eventName].push(listenerFunc);
      const windowListener = this.windowListeners[eventName];
      if (windowListener && !windowListener.registered) {
        this.addWindowListener(windowListener);
      }
      const remove2 = async () => this.removeListener(eventName, listenerFunc);
      const p = Promise.resolve({ remove: remove2 });
      Object.defineProperty(p, "remove", { value: async () => {
        console.warn(`Using addListener() without 'await' is deprecated.`);
        await remove2();
      } });
      return p;
    }
    async removeAllListeners() {
      this.listeners = {};
      for (const listener in this.windowListeners) {
        this.removeWindowListener(this.windowListeners[listener]);
      }
      this.windowListeners = {};
    }
    notifyListeners(eventName, data) {
      const listeners = this.listeners[eventName];
      if (listeners) {
        listeners.forEach((listener) => listener(data));
      }
    }
    hasListeners(eventName) {
      return !!this.listeners[eventName].length;
    }
    registerWindowListener(windowEventName, pluginEventName) {
      this.windowListeners[pluginEventName] = { registered: false, windowEventName, pluginEventName, handler: (event) => {
        this.notifyListeners(pluginEventName, event);
      } };
    }
    unimplemented(msg = "not implemented") {
      return new Capacitor.Exception(msg, ExceptionCode.Unimplemented);
    }
    unavailable(msg = "not available") {
      return new Capacitor.Exception(msg, ExceptionCode.Unavailable);
    }
    async removeListener(eventName, listenerFunc) {
      const listeners = this.listeners[eventName];
      if (!listeners) {
        return;
      }
      const index = listeners.indexOf(listenerFunc);
      this.listeners[eventName].splice(index, 1);
      if (!this.listeners[eventName].length) {
        this.removeWindowListener(this.windowListeners[eventName]);
      }
    }
    addWindowListener(handle) {
      window.addEventListener(handle.windowEventName, handle.handler);
      handle.registered = true;
    }
    removeWindowListener(handle) {
      if (!handle) {
        return;
      }
      window.removeEventListener(handle.windowEventName, handle.handler);
      handle.registered = false;
    }
  };
} });
function numbersToDataView(value) {
  return new DataView(Uint8Array.from(value).buffer);
}
function dataViewToNumbers(value) {
  return Array.from(new Uint8Array(value.buffer));
}
function numberToUUID(value) {
  return `0000${value.toString(16).padStart(4, "0")}-0000-1000-8000-00805f9b34fb`;
}
function hexStringToDataView(value) {
  const numbers = value.trim().split(" ").filter((e) => e !== "").map((s) => parseInt(s, 16));
  return numbersToDataView(numbers);
}
function dataViewToHexString(value) {
  return dataViewToNumbers(value).map((n) => {
    let s = n.toString(16);
    if (s.length == 1) {
      s = "0" + s;
    }
    return s;
  }).join(" ");
}
function webUUIDToString(uuid) {
  if (typeof uuid === "string") {
    return uuid;
  } else if (typeof uuid === "number") {
    return numberToUUID(uuid);
  } else {
    throw new Error("Invalid UUID");
  }
}
function mapToObject(map) {
  const obj = {};
  if (!map) {
    return void 0;
  }
  map.forEach((value, key) => {
    obj[key.toString()] = value;
  });
  return obj;
}
var init_conversion = __esm2({ "ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/conversion.js"() {
} });
async function runWithTimeout(promise, time, exception) {
  let timer;
  return Promise.race([promise, new Promise((_2, reject) => {
    timer = setTimeout(() => reject(exception), time);
  })]).finally(() => clearTimeout(timer));
}
var init_timeout = __esm2({ "ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/timeout.js"() {
} });
var web_exports = {};
__export2(web_exports, { BluetoothLeWeb: () => BluetoothLeWeb });
var BluetoothLeWeb;
var init_web = __esm2({ "ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/web.js"() {
  init_dist();
  init_conversion();
  init_timeout();
  BluetoothLeWeb = class extends WebPlugin {
    constructor() {
      super(...arguments);
      this.deviceMap = /* @__PURE__ */ new Map();
      this.discoveredDevices = /* @__PURE__ */ new Map();
      this.scan = null;
      this.DEFAULT_CONNECTION_TIMEOUT = 1e4;
      this.onAdvertisementReceivedCallback = this.onAdvertisementReceived.bind(this);
      this.onDisconnectedCallback = this.onDisconnected.bind(this);
      this.onCharacteristicValueChangedCallback = this.onCharacteristicValueChanged.bind(this);
    }
    async initialize() {
      if (typeof navigator === "undefined" || !navigator.bluetooth) {
        throw this.unavailable("Web Bluetooth API not available in this browser.");
      }
      const isAvailable = await navigator.bluetooth.getAvailability();
      if (!isAvailable) {
        throw this.unavailable("No Bluetooth radio available.");
      }
    }
    async isEnabled() {
      return { value: true };
    }
    async enable() {
      throw this.unavailable("enable is not available on web.");
    }
    async disable() {
      throw this.unavailable("disable is not available on web.");
    }
    async startEnabledNotifications() {
    }
    async stopEnabledNotifications() {
    }
    async isLocationEnabled() {
      throw this.unavailable("isLocationEnabled is not available on web.");
    }
    async openLocationSettings() {
      throw this.unavailable("openLocationSettings is not available on web.");
    }
    async openBluetoothSettings() {
      throw this.unavailable("openBluetoothSettings is not available on web.");
    }
    async openAppSettings() {
      throw this.unavailable("openAppSettings is not available on web.");
    }
    async setDisplayStrings() {
    }
    async requestDevice(options2) {
      const filters = this.getFilters(options2);
      const device = await navigator.bluetooth.requestDevice({ filters: filters.length ? filters : void 0, optionalServices: options2 === null || options2 === void 0 ? void 0 : options2.optionalServices, acceptAllDevices: filters.length === 0 });
      this.deviceMap.set(device.id, device);
      const bleDevice = this.getBleDevice(device);
      return bleDevice;
    }
    async requestLEScan(options2) {
      this.requestBleDeviceOptions = options2;
      const filters = this.getFilters(options2);
      await this.stopLEScan();
      this.discoveredDevices = /* @__PURE__ */ new Map();
      navigator.bluetooth.removeEventListener("advertisementreceived", this.onAdvertisementReceivedCallback);
      navigator.bluetooth.addEventListener("advertisementreceived", this.onAdvertisementReceivedCallback);
      this.scan = await navigator.bluetooth.requestLEScan({ filters: filters.length ? filters : void 0, acceptAllAdvertisements: filters.length === 0, keepRepeatedDevices: options2 === null || options2 === void 0 ? void 0 : options2.allowDuplicates });
    }
    onAdvertisementReceived(event) {
      var _a, _b;
      const deviceId = event.device.id;
      this.deviceMap.set(deviceId, event.device);
      const isNew = !this.discoveredDevices.has(deviceId);
      if (isNew || ((_a = this.requestBleDeviceOptions) === null || _a === void 0 ? void 0 : _a.allowDuplicates)) {
        this.discoveredDevices.set(deviceId, true);
        const device = this.getBleDevice(event.device);
        const result = { device, localName: device.name, rssi: event.rssi, txPower: event.txPower, manufacturerData: mapToObject(event.manufacturerData), serviceData: mapToObject(event.serviceData), uuids: (_b = event.uuids) === null || _b === void 0 ? void 0 : _b.map(webUUIDToString) };
        this.notifyListeners("onScanResult", result);
      }
    }
    async stopLEScan() {
      var _a;
      if ((_a = this.scan) === null || _a === void 0 ? void 0 : _a.active) {
        this.scan.stop();
      }
      this.scan = null;
    }
    async getDevices(_options2) {
      const devices = await navigator.bluetooth.getDevices();
      const bleDevices = devices.map((device) => {
        this.deviceMap.set(device.id, device);
        const bleDevice = this.getBleDevice(device);
        return bleDevice;
      });
      return { devices: bleDevices };
    }
    async getConnectedDevices(_options2) {
      const devices = await navigator.bluetooth.getDevices();
      const bleDevices = devices.filter((device) => {
        var _a;
        return (_a = device.gatt) === null || _a === void 0 ? void 0 : _a.connected;
      }).map((device) => {
        this.deviceMap.set(device.id, device);
        const bleDevice = this.getBleDevice(device);
        return bleDevice;
      });
      return { devices: bleDevices };
    }
    async connect(options2) {
      var _a, _b;
      const device = this.getDeviceFromMap(options2.deviceId);
      device.removeEventListener("gattserverdisconnected", this.onDisconnectedCallback);
      device.addEventListener("gattserverdisconnected", this.onDisconnectedCallback);
      const timeoutError = Symbol();
      if (device.gatt === void 0) {
        throw new Error("No gatt server available.");
      }
      try {
        const timeout = (_a = options2.timeout) !== null && _a !== void 0 ? _a : this.DEFAULT_CONNECTION_TIMEOUT;
        await runWithTimeout(device.gatt.connect(), timeout, timeoutError);
      } catch (error) {
        await ((_b = device.gatt) === null || _b === void 0 ? void 0 : _b.disconnect());
        if (error === timeoutError) {
          throw new Error("Connection timeout");
        } else {
          throw error;
        }
      }
    }
    onDisconnected(event) {
      const deviceId = event.target.id;
      const key = `disconnected|${deviceId}`;
      this.notifyListeners(key, null);
    }
    async createBond(_options2) {
      throw this.unavailable("createBond is not available on web.");
    }
    async isBonded(_options2) {
      throw this.unavailable("isBonded is not available on web.");
    }
    async disconnect(options2) {
      var _a;
      (_a = this.getDeviceFromMap(options2.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    async getServices(options2) {
      var _a, _b;
      const services = (_b = await ((_a = this.getDeviceFromMap(options2.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryServices())) !== null && _b !== void 0 ? _b : [];
      const bleServices = [];
      for (const service of services) {
        const characteristics = await service.getCharacteristics();
        const bleCharacteristics = [];
        for (const characteristic of characteristics) {
          bleCharacteristics.push({ uuid: characteristic.uuid, properties: this.getProperties(characteristic), descriptors: await this.getDescriptors(characteristic) });
        }
        bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });
      }
      return { services: bleServices };
    }
    async getDescriptors(characteristic) {
      try {
        const descriptors = await characteristic.getDescriptors();
        return descriptors.map((descriptor) => ({ uuid: descriptor.uuid }));
      } catch (_a) {
        return [];
      }
    }
    getProperties(characteristic) {
      return { broadcast: characteristic.properties.broadcast, read: characteristic.properties.read, writeWithoutResponse: characteristic.properties.writeWithoutResponse, write: characteristic.properties.write, notify: characteristic.properties.notify, indicate: characteristic.properties.indicate, authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites, reliableWrite: characteristic.properties.reliableWrite, writableAuxiliaries: characteristic.properties.writableAuxiliaries };
    }
    async getCharacteristic(options2) {
      var _a;
      const service = await ((_a = this.getDeviceFromMap(options2.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryService(options2 === null || options2 === void 0 ? void 0 : options2.service));
      return service === null || service === void 0 ? void 0 : service.getCharacteristic(options2 === null || options2 === void 0 ? void 0 : options2.characteristic);
    }
    async getDescriptor(options2) {
      const characteristic = await this.getCharacteristic(options2);
      return characteristic === null || characteristic === void 0 ? void 0 : characteristic.getDescriptor(options2 === null || options2 === void 0 ? void 0 : options2.descriptor);
    }
    async readRssi(_options2) {
      throw this.unavailable("readRssi is not available on web.");
    }
    async read(options2) {
      const characteristic = await this.getCharacteristic(options2);
      const value = await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.readValue());
      return { value };
    }
    async write(options2) {
      const characteristic = await this.getCharacteristic(options2);
      let dataView;
      if (typeof options2.value === "string") {
        dataView = hexStringToDataView(options2.value);
      } else {
        dataView = options2.value;
      }
      await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithResponse(dataView));
    }
    async writeWithoutResponse(options2) {
      const characteristic = await this.getCharacteristic(options2);
      let dataView;
      if (typeof options2.value === "string") {
        dataView = hexStringToDataView(options2.value);
      } else {
        dataView = options2.value;
      }
      await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithoutResponse(dataView));
    }
    async readDescriptor(options2) {
      const descriptor = await this.getDescriptor(options2);
      const value = await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.readValue());
      return { value };
    }
    async writeDescriptor(options2) {
      const descriptor = await this.getDescriptor(options2);
      let dataView;
      if (typeof options2.value === "string") {
        dataView = hexStringToDataView(options2.value);
      } else {
        dataView = options2.value;
      }
      await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.writeValue(dataView));
    }
    async startNotifications(options2) {
      const characteristic = await this.getCharacteristic(options2);
      characteristic === null || characteristic === void 0 ? void 0 : characteristic.removeEventListener("characteristicvaluechanged", this.onCharacteristicValueChangedCallback);
      characteristic === null || characteristic === void 0 ? void 0 : characteristic.addEventListener("characteristicvaluechanged", this.onCharacteristicValueChangedCallback);
      await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.startNotifications());
    }
    onCharacteristicValueChanged(event) {
      var _a, _b;
      const characteristic = event.target;
      const key = `notification|${(_a = characteristic.service) === null || _a === void 0 ? void 0 : _a.device.id}|${(_b = characteristic.service) === null || _b === void 0 ? void 0 : _b.uuid}|${characteristic.uuid}`;
      this.notifyListeners(key, { value: characteristic.value });
    }
    async stopNotifications(options2) {
      const characteristic = await this.getCharacteristic(options2);
      await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.stopNotifications());
    }
    getFilters(options2) {
      var _a;
      const filters = [];
      for (const service of (_a = options2 === null || options2 === void 0 ? void 0 : options2.services) !== null && _a !== void 0 ? _a : []) {
        filters.push({ services: [service], name: options2 === null || options2 === void 0 ? void 0 : options2.name, namePrefix: options2 === null || options2 === void 0 ? void 0 : options2.namePrefix });
      }
      if (((options2 === null || options2 === void 0 ? void 0 : options2.name) || (options2 === null || options2 === void 0 ? void 0 : options2.namePrefix)) && filters.length === 0) {
        filters.push({ name: options2.name, namePrefix: options2.namePrefix });
      }
      return filters;
    }
    getDeviceFromMap(deviceId) {
      const device = this.deviceMap.get(deviceId);
      if (device === void 0) {
        throw new Error('Device not found. Call "requestDevice", "requestLEScan" or "getDevices" first.');
      }
      return device;
    }
    getBleDevice(device) {
      var _a;
      const bleDevice = { deviceId: device.id, name: (_a = device.name) !== null && _a !== void 0 ? _a : void 0 };
      return bleDevice;
    }
  };
} });
var require_throat = __commonJS2({ "ble/node_modules/throat/index.js"(exports, module) {
  "use strict";
  function throatInternal(size) {
    var queue = new Queue();
    var s = size | 0;
    function run(fn, self2, args) {
      if ((s | 0) !== 0) {
        s = (s | 0) - 1;
        return new Promise(function(resolve2) {
          resolve2(fn.apply(self2, args));
        }).then(onFulfill, onReject);
      }
      return new Promise(function(resolve2) {
        queue.push(new Delayed(resolve2, fn, self2, args));
      }).then(runDelayed);
    }
    function runDelayed(d2) {
      try {
        return Promise.resolve(d2.fn.apply(d2.self, d2.args)).then(onFulfill, onReject);
      } catch (ex) {
        onReject(ex);
      }
    }
    function onFulfill(result) {
      release();
      return result;
    }
    function onReject(error) {
      release();
      throw error;
    }
    function release() {
      var next = queue.shift();
      if (next) {
        next.resolve(next);
      } else {
        s = (s | 0) + 1;
      }
    }
    return run;
  }
  function earlyBound(size, fn) {
    const run = throatInternal(size | 0);
    return function() {
      var args = new Array(arguments.length);
      for (var i = 0; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      return run(fn, this, args);
    };
  }
  function lateBound(size) {
    const run = throatInternal(size | 0);
    return function(fn) {
      if (typeof fn !== "function") {
        throw new TypeError("Expected throat fn to be a function but got " + typeof fn);
      }
      var args = new Array(arguments.length - 1);
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
      return run(fn, this, args);
    };
  }
  module.exports = function throat2(size, fn) {
    if (typeof size === "function") {
      var temp = fn;
      fn = size;
      size = temp;
    }
    if (typeof size !== "number") {
      throw new TypeError("Expected throat size to be a number but got " + typeof size);
    }
    if (fn !== void 0 && typeof fn !== "function") {
      throw new TypeError("Expected throat fn to be a function but got " + typeof fn);
    }
    if (typeof fn === "function") {
      return earlyBound(size | 0, fn);
    } else {
      return lateBound(size | 0);
    }
  };
  module.exports.default = module.exports;
  function Delayed(resolve2, fn, self2, args) {
    this.resolve = resolve2;
    this.fn = fn;
    this.self = self2 || null;
    this.args = args;
  }
  var blockSize = 64;
  function Queue() {
    this._s1 = [];
    this._s2 = [];
    this._shiftBlock = this._pushBlock = new Array(blockSize);
    this._pushIndex = 0;
    this._shiftIndex = 0;
  }
  Queue.prototype.push = function(value) {
    if (this._pushIndex === blockSize) {
      this._pushIndex = 0;
      this._s1[this._s1.length] = this._pushBlock = new Array(blockSize);
    }
    this._pushBlock[this._pushIndex++] = value;
  };
  Queue.prototype.shift = function() {
    if (this._shiftIndex === blockSize) {
      this._shiftIndex = 0;
      var s2 = this._s2;
      if (s2.length === 0) {
        var s1 = this._s1;
        if (s1.length === 0) {
          return void 0;
        }
        this._s1 = s2;
        s2 = this._s2 = s1.reverse();
      }
      this._shiftBlock = s2.pop();
    }
    if (this._pushBlock === this._shiftBlock && this._pushIndex === this._shiftIndex) {
      return void 0;
    }
    var result = this._shiftBlock[this._shiftIndex];
    this._shiftBlock[this._shiftIndex++] = null;
    return result;
  };
} });
var __create22 = Object.create;
var __defProp22 = Object.defineProperty;
var __getOwnPropDesc22 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames22 = Object.getOwnPropertyNames;
var __getProtoOf22 = Object.getPrototypeOf;
var __hasOwnProp22 = Object.prototype.hasOwnProperty;
var __require22 = ((x) => typeof __require2 !== "undefined" ? __require2 : typeof Proxy !== "undefined" ? new Proxy(x, { get: (a, b) => (typeof __require2 !== "undefined" ? __require2 : a)[b] }) : x)(function(x) {
  if (typeof __require2 !== "undefined")
    return __require2.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS22 = (cb, mod) => function __require222() {
  return mod || (0, cb[__getOwnPropNames22(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps22 = (to2, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames22(from2))
      if (!__hasOwnProp22.call(to2, key) && key !== except)
        __defProp22(to2, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc22(from2, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM22 = (mod, isNodeMode, target) => (target = mod != null ? __create22(__getProtoOf22(mod)) : {}, __copyProps22(isNodeMode || !mod || !mod.__esModule ? __defProp22(target, "default", { value: mod, enumerable: true }) : target, mod));
var require_sjcl = __commonJS22({ "services/e2ee/sjcl.js"(exports, module) {
  "use strict";
  var sjcl2 = { cipher: {}, hash: {}, keyexchange: {}, mode: {}, misc: {}, codec: {}, exception: { corrupt: function(a) {
    this.toString = function() {
      return "CORRUPT: " + this.message;
    };
    this.message = a;
  }, invalid: function(a) {
    this.toString = function() {
      return "INVALID: " + this.message;
    };
    this.message = a;
  }, bug: function(a) {
    this.toString = function() {
      return "BUG: " + this.message;
    };
    this.message = a;
  }, notReady: function(a) {
    this.toString = function() {
      return "NOT READY: " + this.message;
    };
    this.message = a;
  } } };
  sjcl2.cipher.aes = function(a) {
    this.s[0][0][0] || this.O();
    var b, c, d2, e, f = this.s[0][4], g = this.s[1];
    b = a.length;
    var h = 1;
    if (4 !== b && 6 !== b && 8 !== b)
      throw new sjcl2.exception.invalid("invalid aes key size");
    this.b = [d2 = a.slice(0), e = []];
    for (a = b; a < 4 * b + 28; a++) {
      c = d2[a - 1];
      if (0 === a % b || 8 === b && 4 === a % b)
        c = f[c >>> 24] << 24 ^ f[c >> 16 & 255] << 16 ^ f[c >> 8 & 255] << 8 ^ f[c & 255], 0 === a % b && (c = c << 8 ^ c >>> 24 ^ h << 24, h = h << 1 ^ 283 * (h >> 7));
      d2[a] = d2[a - b] ^ c;
    }
    for (b = 0; a; b++, a--)
      c = d2[b & 3 ? a : a - 4], e[b] = 4 >= a || 4 > b ? c : g[0][f[c >>> 24]] ^ g[1][f[c >> 16 & 255]] ^ g[2][f[c >> 8 & 255]] ^ g[3][f[c & 255]];
  };
  sjcl2.cipher.aes.prototype = { encrypt: function(a) {
    return t(this, a, 0);
  }, decrypt: function(a) {
    return t(this, a, 1);
  }, s: [[[], [], [], [], []], [[], [], [], [], []]], O: function() {
    var a = this.s[0], b = this.s[1], c = a[4], d2 = b[4], e, f, g, h = [], k = [], l, n, m, p;
    for (e = 0; 256 > e; e++)
      k[(h[e] = e << 1 ^ 283 * (e >> 7)) ^ e] = e;
    for (f = g = 0; !c[f]; f ^= l || 1, g = k[g] || 1)
      for (m = g ^ g << 1 ^ g << 2 ^ g << 3 ^ g << 4, m = m >> 8 ^ m & 255 ^ 99, c[f] = m, d2[m] = f, n = h[e = h[l = h[f]]], p = 16843009 * n ^ 65537 * e ^ 257 * l ^ 16843008 * f, n = 257 * h[m] ^ 16843008 * m, e = 0; 4 > e; e++)
        a[e][f] = n = n << 24 ^ n >>> 8, b[e][m] = p = p << 24 ^ p >>> 8;
    for (e = 0; 5 > e; e++)
      a[e] = a[e].slice(0), b[e] = b[e].slice(0);
  } };
  function t(a, b, c) {
    if (4 !== b.length)
      throw new sjcl2.exception.invalid("invalid aes block size");
    var d2 = a.b[c], e = b[0] ^ d2[0], f = b[c ? 3 : 1] ^ d2[1], g = b[2] ^ d2[2];
    b = b[c ? 1 : 3] ^ d2[3];
    var h, k, l, n = d2.length / 4 - 2, m, p = 4, r = [0, 0, 0, 0];
    h = a.s[c];
    a = h[0];
    var q2 = h[1], v = h[2], w2 = h[3], x = h[4];
    for (m = 0; m < n; m++)
      h = a[e >>> 24] ^ q2[f >> 16 & 255] ^ v[g >> 8 & 255] ^ w2[b & 255] ^ d2[p], k = a[f >>> 24] ^ q2[g >> 16 & 255] ^ v[b >> 8 & 255] ^ w2[e & 255] ^ d2[p + 1], l = a[g >>> 24] ^ q2[b >> 16 & 255] ^ v[e >> 8 & 255] ^ w2[f & 255] ^ d2[p + 2], b = a[b >>> 24] ^ q2[e >> 16 & 255] ^ v[f >> 8 & 255] ^ w2[g & 255] ^ d2[p + 3], p += 4, e = h, f = k, g = l;
    for (m = 0; 4 > m; m++)
      r[c ? 3 & -m : m] = x[e >>> 24] << 24 ^ x[f >> 16 & 255] << 16 ^ x[g >> 8 & 255] << 8 ^ x[b & 255] ^ d2[p++], h = e, e = f, f = g, g = b, b = h;
    return r;
  }
  sjcl2.bitArray = { bitSlice: function(a, b, c) {
    a = sjcl2.bitArray.$(a.slice(b / 32), 32 - (b & 31)).slice(1);
    return void 0 === c ? a : sjcl2.bitArray.clamp(a, c - b);
  }, extract: function(a, b, c) {
    var d2 = Math.floor(-b - c & 31);
    return ((b + c - 1 ^ b) & -32 ? a[b / 32 | 0] << 32 - d2 ^ a[b / 32 + 1 | 0] >>> d2 : a[b / 32 | 0] >>> d2) & (1 << c) - 1;
  }, concat: function(a, b) {
    if (0 === a.length || 0 === b.length)
      return a.concat(b);
    var c = a[a.length - 1], d2 = sjcl2.bitArray.getPartial(c);
    return 32 === d2 ? a.concat(b) : sjcl2.bitArray.$(b, d2, c | 0, a.slice(0, a.length - 1));
  }, bitLength: function(a) {
    var b = a.length;
    return 0 === b ? 0 : 32 * (b - 1) + sjcl2.bitArray.getPartial(a[b - 1]);
  }, clamp: function(a, b) {
    if (32 * a.length < b)
      return a;
    a = a.slice(0, Math.ceil(b / 32));
    var c = a.length;
    b = b & 31;
    0 < c && b && (a[c - 1] = sjcl2.bitArray.partial(b, a[c - 1] & 2147483648 >> b - 1, 1));
    return a;
  }, partial: function(a, b, c) {
    return 32 === a ? b : (c ? b | 0 : b << 32 - a) + 1099511627776 * a;
  }, getPartial: function(a) {
    return Math.round(a / 1099511627776) || 32;
  }, equal: function(a, b) {
    if (sjcl2.bitArray.bitLength(a) !== sjcl2.bitArray.bitLength(b))
      return false;
    var c = 0, d2;
    for (d2 = 0; d2 < a.length; d2++)
      c |= a[d2] ^ b[d2];
    return 0 === c;
  }, $: function(a, b, c, d2) {
    var e;
    e = 0;
    for (void 0 === d2 && (d2 = []); 32 <= b; b -= 32)
      d2.push(c), c = 0;
    if (0 === b)
      return d2.concat(a);
    for (e = 0; e < a.length; e++)
      d2.push(c | a[e] >>> b), c = a[e] << 32 - b;
    e = a.length ? a[a.length - 1] : 0;
    a = sjcl2.bitArray.getPartial(e);
    d2.push(sjcl2.bitArray.partial(b + a & 31, 32 < b + a ? c : d2.pop(), 1));
    return d2;
  }, i: function(a, b) {
    return [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]];
  }, byteswapM: function(a) {
    var b, c;
    for (b = 0; b < a.length; ++b)
      c = a[b], a[b] = c >>> 24 | c >>> 8 & 65280 | (c & 65280) << 8 | c << 24;
    return a;
  } };
  sjcl2.codec.utf8String = { fromBits: function(a) {
    var b = "", c = sjcl2.bitArray.bitLength(a), d2, e;
    for (d2 = 0; d2 < c / 8; d2++)
      0 === (d2 & 3) && (e = a[d2 / 4]), b += String.fromCharCode(e >>> 8 >>> 8 >>> 8), e <<= 8;
    return decodeURIComponent(escape(b));
  }, toBits: function(a) {
    a = unescape(encodeURIComponent(a));
    var b = [], c, d2 = 0;
    for (c = 0; c < a.length; c++)
      d2 = d2 << 8 | a.charCodeAt(c), 3 === (c & 3) && (b.push(d2), d2 = 0);
    c & 3 && b.push(sjcl2.bitArray.partial(8 * (c & 3), d2));
    return b;
  } };
  sjcl2.codec.hex = { fromBits: function(a) {
    var b = "", c;
    for (c = 0; c < a.length; c++)
      b += ((a[c] | 0) + 263882790666240).toString(16).substr(4);
    return b.substr(0, sjcl2.bitArray.bitLength(a) / 4);
  }, toBits: function(a) {
    var b, c = [], d2;
    a = a.replace(/\s|0x/g, "");
    d2 = a.length;
    a = a + "00000000";
    for (b = 0; b < a.length; b += 8)
      c.push(parseInt(a.substr(b, 8), 16) ^ 0);
    return sjcl2.bitArray.clamp(c, 4 * d2);
  } };
  sjcl2.codec.base32 = { B: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", X: "0123456789ABCDEFGHIJKLMNOPQRSTUV", BITS: 32, BASE: 5, REMAINING: 27, fromBits: function(a, b, c) {
    var d2 = sjcl2.codec.base32.BASE, e = sjcl2.codec.base32.REMAINING, f = "", g = 0, h = sjcl2.codec.base32.B, k = 0, l = sjcl2.bitArray.bitLength(a);
    c && (h = sjcl2.codec.base32.X);
    for (c = 0; f.length * d2 < l; )
      f += h.charAt((k ^ a[c] >>> g) >>> e), g < d2 ? (k = a[c] << d2 - g, g += e, c++) : (k <<= d2, g -= d2);
    for (; f.length & 7 && !b; )
      f += "=";
    return f;
  }, toBits: function(a, b) {
    a = a.replace(/\s|=/g, "").toUpperCase();
    var c = sjcl2.codec.base32.BITS, d2 = sjcl2.codec.base32.BASE, e = sjcl2.codec.base32.REMAINING, f = [], g, h = 0, k = sjcl2.codec.base32.B, l = 0, n, m = "base32";
    b && (k = sjcl2.codec.base32.X, m = "base32hex");
    for (g = 0; g < a.length; g++) {
      n = k.indexOf(a.charAt(g));
      if (0 > n) {
        if (!b)
          try {
            return sjcl2.codec.base32hex.toBits(a);
          } catch (p) {
          }
        throw new sjcl2.exception.invalid("this isn't " + m + "!");
      }
      h > e ? (h -= e, f.push(l ^ n >>> h), l = n << c - h) : (h += d2, l ^= n << c - h);
    }
    h & 56 && f.push(sjcl2.bitArray.partial(h & 56, l, 1));
    return f;
  } };
  sjcl2.codec.base32hex = { fromBits: function(a, b) {
    return sjcl2.codec.base32.fromBits(a, b, 1);
  }, toBits: function(a) {
    return sjcl2.codec.base32.toBits(a, 1);
  } };
  sjcl2.codec.base64 = { B: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", fromBits: function(a, b, c) {
    var d2 = "", e = 0, f = sjcl2.codec.base64.B, g = 0, h = sjcl2.bitArray.bitLength(a);
    c && (f = f.substr(0, 62) + "-_");
    for (c = 0; 6 * d2.length < h; )
      d2 += f.charAt((g ^ a[c] >>> e) >>> 26), 6 > e ? (g = a[c] << 6 - e, e += 26, c++) : (g <<= 6, e -= 6);
    for (; d2.length & 3 && !b; )
      d2 += "=";
    return d2;
  }, toBits: function(a, b) {
    a = a.replace(/\s|=/g, "");
    var c = [], d2, e = 0, f = sjcl2.codec.base64.B, g = 0, h;
    b && (f = f.substr(0, 62) + "-_");
    for (d2 = 0; d2 < a.length; d2++) {
      h = f.indexOf(a.charAt(d2));
      if (0 > h)
        throw new sjcl2.exception.invalid("this isn't base64!");
      26 < e ? (e -= 26, c.push(g ^ h >>> e), g = h << 32 - e) : (e += 6, g ^= h << 32 - e);
    }
    e & 56 && c.push(sjcl2.bitArray.partial(e & 56, g, 1));
    return c;
  } };
  sjcl2.codec.base64url = { fromBits: function(a) {
    return sjcl2.codec.base64.fromBits(a, 1, 1);
  }, toBits: function(a) {
    return sjcl2.codec.base64.toBits(a, 1);
  } };
  sjcl2.hash.sha256 = function(a) {
    this.b[0] || this.O();
    a ? (this.F = a.F.slice(0), this.A = a.A.slice(0), this.l = a.l) : this.reset();
  };
  sjcl2.hash.sha256.hash = function(a) {
    return new sjcl2.hash.sha256().update(a).finalize();
  };
  sjcl2.hash.sha256.prototype = { blockSize: 512, reset: function() {
    this.F = this.Y.slice(0);
    this.A = [];
    this.l = 0;
    return this;
  }, update: function(a) {
    "string" === typeof a && (a = sjcl2.codec.utf8String.toBits(a));
    var b, c = this.A = sjcl2.bitArray.concat(this.A, a);
    b = this.l;
    a = this.l = b + sjcl2.bitArray.bitLength(a);
    if (9007199254740991 < a)
      throw new sjcl2.exception.invalid("Cannot hash more than 2^53 - 1 bits");
    if ("undefined" !== typeof Uint32Array) {
      var d2 = new Uint32Array(c), e = 0;
      for (b = 512 + b - (512 + b & 511); b <= a; b += 512)
        u(this, d2.subarray(16 * e, 16 * (e + 1))), e += 1;
      c.splice(0, 16 * e);
    } else
      for (b = 512 + b - (512 + b & 511); b <= a; b += 512)
        u(this, c.splice(0, 16));
    return this;
  }, finalize: function() {
    var a, b = this.A, c = this.F, b = sjcl2.bitArray.concat(b, [sjcl2.bitArray.partial(1, 1)]);
    for (a = b.length + 2; a & 15; a++)
      b.push(0);
    b.push(Math.floor(this.l / 4294967296));
    for (b.push(this.l | 0); b.length; )
      u(this, b.splice(0, 16));
    this.reset();
    return c;
  }, Y: [], b: [], O: function() {
    function a(a2) {
      return 4294967296 * (a2 - Math.floor(a2)) | 0;
    }
    for (var b = 0, c = 2, d2, e; 64 > b; c++) {
      e = true;
      for (d2 = 2; d2 * d2 <= c; d2++)
        if (0 === c % d2) {
          e = false;
          break;
        }
      e && (8 > b && (this.Y[b] = a(Math.pow(c, 0.5))), this.b[b] = a(Math.pow(c, 1 / 3)), b++);
    }
  } };
  function u(a, b) {
    var c, d2, e, f = a.F, g = a.b, h = f[0], k = f[1], l = f[2], n = f[3], m = f[4], p = f[5], r = f[6], q2 = f[7];
    for (c = 0; 64 > c; c++)
      16 > c ? d2 = b[c] : (d2 = b[c + 1 & 15], e = b[c + 14 & 15], d2 = b[c & 15] = (d2 >>> 7 ^ d2 >>> 18 ^ d2 >>> 3 ^ d2 << 25 ^ d2 << 14) + (e >>> 17 ^ e >>> 19 ^ e >>> 10 ^ e << 15 ^ e << 13) + b[c & 15] + b[c + 9 & 15] | 0), d2 = d2 + q2 + (m >>> 6 ^ m >>> 11 ^ m >>> 25 ^ m << 26 ^ m << 21 ^ m << 7) + (r ^ m & (p ^ r)) + g[c], q2 = r, r = p, p = m, m = n + d2 | 0, n = l, l = k, k = h, h = d2 + (k & l ^ n & (k ^ l)) + (k >>> 2 ^ k >>> 13 ^ k >>> 22 ^ k << 30 ^ k << 19 ^ k << 10) | 0;
    f[0] = f[0] + h | 0;
    f[1] = f[1] + k | 0;
    f[2] = f[2] + l | 0;
    f[3] = f[3] + n | 0;
    f[4] = f[4] + m | 0;
    f[5] = f[5] + p | 0;
    f[6] = f[6] + r | 0;
    f[7] = f[7] + q2 | 0;
  }
  sjcl2.mode.ccm = { name: "ccm", G: [], listenProgress: function(a) {
    sjcl2.mode.ccm.G.push(a);
  }, unListenProgress: function(a) {
    a = sjcl2.mode.ccm.G.indexOf(a);
    -1 < a && sjcl2.mode.ccm.G.splice(a, 1);
  }, fa: function(a) {
    var b = sjcl2.mode.ccm.G.slice(), c;
    for (c = 0; c < b.length; c += 1)
      b[c](a);
  }, encrypt: function(a, b, c, d2, e) {
    var f, g = b.slice(0), h = sjcl2.bitArray, k = h.bitLength(c) / 8, l = h.bitLength(g) / 8;
    e = e || 64;
    d2 = d2 || [];
    if (7 > k)
      throw new sjcl2.exception.invalid("ccm: iv must be at least 7 bytes");
    for (f = 2; 4 > f && l >>> 8 * f; f++)
      ;
    f < 15 - k && (f = 15 - k);
    c = h.clamp(c, 8 * (15 - f));
    b = sjcl2.mode.ccm.V(a, b, c, d2, e, f);
    g = sjcl2.mode.ccm.C(a, g, c, b, e, f);
    return h.concat(g.data, g.tag);
  }, decrypt: function(a, b, c, d2, e) {
    e = e || 64;
    d2 = d2 || [];
    var f = sjcl2.bitArray, g = f.bitLength(c) / 8, h = f.bitLength(b), k = f.clamp(b, h - e), l = f.bitSlice(b, h - e), h = (h - e) / 8;
    if (7 > g)
      throw new sjcl2.exception.invalid("ccm: iv must be at least 7 bytes");
    for (b = 2; 4 > b && h >>> 8 * b; b++)
      ;
    b < 15 - g && (b = 15 - g);
    c = f.clamp(c, 8 * (15 - b));
    k = sjcl2.mode.ccm.C(a, k, c, l, e, b);
    a = sjcl2.mode.ccm.V(a, k.data, c, d2, e, b);
    if (!f.equal(k.tag, a))
      throw new sjcl2.exception.corrupt("ccm: tag doesn't match");
    return k.data;
  }, na: function(a, b, c, d2, e, f) {
    var g = [], h = sjcl2.bitArray, k = h.i;
    d2 = [h.partial(8, (b.length ? 64 : 0) | d2 - 2 << 2 | f - 1)];
    d2 = h.concat(d2, c);
    d2[3] |= e;
    d2 = a.encrypt(d2);
    if (b.length)
      for (c = h.bitLength(b) / 8, 65279 >= c ? g = [h.partial(16, c)] : 4294967295 >= c && (g = h.concat([h.partial(16, 65534)], [c])), g = h.concat(g, b), b = 0; b < g.length; b += 4)
        d2 = a.encrypt(k(d2, g.slice(b, b + 4).concat([0, 0, 0])));
    return d2;
  }, V: function(a, b, c, d2, e, f) {
    var g = sjcl2.bitArray, h = g.i;
    e /= 8;
    if (e % 2 || 4 > e || 16 < e)
      throw new sjcl2.exception.invalid("ccm: invalid tag length");
    if (4294967295 < d2.length || 4294967295 < b.length)
      throw new sjcl2.exception.bug("ccm: can't deal with 4GiB or more data");
    c = sjcl2.mode.ccm.na(a, d2, c, e, g.bitLength(b) / 8, f);
    for (d2 = 0; d2 < b.length; d2 += 4)
      c = a.encrypt(h(c, b.slice(d2, d2 + 4).concat([0, 0, 0])));
    return g.clamp(c, 8 * e);
  }, C: function(a, b, c, d2, e, f) {
    var g, h = sjcl2.bitArray;
    g = h.i;
    var k = b.length, l = h.bitLength(b), n = k / 50, m = n;
    c = h.concat([h.partial(8, f - 1)], c).concat([0, 0, 0]).slice(0, 4);
    d2 = h.bitSlice(g(d2, a.encrypt(c)), 0, e);
    if (!k)
      return { tag: d2, data: [] };
    for (g = 0; g < k; g += 4)
      g > n && (sjcl2.mode.ccm.fa(g / k), n += m), c[3]++, e = a.encrypt(c), b[g] ^= e[0], b[g + 1] ^= e[1], b[g + 2] ^= e[2], b[g + 3] ^= e[3];
    return { tag: d2, data: h.clamp(b, l) };
  } };
  sjcl2.mode.ocb2 = { name: "ocb2", encrypt: function(a, b, c, d2, e, f) {
    if (128 !== sjcl2.bitArray.bitLength(c))
      throw new sjcl2.exception.invalid("ocb iv must be 128 bits");
    var g, h = sjcl2.mode.ocb2.S, k = sjcl2.bitArray, l = k.i, n = [0, 0, 0, 0];
    c = h(a.encrypt(c));
    var m, p = [];
    d2 = d2 || [];
    e = e || 64;
    for (g = 0; g + 4 < b.length; g += 4)
      m = b.slice(g, g + 4), n = l(n, m), p = p.concat(l(c, a.encrypt(l(c, m)))), c = h(c);
    m = b.slice(g);
    b = k.bitLength(m);
    g = a.encrypt(l(c, [0, 0, 0, b]));
    m = k.clamp(l(m.concat([0, 0, 0]), g), b);
    n = l(n, l(m.concat([0, 0, 0]), g));
    n = a.encrypt(l(n, l(c, h(c))));
    d2.length && (n = l(n, f ? d2 : sjcl2.mode.ocb2.pmac(a, d2)));
    return p.concat(k.concat(m, k.clamp(n, e)));
  }, decrypt: function(a, b, c, d2, e, f) {
    if (128 !== sjcl2.bitArray.bitLength(c))
      throw new sjcl2.exception.invalid("ocb iv must be 128 bits");
    e = e || 64;
    var g = sjcl2.mode.ocb2.S, h = sjcl2.bitArray, k = h.i, l = [0, 0, 0, 0], n = g(a.encrypt(c)), m, p, r = sjcl2.bitArray.bitLength(b) - e, q2 = [];
    d2 = d2 || [];
    for (c = 0; c + 4 < r / 32; c += 4)
      m = k(n, a.decrypt(k(n, b.slice(c, c + 4)))), l = k(l, m), q2 = q2.concat(m), n = g(n);
    p = r - 32 * c;
    m = a.encrypt(k(n, [0, 0, 0, p]));
    m = k(m, h.clamp(b.slice(c), p).concat([0, 0, 0]));
    l = k(l, m);
    l = a.encrypt(k(l, k(n, g(n))));
    d2.length && (l = k(l, f ? d2 : sjcl2.mode.ocb2.pmac(a, d2)));
    if (!h.equal(h.clamp(l, e), h.bitSlice(b, r)))
      throw new sjcl2.exception.corrupt("ocb: tag doesn't match");
    return q2.concat(h.clamp(m, p));
  }, pmac: function(a, b) {
    var c, d2 = sjcl2.mode.ocb2.S, e = sjcl2.bitArray, f = e.i, g = [0, 0, 0, 0], h = a.encrypt([0, 0, 0, 0]), h = f(h, d2(d2(h)));
    for (c = 0; c + 4 < b.length; c += 4)
      h = d2(h), g = f(g, a.encrypt(f(h, b.slice(c, c + 4))));
    c = b.slice(c);
    128 > e.bitLength(c) && (h = f(h, d2(h)), c = e.concat(c, [-2147483648, 0, 0, 0]));
    g = f(g, c);
    return a.encrypt(f(d2(f(h, d2(h))), g));
  }, S: function(a) {
    return [a[0] << 1 ^ a[1] >>> 31, a[1] << 1 ^ a[2] >>> 31, a[2] << 1 ^ a[3] >>> 31, a[3] << 1 ^ 135 * (a[0] >>> 31)];
  } };
  sjcl2.mode.gcm = { name: "gcm", encrypt: function(a, b, c, d2, e) {
    var f = b.slice(0);
    b = sjcl2.bitArray;
    d2 = d2 || [];
    a = sjcl2.mode.gcm.C(true, a, f, d2, c, e || 128);
    return b.concat(a.data, a.tag);
  }, decrypt: function(a, b, c, d2, e) {
    var f = b.slice(0), g = sjcl2.bitArray, h = g.bitLength(f);
    e = e || 128;
    d2 = d2 || [];
    e <= h ? (b = g.bitSlice(f, h - e), f = g.bitSlice(f, 0, h - e)) : (b = f, f = []);
    a = sjcl2.mode.gcm.C(false, a, f, d2, c, e);
    if (!g.equal(a.tag, b))
      throw new sjcl2.exception.corrupt("gcm: tag doesn't match");
    return a.data;
  }, ka: function(a, b) {
    var c, d2, e, f, g, h = sjcl2.bitArray.i;
    e = [0, 0, 0, 0];
    f = b.slice(0);
    for (c = 0; 128 > c; c++) {
      (d2 = 0 !== (a[Math.floor(c / 32)] & 1 << 31 - c % 32)) && (e = h(e, f));
      g = 0 !== (f[3] & 1);
      for (d2 = 3; 0 < d2; d2--)
        f[d2] = f[d2] >>> 1 | (f[d2 - 1] & 1) << 31;
      f[0] >>>= 1;
      g && (f[0] ^= -520093696);
    }
    return e;
  }, j: function(a, b, c) {
    var d2, e = c.length;
    b = b.slice(0);
    for (d2 = 0; d2 < e; d2 += 4)
      b[0] ^= 4294967295 & c[d2], b[1] ^= 4294967295 & c[d2 + 1], b[2] ^= 4294967295 & c[d2 + 2], b[3] ^= 4294967295 & c[d2 + 3], b = sjcl2.mode.gcm.ka(b, a);
    return b;
  }, C: function(a, b, c, d2, e, f) {
    var g, h, k, l, n, m, p, r, q2 = sjcl2.bitArray;
    m = c.length;
    p = q2.bitLength(c);
    r = q2.bitLength(d2);
    h = q2.bitLength(e);
    g = b.encrypt([0, 0, 0, 0]);
    96 === h ? (e = e.slice(0), e = q2.concat(e, [1])) : (e = sjcl2.mode.gcm.j(g, [0, 0, 0, 0], e), e = sjcl2.mode.gcm.j(g, e, [0, 0, Math.floor(h / 4294967296), h & 4294967295]));
    h = sjcl2.mode.gcm.j(g, [0, 0, 0, 0], d2);
    n = e.slice(0);
    d2 = h.slice(0);
    a || (d2 = sjcl2.mode.gcm.j(g, h, c));
    for (l = 0; l < m; l += 4)
      n[3]++, k = b.encrypt(n), c[l] ^= k[0], c[l + 1] ^= k[1], c[l + 2] ^= k[2], c[l + 3] ^= k[3];
    c = q2.clamp(c, p);
    a && (d2 = sjcl2.mode.gcm.j(g, h, c));
    a = [Math.floor(r / 4294967296), r & 4294967295, Math.floor(p / 4294967296), p & 4294967295];
    d2 = sjcl2.mode.gcm.j(g, d2, a);
    k = b.encrypt(e);
    d2[0] ^= k[0];
    d2[1] ^= k[1];
    d2[2] ^= k[2];
    d2[3] ^= k[3];
    return { tag: q2.bitSlice(d2, 0, f), data: c };
  } };
  sjcl2.misc.hmac = function(a, b) {
    this.W = b = b || sjcl2.hash.sha256;
    var c = [[], []], d2, e = b.prototype.blockSize / 32;
    this.w = [new b(), new b()];
    a.length > e && (a = b.hash(a));
    for (d2 = 0; d2 < e; d2++)
      c[0][d2] = a[d2] ^ 909522486, c[1][d2] = a[d2] ^ 1549556828;
    this.w[0].update(c[0]);
    this.w[1].update(c[1]);
    this.R = new b(this.w[0]);
  };
  sjcl2.misc.hmac.prototype.encrypt = sjcl2.misc.hmac.prototype.mac = function(a) {
    if (this.aa)
      throw new sjcl2.exception.invalid("encrypt on already updated hmac called!");
    this.update(a);
    return this.digest(a);
  };
  sjcl2.misc.hmac.prototype.reset = function() {
    this.R = new this.W(this.w[0]);
    this.aa = false;
  };
  sjcl2.misc.hmac.prototype.update = function(a) {
    this.aa = true;
    this.R.update(a);
  };
  sjcl2.misc.hmac.prototype.digest = function() {
    var a = this.R.finalize(), a = new this.W(this.w[1]).update(a).finalize();
    this.reset();
    return a;
  };
  sjcl2.misc.pbkdf2 = function(a, b, c, d2, e) {
    c = c || 1e4;
    if (0 > d2 || 0 > c)
      throw new sjcl2.exception.invalid("invalid params to pbkdf2");
    "string" === typeof a && (a = sjcl2.codec.utf8String.toBits(a));
    "string" === typeof b && (b = sjcl2.codec.utf8String.toBits(b));
    e = e || sjcl2.misc.hmac;
    a = new e(a);
    var f, g, h, k, l = [], n = sjcl2.bitArray;
    for (k = 1; 32 * l.length < (d2 || 1); k++) {
      e = f = a.encrypt(n.concat(b, [k]));
      for (g = 1; g < c; g++)
        for (f = a.encrypt(f), h = 0; h < f.length; h++)
          e[h] ^= f[h];
      l = l.concat(e);
    }
    d2 && (l = n.clamp(l, d2));
    return l;
  };
  sjcl2.prng = function(a) {
    this.c = [new sjcl2.hash.sha256()];
    this.m = [0];
    this.P = 0;
    this.H = {};
    this.N = 0;
    this.U = {};
    this.Z = this.f = this.o = this.ha = 0;
    this.b = [0, 0, 0, 0, 0, 0, 0, 0];
    this.h = [0, 0, 0, 0];
    this.L = void 0;
    this.M = a;
    this.D = false;
    this.K = { progress: {}, seeded: {} };
    this.u = this.ga = 0;
    this.I = 1;
    this.J = 2;
    this.ca = 65536;
    this.T = [0, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024];
    this.da = 3e4;
    this.ba = 80;
  };
  sjcl2.prng.prototype = { randomWords: function(a, b) {
    var c = [], d2;
    d2 = this.isReady(b);
    var e;
    if (d2 === this.u)
      throw new sjcl2.exception.notReady("generator isn't seeded");
    if (d2 & this.J) {
      d2 = !(d2 & this.I);
      e = [];
      var f = 0, g;
      this.Z = e[0] = new Date().valueOf() + this.da;
      for (g = 0; 16 > g; g++)
        e.push(4294967296 * Math.random() | 0);
      for (g = 0; g < this.c.length && (e = e.concat(this.c[g].finalize()), f += this.m[g], this.m[g] = 0, d2 || !(this.P & 1 << g)); g++)
        ;
      this.P >= 1 << this.c.length && (this.c.push(new sjcl2.hash.sha256()), this.m.push(0));
      this.f -= f;
      f > this.o && (this.o = f);
      this.P++;
      this.b = sjcl2.hash.sha256.hash(this.b.concat(e));
      this.L = new sjcl2.cipher.aes(this.b);
      for (d2 = 0; 4 > d2 && (this.h[d2] = this.h[d2] + 1 | 0, !this.h[d2]); d2++)
        ;
    }
    for (d2 = 0; d2 < a; d2 += 4)
      0 === (d2 + 1) % this.ca && y(this), e = z2(this), c.push(e[0], e[1], e[2], e[3]);
    y(this);
    return c.slice(0, a);
  }, setDefaultParanoia: function(a, b) {
    if (0 === a && "Setting paranoia=0 will ruin your security; use it only for testing" !== b)
      throw new sjcl2.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");
    this.M = a;
  }, addEntropy: function(a, b, c) {
    c = c || "user";
    var d2, e, f = new Date().valueOf(), g = this.H[c], h = this.isReady(), k = 0;
    d2 = this.U[c];
    void 0 === d2 && (d2 = this.U[c] = this.ha++);
    void 0 === g && (g = this.H[c] = 0);
    this.H[c] = (this.H[c] + 1) % this.c.length;
    switch (typeof a) {
      case "number":
        void 0 === b && (b = 1);
        this.c[g].update([d2, this.N++, 1, b, f, 1, a | 0]);
        break;
      case "object":
        c = Object.prototype.toString.call(a);
        if ("[object Uint32Array]" === c) {
          e = [];
          for (c = 0; c < a.length; c++)
            e.push(a[c]);
          a = e;
        } else
          for ("[object Array]" !== c && (k = 1), c = 0; c < a.length && !k; c++)
            "number" !== typeof a[c] && (k = 1);
        if (!k) {
          if (void 0 === b)
            for (c = b = 0; c < a.length; c++)
              for (e = a[c]; 0 < e; )
                b++, e = e >>> 1;
          this.c[g].update([d2, this.N++, 2, b, f, a.length].concat(a));
        }
        break;
      case "string":
        void 0 === b && (b = a.length);
        this.c[g].update([d2, this.N++, 3, b, f, a.length]);
        this.c[g].update(a);
        break;
      default:
        k = 1;
    }
    if (k)
      throw new sjcl2.exception.bug("random: addEntropy only supports number, array of numbers or string");
    this.m[g] += b;
    this.f += b;
    h === this.u && (this.isReady() !== this.u && A("seeded", Math.max(this.o, this.f)), A("progress", this.getProgress()));
  }, isReady: function(a) {
    a = this.T[void 0 !== a ? a : this.M];
    return this.o && this.o >= a ? this.m[0] > this.ba && new Date().valueOf() > this.Z ? this.J | this.I : this.I : this.f >= a ? this.J | this.u : this.u;
  }, getProgress: function(a) {
    a = this.T[a ? a : this.M];
    return this.o >= a ? 1 : this.f > a ? 1 : this.f / a;
  }, startCollectors: function() {
    if (!this.D) {
      this.a = { loadTimeCollector: B(this, this.ma), mouseCollector: B(this, this.oa), keyboardCollector: B(this, this.la), accelerometerCollector: B(this, this.ea), touchCollector: B(this, this.qa) };
      if (window.addEventListener)
        window.addEventListener("load", this.a.loadTimeCollector, false), window.addEventListener("mousemove", this.a.mouseCollector, false), window.addEventListener("keypress", this.a.keyboardCollector, false), window.addEventListener("devicemotion", this.a.accelerometerCollector, false), window.addEventListener("touchmove", this.a.touchCollector, false);
      else if (document.attachEvent)
        document.attachEvent("onload", this.a.loadTimeCollector), document.attachEvent("onmousemove", this.a.mouseCollector), document.attachEvent("keypress", this.a.keyboardCollector);
      else
        throw new sjcl2.exception.bug("can't attach event");
      this.D = true;
    }
  }, stopCollectors: function() {
    this.D && (window.removeEventListener ? (window.removeEventListener("load", this.a.loadTimeCollector, false), window.removeEventListener("mousemove", this.a.mouseCollector, false), window.removeEventListener("keypress", this.a.keyboardCollector, false), window.removeEventListener("devicemotion", this.a.accelerometerCollector, false), window.removeEventListener("touchmove", this.a.touchCollector, false)) : document.detachEvent && (document.detachEvent("onload", this.a.loadTimeCollector), document.detachEvent("onmousemove", this.a.mouseCollector), document.detachEvent("keypress", this.a.keyboardCollector)), this.D = false);
  }, addEventListener: function(a, b) {
    this.K[a][this.ga++] = b;
  }, removeEventListener: function(a, b) {
    var c, d2, e = this.K[a], f = [];
    for (d2 in e)
      e.hasOwnProperty(d2) && e[d2] === b && f.push(d2);
    for (c = 0; c < f.length; c++)
      d2 = f[c], delete e[d2];
  }, la: function() {
    C(this, 1);
  }, oa: function(a) {
    var b, c;
    try {
      b = a.x || a.clientX || a.offsetX || 0, c = a.y || a.clientY || a.offsetY || 0;
    } catch (d2) {
      c = b = 0;
    }
    0 != b && 0 != c && this.addEntropy([b, c], 2, "mouse");
    C(this, 0);
  }, qa: function(a) {
    a = a.touches[0] || a.changedTouches[0];
    this.addEntropy([a.pageX || a.clientX, a.pageY || a.clientY], 1, "touch");
    C(this, 0);
  }, ma: function() {
    C(this, 2);
  }, ea: function(a) {
    a = a.accelerationIncludingGravity.x || a.accelerationIncludingGravity.y || a.accelerationIncludingGravity.z;
    if (window.orientation) {
      var b = window.orientation;
      "number" === typeof b && this.addEntropy(b, 1, "accelerometer");
    }
    a && this.addEntropy(a, 2, "accelerometer");
    C(this, 0);
  } };
  function A(a, b) {
    var c, d2 = sjcl2.random.K[a], e = [];
    for (c in d2)
      d2.hasOwnProperty(c) && e.push(d2[c]);
    for (c = 0; c < e.length; c++)
      e[c](b);
  }
  function C(a, b) {
    "undefined" !== typeof window && window.performance && "function" === typeof window.performance.now ? a.addEntropy(window.performance.now(), b, "loadtime") : a.addEntropy(new Date().valueOf(), b, "loadtime");
  }
  function y(a) {
    a.b = z2(a).concat(z2(a));
    a.L = new sjcl2.cipher.aes(a.b);
  }
  function z2(a) {
    for (var b = 0; 4 > b && (a.h[b] = a.h[b] + 1 | 0, !a.h[b]); b++)
      ;
    return a.L.encrypt(a.h);
  }
  function B(a, b) {
    return function() {
      b.apply(a, arguments);
    };
  }
  sjcl2.random = new sjcl2.prng(6);
  a:
    try {
      if (G = "undefined" !== typeof module && module.exports) {
        try {
          H2 = __require22("crypto");
        } catch (a) {
          H2 = null;
        }
        G = E = H2;
      }
      if (G && E.randomBytes)
        D2 = E.randomBytes(128), D2 = new Uint32Array(new Uint8Array(D2).buffer), sjcl2.random.addEntropy(D2, 1024, "crypto['randomBytes']");
      else if ("undefined" !== typeof window && "undefined" !== typeof Uint32Array) {
        F2 = new Uint32Array(32);
        if (window.crypto && window.crypto.getRandomValues)
          window.crypto.getRandomValues(F2);
        else if (window.msCrypto && window.msCrypto.getRandomValues)
          window.msCrypto.getRandomValues(F2);
        else
          break a;
        sjcl2.random.addEntropy(F2, 1024, "crypto['getRandomValues']");
      }
    } catch (a) {
      "undefined" !== typeof window && window.console && (console.log("There was an error collecting entropy from the browser:"), console.log(a));
    }
  var D2;
  var E;
  var F2;
  var G;
  var H2;
  sjcl2.json = { defaults: { v: 1, iter: 1e4, ks: 128, ts: 64, mode: "ccm", adata: "", cipher: "aes" }, ja: function(a, b, c, d2) {
    c = c || {};
    d2 = d2 || {};
    var e = sjcl2.json, f = e.g({ iv: sjcl2.random.randomWords(4, 0) }, e.defaults), g;
    e.g(f, c);
    c = f.adata;
    "string" === typeof f.salt && (f.salt = sjcl2.codec.base64.toBits(f.salt));
    "string" === typeof f.iv && (f.iv = sjcl2.codec.base64.toBits(f.iv));
    if (!sjcl2.mode[f.mode] || !sjcl2.cipher[f.cipher] || "string" === typeof a && 100 >= f.iter || 64 !== f.ts && 96 !== f.ts && 128 !== f.ts || 128 !== f.ks && 192 !== f.ks && 256 !== f.ks || 2 > f.iv.length || 4 < f.iv.length)
      throw new sjcl2.exception.invalid("json encrypt: invalid parameters");
    "string" === typeof a ? (g = sjcl2.misc.cachedPbkdf2(a, f), a = g.key.slice(0, f.ks / 32), f.salt = g.salt) : sjcl2.ecc && a instanceof sjcl2.ecc.elGamal.publicKey && (g = a.kem(), f.kemtag = g.tag, a = g.key.slice(0, f.ks / 32));
    "string" === typeof b && (b = sjcl2.codec.utf8String.toBits(b));
    "string" === typeof c && (f.adata = c = sjcl2.codec.utf8String.toBits(c));
    g = new sjcl2.cipher[f.cipher](a);
    e.g(d2, f);
    d2.key = a;
    f.ct = "ccm" === f.mode && sjcl2.arrayBuffer && sjcl2.arrayBuffer.ccm && b instanceof ArrayBuffer ? sjcl2.arrayBuffer.ccm.encrypt(g, b, f.iv, c, f.ts) : sjcl2.mode[f.mode].encrypt(g, b, f.iv, c, f.ts);
    return f;
  }, encrypt: function(a, b, c, d2) {
    var e = sjcl2.json, f = e.ja.apply(e, arguments);
    return e.encode(f);
  }, ia: function(a, b, c, d2) {
    c = c || {};
    d2 = d2 || {};
    var e = sjcl2.json;
    b = e.g(e.g(e.g({}, e.defaults), b), c, true);
    var f, g;
    f = b.adata;
    "string" === typeof b.salt && (b.salt = sjcl2.codec.base64.toBits(b.salt));
    "string" === typeof b.iv && (b.iv = sjcl2.codec.base64.toBits(b.iv));
    if (!sjcl2.mode[b.mode] || !sjcl2.cipher[b.cipher] || "string" === typeof a && 100 >= b.iter || 64 !== b.ts && 96 !== b.ts && 128 !== b.ts || 128 !== b.ks && 192 !== b.ks && 256 !== b.ks || !b.iv || 2 > b.iv.length || 4 < b.iv.length)
      throw new sjcl2.exception.invalid("json decrypt: invalid parameters");
    "string" === typeof a ? (g = sjcl2.misc.cachedPbkdf2(a, b), a = g.key.slice(0, b.ks / 32), b.salt = g.salt) : sjcl2.ecc && a instanceof sjcl2.ecc.elGamal.secretKey && (a = a.unkem(sjcl2.codec.base64.toBits(b.kemtag)).slice(0, b.ks / 32));
    "string" === typeof f && (f = sjcl2.codec.utf8String.toBits(f));
    g = new sjcl2.cipher[b.cipher](a);
    f = "ccm" === b.mode && sjcl2.arrayBuffer && sjcl2.arrayBuffer.ccm && b.ct instanceof ArrayBuffer ? sjcl2.arrayBuffer.ccm.decrypt(g, b.ct, b.iv, b.tag, f, b.ts) : sjcl2.mode[b.mode].decrypt(g, b.ct, b.iv, f, b.ts);
    e.g(d2, b);
    d2.key = a;
    return 1 === c.raw ? f : sjcl2.codec.utf8String.fromBits(f);
  }, decrypt: function(a, b, c, d2) {
    var e = sjcl2.json;
    return e.ia(a, e.decode(b), c, d2);
  }, encode: function(a) {
    var b, c = "{", d2 = "";
    for (b in a)
      if (a.hasOwnProperty(b)) {
        if (!b.match(/^[a-z0-9]+$/i))
          throw new sjcl2.exception.invalid("json encode: invalid property name");
        c += d2 + '"' + b + '":';
        d2 = ",";
        switch (typeof a[b]) {
          case "number":
          case "boolean":
            c += a[b];
            break;
          case "string":
            c += '"' + escape(a[b]) + '"';
            break;
          case "object":
            c += '"' + sjcl2.codec.base64.fromBits(a[b], 0) + '"';
            break;
          default:
            throw new sjcl2.exception.bug("json encode: unsupported type");
        }
      }
    return c + "}";
  }, decode: function(a) {
    a = a.replace(/\s/g, "");
    if (!a.match(/^\{.*\}$/))
      throw new sjcl2.exception.invalid("json decode: this isn't json!");
    a = a.replace(/^\{|\}$/g, "").split(/,/);
    var b = {}, c, d2;
    for (c = 0; c < a.length; c++) {
      if (!(d2 = a[c].match(/^\s*(?:(["']?)([a-z][a-z0-9]*)\1)\s*:\s*(?:(-?\d+)|"([a-z0-9+\/%*_.@=\-]*)"|(true|false))$/i)))
        throw new sjcl2.exception.invalid("json decode: this isn't json!");
      null != d2[3] ? b[d2[2]] = parseInt(d2[3], 10) : null != d2[4] ? b[d2[2]] = d2[2].match(/^(ct|adata|salt|iv)$/) ? sjcl2.codec.base64.toBits(d2[4]) : unescape(d2[4]) : null != d2[5] && (b[d2[2]] = "true" === d2[5]);
    }
    return b;
  }, g: function(a, b, c) {
    void 0 === a && (a = {});
    if (void 0 === b)
      return a;
    for (var d2 in b)
      if (b.hasOwnProperty(d2)) {
        if (c && void 0 !== a[d2] && a[d2] !== b[d2])
          throw new sjcl2.exception.invalid("required parameter overridden");
        a[d2] = b[d2];
      }
    return a;
  }, sa: function(a, b) {
    var c = {}, d2;
    for (d2 in a)
      a.hasOwnProperty(d2) && a[d2] !== b[d2] && (c[d2] = a[d2]);
    return c;
  }, ra: function(a, b) {
    var c = {}, d2;
    for (d2 = 0; d2 < b.length; d2++)
      void 0 !== a[b[d2]] && (c[b[d2]] = a[b[d2]]);
    return c;
  } };
  sjcl2.encrypt = sjcl2.json.encrypt;
  sjcl2.decrypt = sjcl2.json.decrypt;
  sjcl2.misc.pa = {};
  sjcl2.misc.cachedPbkdf2 = function(a, b) {
    var c = sjcl2.misc.pa, d2;
    b = b || {};
    d2 = b.iter || 1e3;
    c = c[a] = c[a] || {};
    d2 = c[d2] = c[d2] || { firstSalt: b.salt && b.salt.length ? b.salt.slice(0) : sjcl2.random.randomWords(2, 0) };
    c = void 0 === b.salt ? d2.firstSalt : b.salt;
    d2[c] = d2[c] || sjcl2.misc.pbkdf2(a, c, b.iter);
    return { key: d2[c].slice(0), salt: c.slice(0) };
  };
  "undefined" !== typeof module && module.exports && (module.exports = sjcl2);
  "function" === typeof define && define([], function() {
    return sjcl2;
  });
} });
var require_browser = __commonJS22({ "node_modules/web-worker/cjs/browser.js"(exports, module) {
  module.exports = Worker;
} });
function parseFunctionFromText3(method = "") {
  let getFunctionBody = (methodString) => {
    return methodString.replace(/^\W*(function[^{]+\{([\s\S]*)\}|[^=]+=>[^{]*\{([\s\S]*)\}|[^=]+=>(.+))/i, "$2$3$4");
  };
  let getFunctionHead = (methodString) => {
    let startindex = methodString.indexOf("=>") + 1;
    if (startindex <= 0) {
      startindex = methodString.indexOf("){");
    }
    if (startindex <= 0) {
      startindex = methodString.indexOf(") {");
    }
    return methodString.slice(0, methodString.indexOf("{", startindex) + 1);
  };
  let newFuncHead = getFunctionHead(method);
  let newFuncBody = getFunctionBody(method);
  let newFunc;
  if (newFuncHead.includes("function")) {
    let varName = newFuncHead.split("(")[1].split(")")[0];
    newFunc = new Function(varName, newFuncBody);
  } else {
    if (newFuncHead.substring(0, 6) === newFuncBody.substring(0, 6)) {
      let varName = newFuncHead.split("(")[1].split(")")[0];
      newFunc = new Function(varName, newFuncBody.substring(newFuncBody.indexOf("{") + 1, newFuncBody.length - 1));
    } else {
      try {
        newFunc = (0, eval)(newFuncHead + newFuncBody + "}");
      } catch {
      }
    }
  }
  return newFunc;
}
var EventHandler2 = class {
  constructor() {
    this.pushToState = {};
    this.data = {};
    this.triggers = {};
    this.setState = (updateObj) => {
      Object.assign(this.data, updateObj);
      for (const prop of Object.getOwnPropertyNames(updateObj)) {
        if (this.triggers[prop])
          this.triggers[prop].forEach((obj) => obj.onchange(this.data[prop]));
      }
      return this.data;
    };
    this.subscribeTrigger = (key, onchange) => {
      if (key) {
        if (!this.triggers[key]) {
          this.triggers[key] = [];
        }
        let l = this.triggers[key].length;
        this.triggers[key].push({ idx: l, onchange });
        return this.triggers[key].length - 1;
      } else
        return void 0;
    };
    this.unsubscribeTrigger = (key, sub) => {
      let triggers = this.triggers[key];
      if (triggers) {
        if (!sub)
          delete this.triggers[key];
        else {
          let idx = void 0;
          let obj = triggers.find((o, i) => {
            if (o.idx === sub) {
              idx = i;
              return true;
            }
          });
          if (obj)
            triggers.splice(idx, 1);
          return true;
        }
      }
    };
    this.subscribeTriggerOnce = (key, onchange) => {
      let sub;
      let changed = (value) => {
        onchange(value);
        this.unsubscribeTrigger(key, sub);
      };
      sub = this.subscribeTrigger(key, changed);
    };
  }
};
var state2 = new EventHandler2();
function addLocalState2(props) {
  if (!this._state)
    this._state = {};
  for (let k in props) {
    if (k === "_state" || k === "graph")
      continue;
    else {
      this._state[k] = props[k];
      if (k in this)
        this[k] = props[k];
      else
        Object.defineProperty(this, k, { get: () => {
          this._state[k];
        }, set: (v) => {
          this._state[k] = v;
          if (this.state.triggers[this._unique])
            this.setState({ [this._unique]: this._state });
        }, enumerable: true, configurable: true });
    }
  }
}
var GraphNode2 = class {
  constructor(properties = {}, parent, graph) {
    this.nodes = /* @__PURE__ */ new Map();
    this._initial = {};
    this._unique = `${Math.random()}`;
    this.state = state2;
    this.isLooping = false;
    this.isAnimating = false;
    this.looper = void 0;
    this.animation = void 0;
    this.forward = true;
    this.backward = false;
    this.reactive = false;
    this.runSync = false;
    this.firstRun = true;
    this.DEBUGNODE = false;
    this.addLocalState = addLocalState2;
    this.operator = (...args) => {
      return args;
    };
    this.runOp = (...args) => {
      if (this.DEBUGNODE)
        console.time(this.tag);
      let result = this.operator(...args);
      if (result instanceof Promise) {
        result.then((res) => {
          if (res !== void 0)
            this.setState({ [this.tag]: res });
          if (this.DEBUGNODE) {
            console.timeEnd(this.tag);
            if (result !== void 0)
              console.log(`${this.tag} result:`, result);
          }
          ;
          return res;
        });
      } else {
        if (result !== void 0)
          this.setState({ [this.tag]: result });
        if (this.DEBUGNODE) {
          console.timeEnd(this.tag);
          if (result !== void 0)
            console.log(`${this.tag} result:`, result);
        }
        ;
      }
      return result;
    };
    this.setOperator = (operator) => {
      if (typeof operator !== "function")
        return operator;
      this.operator = operator.bind(this);
      return operator;
    };
    this.runAsync = (...args) => {
      return new Promise((res, rej) => {
        res(this.run(...args));
      });
    };
    this.transformArgs = (args = []) => args;
    this.isRunSync = () => {
      return !(this.children && this.forward || this.parent && this.backward || this.repeat || this.delay || this.frame || this.recursive || this.branch);
    };
    this.run = (...args) => {
      if (typeof this.transformArgs === "function")
        args = this.transformArgs(args, this);
      if (this.firstRun) {
        this.firstRun = false;
        this.runSync = this.isRunSync();
        if (this.animate && !this.isAnimating) {
          this.runAnimation(this.animation, args);
        }
        if (this.loop && typeof this.loop === "number" && !this.isLooping) {
          this.runLoop(this.looper, args);
        }
        if (this.loop || this.animate)
          return;
      }
      if (this.runSync) {
        let res = this.runOp(...args);
        return res;
      }
      return new Promise(async (resolve2) => {
        if (this) {
          let run = (node, tick = 0, ...input) => {
            return new Promise(async (r) => {
              tick++;
              let res = await node.runOp(...input);
              if (node.repeat) {
                while (tick < node.repeat) {
                  if (node.delay) {
                    setTimeout(async () => {
                      r(await run(node, tick, ...input));
                    }, node.delay);
                    break;
                  } else if (node.frame && window?.requestAnimationFrame) {
                    requestAnimationFrame(async () => {
                      r(await run(node, tick, ...input));
                    });
                    break;
                  } else
                    res = await node.runOp(...input);
                  tick++;
                }
                if (tick === node.repeat) {
                  r(res);
                  return;
                }
              } else if (node.recursive) {
                while (tick < node.recursive) {
                  if (node.delay) {
                    setTimeout(async () => {
                      r(await run(node, tick, ...res));
                    }, node.delay);
                    break;
                  } else if (node.frame && window?.requestAnimationFrame) {
                    requestAnimationFrame(async () => {
                      r(await run(node, tick, ...res));
                    });
                    break;
                  } else
                    res = await node.runOp(...res);
                  tick++;
                }
                if (tick === node.recursive) {
                  r(res);
                  return;
                }
              } else {
                r(res);
                return;
              }
            });
          };
          let runnode = async () => {
            let res = await run(this, void 0, ...args);
            if (res !== void 0) {
              if (this.backward && this.parent instanceof GraphNode2) {
                if (Array.isArray(res))
                  await this.runParent(this, ...res);
                else
                  await this.runParent(this, res);
              }
              if (this.children && this.forward) {
                if (Array.isArray(res))
                  await this.runChildren(this, ...res);
                else
                  await this.runChildren(this, res);
              }
              if (this.branch) {
                this.runBranch(this, res);
              }
            }
            return res;
          };
          if (this.delay) {
            setTimeout(async () => {
              resolve2(await runnode());
            }, this.delay);
          } else if (this.frame && window?.requestAnimationFrame) {
            requestAnimationFrame(async () => {
              resolve2(await runnode());
            });
          } else {
            resolve2(await runnode());
          }
        } else
          resolve2(void 0);
      });
    };
    this.runParent = async (n, ...args) => {
      if (n.backward && n.parent) {
        if (typeof n.parent === "string") {
          if (n.graph && n.graph?.get(n.parent)) {
            n.parent = n.graph;
            if (n.parent)
              this.nodes.set(n.parent.tag, n.parent);
          } else
            n.parent = this.nodes.get(n.parent);
        }
        if (n.parent instanceof GraphNode2)
          await n.parent.run(...args);
      }
    };
    this.runChildren = async (n, ...args) => {
      if (typeof n.children === "object") {
        for (const key in n.children) {
          if (typeof n.children[key] === "string") {
            if (n.graph && n.graph?.get(n.children[key])) {
              n.children[key] = n.graph.get(n.children[key]);
              if (!n.nodes.get(n.children[key].tag))
                n.nodes.set(n.children[key].tag, n.children[key]);
            }
            if (!n.children[key] && n.nodes.get(n.children[key]))
              n.children[key] = n.nodes.get(n.children[key]);
          } else if (typeof n.children[key] === "undefined" || n.children[key] === true) {
            if (n.graph && n.graph?.get(key)) {
              n.children[key] = n.graph.get(key);
              if (!n.nodes.get(n.children[key].tag))
                n.nodes.set(n.children[key].tag, n.children[key]);
            }
            if (!n.children[key] && n.nodes.get(key))
              n.children[key] = n.nodes.get(key);
          }
          if (n.children[key]?.runOp)
            await n.children[key].run(...args);
        }
      }
    };
    this.runBranch = async (n, output) => {
      if (n.branch) {
        let keys = Object.keys(n.branch);
        await Promise.all(keys.map(async (k) => {
          if (typeof n.branch[k].if === "object")
            n.branch[k].if = stringifyFast2(n.branch[k].if);
          let pass = false;
          if (typeof n.branch[k].if === "function") {
            pass = n.branch[k].if(output);
          } else {
            if (typeof output === "object") {
              if (stringifyFast2(output) === n.branch[k].if)
                pass = true;
            } else if (output === n.branch[k].if)
              pass = true;
          }
          if (pass) {
            if (n.branch[k].then.run) {
              if (Array.isArray(output))
                await n.branch[k].then.run(...output);
              else
                await n.branch[k].then.run(...output);
            } else if (typeof n.branch[k].then === "function") {
              if (Array.isArray(output))
                await n.branch[k].then(...output);
              else
                await n.branch[k].then(output);
            } else if (typeof n.branch[k].then === "string") {
              if (n.graph)
                n.branch[k].then = n.graph.nodes.get(n.branch[k].then);
              else
                n.branch[k].then = n.nodes.get(n.branch[k].then);
              if (n.branch[k].then.run) {
                if (Array.isArray(output))
                  await n.branch[k].then.run(...output);
                else
                  await n.branch[k].then.run(...output);
              }
            }
          }
          return pass;
        }));
      }
    };
    this.runAnimation = (animation2 = this.animation, args = []) => {
      this.animation = animation2;
      if (!animation2)
        this.animation = this.operator;
      if (this.animate && !this.isAnimating && "requestAnimationFrame" in window) {
        this.isAnimating = true;
        let anim = async () => {
          if (this.isAnimating) {
            if (this.DEBUGNODE)
              console.time(this.tag);
            let result = this.animation.call(this, ...args);
            if (result instanceof Promise) {
              result = await result;
            }
            if (this.DEBUGNODE) {
              console.timeEnd(this.tag);
              if (result !== void 0)
                console.log(`${this.tag} result:`, result);
            }
            ;
            if (result !== void 0) {
              if (this.tag)
                this.setState({ [this.tag]: result });
              if (this.backward && this.parent?.run) {
                if (Array.isArray(result))
                  await this.runParent(this, ...result);
                else
                  await this.runParent(this, result);
              }
              if (this.children && this.forward) {
                if (Array.isArray(result))
                  await this.runChildren(this, ...result);
                else
                  await this.runChildren(this, result);
              }
              if (this.branch) {
                this.runBranch(this, result);
              }
              this.setState({ [this.tag]: result });
            }
            requestAnimationFrame(anim);
          }
        };
        requestAnimationFrame(anim);
      }
    };
    this.runLoop = (loop = this.looper, args = [], timeout = this.loop) => {
      this.looper = loop;
      if (!loop)
        this.looper = this.operator;
      if (typeof timeout === "number" && !this.isLooping) {
        this.isLooping = true;
        let looping = async () => {
          if (this.isLooping) {
            if (this.DEBUGNODE)
              console.time(this.tag);
            let result = this.looper.call(this, ...args);
            if (result instanceof Promise) {
              result = await result;
            }
            if (this.DEBUGNODE) {
              console.timeEnd(this.tag);
              if (result !== void 0)
                console.log(`${this.tag} result:`, result);
            }
            ;
            if (result !== void 0) {
              if (this.tag)
                this.setState({ [this.tag]: result });
              if (this.backward && this.parent?.run) {
                if (Array.isArray(result))
                  await this.runParent(this, ...result);
                else
                  await this.runParent(this, result);
              }
              if (this.children && this.forward) {
                if (Array.isArray(result))
                  await this.runChildren(this, ...result);
                else
                  await this.runChildren(this, result);
              }
              if (this.branch) {
                this.runBranch(this, result);
              }
              this.setState({ [this.tag]: result });
            }
            setTimeout(async () => {
              await looping();
            }, timeout);
          }
        };
        looping();
      }
    };
    this.setParent = (parent2) => {
      this.parent = parent2;
      if (this.backward)
        this.runSync = false;
    };
    this.setChildren = (children) => {
      this.children = children;
      if (this.forward)
        this.runSync = false;
    };
    this.add = (n = {}) => {
      if (typeof n === "function")
        n = { operator: n };
      if (n?.node instanceof GraphNode2)
        n = n.node;
      if (!(n instanceof GraphNode2))
        n = new GraphNode2(n.node ?? n, this, this.graph);
      this.nodes.set(n.tag, n);
      if (this.graph) {
        this.graph.nodes.set(n.tag, n);
        this.graph.nNodes = this.graph.nodes.size;
      }
      return n;
    };
    this.remove = (n) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.tag) {
        this.nodes.delete(n.tag);
        if (this.children[n.tag])
          delete this.children[n.tag];
        if (this.graph) {
          this.graph.nodes.delete(n.tag);
          this.graph.nNodes = this.graph.nodes.size;
        }
        this.nodes.forEach((n2) => {
          if (n2.nodes.get(n2.tag)) {
            n2.nodes.delete(n2.tag);
            if (n2.children[n2.tag])
              delete n2.children[n2.tag];
            if (n2.parent?.tag === n2.tag)
              delete n2.parent;
          }
        });
        if (n.ondelete)
          n.ondelete(n);
      }
      if (typeof this._state === "object") {
        this.state.unsubscribeTrigger(this._unique);
      }
    };
    this.append = (n, parentNode = this) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.nodes) {
        parentNode.addChildren(n);
        if (n.forward)
          n.runSync = false;
      }
    };
    this.subscribe = (callback, tag = this.tag) => {
      if (typeof callback === "string") {
        if (this.graph)
          callback = this.graph.get(callback);
        else
          callback = this.nodes.get(callback);
      }
      if (typeof callback === "function") {
        return this.state.subscribeTrigger(tag, callback);
      } else if (callback)
        return this.state.subscribeTrigger(tag, (res) => {
          callback.run(res);
        });
    };
    this.unsubscribe = (sub, tag = this.tag) => {
      return this.state.unsubscribeTrigger(tag, sub);
    };
    this.subscribeState = (callback) => {
      if (!this.reactive) {
        return void 0;
      } else {
        if (typeof callback === "string") {
          if (this.graph)
            callback = this.graph.get(callback);
          else
            callback = this.nodes.get(callback);
        }
        if (typeof callback === "function") {
          return this.state.subscribeTrigger(this._unique, callback);
        } else if (callback)
          return this.state.subscribeTrigger(this._unique, (_state) => {
            callback.run(_state);
          });
      }
    };
    this.addChildren = (children) => {
      if (!this.children)
        this.children = {};
      if (typeof children === "object") {
        Object.assign(this.children, children);
      }
      this.convertChildrenToNodes();
      if (this.forward)
        this.runSync = false;
    };
    this.callParent = (...args) => {
      if (typeof this.parent === "string") {
        if (this.graph && this.graph?.get(this.parent)) {
          this.parent = this.graph;
          if (this.parent)
            this.nodes.set(this.parent.tag, this.parent);
        } else
          this.parent = this.nodes.get(this.parent);
      }
      if (typeof this.parent?.operator === "function")
        return this.parent.runOp(...args);
    };
    this.callChildren = (...args) => {
      let result;
      if (typeof this.children === "object") {
        for (const key in this.children) {
          if (this.children[key]?.runOp)
            this.children[key].runOp(...args);
        }
      }
      return result;
    };
    this.getProps = (n = this, getInitial = true) => {
      let baseprops = { tag: n.tag, operator: n.operator, graph: n.graph, children: n.children, parent: n.parent, forward: n.forward, backward: n.bacward, loop: n.loop, animate: n.animate, frame: n.frame, delay: n.delay, recursive: n.recursive, repeat: n.repeat, branch: n.branch, oncreate: n.oncreate, reactive: n.reactive, DEBUGNODE: n.DEBUGNODE };
      if (!getInitial) {
        let uniqueprops = {};
        for (const key in this._initial) {
          uniqueprops[key] = this[key];
        }
        return Object.assign(baseprops, uniqueprops);
      } else
        return { tag: n.tag, operator: n.operator, graph: n.graph, children: n.children, parent: n.parent, forward: n.forward, backward: n.bacward, loop: n.loop, animate: n.animate, frame: n.frame, delay: n.delay, recursive: n.recursive, repeat: n.repeat, branch: n.branch, oncreate: n.oncreate, reactive: n.reactive, DEBUGNODE: n.DEBUGNODE, ...this._initial };
    };
    this.setProps = (props = {}) => {
      let tmp = Object.assign({}, props);
      if (tmp.children) {
        this.addChildren(props.children);
        delete tmp.children;
      }
      if (tmp.operator) {
        this.setOperator(props.operator);
        delete tmp.operator;
      }
      Object.assign(tmp, props);
      this.runSync = this.isRunSync();
    };
    this.removeTree = (n) => {
      if (n) {
        if (typeof n === "string")
          n = this.nodes.get(n);
      }
      if (n?.nodes) {
        let checked = {};
        const recursivelyRemove = (node) => {
          if (typeof node.children === "object" && !checked[node.tag]) {
            checked[node.tag] = true;
            for (const key in node.children) {
              if (node.children[key].stopNode)
                node.children[key].stopNode();
              if (node.children[key].tag) {
                if (this.nodes.get(node.children[key].tag))
                  this.nodes.delete(node.children[key].tag);
                this.nodes.forEach((n2) => {
                  if (n2.nodes.get(node.children[key].tag))
                    n2.nodes.delete(node.children[key].tag);
                  if (n2.children?.[key] instanceof GraphNode2)
                    delete n2.children[key];
                });
                if (node.children[key].ondelete && !this.graph)
                  node.children[key].ondelete(node.children[key]);
                recursivelyRemove(node.children[key]);
              }
            }
          }
        };
        if (n.stopNode)
          n.stopNode();
        if (n.tag) {
          this.nodes.delete(n.tag);
          if (this.children?.[n.tag])
            delete this.children[n.tag];
          if (this.parent?.tag === n.tag)
            delete this.parent;
          if (this[n.tag] instanceof GraphNode2)
            delete this[n.tag];
          this.nodes.forEach((n2) => {
            if (n2?.tag) {
              if (n2.nodes.get(n2.tag))
                n2.nodes.delete(n2.tag);
              if (n2.children?.[n2.tag] instanceof GraphNode2)
                delete n2.children[n2.tag];
            }
          });
          recursivelyRemove(n);
          if (this.graph)
            this.graph.removeTree(n, checked);
          else if (n.ondelete)
            n.ondelete(n);
        }
      }
    };
    this.checkNodesHaveChildMapped = (n, child, checked = {}) => {
      let tag = n.tag;
      if (!tag)
        tag = n.name;
      if (!checked[tag]) {
        checked[tag] = true;
        if (n.children) {
          if (child.tag in n.children) {
            if (n.children[child.tag] instanceof GraphNode2) {
              if (!n.nodes.get(child.tag))
                n.nodes.set(child.tag, child);
              n.children[child.tag] = child;
              if (!n.firstRun)
                n.firstRun = true;
            }
          }
        }
        if (n.parent instanceof GraphNode2) {
          if (n.nodes.get(child.tag))
            n.parent.nodes.set(child.tag, child);
          if (n.parent.children) {
            this.checkNodesHaveChildMapped(n.parent, child, checked);
          } else if (n.nodes) {
            n.nodes.forEach((n2) => {
              if (!checked[n2.tag]) {
                this.checkNodesHaveChildMapped(n2, child, checked);
              }
            });
          }
        }
        if (n.graph) {
          if (n.parent && n.parent.name !== n.graph.name) {
            n.graph.nodes.forEach((n2) => {
              if (!checked[n2.tag]) {
                this.checkNodesHaveChildMapped(n2, child, checked);
              }
            });
          }
        }
      }
    };
    this.convertChildrenToNodes = (n = this) => {
      if (n?.children) {
        for (const key in n.children) {
          if (!(n.children[key] instanceof GraphNode2)) {
            if (typeof n.children[key] === "object") {
              if (!n.children[key].tag)
                n.children[key].tag = key;
              if (!n.nodes.get(n.children[key].tag)) {
                n.children[key] = new GraphNode2(n.children[key], n, n.graph);
                this.checkNodesHaveChildMapped(n, n.children[key]);
              }
            } else {
              if (typeof n.children[key] === "undefined" || n.children[key] == true) {
                n.children[key] = n.graph.get(key);
                if (!n.children[key])
                  n.children[key] = n.nodes.get(key);
              } else if (typeof n.children[key] === "string") {
                let k = n.children[key];
                n.children[key] = n.graph.get(k);
                if (!n.children[key])
                  n.children[key] = n.nodes.get(key);
              }
              if (n.children[key] instanceof GraphNode2) {
                n.nodes.set(n.children[key].tag, n.children[key]);
                this.checkNodesHaveChildMapped(n, n.children[key]);
                if (!(n.children[key].tag in n))
                  n[n.children[key].tag] = n.children[key];
              }
            }
          }
        }
      }
      return n.children;
    };
    this.stopLooping = (n = this) => {
      n.isLooping = false;
    };
    this.stopAnimating = (n = this) => {
      n.isAnimating = false;
    };
    this.stopNode = (n = this) => {
      n.stopAnimating(n);
      n.stopLooping(n);
    };
    this.subscribeNode = (n) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n.tag)
        this.nodes.set(n.tag, n);
      if (n)
        return this.state.subscribeTrigger(this.tag, (res) => {
          if (Array.isArray(res))
            n.run(...res);
          else
            n.run(res);
        });
    };
    this.print = (n = this, printChildren = true, nodesPrinted = []) => {
      let dummyNode = new GraphNode2();
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n instanceof GraphNode2) {
        nodesPrinted.push(n.tag);
        let jsonToPrint = { tag: n.tag, operator: n.operator.toString() };
        if (n.parent)
          jsonToPrint.parent = n.parent.tag;
        if (typeof n.children === "object") {
          for (const key in n.children) {
            if (typeof n.children[key] === "string")
              return n.children[key];
            if (nodesPrinted.includes(n.children[key].tag))
              return n.children[key].tag;
            else if (!printChildren) {
              return n.children[key].tag;
            } else
              return n.children[key].print(n.children[key], printChildren, nodesPrinted);
          }
        }
        for (const prop in n) {
          if (prop === "parent" || prop === "children")
            continue;
          if (typeof dummyNode[prop] === "undefined") {
            if (typeof n[prop] === "function") {
              jsonToPrint[prop] = n[prop].toString();
            } else if (typeof n[prop] === "object") {
              jsonToPrint[prop] = JSON.stringifyWithCircularRefs(n[prop]);
            } else {
              jsonToPrint[prop] = n[prop];
            }
          }
        }
        return JSON.stringify(jsonToPrint);
      }
    };
    this.reconstruct = (json) => {
      let parsed = reconstructObject2(json);
      if (parsed)
        return this.add(parsed);
    };
    this.setState = (data) => {
      this.state.setState(data);
    };
    this.DEBUGNODES = (debugging = true) => {
      this.DEBUGNODE = debugging;
      this.nodes.forEach((n) => {
        if (debugging)
          n.DEBUGNODE = true;
        else
          n.DEBUGNODE = false;
      });
    };
    if (typeof properties === "function") {
      properties = { operator: properties };
    }
    if (typeof properties === "object") {
      if (properties instanceof GraphNode2 && properties._initial)
        Object.assign(properties, properties._initial);
      if (properties instanceof Graph2) {
        let source = properties;
        properties = { source, operator: (input) => {
          if (typeof input === "object") {
            let result = {};
            for (const key in input) {
              if (typeof source[key] === "function") {
                if (Array.isArray(input[key]))
                  result[key] = source[key](...input[key]);
                else
                  result[key] = source[key](input[key]);
              } else {
                source[key] = input[key];
                result[key] = source[key];
              }
            }
            return result;
          }
          return source;
        } };
        if (source.operator)
          properties.operator = source.operator;
        if (source.children)
          properties.children = source.children;
        if (source.forward)
          properties.forward = source.forward;
        if (source.backward)
          properties.backward = source.backward;
        if (source.repeat)
          properties.repeat = source.repeat;
        if (source.recursive)
          properties.recursive = source.recursive;
        if (source.loop)
          properties.loop = source.loop;
        if (source.animate)
          properties.animate = source.animate;
        if (source.looper)
          properties.looper = source.looper;
        if (source.animation)
          properties.animation = source.animation;
        if (source.delay)
          properties.delay = source.delay;
        if (source.oncreate)
          properties.oncreate = source.oncreate;
        if (source.node) {
          if (source.node._initial)
            Object.assign(properties, source.node._initial);
        }
        if (source._initial)
          Object.assign(properties, source._initial);
        if (source.tag)
          properties.tag = source.tag;
        this.nodes = source.nodes;
        source.node = this;
        if (graph) {
          source.nodes.forEach((n) => {
            if (!graph.nodes.get(n.tag)) {
              graph.nodes.set(n.tag, n);
              graph.nNodes++;
            }
          });
        }
      }
      if (typeof parent === "string") {
        if (graph)
          parent = graph.nodes.get(parent);
        else
          parent = void 0;
      }
      if (properties.tag && (graph || parent)) {
        let hasnode;
        if (graph?.nodes) {
          hasnode = graph.nodes.get(properties.tag);
        }
        if (!hasnode && parent?.nodes) {
          hasnode = parent.nodes.get(properties.tag);
        }
        if (hasnode) {
          if (this.reactive) {
            this.addLocalState(hasnode);
          }
          if (!this.source)
            this.source = hasnode;
          let props = hasnode.getProps();
          delete props.graph;
          delete props.parent;
          for (let k in props) {
            const desc = Object.getOwnPropertyDescriptor(properties, k);
            if (desc && desc.get && !desc.set)
              properties = Object.assign({}, properties);
            else
              properties[k] = props[k];
          }
        }
      }
      if (properties?.operator) {
        properties.operator = this.setOperator(properties.operator);
      }
      if (!properties.tag && graph) {
        properties.tag = `node${graph.nNodes}`;
      } else if (!properties.tag) {
        properties.tag = `node${Math.floor(Math.random() * 1e10)}`;
      }
      let keys = Object.getOwnPropertyNames(this);
      for (const key in properties) {
        if (!keys.includes(key))
          this._initial[key] = properties[key];
      }
      if (properties.children)
        this._initial.children = Object.assign({}, properties.children);
      Object.assign(this, properties);
      if (!this.tag) {
        if (graph) {
          this.tag = `node${graph.nNodes}`;
        } else {
          this.tag = `node${Math.floor(Math.random() * 1e10)}`;
        }
      }
      if (graph) {
        this.graph = graph;
        if (graph.nodes.get(this.tag)) {
          this.tag = `${this.tag}${graph.nNodes + 1}`;
        }
        graph.nodes.set(this.tag, this);
        graph.nNodes++;
        this.state = graph.state;
      }
      if (this.reactive) {
        addLocalState2(properties);
        if (typeof this.reactive === "function") {
          this.state.subscribeTrigger(this._unique, this.reactive);
        }
      }
      if (typeof parent === "object") {
        this.parent = parent;
        if (parent instanceof GraphNode2 || parent instanceof Graph2)
          parent.nodes.set(this.tag, this);
      }
      if (typeof properties.tree === "object") {
        for (const key in properties.tree) {
          if (typeof properties.tree[key] === "object") {
            if ((!properties.tree[key]).tag) {
              properties.tree[key].tag = key;
            }
          }
          let node = new GraphNode2(properties.tree[key], this, graph);
          this.nodes.set(node.tag, node);
        }
      }
      if (this.children)
        this.convertChildrenToNodes(this);
      if (this.parent instanceof GraphNode2 || this.parent instanceof Graph2)
        this.checkNodesHaveChildMapped(this.parent, this);
      if (typeof this.oncreate === "function")
        this.oncreate(this);
      if (!this.firstRun)
        this.firstRun = true;
      if (this.animation && !this.animate)
        this.animate = true;
    } else
      return properties;
  }
};
var Graph2 = class {
  constructor(tree, tag, props) {
    this.nNodes = 0;
    this.nodes = /* @__PURE__ */ new Map();
    this.state = new EventHandler2();
    this._unique = `${Math.random()}`;
    this.tree = {};
    this.addLocalState = addLocalState2;
    this.add = (n = {}) => {
      if (n?.node instanceof GraphNode2)
        n = n.node;
      let props2 = n;
      if (!(n instanceof GraphNode2))
        n = new GraphNode2(props2?.node ?? props2, this, this);
      else {
        this.nNodes = this.nodes.size;
        if (n.tag) {
          this.tree[n.tag] = props2;
          this.nodes.set(n.tag, n);
        }
      }
      return n;
    };
    this.setTree = (tree2 = this.tree) => {
      if (!tree2)
        return;
      for (const node in tree2) {
        const n = this.nodes.get(node);
        if (!n) {
          if (typeof tree2[node] === "function") {
            this.add({ tag: node, operator: tree2[node] });
          } else if (typeof tree2[node] === "object" && !Array.isArray(tree2[node])) {
            if (!tree2[node].tag)
              tree2[node].tag = node;
            let newNode = this.add(tree2[node]);
            if (tree2[node].aliases) {
              tree2[node].aliases.forEach((a) => {
                this.nodes.set(a, newNode);
              });
            }
          } else {
            this.add({ tag: node, operator: (...args) => {
              return tree2[node];
            } });
          }
        } else {
          if (typeof tree2[node] === "function") {
            n.setOperator(tree2[node]);
          } else if (typeof tree2[node] === "object") {
            if (tree2[node] instanceof GraphNode2) {
              this.add(tree2[node]);
            } else if (tree2[node] instanceof Graph2) {
              let source = tree2[node];
              let properties = {};
              if (source.operator)
                properties.operator = source.operator;
              if (source.children)
                properties.children = source.children;
              if (source.forward)
                properties.forward = source.forward;
              if (source.backward)
                properties.backward = source.backward;
              if (source.repeat)
                properties.repeat = source.repeat;
              if (source.recursive)
                properties.recursive = source.recursive;
              if (source.loop)
                properties.loop = source.loop;
              if (source.animate)
                properties.animate = source.animate;
              if (source.looper)
                properties.looper = source.looper;
              if (source.animation)
                properties.animation = source.animation;
              if (source.delay)
                properties.delay = source.delay;
              if (source.tag)
                properties.tag = source.tag;
              if (source.oncreate)
                properties.oncreate = source.oncreate;
              if (source.node?._initial)
                Object.assign(properties, source.node._initial);
              properties.nodes = source.nodes;
              properties.source = source;
              n.setProps(properties);
            } else {
              n.setProps(tree2[node]);
            }
          }
        }
      }
      this.nodes.forEach((node) => {
        if (typeof node.children === "object") {
          for (const key in node.children) {
            if (typeof node.children[key] === "string") {
              if (this.nodes.get(node.children[key])) {
                node.children[key] = this.nodes.get(node.children[key]);
              }
            } else if (node.children[key] === true || typeof node.children[key] === "undefined") {
              if (this.nodes.get(key)) {
                node.children[key] = this.nodes.get(key);
              }
            }
            if (node.children[key] instanceof GraphNode2) {
              node.checkNodesHaveChildMapped(node, node.children[key]);
            }
          }
        }
        if (typeof node.parent === "string") {
          if (this.nodes.get(node.parent)) {
            node.parent = this.nodes.get(node.parent);
            node.nodes.set(node.parent.tag, node.parent);
          }
        }
      });
    };
    this.get = (tag2) => {
      return this.nodes.get(tag2);
    };
    this.set = (n) => {
      return this.nodes.set(n.tag, n);
    };
    this.run = (n, ...args) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.run)
        return n.run(...args);
      else
        return void 0;
    };
    this.runAsync = (n, ...args) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.run)
        return new Promise((res, rej) => {
          res(n.run(...args));
        });
      else
        return new Promise((res, rej) => {
          res(void 0);
        });
    };
    this.removeTree = (n, checked) => {
      if (n) {
        if (typeof n === "string")
          n = this.nodes.get(n);
      }
      if (n?.nodes) {
        let checked2 = {};
        const recursivelyRemove = (node) => {
          if (typeof node.children === "object" && !checked2[node.tag]) {
            checked2[node.tag] = true;
            for (const key in node.children) {
              if (node.children[key]?.stopNode)
                node.children[key].stopNode();
              if (node.children[key]?.tag) {
                if (this.nodes.get(node.children[key].tag))
                  this.nodes.delete(node.children[key].tag);
                this.nodes.forEach((n2) => {
                  if (n2.nodes.get(node.children[key].tag))
                    n2.nodes.delete(node.children[key].tag);
                  if (n2.children?.[key] instanceof GraphNode2)
                    delete n2.children[key];
                });
                if (node.children[key].ondelete)
                  node.children[key].ondelete(node.children[key]);
                recursivelyRemove(node.children[key]);
              }
            }
          }
        };
        if (n.stopNode)
          n.stopNode();
        if (n.tag) {
          this.nodes.delete(n.tag);
          if (this.parent?.tag === n.tag)
            delete this.parent;
          if (this[n.tag] instanceof GraphNode2)
            delete this[n.tag];
          this.nodes.forEach((n2) => {
            if (n2?.tag) {
              if (n2.nodes.get(n2.tag))
                n2.nodes.delete(n2.tag);
              if (n2.children?.[n2.tag] instanceof GraphNode2)
                delete n2.children[n2.tag];
            }
          });
          recursivelyRemove(n);
          if (n.ondelete)
            n.ondelete(n);
        }
      }
    };
    this.remove = (n) => {
      if (typeof n === "string")
        n = this.nodes.get(n);
      if (n?.nodes) {
        if (n.stopNode)
          n.stopNode();
        if (n?.tag) {
          if (this.nodes.get(n.tag)) {
            this.nodes.delete(n.tag);
            this.nodes.forEach((n2) => {
              if (n2.nodes.get(n2.tag))
                n2.nodes.delete(n2.tag);
            });
          }
        }
        if (n.ondelete)
          n.ondelete(n);
      }
      return n;
    };
    this.append = (n, parentNode) => {
      parentNode.addChildren(n);
    };
    this.callParent = async (n, ...args) => {
      if (n?.parent) {
        return await n.callParent(...args);
      }
    };
    this.callChildren = async (n, ...args) => {
      if (n?.children) {
        return await n.callChildren(...args);
      }
    };
    this.subscribe = (n, callback) => {
      if (!callback)
        return;
      if (n?.subscribe && typeof callback === "function") {
        return n.subscribe(callback);
      } else if (callback instanceof GraphNode2 || typeof callback === "string")
        return this.subscribeNode(n, callback);
      else if (typeof n == "string") {
        return this.state.subscribeTrigger(n, callback);
      }
    };
    this.unsubscribe = (tag2, sub) => {
      return this.state.unsubscribeTrigger(tag2, sub);
    };
    this.subscribeState = (callback) => {
      if (!this.reactive) {
        return void 0;
      } else {
        if (typeof callback === "string") {
          if (this.graph)
            callback = this.graph.get(callback);
          else
            callback = this.nodes.get(callback);
        }
        if (typeof callback === "function") {
          return this.state.subscribeTrigger(this._unique, callback);
        } else if (callback)
          return this.state.subscribeTrigger(this._unique, (_state) => {
            callback.run(_state);
          });
      }
    };
    this.subscribeNode = (inputNode, outputNode) => {
      let tag2;
      if (inputNode?.tag)
        tag2 = inputNode.tag;
      else if (typeof inputNode === "string")
        tag2 = inputNode;
      if (typeof outputNode === "string")
        outputNode = this.nodes.get(outputNode);
      if (inputNode && outputNode) {
        let sub = this.state.subscribeTrigger(tag2, (res) => {
          if (Array.isArray(res))
            outputNode.run(...res);
          else
            outputNode.run(res);
        });
        return sub;
      }
    };
    this.stopNode = (n) => {
      if (typeof n === "string") {
        n = this.nodes.get(n);
      }
      if (n?.stopNode) {
        n.stopNode();
      }
    };
    this.print = (n, printChildren = true) => {
      if (n?.print)
        return n.print(n, printChildren);
      else {
        let printed = `{`;
        this.nodes.forEach((n2) => {
          printed += `
"${n2.tag}:${n2.print(n2, printChildren)}"`;
        });
        return printed;
      }
    };
    this.reconstruct = (json) => {
      let parsed = reconstructObject2(json);
      if (parsed)
        return this.add(parsed);
    };
    this.create = (operator, parentNode, props2) => {
      return createNode2(operator, parentNode, props2, this);
    };
    this.setState = (data) => {
      this.state.setState(data);
    };
    this.DEBUGNODES = (debugging = true) => {
      this.nodes.forEach((n) => {
        if (debugging)
          n.DEBUGNODE = true;
        else
          n.DEBUGNODE = false;
      });
    };
    this.tag = tag ? tag : `graph${Math.floor(Math.random() * 1e11)}`;
    if (props) {
      console.log(props, props.constructor.name);
      if (props.reactive) {
        this.addLocalState(props);
      } else
        Object.assign(this, props);
      this._initial = props;
    }
    if (tree || Object.keys(this.tree).length > 0)
      this.setTree(tree);
  }
};
function reconstructObject2(json = "{}") {
  try {
    let parsed = typeof json === "string" ? JSON.parse(json) : json;
    const parseObj = (obj) => {
      for (const prop in obj) {
        if (typeof obj[prop] === "string") {
          let funcParsed = parseFunctionFromText3(obj[prop]);
          if (typeof funcParsed === "function") {
            obj[prop] = funcParsed;
          }
        } else if (typeof obj[prop] === "object") {
          parseObj(obj[prop]);
        }
      }
      return obj;
    };
    return parseObj(parsed);
  } catch (err) {
    console.error(err);
    return void 0;
  }
}
var stringifyWithCircularRefs2 = function() {
  const refs = /* @__PURE__ */ new Map();
  const parents = [];
  const path2 = ["this"];
  function clear() {
    refs.clear();
    parents.length = 0;
    path2.length = 1;
  }
  function updateParents(key, value) {
    var idx = parents.length - 1;
    var prev = parents[idx];
    if (typeof prev === "object") {
      if (prev[key] === value || idx === 0) {
        path2.push(key);
        parents.push(value.pushed);
      } else {
        while (idx-- >= 0) {
          prev = parents[idx];
          if (typeof prev === "object") {
            if (prev[key] === value) {
              idx += 2;
              parents.length = idx;
              path2.length = idx;
              --idx;
              parents[idx] = value;
              path2[idx] = key;
              break;
            }
          }
          idx--;
        }
      }
    }
  }
  function checkCircular(key, value) {
    if (value != null) {
      if (typeof value === "object") {
        if (key) {
          updateParents(key, value);
        }
        let other = refs.get(value);
        if (other) {
          return "[Circular Reference]" + other;
        } else {
          refs.set(value, path2.join("."));
        }
      }
    }
    return value;
  }
  return function stringifyWithCircularRefs22(obj, space) {
    try {
      parents.push(obj);
      return JSON.stringify(obj, checkCircular, space);
    } finally {
      clear();
    }
  };
}();
if (JSON.stringifyWithCircularRefs === void 0) {
  JSON.stringifyWithCircularRefs = stringifyWithCircularRefs2;
}
var stringifyFast2 = function() {
  const refs = /* @__PURE__ */ new Map();
  const parents = [];
  const path2 = ["this"];
  function clear() {
    refs.clear();
    parents.length = 0;
    path2.length = 1;
  }
  function updateParents(key, value) {
    var idx = parents.length - 1;
    if (parents[idx]) {
      var prev = parents[idx];
      if (typeof prev === "object") {
        if (prev[key] === value || idx === 0) {
          path2.push(key);
          parents.push(value.pushed);
        } else {
          while (idx-- >= 0) {
            prev = parents[idx];
            if (typeof prev === "object") {
              if (prev[key] === value) {
                idx += 2;
                parents.length = idx;
                path2.length = idx;
                --idx;
                parents[idx] = value;
                path2[idx] = key;
                break;
              }
            }
            idx++;
          }
        }
      }
    }
  }
  function checkValues(key, value) {
    let val;
    if (value != null) {
      if (typeof value === "object") {
        let c = value.constructor.name;
        if (key && c === "Object") {
          updateParents(key, value);
        }
        let other = refs.get(value);
        if (other) {
          return "[Circular Reference]" + other;
        } else {
          refs.set(value, path2.join("."));
        }
        if (c === "Array") {
          if (value.length > 20) {
            val = value.slice(value.length - 20);
          } else
            val = value;
        } else if (c.includes("Set")) {
          val = Array.from(value);
        } else if (c !== "Object" && c !== "Number" && c !== "String" && c !== "Boolean") {
          val = "instanceof_" + c;
        } else if (c === "Object") {
          let obj = {};
          for (const prop in value) {
            if (value[prop] == null) {
              obj[prop] = value[prop];
            } else if (Array.isArray(value[prop])) {
              if (value[prop].length > 20)
                obj[prop] = value[prop].slice(value[prop].length - 20);
              else
                obj[prop] = value[prop];
            } else if (value[prop].constructor.name === "Object") {
              obj[prop] = {};
              for (const p in value[prop]) {
                if (Array.isArray(value[prop][p])) {
                  if (value[prop][p].length > 20)
                    obj[prop][p] = value[prop][p].slice(value[prop][p].length - 20);
                  else
                    obj[prop][p] = value[prop][p];
                } else {
                  if (value[prop][p] != null) {
                    let con = value[prop][p].constructor.name;
                    if (con.includes("Set")) {
                      obj[prop][p] = Array.from(value[prop][p]);
                    } else if (con !== "Number" && con !== "String" && con !== "Boolean") {
                      obj[prop][p] = "instanceof_" + con;
                    } else {
                      obj[prop][p] = value[prop][p];
                    }
                  } else {
                    obj[prop][p] = value[prop][p];
                  }
                }
              }
            } else {
              let con = value[prop].constructor.name;
              if (con.includes("Set")) {
                obj[prop] = Array.from(value[prop]);
              } else if (con !== "Number" && con !== "String" && con !== "Boolean") {
                obj[prop] = "instanceof_" + con;
              } else {
                obj[prop] = value[prop];
              }
            }
          }
          val = obj;
        } else {
          val = value;
        }
      } else {
        val = value;
      }
    }
    return val;
  }
  return function stringifyFast22(obj, space) {
    parents.push(obj);
    let res = JSON.stringify(obj, checkValues, space);
    clear();
    return res;
  };
}();
if (JSON.stringifyFast === void 0) {
  JSON.stringifyFast = stringifyFast2;
}
function createNode2(operator, parentNode, props, graph) {
  if (typeof props === "object") {
    props.operator = operator;
    return new GraphNode2(props, parentNode, graph);
  }
  return new GraphNode2({ operator }, parentNode, graph);
}
var Service2 = class extends Graph2 {
  constructor(options2 = {}) {
    super(void 0, options2.name ? options2.name : `service${Math.floor(Math.random() * 1e14)}`, options2.props);
    this.routes = {};
    this.loadDefaultRoutes = false;
    this.keepState = true;
    this.firstLoad = true;
    this.customRoutes = {};
    this.customChildren = {};
    this.init = (options22) => {
      if (options22)
        options22 = Object.assign({}, options22);
      else
        options22 = {};
      if (options22.customRoutes)
        Object.assign(options22.customRoutes, this.customRoutes);
      else
        options22.customRoutes = this.customRoutes;
      if (options22.customChildren)
        Object.assign(options22.customChildren, this.customChildren);
      else
        options22.customChildren = this.customChildren;
      if (Array.isArray(options22.routes)) {
        options22.routes.forEach((r) => {
          this.load(r, options22.includeClassName, options22.routeFormat, options22.customRoutes, options22.customChildren, options22.sharedState);
        });
      } else if (options22.routes || (Object.keys(this.routes).length > 0 || this.loadDefaultRoutes) && this.firstLoad)
        this.load(options22.routes, options22.includeClassName, options22.routeFormat, options22.customRoutes, options22.customChildren, options22.sharedState);
    };
    this.load = (routes, includeClassName = true, routeFormat = ".", customRoutes = this.customRoutes, customChildren = this.customChildren, sharedState = true) => {
      if (!routes && !this.loadDefaultRoutes && (Object.keys(this.routes).length > 0 || this.firstLoad))
        return;
      if (this.firstLoad)
        this.firstLoad = false;
      if (customRoutes)
        customRoutes = Object.assign(this.customRoutes, customRoutes);
      else
        customRoutes = this.customRoutes;
      let service;
      let allRoutes = {};
      if (routes) {
        if (!(routes instanceof Graph2) && routes?.name && !routes.setTree) {
          if (routes.module) {
            let mod = routes;
            routes = {};
            Object.getOwnPropertyNames(routes.module).forEach((prop) => {
              if (includeClassName)
                routes[mod.name + routeFormat + prop] = routes.module[prop];
              else
                routes[prop] = routes.module[prop];
            });
          } else if (typeof routes === "function") {
            service = new routes({ loadDefaultRoutes: this.loadDefaultRoutes });
            service.load();
            if (sharedState)
              service.state = this.state;
            routes = service.routes;
            if (service.customRoutes && !this.customRoutes)
              this.customRoutes = service.customRoutes;
            else if (service.customRoutes && this.customRoutes)
              Object.assign(this.customRoutes, service.customRoutes);
            if (service.customChildren && !this.customChildren)
              this.customChildren = service.customChildren;
            else if (service.customChildren && this.customChildren)
              Object.assign(this.customChildren, service.customChildren);
          }
        } else if (routes instanceof Graph2 || routes.source instanceof Graph2 || routes.setTree) {
          service = routes;
          routes = {};
          if (sharedState)
            service.state = this.state;
          if (includeClassName) {
            let name2 = service.name;
            if (!name2) {
              name2 = service.tag;
              service.name = name2;
            }
            if (!name2) {
              name2 = `graph${Math.floor(Math.random() * 1e15)}`;
              service.name = name2;
              service.tag = name2;
            }
          }
          if (service.customRoutes && !this.customRoutes)
            this.customRoutes = service.customRoutes;
          else if (service.customRoutes && this.customRoutes)
            Object.assign(this.customRoutes, service.customRoutes);
          if (service.customChildren && !this.customChildren)
            this.customChildren = service.customChildren;
          else if (service.customChildren && this.customChildren)
            Object.assign(this.customChildren, service.customChildren);
          service.nodes.forEach((node) => {
            routes[node.tag] = node;
            let checked = {};
            let checkChildGraphNodes = (nd, par) => {
              if (!checked[nd.tag] || par && includeClassName && !checked[par?.tag + routeFormat + nd.tag]) {
                if (!par)
                  checked[nd.tag] = true;
                else
                  checked[par.tag + routeFormat + nd.tag] = true;
                if (nd instanceof Graph2 || nd.source instanceof Graph2 || nd.setTree) {
                  if (sharedState)
                    nd.state = this.state;
                  if (includeClassName) {
                    let nm = nd.name;
                    if (!nm) {
                      nm = nd.tag;
                      nd.name = nm;
                    }
                    if (!nm) {
                      nm = `graph${Math.floor(Math.random() * 1e15)}`;
                      nd.name = nm;
                      nd.tag = nm;
                    }
                  }
                  nd.nodes.forEach((n) => {
                    if (includeClassName && !routes[nd.tag + routeFormat + n.tag])
                      routes[nd.tag + routeFormat + n.tag] = n;
                    else if (!routes[n.tag])
                      routes[n.tag] = n;
                    checkChildGraphNodes(n, nd);
                  });
                }
              }
            };
            checkChildGraphNodes(node);
          });
        } else if (typeof routes === "object") {
          let name2 = routes.constructor.name;
          if (name2 === "Object") {
            name2 = Object.prototype.toString.call(routes);
            if (name2)
              name2 = name2.split(" ")[1];
            if (name2)
              name2 = name2.split("]")[0];
          }
          if (name2 && name2 !== "Object") {
            let module = routes;
            routes = {};
            Object.getOwnPropertyNames(module).forEach((route) => {
              if (includeClassName)
                routes[name2 + routeFormat + route] = module[route];
              else
                routes[route] = module[route];
            });
          }
        }
        if ((service instanceof Graph2 || service?.setTree) && service.name && includeClassName) {
          routes = Object.assign({}, routes);
          for (const prop in routes) {
            let route = routes[prop];
            delete routes[prop];
            routes[service.name + routeFormat + prop] = route;
          }
        }
      }
      if (this.loadDefaultRoutes) {
        let rts2 = Object.assign({}, this.defaultRoutes);
        if (routes) {
          Object.assign(rts2, this.routes);
          routes = Object.assign(rts2, routes);
        } else
          routes = Object.assign(rts2, this.routes);
        this.loadDefaultRoutes = false;
      }
      if (!routes)
        routes = this.routes;
      let incr = 0;
      for (const tag in routes) {
        incr++;
        let childrenIter = (route, routeKey) => {
          if (typeof route === "object") {
            if (!route.tag)
              route.tag = routeKey;
            if (typeof route?.children === "object") {
              nested:
                for (const key in route.children) {
                  incr++;
                  if (typeof route.children[key] === "object") {
                    let rt = route.children[key];
                    if (rt.tag && allRoutes[rt.tag])
                      continue;
                    if (customChildren) {
                      for (const k2 in customChildren) {
                        rt = customChildren[k2](rt, key, route, routes, allRoutes);
                        if (!rt)
                          continue nested;
                      }
                    }
                    if (rt.id && !rt.tag) {
                      rt.tag = rt.id;
                    }
                    let k;
                    if (rt.tag) {
                      if (allRoutes[rt.tag]) {
                        let randkey = `${rt.tag}${incr}`;
                        allRoutes[randkey] = rt;
                        rt.tag = randkey;
                        childrenIter(allRoutes[randkey], key);
                        k = randkey;
                      } else {
                        allRoutes[rt.tag] = rt;
                        childrenIter(allRoutes[rt.tag], key);
                        k = rt.tag;
                      }
                    } else {
                      if (allRoutes[key]) {
                        let randkey = `${key}${incr}`;
                        allRoutes[randkey] = rt;
                        rt.tag = randkey;
                        childrenIter(allRoutes[randkey], key);
                        k = randkey;
                      } else {
                        allRoutes[key] = rt;
                        childrenIter(allRoutes[key], key);
                        k = key;
                      }
                    }
                    if (service?.name && includeClassName) {
                      allRoutes[service.name + routeFormat + k] = rt;
                      delete allRoutes[k];
                    } else
                      allRoutes[k] = rt;
                  }
                }
            }
          }
        };
        allRoutes[tag] = routes[tag];
        childrenIter(routes[tag], tag);
      }
      top:
        for (const route in allRoutes) {
          if (typeof allRoutes[route] === "object") {
            let r = allRoutes[route];
            if (typeof r === "object") {
              if (customRoutes) {
                for (const key in customRoutes) {
                  r = customRoutes[key](r, route, allRoutes);
                  if (!r)
                    continue top;
                }
              }
              if (r.get) {
                if (typeof r.get == "object") {
                }
              }
              if (r.post) {
              }
              if (r.delete) {
              }
              if (r.put) {
              }
              if (r.head) {
              }
              if (r.patch) {
              }
              if (r.options) {
              }
              if (r.connect) {
              }
              if (r.trace) {
              }
              if (r.post && !r.operator) {
                allRoutes[route].operator = r.post;
              } else if (!r.operator && typeof r.get == "function") {
                allRoutes[route].operator = r.get;
              }
            }
          }
        }
      for (const route in routes) {
        if (typeof routes[route] === "object") {
          if (this.routes[route]) {
            if (typeof this.routes[route] === "object")
              Object.assign(this.routes[route], routes[route]);
            else
              this.routes[route] = routes[route];
          } else
            this.routes[route] = routes[route];
        } else if (this.routes[route]) {
          if (typeof this.routes[route] === "object")
            Object.assign(this.routes[route], routes[route]);
          else
            this.routes[route] = routes[route];
        } else
          this.routes[route] = routes[route];
      }
      if (service) {
        for (const key in this.routes) {
          if (this.routes[key] instanceof GraphNode2 || this.routes[key].constructor.name.includes("GraphNode")) {
            this.nodes.set(key, this.routes[key]);
            this.nNodes = this.nodes.size;
          }
        }
      } else
        this.setTree(this.routes);
      for (const prop in routes) {
        if (routes[prop]?.aliases) {
          let aliases = routes[prop].aliases;
          aliases.forEach((a) => {
            if (service?.name && includeClassName)
              this.routes[service.name + routeFormat + a] = routes[prop];
            else
              this.routes[a] = routes[prop];
          });
        }
      }
      return this.routes;
    };
    this.unload = (routes = this.routes) => {
      if (!routes)
        return;
      let service;
      if (!(routes instanceof Service2) && typeof routes === "function") {
        service = new Service2();
        routes = service.routes;
      } else if (routes instanceof Service2) {
        routes = routes.routes;
      }
      for (const r in routes) {
        delete this.routes[r];
        if (this.nodes.get(r))
          this.remove(r);
      }
      return this.routes;
    };
    this.handleMethod = (route, method, args) => {
      let m = method.toLowerCase();
      let src = this.nodes.get(route);
      if (!src) {
        src = this.routes[route];
        if (!src)
          src = this.tree[route];
      }
      if (src?.[m]) {
        if (!(src[m] instanceof Function)) {
          if (args)
            src[m] = args;
          return src[m];
        } else
          return src[m](args);
      } else
        return this.handleServiceMessage({ route, args, method });
    };
    this.transmit = (...args) => {
      if (typeof args[0] === "object") {
        if (args[0].method) {
          return this.handleMethod(args[0].route, args[0].method, args[0].args);
        } else if (args[0].route) {
          return this.handleServiceMessage(args[0]);
        } else if (args[0].node) {
          return this.handleGraphNodeCall(args[0].node, args[0].args);
        } else if (this.keepState) {
          if (args[0].route)
            this.setState({ [args[0].route]: args[0].args });
          if (args[0].node)
            this.setState({ [args[0].node]: args[0].args });
        }
        return args;
      } else
        return args;
    };
    this.receive = (...args) => {
      if (args[0]) {
        if (typeof args[0] === "string") {
          let substr = args[0].substring(0, 8);
          if (substr.includes("{") || substr.includes("[")) {
            if (substr.includes("\\"))
              args[0] = args[0].replace(/\\/g, "");
            if (args[0][0] === '"') {
              args[0] = args[0].substring(1, args[0].length - 1);
            }
            ;
            args[0] = JSON.parse(args[0]);
          }
        }
      }
      if (typeof args[0] === "object") {
        if (args[0].method) {
          return this.handleMethod(args[0].route, args[0].method, args[0].args);
        } else if (args[0].route) {
          return this.handleServiceMessage(args[0]);
        } else if (args[0].node) {
          return this.handleGraphNodeCall(args[0].node, args[0].args);
        } else if (this.keepState) {
          if (args[0].route)
            this.setState({ [args[0].route]: args[0].args });
          if (args[0].node)
            this.setState({ [args[0].node]: args[0].args });
        }
        return args;
      } else
        return args;
    };
    this.pipe = (source, destination, endpoint, method, callback) => {
      if (source instanceof GraphNode2) {
        if (callback)
          return source.subscribe((res) => {
            let mod = callback(res);
            if (mod !== void 0)
              this.transmit({ route: destination, args: mod, method });
            else
              this.transmit({ route: destination, args: res, method }, endpoint);
          });
        else
          return this.subscribe(source, (res) => {
            this.transmit({ route: destination, args: res, method }, endpoint);
          });
      } else if (typeof source === "string")
        return this.subscribe(source, (res) => {
          this.transmit({ route: destination, args: res, method }, endpoint);
        });
    };
    this.pipeOnce = (source, destination, endpoint, method, callback) => {
      if (source instanceof GraphNode2) {
        if (callback)
          return source.state.subscribeTriggerOnce(source.tag, (res) => {
            let mod = callback(res);
            if (mod !== void 0)
              this.transmit({ route: destination, args: mod, method });
            else
              this.transmit({ route: destination, args: res, method }, endpoint);
          });
        else
          return this.state.subscribeTriggerOnce(source.tag, (res) => {
            this.transmit({ route: destination, args: res, method }, endpoint);
          });
      } else if (typeof source === "string")
        return this.state.subscribeTriggerOnce(source, (res) => {
          this.transmit({ route: destination, args: res, method }, endpoint);
        });
    };
    this.terminate = (...args) => {
      this.nodes.forEach((n) => {
        n.stopNode();
      });
    };
    this.recursivelyAssign = (target, obj) => {
      for (const key in obj) {
        if (typeof obj[key] === "object" && !Array.isArray(obj[key])) {
          if (typeof target[key] === "object" && !Array.isArray(target[key]))
            this.recursivelyAssign(target[key], obj[key]);
          else
            target[key] = this.recursivelyAssign({}, obj[key]);
        } else
          target[key] = obj[key];
      }
      return target;
    };
    this.defaultRoutes = { "/": { get: () => {
      return this.print();
    }, aliases: [""] }, ping: () => {
      console.log("ping");
      return "pong";
    }, echo: (...args) => {
      this.transmit(...args);
      return args;
    }, assign: (source) => {
      if (typeof source === "object") {
        Object.assign(this, source);
        return true;
      }
      return false;
    }, recursivelyAssign: (source) => {
      if (typeof source === "object") {
        this.recursivelyAssign(this, source);
        return true;
      }
      return false;
    }, log: { post: (...args) => {
      console.log("Log: ", ...args);
    }, aliases: ["info"] }, error: (message) => {
      let er = new Error(message);
      console.error(message);
      return er;
    }, state: (key) => {
      if (key) {
        return this.state.data[key];
      } else
        return this.state.data;
    }, printState: (key) => {
      if (key) {
        return stringifyWithCircularRefs2(this.state.data[key]);
      } else
        return stringifyWithCircularRefs2(this.state.data);
    }, spliceTypedArray: this.spliceTypedArray, transmit: this.transmit, receive: this.receive, load: this.load, unload: this.unload, pipe: this.pipe, terminate: this.terminate, run: this.run, subscribe: this.subscribe, subscribeNode: this.subscribeNode, unsubscribe: this.unsubscribe, stopNode: this.stopNode, get: this.get, add: this.add, remove: this.remove, setTree: this.setTree, setState: this.setState, print: this.print, reconstruct: this.reconstruct, handleMethod: this.handleMethod, handleServiceMessage: this.handleServiceMessage, handleGraphNodeCall: this.handleGraphNodeCall };
    if (options2.name)
      this.name = options2.name;
    else
      options2.name = this.tag;
    if ("loadDefaultRoutes" in options2) {
      this.loadDefaultRoutes = options2.loadDefaultRoutes;
      this.routes = Object.assign(this.defaultRoutes, this.routes);
    }
    if (options2 || Object.keys(this.routes).length > 0)
      this.init(options2);
  }
  handleServiceMessage(message) {
    let call;
    if (typeof message === "object") {
      if (message.route)
        call = message.route;
      else if (message.node)
        call = message.node;
    }
    if (call) {
      if (Array.isArray(message.args))
        return this.run(call, ...message.args);
      else
        return this.run(call, message.args);
    } else
      return message;
  }
  handleGraphNodeCall(route, args) {
    if (!route)
      return args;
    if (args?.args) {
      this.handleServiceMessage(args);
    } else if (Array.isArray(args))
      return this.run(route, ...args);
    else
      return this.run(route, args);
  }
  isTypedArray(x) {
    return ArrayBuffer.isView(x) && Object.prototype.toString.call(x) !== "[object DataView]";
  }
  spliceTypedArray(arr, start, end) {
    let s = arr.subarray(0, start);
    let e;
    if (end) {
      e = arr.subarray(end + 1);
    }
    let n;
    if (s.length > 0 || e?.length > 0)
      n = new arr.constructor(s.length + e.length);
    if (s.length > 0)
      n.set(s);
    if (e && e.length > 0)
      n.set(e, s.length);
    return n;
  }
};
var unsafeRoutes = { setRoute: function(fn, fnName) {
  if (typeof fn === "string")
    fn = parseFunctionFromText3(fn);
  if (typeof fn === "function") {
    if (!fnName)
      fnName = fn.name;
    if (this.graph.get(fnName)) {
      this.graph.get(fnName).setOperator(fn.bind(this.graph.get(fnName)));
    } else {
      let node = this.graph.add({ tag: fnName, operator: fn });
      if (this.graph instanceof Service2)
        this.graph.load({ [fnName]: node });
    }
    return true;
  }
  return false;
}, setNode: function(fn, fnName) {
  if (typeof fn === "string")
    fn = parseFunctionFromText3(fn);
  if (typeof fn === "function") {
    if (!fnName)
      fnName = fn.name;
    if (this.graph.get(fnName)) {
      this.graph.get(fnName).setOperator(fn);
    } else
      this.graph.add({ tag: fnName, operator: fn });
    return true;
  }
  return false;
}, setMethod: function(route, fn, fnName) {
  if (typeof fn === "string")
    fn = parseFunctionFromText3(fn);
  if (typeof fn === "function") {
    if (!fnName)
      fnName = fn.name;
    if (this.graph.get(route)) {
      this.graph.get(route)[fnName] = fn;
    } else
      this.graph.add({ tag: fnName, [fnName]: fn });
    return true;
  }
  return false;
}, assignRoute: function(route, source) {
  if (this.graph.get(route) && typeof source === "object") {
    Object.assign(this.graph.get(route), source);
  }
}, transferClass: (classObj, className) => {
  if (typeof classObj === "object") {
    let str2 = classObj.toString();
    let message = { route: "receiveClass", args: [str2, className] };
    return message;
  }
  return false;
}, receiveClass: function(stringified, className) {
  if (typeof stringified === "string") {
    if (stringified.indexOf("class") === 0) {
      let cls = (0, eval)("(" + stringified + ")");
      let name2 = className;
      if (!name2)
        name2 = cls.name;
      this.graph[name2] = cls;
      return true;
    }
  }
  return false;
}, setGlobal: (key, value) => {
  globalThis[key] = value;
  return true;
}, assignGlobalObject: (target, source) => {
  if (!globalThis[target])
    return false;
  if (typeof source === "object")
    Object.assign(globalThis[target], source);
  return true;
}, setValue: function(key, value) {
  this.graph[key] = value;
  return true;
}, assignObject: function(target, source) {
  if (!this.graph[target])
    return false;
  if (typeof source === "object")
    Object.assign(this.graph[target], source);
  return true;
}, setGlobalFunction: (fn, fnName) => {
  if (typeof fn === "string")
    fn = parseFunctionFromText3(fn);
  if (typeof fn === "function") {
    if (!fnName)
      fnName = fn.name;
    globalThis[fnName] = fn;
    return true;
  }
  return false;
}, assignFunctionToGlobalObject: function(globalObjectName, fn, fnName) {
  if (!globalThis[globalObjectName])
    return false;
  if (typeof fn === "string")
    fn = parseFunctionFromText3(fn);
  if (typeof fn === "function") {
    if (!fnName)
      fnName = fn.name;
    this.graph[globalObjectName][fnName] = fn;
    return true;
  }
  return false;
}, setFunction: function(fn, fnName) {
  if (typeof fn === "string")
    fn = parseFunctionFromText3(fn);
  if (typeof fn === "function") {
    if (!fnName)
      fnName = fn.name;
    this.graph[fnName] = fn;
    return true;
  }
  return false;
}, assignFunctionToObject: function(objectName, fn, fnName) {
  if (!this.graph[objectName])
    return false;
  if (typeof fn === "string")
    fn = parseFunctionFromText3(fn);
  if (typeof fn === "function") {
    if (!fnName)
      fnName = fn.name;
    this.graph[objectName][fnName] = fn;
    return true;
  }
  return false;
} };
var import_sjcl = __toESM22(require_sjcl());
var _HTTPfrontend = class extends Service2 {
  constructor(options2, path2, fetched) {
    super(options2);
    this.name = "http";
    this.fetchProxied = false;
    this.listening = {};
    this.GET = (url2 = "http://localhost:8080/ping", type = "", mimeType) => {
      if (type === "json")
        mimeType = "application/json";
      return new Promise((resolve2, reject) => {
        let xhr = _HTTPfrontend.request({ method: "GET", url: url2, responseType: type, mimeType, onload: (ev) => {
          let data;
          if (xhr.responseType === "" || xhr.responseType === "text")
            data = xhr.responseText;
          else
            data = xhr.response;
          if (url2 instanceof URL)
            url2 = url2.toString();
          this.setState({ [url2]: data });
          resolve2(data);
        }, onabort: (er) => {
          reject(er);
        } });
      }).catch(console.error);
    };
    this.POST = (message, url2 = "http://localhost:8080/echo", type = "", mimeType) => {
      if (typeof message === "object" && (type === "json" || type === "text" || !type)) {
        message = JSON.stringify(message);
      }
      if (type === "json")
        mimeType = "application/json";
      return new Promise((resolve2, reject) => {
        let xhr = _HTTPfrontend.request({ method: "POST", url: url2, data: message, responseType: type, mimeType, onload: (ev) => {
          let data;
          if (xhr.responseType === "" || xhr.responseType === "text")
            data = xhr.responseText;
          else
            data = xhr.response;
          if (url2 instanceof URL)
            url2 = url2.toString();
          this.setState({ [url2]: data });
          resolve2(data);
        }, onabort: (er) => {
          reject(er);
        } });
      }).catch(console.error);
    };
    this.transmit = (message, url2) => {
      let obj = message;
      if (typeof obj === "object") {
        message = JSON.stringify(obj);
      }
      if (obj?.method?.toLowerCase() == "get" || message?.toLowerCase() === "get")
        return this.GET(url2);
      return this.post(message, url2);
    };
    this.transponder = (url2, message, type = "", mimeType) => {
      if (typeof message === "object")
        message = JSON.stringify(message);
      let method = "GET";
      if (message) {
        method = "POST";
      }
      if (type === "json")
        mimeType = "application/json";
      else
        return new Promise((resolve2, reject) => {
          let xhr = _HTTPfrontend.request({ method, url: url2, data: message, responseType: type, onload: (ev) => {
            let body = xhr.response;
            if (typeof body === "string") {
              let substr = body.substring(0, 8);
              if (substr.includes("{") || substr.includes("[")) {
                if (substr.includes("\\"))
                  body = body.replace(/\\/g, "");
                if (body[0] === '"') {
                  body = body.substring(1, body.length - 1);
                }
                ;
                body = JSON.parse(body);
              }
            }
            if (typeof body?.method === "string") {
              return resolve2(this.handleMethod(body.route, body.method, body.args));
            } else if (typeof body?.route === "string") {
              return resolve2(this.handleServiceMessage(body));
            } else if (typeof body?.node === "string" || body.node instanceof GraphNode2) {
              return resolve2(this.handleGraphNodeCall(body.node, body.args));
            } else
              return resolve2(body);
          }, onabort: (er) => {
            reject(er);
          } });
        }).catch(console.error);
    };
    this.listen = (path22 = "0", fetched2 = async (clone, args, response) => {
      const result = await clone.text();
      const returned = this.receive(result);
      this.setState({ [response.url]: returned });
    }) => {
      this.listening[path22] = {};
      let listenerId = `${path22}${Math.floor(Math.random() * 1e15)}`;
      this.listening[path22][listenerId] = fetched2;
      if (!this.fetchProxied) {
        globalThis.fetch = new Proxy(globalThis.fetch, { apply(fetch2, that, args) {
          const result = fetch2.apply(that, args);
          result.then((response) => {
            if (!response.ok)
              return;
            if (this.listening["0"]) {
              for (const key in this.listeners) {
                const clone = response.clone();
                this.listening["0"][key](clone, args, response);
              }
            } else {
              for (const key in this.listening) {
                if (response.url.includes(key)) {
                  for (const key2 in this.listening[path22]) {
                    const clone = response.clone();
                    this.listening[path22][key2](clone, args, response);
                  }
                  break;
                }
              }
            }
          }).catch((er) => {
            console.error(er);
          });
          return result;
        } });
        this.fetchProxied = true;
      }
      return listenerId;
    };
    this.stopListening = (path22, listener) => {
      if (!path22 && path22 !== 0) {
        for (const key in this.listening)
          delete this.listening[key];
      } else {
        if (!listener)
          delete this.listening[path22];
        else
          delete this.listeners[listener];
      }
    };
    this.routes = { request: this.request, GET: this.GET, POST: this.POST, transponder: this.transponder, listen: this.listen, stopListening: this.stopListening };
    this.load(this.routes);
    this.listen(path2, fetched);
  }
};
var HTTPfrontend = _HTTPfrontend;
HTTPfrontend.request = (options2) => {
  const xhr = new XMLHttpRequest();
  if (options2.responseType)
    xhr.responseType = options2.responseType;
  else
    options2.responseType = "json";
  if (options2.mimeType) {
    xhr.overrideMimeType(options2.mimeType);
  }
  if (options2.onload)
    xhr.addEventListener("load", options2.onload, false);
  if (options2.onprogress)
    xhr.addEventListener("progress", options2.onprogress, false);
  if (options2.onabort)
    xhr.addEventListener("abort", options2.onabort, false);
  if (options2.onloadend)
    xhr.addEventListener("loadend", options2.onloadend, false);
  if (options2.onerror)
    xhr.addEventListener("error", options2.onerror, false);
  xhr.open(options2.method, options2.url, true, options2.user, options2.pass);
  if (!options2.onerror)
    xhr.onerror = function() {
      xhr.abort();
    };
  xhr.send(options2.data);
  return xhr;
};
var import_web_worker = __toESM22(require_browser());
var WorkerService = class extends Service2 {
  constructor(options2) {
    super(options2);
    this.name = "worker";
    this.workers = {};
    this.threadRot = 0;
    this.connections = { workers: this.workers };
    this.customRoutes = { "worker": (route, routeKey, routes) => {
      let rt = route;
      if (rt?.worker || rt?.workerId || rt?.workerUrl) {
        let worker = this.loadWorkerRoute(rt, routeKey);
        if (worker) {
          if (!rt.parentRoute && rt.parent?.callback)
            rt.parentRoute = rt.parent.callback;
          if (rt.parent && !rt.portId) {
            if (typeof rt.parent === "string") {
              if (rt.tag !== rt.parent && worker._id !== rt.parent)
                rt.portId = this.establishMessageChannel(worker, rt.parent);
            } else if (rt.tag !== rt.parent.tag && worker._id !== rt.parent.tag) {
              rt.portId = this.establishMessageChannel(worker, rt.parent.worker);
            }
          }
          ;
          if (rt.parentRoute) {
            if (!rt.stopped) {
              if (typeof rt.parent === "string" && rt.parent === worker._id) {
                worker.run("subscribe", [rt.parentRoute, rt.callback]);
              } else if (rt.tag === rt.parent?.tag || worker._id === rt.parent?.tag) {
                worker.run("subscribe", [rt.parentRoute, rt.callback]);
              } else
                worker.run("subscribeToWorker", [rt.parentRoute, rt.portId, rt.callback, rt.blocking]).then((sub) => {
                  worker.workerSubs[rt.parentRoute + rt.portId].sub = sub;
                });
            }
            if (!(typeof rt.parent === "string" && rt.parent === worker._id) && !(rt.tag === rt.parent?.tag || worker._id === rt.parent?.tag))
              worker.workerSubs[rt.parentRoute + rt.portId] = { sub: null, route: rt.parentRoute, portId: rt.portId, callback: rt.callback, blocking: rt.blocking };
          } else if (rt.parent) {
            if (typeof rt.parent === "string") {
              if (!rt.stopped) {
                if (rt.parent === worker._id) {
                  worker.run("subscribe", [rt.parent, rt.callback]);
                } else
                  worker.run("subscribeToWorker", [rt.parent, rt.portId, rt.callback, rt.blocking]).then((sub) => {
                    worker.workerSubs[rt.parentRoute + rt.portId].sub = sub;
                  });
              }
              if (!(typeof rt.parent === "string" && rt.parent === worker._id))
                worker.workerSubs[rt.parentRoute + rt.portId] = { sub: null, route: rt.parentRoute, portId: rt.portId, callback: rt.callback, blocking: rt.blocking };
            } else if (rt.parent?.tag) {
              if (!rt.stopped) {
                if (rt.tag === rt.parent?.tag || worker._id === rt.parent?.tag) {
                  worker.run("subscribe", [rt.parent.tag, rt.callback]);
                } else
                  worker.run("subscribeToWorker", [rt.parent.tag, rt.portId, rt.callback, rt.blocking]).then((sub) => {
                    worker.workerSubs[rt.parentRoute + rt.portId].sub = sub;
                  });
              }
              if (!(rt.tag === rt.parent?.tag || worker._id === rt.parent?.tag))
                worker.workerSubs[rt.parentRoute + rt.portId] = { sub: null, route: rt.parentRoute, portId: rt.portId, callback: rt.callback, blocking: rt.blocking };
            }
          }
        }
      } else if (rt.parent && rt.parentRoute) {
        if (typeof rt.parent === "string" && routes[rt.parent]?.worker) {
          routes[rt.parent].worker.subscribe(rt.parentRoute, rt.tag, rt.blocking);
        } else if (rt.parent?.worker) {
          rt.parent.worker.subscribe(rt.parentRoute, rt.tag, rt.blocking);
        }
      }
      return rt;
    } };
    this.customChildren = { "worker": (child, childRouteKey, parent, routes, checked) => {
      if (!child.parentRoute && parent?.callback)
        child.parentRoute = parent.callback;
      if (!child.parent && parent.tag)
        child.parent = parent.tag;
      return child;
    } };
    this.postMessage = (message, target, transfer) => {
      if (this.workers[target]) {
        this.workers[target].send(message, transfer);
      } else {
        globalThis.postMessage(message, target, transfer);
      }
    };
    this.addWorker = (options22) => {
      let worker;
      if (!options22._id)
        options22._id = `worker${Math.floor(Math.random() * 1e15)}`;
      if (options22.url)
        worker = new import_web_worker.default(options22.url);
      else if (options22.port) {
        worker = options22.port;
      } else if (this.workers[options22._id]) {
        if (this.workers[options22._id].port)
          worker = this.workers[options22._id].port;
        else
          worker = this.workers[options22._id].worker;
      }
      if (!worker)
        return;
      let send = (message, transfer) => {
        return this.transmit(message, worker, transfer);
      };
      let post = (route, args, transfer, method) => {
        let message = { route, args };
        if (method)
          message.method = method;
        return this.transmit(message, worker, transfer);
      };
      let run = (route, args, transfer, method) => {
        return new Promise((res, rej) => {
          let callbackId = Math.random();
          let req = { route: "runRequest", args: [{ route, args }, options22._id, callbackId] };
          if (method)
            req.args[0].method = method;
          let onmessage = (ev) => {
            if (typeof ev.data === "object") {
              if (ev.data.callbackId === callbackId) {
                worker.removeEventListener("message", onmessage);
                res(ev.data.args);
              }
            }
          };
          worker.addEventListener("message", onmessage);
          this.transmit(req, worker, transfer);
        });
      };
      let request = (message, transfer, method) => {
        return new Promise((res, rej) => {
          let callbackId = Math.random();
          let req = { route: "runRequest", args: [message, options22._id, callbackId] };
          if (method)
            req.method = method;
          let onmessage = (ev) => {
            if (typeof ev.data === "object") {
              if (ev.data.callbackId === callbackId) {
                worker.removeEventListener("message", onmessage);
                res(ev.data.args);
              }
            }
          };
          worker.addEventListener("message", onmessage);
          this.transmit(req, worker, transfer);
        });
      };
      let workerSubs = {};
      let subscribe = (route, callback, blocking) => {
        return this.subscribeToWorker(route, options22._id, callback, blocking);
      };
      let unsubscribe = (route, sub) => {
        return run("unsubscribe", [route, sub]);
      };
      let start = async (route, portId, callback, blocking) => {
        if (route)
          await run("subscribeToWorker", [route, portId, callback, blocking]).then((sub) => {
            if (sub)
              workerSubs[route + portId] = { sub, route, portId, callback, blocking };
          });
        else
          for (const key in workerSubs) {
            if (typeof workerSubs[key].sub !== "number")
              await run("subscribeToWorker", [workerSubs[key].route, workerSubs[key].portId, workerSubs[key].callback, workerSubs[key].blocking]).then((sub) => {
                workerSubs[key].sub = sub;
              });
          }
        return true;
      };
      let stop = async (route, portId) => {
        if (route && portId && workerSubs[route + portId]) {
          await run("unsubscribe", [route, workerSubs[route + portId].sub]);
          workerSubs[route + portId].sub = false;
        } else {
          for (const key in workerSubs) {
            if (typeof workerSubs[key].sub === "number") {
              await run("unpipeWorkers", [workerSubs[key].route, workerSubs[key].portId, workerSubs[key].sub]);
            }
            workerSubs[key].sub = false;
          }
        }
        return true;
      };
      let terminate = () => {
        for (const key in workerSubs) {
          if (typeof workerSubs[key].sub === "number") {
            run("unpipeWorkers", [workerSubs[key].route, workerSubs[key].portId, workerSubs[key].sub]);
          }
          workerSubs[key].sub = false;
        }
        return this.terminate(options22._id);
      };
      if (!options22.onmessage)
        options22.onmessage = (ev) => {
          this.receive(ev.data);
          this.setState({ [options22._id]: ev.data });
        };
      if (!options22.onerror) {
        options22.onerror = (ev) => {
          console.error(ev.data);
        };
      }
      worker.onmessage = options22.onmessage;
      worker.onerror = options22.onerror;
      this.workers[options22._id] = { worker, send, post, run, request, subscribe, unsubscribe, terminate, start, stop, postMessage: worker.postMessage, workerSubs, graph: this, ...options22 };
      return this.workers[options22._id];
    };
    this.toObjectURL = (scriptTemplate) => {
      let blob = new Blob([scriptTemplate], { type: "text/javascript" });
      return URL.createObjectURL(blob);
    };
    this.transmit = (message, worker, transfer) => {
      if (!transfer) {
        transfer = this.getTransferable(message);
      }
      if (worker instanceof import_web_worker.default || worker instanceof MessagePort) {
        worker.postMessage(message, transfer);
      } else if (typeof worker === "string") {
        if (this.workers[worker]) {
          if (this.workers[worker].port)
            this.workers[worker].port.postMessage(message, transfer);
          else if (this.workers[worker].worker)
            this.workers[worker].worker.postMessage(message, transfer);
        }
      } else {
        let keys = Object.keys(this.workers);
        this.workers[keys[this.threadRot]].worker.postMessage(message, transfer);
        this.threadRot++;
        if (this.threadRot === keys.length)
          this.threadRot = 0;
      }
      return message;
    };
    this.terminate = (worker) => {
      let onclose;
      if (typeof worker === "string") {
        let obj = this.workers[worker];
        if (obj)
          delete this.workers[worker];
        worker = obj.worker;
        if (obj.onclose)
          onclose = obj.onclose;
      }
      if (worker instanceof import_web_worker.default) {
        worker.terminate();
        if (onclose)
          onclose(worker);
        return true;
      }
      if (worker instanceof MessagePort) {
        worker.close();
        if (onclose)
          onclose(worker);
        return true;
      }
      return false;
    };
    this.establishMessageChannel = (worker, worker2) => {
      let workerId;
      if (typeof worker === "string") {
        workerId = worker;
        if (this.workers[worker]) {
          if (this.workers[worker].port)
            worker = this.workers[worker].port;
          else
            worker2 = this.workers[worker].worker;
        }
      } else if (worker?.worker) {
        worker = worker.worker;
      }
      if (typeof worker2 === "string") {
        if (this.workers[worker2]) {
          if (this.workers[worker2].port)
            worker2 = this.workers[worker2].port;
          else
            worker2 = this.workers[worker2].worker;
        }
      } else if (worker2?.worker) {
        worker2 = worker2.worker;
      }
      if (worker instanceof import_web_worker.default || worker instanceof MessagePort) {
        let channel = new MessageChannel();
        let portId = `port${Math.floor(Math.random() * 1e15)}`;
        worker.postMessage({ route: "addWorker", args: { port: channel.port1, _id: portId } }, [channel.port1]);
        if (worker2 instanceof import_web_worker.default || worker2 instanceof MessagePort) {
          worker2.postMessage({ route: "addWorker", args: { port: channel.port2, _id: portId } }, [channel.port2]);
        } else if (workerId && this.workers[workerId]) {
          channel.port2.onmessage = this.workers[workerId].onmessage;
          this.workers[workerId].port = channel.port2;
        }
        return portId;
      }
      return false;
    };
    this.request = (message, workerId, transfer, method) => {
      let worker = this.workers[workerId].worker;
      return new Promise((res, rej) => {
        let callbackId = Math.random();
        let req = { route: "runRequest", args: [message, callbackId] };
        if (method)
          req.method = method;
        let onmessage = (ev) => {
          if (typeof ev.data === "object") {
            if (ev.data.callbackId === callbackId) {
              worker.removeEventListener("message", onmessage);
              res(ev.data.args);
            }
          }
        };
        worker.addEventListener("message", onmessage);
        this.transmit(req, worker, transfer);
      });
    };
    this.runRequest = (message, worker, callbackId) => {
      let res = this.receive(message);
      if (typeof worker === "string" && this.workers[worker]) {
        if (this.workers[worker].port)
          worker = this.workers[worker].port;
        else
          worker = this.workers[worker].worker;
      }
      if (res instanceof Promise) {
        res.then((r) => {
          if (worker instanceof import_web_worker.default || worker instanceof MessagePort)
            worker.postMessage({ args: r, callbackId });
          else if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope)
            globalThis.postMessage({ args: r, callbackId });
        });
      } else {
        if (worker instanceof import_web_worker.default || worker instanceof MessagePort)
          worker.postMessage({ args: res, callbackId });
        else if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope)
          globalThis.postMessage({ args: res, callbackId });
      }
      return res;
    };
    this.subscribeWorker = (route, worker, blocking) => {
      let callback;
      if (blocking) {
        let blocked = false;
        callback = (res) => {
          if (!blocked) {
            blocked = true;
            if (res instanceof Promise) {
              res.then((r) => {
                if (worker?.run)
                  worker.run("triggerSubscription", [route, worker._id, r]).then((ret) => {
                    blocked = false;
                  });
              });
            } else {
              if (worker?.run)
                worker.run("triggerSubscription", [route, worker._id, res]).then((ret) => {
                  blocked = false;
                });
            }
          }
        };
      } else {
        callback = (res) => {
          if (res instanceof Promise) {
            res.then((r) => {
              if (worker?.postMessage)
                worker.postMessage({ args: r, callbackId: route });
              else if (globalThis.postMessage)
                globalThis.postMessage({ args: r, callbackId: route });
            });
          } else {
            if (worker?.postMessage)
              worker.postMessage({ args: res, callbackId: route });
            else if (globalThis.postMessage)
              globalThis.postMessage({ args: res, callbackId: route });
          }
        };
      }
      if (!blocking && worker?.port) {
        worker = worker.port;
      } else if (!blocking && worker?.worker) {
        worker = worker.worker;
      } else if (typeof worker === "string" && this.workers[worker]) {
        if (blocking)
          worker = this.workers[worker];
        else if (this.workers[worker].port)
          worker = this.workers[worker].port;
        else
          worker = this.workers[worker].worker;
      }
      return this.subscribe(route, callback);
    };
    this.subscribeToWorker = (route, workerId, callback, blocking) => {
      if (typeof workerId === "string" && this.workers[workerId]) {
        this.subscribe(workerId, (res) => {
          if (res?.callbackId === route) {
            if (!callback)
              this.setState({ [workerId]: res.args });
            else if (typeof callback === "string") {
              this.run(callback, res.args);
            } else
              callback(res.args);
          }
        });
        return this.workers[workerId].run("subscribeWorker", [route, workerId, blocking]);
      }
    };
    this.triggerSubscription = async (route, workerId, result) => {
      if (this.state.triggers[workerId])
        for (let i = 0; i < this.state.triggers[workerId].length; i++) {
          await this.state.triggers[workerId][i].onchange({ args: result, callbackId: route });
        }
      return true;
    };
    this.pipeWorkers = (sourceWorker, listenerWorker, sourceRoute, listenerRoute, portId, blocking) => {
      if (typeof sourceWorker === "string")
        sourceWorker = this.workers[sourceWorker];
      if (typeof listenerWorker === "string")
        listenerWorker = this.workers[listenerWorker];
      if (!portId) {
        portId = this.establishMessageChannel(sourceWorker.worker, listenerWorker.worker);
      }
      return listenerWorker.run("subscribeToWorker", [sourceRoute, portId, listenerRoute, blocking]);
    };
    this.unpipeWorkers = (sourceRoute, sourceWorker, sub) => {
      if (typeof sourceWorker === "string")
        sourceWorker = this.workers[sourceWorker];
      if (sourceWorker)
        return sourceWorker.run("unsubscribe", [sourceRoute, sub]);
    };
    this.routes = { addWorker: { operator: this.addWorker, aliases: ["open"] }, toObjectURL: this.toObjectURL, request: this.request, runRequest: this.runRequest, establishMessageChannel: this.establishMessageChannel, subscribeWorker: this.subscribeWorker, subscribeToWorker: this.subscribeToWorker, triggerSubscription: this.triggerSubscription, subscribe: this.subscribe, pipeWorkers: this.pipeWorkers, unpipeWorkers: this.unpipeWorkers, unsubscribe: (route, sub) => {
      this.unsubscribe(route, sub);
    }, terminate: this.terminate };
    this.load(this.routes);
    if (typeof WorkerGlobalScope !== "undefined" && globalThis instanceof WorkerGlobalScope) {
      this.addDefaultMessageListener();
    }
  }
  loadWorkerRoute(rt, routeKey) {
    if (rt.workerUrl)
      rt.url = rt.workerUrl;
    if (rt.workerId)
      rt.tag = rt.workerId;
    if (!rt.tag)
      rt.tag = routeKey;
    rt._id = rt.tag;
    let worker;
    if (this.workers[rt._id])
      worker = this.workers[rt._id];
    else if (rt.worker)
      worker = rt.worker;
    if (!worker) {
      worker = this.addWorker(rt);
      let ondelete = (rt2) => {
        rt2.worker?.terminate();
      };
      let oldondelete;
      if (rt.ondelete)
        oldondelete = rt.ondelete;
      rt.ondelete = (n) => {
        if (oldondelete)
          oldondelete(n);
        ondelete(n);
      };
    }
    rt.worker = worker;
    if (rt.transferFunctions) {
      for (const prop in rt.transferFunctions) {
        this.transferFunction(worker, rt.transferFunctions[prop], prop);
      }
    }
    if (rt.transferClasses) {
      for (const prop in rt.transferClasses) {
        this.transferClass(worker, rt.transferClasses[prop], prop);
      }
    }
    if (worker) {
      if (!rt.operator) {
        rt.operator = (...args) => {
          if (rt.callback) {
            if (!this.nodes.get(rt.tag)?.children)
              worker.post(rt.callback, args);
            else
              return worker.run(rt.callback, args);
          } else {
            if (!this.nodes.get(rt.tag)?.children)
              worker.send(args);
            else
              return worker.request(args);
          }
        };
      }
      if (rt.init) {
        worker.run(rt.init, rt.initArgs, rt.initTransfer);
      }
      return worker;
    }
  }
  addDefaultMessageListener() {
    globalThis.onmessage = (ev) => {
      let result = this.receive(ev.data);
      if (this.keepState)
        this.setState({ [this.name]: result });
    };
  }
  getTransferable(message) {
    let transfer;
    if (typeof message === "object") {
      if (message.args) {
        if (message.args.constructor?.name === "Object") {
          for (const key in message.args) {
            if (ArrayBuffer.isView(message.args[key])) {
              if (!transfer)
                transfer = [message.args[key].buffer];
              else
                transfer.push(message.args[key].buffer);
            } else if (message.args[key]?.constructor?.name === "ArrayBuffer") {
              if (!transfer)
                transfer = [message.args[key]];
              else
                transfer.push(message.args[key]);
            }
          }
        } else if (Array.isArray(message.args) && message.args.length < 11) {
          message.args.forEach((arg) => {
            if (ArrayBuffer.isView(arg)) {
              transfer = [arg.buffer];
            } else if (arg.constructor?.name === "ArrayBuffer")
              transfer = [arg];
          });
        } else if (ArrayBuffer.isView(message.args)) {
          transfer = [message.args.buffer];
        } else if (message.args.constructor?.name === "ArrayBuffer") {
          transfer = [message];
        }
      } else if (message.constructor?.name === "Object") {
        for (const key in message) {
          if (ArrayBuffer.isView(message[key])) {
            if (!transfer)
              transfer = [message[key].buffer];
            else
              transfer.push(message[key].buffer);
          } else if (message[key]?.constructor?.name === "ArrayBuffer") {
            if (!transfer)
              transfer = [message[key]];
            else
              transfer.push(message[key]);
          }
        }
      } else if (Array.isArray(message) && message.length < 11) {
        message.forEach((arg) => {
          if (ArrayBuffer.isView(arg)) {
            transfer = [arg.buffer];
          } else if (arg.constructor?.name === "ArrayBuffer")
            transfer = [arg];
        });
      } else if (ArrayBuffer.isView(message)) {
        transfer = [message.buffer];
      } else if (message.constructor?.name === "ArrayBuffer") {
        transfer = [message];
      }
    }
    return transfer;
  }
  transferFunction(worker, fn, fnName) {
    if (!fnName)
      fnName = fn.name;
    return worker.request({ route: "setRoute", args: [fn.toString(), fnName] });
  }
  transferClass(worker, cls, className) {
    if (!className)
      className = cls.name;
    return worker.request({ route: "receiveClass", args: [cls.toString(), className] });
  }
};
var mouseEventHandler = makeSendPropertiesHandler(["ctrlKey", "metaKey", "shiftKey", "button", "pointerType", "clientX", "clientY", "pageX", "pageY"]);
var wheelEventHandlerImpl = makeSendPropertiesHandler(["deltaX", "deltaY"]);
var keydownEventHandler = makeSendPropertiesHandler(["ctrlKey", "metaKey", "shiftKey", "keyCode"]);
function wheelEventHandler(event, sendFn) {
  event.preventDefault();
  wheelEventHandlerImpl(event, sendFn);
}
function preventDefaultHandler(event) {
  event.preventDefault();
}
function copyProperties(src, properties, dst) {
  for (const name2 of properties) {
    dst[name2] = src[name2];
  }
}
function makeSendPropertiesHandler(properties) {
  return function sendProperties(event, sendFn) {
    const data = { type: event.type };
    copyProperties(event, properties, data);
    sendFn(data);
  };
}
function touchEventHandler(event, sendFn) {
  const touches = [];
  const data = { type: event.type, touches };
  for (let i = 0; i < event.touches.length; ++i) {
    const touch = event.touches[i];
    touches.push({ pageX: touch.pageX, pageY: touch.pageY });
  }
  sendFn(data);
}
var orbitKeys = { "37": true, "38": true, "39": true, "40": true };
function filteredKeydownEventHandler(event, sendFn) {
  const { keyCode } = event;
  if (orbitKeys[keyCode]) {
    event.preventDefault();
    keydownEventHandler(event, sendFn);
  }
}
var eventHandlers = { contextmenu: preventDefaultHandler, mousedown: mouseEventHandler, mousemove: mouseEventHandler, mouseup: mouseEventHandler, pointerdown: mouseEventHandler, pointermove: mouseEventHandler, pointerup: mouseEventHandler, touchstart: touchEventHandler, touchmove: touchEventHandler, touchend: touchEventHandler, wheel: wheelEventHandler, keydown: filteredKeydownEventHandler };
function initProxyElement(element, worker, id) {
  if (!id)
    id = "proxy" + Math.floor(Math.random() * 1e15);
  const sendEvent = (data) => {
    worker.postMessage({ route: "handleProxyEvent", args: [data, id] });
  };
  let entries = Object.entries(eventHandlers);
  for (const [eventName, handler] of entries) {
    element.addEventListener(eventName, function(event) {
      handler(event, sendEvent);
    });
  }
  const sendSize = () => {
    const rect = element.getBoundingClientRect();
    sendEvent({ type: "resize", left: rect.left, top: rect.top, width: element.clientWidth, height: element.clientHeight });
  };
  sendSize();
  globalThis.addEventListener("resize", sendSize);
  return id;
}
var EventDispatcher = class {
  addEventListener(type, listener) {
    if (this._listeners === void 0)
      this._listeners = {};
    const listeners = this._listeners;
    if (listeners[type] === void 0) {
      listeners[type] = [];
    }
    if (listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener);
    }
  }
  hasEventListener(type, listener) {
    if (this._listeners === void 0)
      return false;
    const listeners = this._listeners;
    return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
  }
  removeEventListener(type, listener) {
    if (this._listeners === void 0)
      return;
    const listeners = this._listeners;
    const listenerArray = listeners[type];
    if (listenerArray !== void 0) {
      const index = listenerArray.indexOf(listener);
      if (index !== -1) {
        listenerArray.splice(index, 1);
      }
    }
  }
  dispatchEvent(event, target) {
    if (this._listeners === void 0)
      return;
    const listeners = this._listeners;
    const listenerArray = listeners[event.type];
    if (listenerArray !== void 0) {
      if (!target)
        event.target = this;
      else
        event.target = target;
      const array = listenerArray.slice(0);
      for (let i = 0, l = array.length; i < l; i++) {
        array[i].call(this, event);
      }
      event.target = null;
    }
  }
};
function noop() {
}
var ElementProxyReceiver = class extends EventDispatcher {
  constructor() {
    super();
    this._listeners = {};
    this.style = {};
    this.setPointerCapture = () => {
    };
    this.releasePointerCapture = () => {
    };
    this.getBoundingClientRect = () => {
      return { left: this.left, top: this.top, width: this.width, height: this.height, right: this.left + this.width, bottom: this.top + this.height };
    };
    this.handleEvent = (data) => {
      if (data.type === "resize") {
        this.left = data.left;
        this.top = data.top;
        this.width = data.width;
        this.height = data.height;
        if (typeof this.proxied === "object") {
          this.proxied.width = this.width;
          this.proxied.height = this.height;
          this.proxied.clientWidth = this.width;
          this.proxied.clientHeight = this.height;
        }
      }
      data.preventDefault = noop;
      data.stopPropagation = noop;
      this.dispatchEvent(data, this.proxied);
    };
    this.style = {};
  }
  get clientWidth() {
    return this.width;
  }
  get clientHeight() {
    return this.height;
  }
  focus() {
  }
};
var ProxyManager = class {
  constructor() {
    this.targets = {};
    this.makeProxy = (id, addTo = void 0) => {
      if (!id)
        id = `proxyReceiver${Math.floor(Math.random() * 1e15)}`;
      let proxy;
      if (this.targets[id])
        proxy = this.targets[id];
      else {
        proxy = new ElementProxyReceiver();
        this.targets[id] = proxy;
      }
      if (typeof addTo === "object") {
        addTo.proxy = proxy;
        proxy.proxied = addTo;
        addTo.style = proxy.style;
        if (proxy.width) {
          addTo.width = proxy.width;
          addTo.clientWidth = proxy.width;
        }
        if (proxy.height) {
          addTo.height = proxy.height;
          addTo.clientHeight = proxy.height;
        }
        addTo.setPointerCapture = proxy.setPointerCapture.bind(proxy);
        addTo.releasePointerCapture = proxy.releasePointerCapture.bind(proxy);
        addTo.getBoundingClientRect = proxy.getBoundingClientRect.bind(proxy);
        addTo.addEventListener = proxy.addEventListener.bind(proxy);
        addTo.removeEventListener = proxy.removeEventListener.bind(proxy);
        addTo.handleEvent = proxy.handleEvent.bind(proxy);
        addTo.dispatchEvent = proxy.dispatchEvent.bind(proxy);
        addTo.focus = proxy.focus.bind(proxy);
      }
    };
    this.getProxy = (id) => {
      return this.targets[id];
    };
    this.handleEvent = (data, id) => {
      if (!this.targets[id])
        this.makeProxy(id);
      if (this.targets[id]) {
        this.targets[id].handleEvent(data);
        return true;
      }
      return void 0;
    };
    if (!globalThis.document)
      globalThis.document = {};
  }
};
var proxyElementWorkerRoutes = { initProxyElement, makeProxy: function(id, elm) {
  if (!this.graph.ProxyManager)
    this.graph.ProxyManager = new ProxyManager();
  this.graph.ProxyManager.makeProxy(id, elm);
  return id;
}, handleProxyEvent: function(data, id) {
  if (!this.graph.ProxyManager)
    this.graph.ProxyManager = new ProxyManager();
  if (this.graph.ProxyManager.handleEvent(data, id))
    return data;
} };
var workerCanvasRoutes = { ...proxyElementWorkerRoutes, transferCanvas: function(worker, options2, route) {
  if (!options2)
    return void 0;
  if (!options2._id)
    options2._id = `canvas${Math.floor(Math.random() * 1e15)}`;
  let offscreen = options2.canvas.transferControlToOffscreen();
  let message = { route: route ? route : "receiveCanvas", args: { ...options2, canvas: offscreen } };
  this.graph.run("initProxyElement", options2.canvas, worker, options2._id);
  if (options2.draw) {
    if (typeof options2.draw === "function")
      message.args.draw = options2.draw.toString();
    else
      message.args.draw = options2.draw;
  }
  if (options2.update) {
    if (typeof options2.update === "function")
      message.args.update = options2.update.toString();
    else
      message.args.update = options2.update;
  }
  if (options2.init) {
    if (typeof options2.init === "function")
      message.args.init = options2.init.toString();
    else
      message.args.init = options2.init;
  }
  if (options2.clear) {
    if (typeof options2.clear === "function")
      message.args.clear = options2.clear.toString();
    else
      message.args.clear = options2.clear;
  }
  let transfer = [offscreen];
  if (options2.transfer) {
    transfer.push(...options2.transfer);
    delete options2.transfer;
  }
  worker.postMessage(message, transfer);
  const workercontrols = { _id: options2._id, width: options2.width, height: options2.height, worker, draw: (props) => {
    worker.postMessage({ route: "drawFrame", args: [options2._id, props] });
  }, update: (props) => {
    worker.postMessage({ route: "updateCanvas", args: [options2._id, props] });
  }, clear: () => {
    worker.postMessage({ route: "clearCanvas", args: options2._id });
  }, init: () => {
    worker.postMessage({ route: "initCanvas", args: options2._id });
  }, stop: () => {
    worker.postMessage({ route: "stopAnim", args: options2._id });
  }, start: () => {
    worker.postMessage({ route: "startAnim", args: options2._id });
  }, set: (newDrawProps) => {
    worker.postMessage({ route: "setDraw", args: [newDrawProps, options2._id] });
  } };
  return workercontrols;
}, receiveCanvas: function(options2) {
  if (!this.graph.CANVASES)
    this.graph.CANVASES = {};
  let canvasOptions = options2;
  options2._id ? canvasOptions._id = options2._id : canvasOptions._id = `canvas${Math.floor(Math.random() * 1e15)}`;
  typeof options2.context === "string" ? canvasOptions.context = options2.canvas.getContext(options2.context) : canvasOptions.context = options2.context;
  "animating" in options2 ? canvasOptions.animating = options2.animating : canvasOptions.animating = true;
  if (this.graph.CANVASES[canvasOptions._id]) {
    this.graph.run("setDraw", canvasOptions);
  } else {
    canvasOptions.graph = this.graph;
    this.graph.CANVASES[canvasOptions._id] = canvasOptions;
    this.graph.run("makeProxy", canvasOptions._id, canvasOptions.canvas);
    if (options2.width)
      canvasOptions.canvas.width = options2.width;
    if (options2.height)
      canvasOptions.canvas.height = options2.height;
    if (typeof canvasOptions.draw === "string") {
      canvasOptions.draw = parseFunctionFromText3(canvasOptions.draw);
    }
    if (typeof canvasOptions.update === "string") {
      canvasOptions.update = parseFunctionFromText3(canvasOptions.update);
    }
    if (typeof canvasOptions.init === "string") {
      canvasOptions.init = parseFunctionFromText3(canvasOptions.init);
    }
    if (typeof canvasOptions.clear === "string") {
      canvasOptions.clear = parseFunctionFromText3(canvasOptions.clear);
    }
    if (typeof canvasOptions.init === "function")
      canvasOptions.init(canvasOptions, canvasOptions.canvas, canvasOptions.context);
    if (typeof canvasOptions.draw === "function" && canvasOptions.animating) {
      let draw = (s, canvas, context) => {
        if (s.animating) {
          s.draw(s, canvas, context);
          requestAnimationFrame(() => {
            draw(s, canvas, context);
          });
        }
      };
      draw(canvasOptions, canvasOptions.canvas, canvasOptions.context);
    }
  }
  return canvasOptions._id;
}, setDraw: function(settings, _id) {
  let canvasopts;
  if (_id)
    canvasopts = this.graph.CANVASES?.[settings._id];
  else if (settings._id)
    canvasopts = this.graph.CANVASES?.[settings._id];
  else
    canvasopts = this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];
  if (canvasopts) {
    if (settings.canvas) {
      canvasopts.canvas = settings.canvas;
      this.graph.run("makeProxy", canvasopts._id, canvasopts.canvas);
    }
    if (typeof settings.context === "string")
      canvasopts.context = canvasopts.canvas.getContext(settings.context);
    else if (settings.context)
      canvasopts.context = settings.context;
    if (settings.width)
      canvasopts.canvas.width = settings.width;
    if (settings.height)
      canvasopts.canvas.height = settings.height;
    if (typeof settings.draw === "string")
      settings.draw = parseFunctionFromText3(settings.draw);
    if (typeof settings.draw === "function") {
      canvasopts.draw = settings.draw;
    }
    if (typeof settings.update === "string")
      settings.update = parseFunctionFromText3(settings.update);
    if (typeof settings.update === "function") {
      canvasopts.update = settings.update;
    }
    if (typeof settings.init === "string")
      settings.init = parseFunctionFromText3(settings.init);
    if (typeof settings.init === "function") {
      canvasopts.init = settings.init;
    }
    if (typeof settings.clear === "string")
      settings.clear = parseFunctionFromText3(settings.clear);
    if (typeof settings.clear === "function") {
      canvasopts.clear = settings.clear;
    }
    return settings._id;
  }
  return void 0;
}, drawFrame: function(props, _id) {
  let canvasopts;
  if (!_id)
    canvasopts = this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];
  else
    canvasopts = this.graph.CANVASES?.[_id];
  if (canvasopts) {
    if (props)
      Object.assign(canvasopts, props);
    if (canvasopts.draw) {
      canvasopts.draw(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
  }
  return void 0;
}, clearCanvas: function(_id) {
  let canvasopts;
  if (!_id)
    canvasopts = this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];
  else
    canvasopts = this.graph.CANVASES?.[_id];
  if (canvasopts?.clear) {
    canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context);
    return _id;
  }
  return void 0;
}, initCanvas: function(_id) {
  let canvasopts;
  if (!_id)
    canvasopts = this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];
  else
    canvasopts = this.graph.CANVASES?.[_id];
  if (canvasopts?.init) {
    canvasopts.init(canvasopts, canvasopts.canvas, canvasopts.context);
    return _id;
  }
  return void 0;
}, updateCanvas: function(input, _id) {
  let canvasopts;
  if (!_id)
    canvasopts = this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];
  else
    canvasopts = this.graph.CANVASES?.[_id];
  if (canvasopts?.update) {
    canvasopts.update(canvasopts, canvasopts.canvas, canvasopts.context, input);
    return _id;
  }
  return void 0;
}, setProps: function(props, _id) {
  let canvasopts;
  if (!_id)
    canvasopts = this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];
  else
    canvasopts = this.graph.CANVASES?.[_id];
  if (canvasopts) {
    Object.assign(canvasopts, props);
    if (props.width)
      canvasopts.canvas.width = props.width;
    if (props.height)
      canvasopts.canvas.height = props.height;
    return _id;
  }
  return void 0;
}, startAnim: function(_id, draw) {
  let canvasopts;
  if (!_id)
    canvasopts = this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];
  else
    canvasopts = this.graph.CANVASES?.[_id];
  canvasopts.animating = true;
  if (canvasopts && draw) {
    if (typeof draw === "string")
      draw = parseFunctionFromText3(draw);
    if (typeof draw === "function") {
      canvasopts.draw = draw;
    }
    return _id;
  }
  if (typeof canvasopts?.draw === "function") {
    let draw2 = (s, canvas, context) => {
      if (s.animating) {
        s.draw(s, canvas, context);
        requestAnimationFrame(() => {
          draw2(s, canvas, context);
        });
      }
    };
    if (typeof canvasopts.clear === "function")
      canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context);
    if (typeof canvasopts.init === "function")
      canvasopts.init(canvasopts, canvasopts.canvas, canvasopts.context);
    draw2(canvasopts, canvasopts.canvas, canvasopts.context);
    return _id;
  }
  return void 0;
}, stopAnim: function(_id) {
  let canvasopts;
  if (!_id)
    canvasopts = this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];
  else
    canvasopts = this.graph.CANVASES?.[_id];
  if (canvasopts) {
    canvasopts.animating = false;
    if (typeof canvasopts.clear === "function")
      canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context);
    return _id;
  }
  return void 0;
} };
var algorithms = {};
var loadAlgorithms = (settings) => {
  return Object.assign(algorithms, settings);
};
function createSubprocess(options2, inputs) {
  let ctx = { _id: options2._id ? options2._id : `algorithm${Math.floor(Math.random() * 1e15)}`, ondata: options2.ondata, run: (data) => {
    return ctx.ondata(ctx, data);
  } };
  if (options2.structs)
    recursivelyAssign(ctx, JSON.parse(JSON.stringify(options2.structs)));
  if (inputs)
    recursivelyAssign(ctx, JSON.parse(JSON.stringify(inputs)));
  if (options2.oncreate) {
    ctx.oncreate = options2.oncreate;
  }
  if (ctx.oncreate) {
    ctx.oncreate(ctx);
  }
  return ctx;
}
var recursivelyAssign = (target, obj) => {
  for (const key in obj) {
    if (typeof obj[key] === "object" && !Array.isArray(obj[key])) {
      if (typeof target[key] === "object" && !Array.isArray(target[key]))
        recursivelyAssign(target[key], obj[key]);
      else
        target[key] = recursivelyAssign({}, obj[key]);
    } else
      target[key] = obj[key];
  }
  return target;
};
var subprocessRoutes = { ...unsafeRoutes, loadAlgorithms, "initSubprocesses": async function initSubprocesses(subprocesses, service) {
  if (!service)
    service = this.graph;
  if (!service)
    return void 0;
  for (const p in subprocesses) {
    let s = subprocesses[p];
    if (!s.worker && s.url)
      s.worker = service.addWorker({ url: s.url });
    if (!s.worker)
      continue;
    let w2 = s.worker;
    let wpId;
    wpId = service.establishMessageChannel(w2.worker, s.source?.worker);
    if (!s.source)
      s.source = service;
    if (typeof s.subprocess === "object") {
      const p2 = s.subprocess;
      if (!p2.name)
        continue;
      if (typeof p2.oncreate === "function") {
        p2.oncreate = p2.oncreate.toString();
      }
      if (typeof p2.ondata === "function") {
        p2.ondata = p2.ondata.toString();
      }
      s.worker.post("addSubprocessTemplate", [p2.name, p2.structs, p2.oncreate, p2.ondata, p2.props]);
      s.subprocess = p2.name;
    }
    if (s.init) {
      let r = await w2.run(s.init, s.initArgs);
      s.otherArgs = r;
    }
    if (s.otherArgs) {
      w2.run("setValue", ["otherArgsProxy", Array.isArray(s.otherArgs) ? s.otherArgs : [s.otherArgs]]);
    }
    if (s.pipeTo) {
      w2.run("setValue", ["routeProxy", s.route]);
      w2.run("setValue", ["pipeRoute", s.pipeTo.route]);
      if (s.url && !s.pipeTo.worker) {
        let w22 = service.addWorker({ url: s.url });
        s.pipeTo.portId = service.establishMessageChannel(w2.worker, w22.worker);
        s.pipeTo.worker = w22;
      }
      if (s.pipeTo.init) {
        s.pipeTo.otherArgs = await s.pipeTo.worker.run(s.pipeTo.init, s.pipeTo.initArgs);
      }
      w2.run("setValue", ["pipePort", s.pipeTo.portId]);
      if (s.pipeTo.otherArgs)
        w2.run("setValue", ["otherPipeArgs", s.pipeTo.otherArgs]);
      service.transferFunction(w2, function pipeResults(data) {
        let inp = data;
        if (this.graph.otherArgsProxy)
          inp = [data, ...this.graph.otherArgsProxy];
        let r = this.graph.run(this.graph.routeProxy, inp);
        if (!s.blocking)
          return new Promise((res) => {
            if (r instanceof Promise) {
              r.then((rr) => {
                if (rr !== void 0) {
                  let args = rr;
                  if (this.graph.otherPipeArgs)
                    args = [rr, ...this.graph.otherPipeArgs];
                  if (this.workers[this.graph.pipePort]) {
                    s.blocking = true;
                    this.workers[this.graph.pipePort].run(this.graph.pipeRoute, args).then((result) => {
                      s.blocking = false;
                      res(result);
                    });
                  }
                }
              });
            } else if (r !== void 0) {
              let args = r;
              if (this.graph.otherPipeArgs)
                args = [r, ...this.graph.otherPipeArgs];
              if (this.workers[this.graph.pipePort]) {
                s.blocking = true;
                this.workers[this.graph.pipePort].run(this.graph.pipeRoute, args).then((result) => {
                  s.blocking = false;
                  res(result);
                });
              }
            }
          });
        return void 0;
      }, s.route + "_pipeResults");
      s.route = s.route + "_pipeResults";
    } else {
      w2.run("setValue", ["routeProxy", s.route]);
      service.transferFunction(w2, function routeProxy(data) {
        let r;
        if (this.graph.otherArgsProxy)
          r = this.graph.nodes.get(this.graph.routeProxy).operator(data, ...this.graph.otherArgsProxy);
        else
          r = this.graph.nodes.get(this.graph.routeProxy).operator(data);
        if (this.graph.state.triggers[this.graph.routeProxy]) {
          if (r instanceof Promise) {
            r.then((rr) => {
              this.setState({ [this.graph.routeProxy]: rr });
            });
          } else
            this.setState({ [this.graph.routeProxy]: r });
        }
        return r;
      }, s.route + "_routeProxy");
      s.route = s.route + "_routeProxy";
      if (!s.stopped)
        w2.run("subscribeToWorker", [s.subscribeRoute, wpId, s.route]).then((sub) => {
          s.sub = sub;
        });
    }
    s.stop = async () => {
      if (s.source && typeof s.sub === "number") {
        s.source.unsubscribe(s.subscribeRoute, s.sub);
        return true;
      }
      return void 0;
    };
    s.start = async () => {
      if (typeof s.sub !== "number")
        return w2.run("subscribeToWorker", [s.subscribeRoute, wpId, s.route, s.blocking]).then((sub) => {
          s.sub = sub;
        });
    };
    s.setArgs = async (args) => {
      if (Array.isArray(args))
        await w2.run("setValue", ["otherArgsProxy", args]);
      else if (typeof args === "object") {
        for (const key in args) {
          await w2.run("setValue", [key, args[key]]);
        }
      }
      return true;
    };
    s.terminate = () => {
      w2.terminate();
      if (s.source?.worker && typeof s.sub === "number") {
        s.source.post("unsubscribe", s.sub);
      }
      if (s.pipeTo?.worker) {
        s.pipeTo.worker.terminate();
      }
    };
    if (s.callback)
      w2.subscribe(s.route, (res) => {
        if (typeof s.callback === "string")
          this.graph.run(s.callback, res);
        else
          s.callback(res);
      });
  }
  return subprocesses;
}, "addSubprocessTemplate": function subprocesstempalte(name2, structs, oncreate2, ondata, props) {
  if (typeof oncreate2 === "string")
    oncreate2 = parseFunctionFromText3(oncreate2);
  if (typeof ondata === "string")
    ondata = parseFunctionFromText3(ondata);
  if (typeof ondata === "function") {
    algorithms[name2] = { ondata, oncreate: typeof oncreate2 === "function" ? oncreate2 : null, structs };
    if (typeof props === "object")
      Object.assign(algorithms[name2], props);
    return true;
  }
}, "updateSubprocess": function updatesubprocess(structs, _id) {
  if (!this.graph.ALGORITHMS)
    this.graph.ALGORITHMS = {};
  if (!_id)
    _id = Object.keys(this.graph.ALGORITHMS)[0];
  if (!_id)
    return;
  Object.assign(this.graph.ALGORITHMS[_id], structs);
}, "createSubprocess": function creatsubprocess(options2, inputs) {
  if (!this.graph.ALGORITHMS)
    this.graph.ALGORITHMS = {};
  if (typeof options2 === "string") {
    options2 = algorithms[options2];
  }
  if (typeof options2 === "object") {
    if (typeof options2.ondata === "string")
      options2.ondata = parseFunctionFromText3(options2.ondata);
    let ctx;
    if (typeof options2?.ondata === "function")
      ctx = createSubprocess(options2, inputs);
    if (ctx)
      this.graph.ALGORITHMS[ctx._id] = ctx;
    if (ctx)
      return ctx._id;
  }
  return false;
}, "runSubprocess": function runsubprocess(data, _id) {
  if (!this.graph.ALGORITHMS)
    this.graph.ALGORITHMS = {};
  if (!_id)
    _id = Object.keys(this.graph.ALGORITHMS)[0];
  if (!_id)
    return;
  let res = this.graph.ALGORITHMS[_id].run(data);
  if (res !== void 0) {
    if (Array.isArray(res)) {
      let pass = [];
      res.forEach((r) => {
        if (r !== void 0) {
          pass.push(r);
          this.graph.setState({ [_id]: r });
        }
      });
      if (pass.length > 0) {
        return pass;
      }
    } else {
      this.graph.setState({ [_id]: res });
      return res;
    }
  }
} };
var url = URL.createObjectURL(new Blob([String('(()=>{var __require=(x=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(x,{get:(a,b)=>(typeof require!=="undefined"?require:a)[b]}):x)(function(x){if(typeof require!=="undefined")return require.apply(this,arguments);throw new Error(\'Dynamic require of "\'+x+\'" is not supported\')});var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __require2=(x=>typeof __require!=="undefined"?__require:typeof Proxy!=="undefined"?new Proxy(x,{get:(a,b)=>(typeof __require!=="undefined"?__require:a)[b]}):x)(function(x){if(typeof __require!=="undefined")return __require.apply(this,arguments);throw new Error(\'Dynamic require of "\'+x+\'" is not supported\')});var __commonJS=(cb,mod)=>function __require22(){return mod||(0,cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from==="object"||typeof from==="function"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable})}return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:true}):target,mod));var require_sjcl=__commonJS({"services/e2ee/sjcl.js"(exports,module){"use strict";var sjcl2={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message};this.message=a},invalid:function(a){this.toString=function(){return"INVALID: "+this.message};this.message=a},bug:function(a){this.toString=function(){return"BUG: "+this.message};this.message=a},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message};this.message=a}}};sjcl2.cipher.aes=function(a){this.s[0][0][0]||this.O();var b,c,d2,e,f=this.s[0][4],g=this.s[1];b=a.length;var h=1;if(4!==b&&6!==b&&8!==b)throw new sjcl2.exception.invalid("invalid aes key size");this.b=[d2=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d2[a-1];if(0===a%b||8===b&&4===a%b)c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255],0===a%b&&(c=c<<8^c>>>24^h<<24,h=h<<1^283*(h>>7));d2[a]=d2[a-b]^c}for(b=0;a;b++,a--)c=d2[b&3?a:a-4],e[b]=4>=a||4>b?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&255]]};sjcl2.cipher.aes.prototype={encrypt:function(a){return t(this,a,0)},decrypt:function(a){return t(this,a,1)},s:[[[],[],[],[],[]],[[],[],[],[],[]]],O:function(){var a=this.s[0],b=this.s[1],c=a[4],d2=b[4],e,f,g,h=[],k=[],l,n,m,p;for(e=0;256>e;e++)k[(h[e]=e<<1^283*(e>>7))^e]=e;for(f=g=0;!c[f];f^=l||1,g=k[g]||1)for(m=g^g<<1^g<<2^g<<3^g<<4,m=m>>8^m&255^99,c[f]=m,d2[m]=f,n=h[e=h[l=h[f]]],p=16843009*n^65537*e^257*l^16843008*f,n=257*h[m]^16843008*m,e=0;4>e;e++)a[e][f]=n=n<<24^n>>>8,b[e][m]=p=p<<24^p>>>8;for(e=0;5>e;e++)a[e]=a[e].slice(0),b[e]=b[e].slice(0)}};function t(a,b,c){if(4!==b.length)throw new sjcl2.exception.invalid("invalid aes block size");var d2=a.b[c],e=b[0]^d2[0],f=b[c?3:1]^d2[1],g=b[2]^d2[2];b=b[c?1:3]^d2[3];var h,k,l,n=d2.length/4-2,m,p=4,r=[0,0,0,0];h=a.s[c];a=h[0];var q2=h[1],v=h[2],w2=h[3],x=h[4];for(m=0;m<n;m++)h=a[e>>>24]^q2[f>>16&255]^v[g>>8&255]^w2[b&255]^d2[p],k=a[f>>>24]^q2[g>>16&255]^v[b>>8&255]^w2[e&255]^d2[p+1],l=a[g>>>24]^q2[b>>16&255]^v[e>>8&255]^w2[f&255]^d2[p+2],b=a[b>>>24]^q2[e>>16&255]^v[f>>8&255]^w2[g&255]^d2[p+3],p+=4,e=h,f=k,g=l;for(m=0;4>m;m++)r[c?3&-m:m]=x[e>>>24]<<24^x[f>>16&255]<<16^x[g>>8&255]<<8^x[b&255]^d2[p++],h=e,e=f,f=g,g=b,b=h;return r}sjcl2.bitArray={bitSlice:function(a,b,c){a=sjcl2.bitArray.$(a.slice(b/32),32-(b&31)).slice(1);return void 0===c?a:sjcl2.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d2=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d2^a[b/32+1|0]>>>d2:a[b/32|0]>>>d2)&(1<<c)-1},concat:function(a,b){if(0===a.length||0===b.length)return a.concat(b);var c=a[a.length-1],d2=sjcl2.bitArray.getPartial(c);return 32===d2?a.concat(b):sjcl2.bitArray.$(b,d2,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;return 0===b?0:32*(b-1)+sjcl2.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(32*a.length<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b=b&31;0<c&&b&&(a[c-1]=sjcl2.bitArray.partial(b,a[c-1]&2147483648>>b-1,1));return a},partial:function(a,b,c){return 32===a?b:(c?b|0:b<<32-a)+1099511627776*a},getPartial:function(a){return Math.round(a/1099511627776)||32},equal:function(a,b){if(sjcl2.bitArray.bitLength(a)!==sjcl2.bitArray.bitLength(b))return false;var c=0,d2;for(d2=0;d2<a.length;d2++)c|=a[d2]^b[d2];return 0===c},$:function(a,b,c,d2){var e;e=0;for(void 0===d2&&(d2=[]);32<=b;b-=32)d2.push(c),c=0;if(0===b)return d2.concat(a);for(e=0;e<a.length;e++)d2.push(c|a[e]>>>b),c=a[e]<<32-b;e=a.length?a[a.length-1]:0;a=sjcl2.bitArray.getPartial(e);d2.push(sjcl2.bitArray.partial(b+a&31,32<b+a?c:d2.pop(),1));return d2},i:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(a){var b,c;for(b=0;b<a.length;++b)c=a[b],a[b]=c>>>24|c>>>8&65280|(c&65280)<<8|c<<24;return a}};sjcl2.codec.utf8String={fromBits:function(a){var b="",c=sjcl2.bitArray.bitLength(a),d2,e;for(d2=0;d2<c/8;d2++)0===(d2&3)&&(e=a[d2/4]),b+=String.fromCharCode(e>>>8>>>8>>>8),e<<=8;return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d2=0;for(c=0;c<a.length;c++)d2=d2<<8|a.charCodeAt(c),3===(c&3)&&(b.push(d2),d2=0);c&3&&b.push(sjcl2.bitArray.partial(8*(c&3),d2));return b}};sjcl2.codec.hex={fromBits:function(a){var b="",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl2.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d2;a=a.replace(/\\s|0x/g,"");d2=a.length;a=a+"00000000";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl2.bitArray.clamp(c,4*d2)}};sjcl2.codec.base32={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",X:"0123456789ABCDEFGHIJKLMNOPQRSTUV",BITS:32,BASE:5,REMAINING:27,fromBits:function(a,b,c){var d2=sjcl2.codec.base32.BASE,e=sjcl2.codec.base32.REMAINING,f="",g=0,h=sjcl2.codec.base32.B,k=0,l=sjcl2.bitArray.bitLength(a);c&&(h=sjcl2.codec.base32.X);for(c=0;f.length*d2<l;)f+=h.charAt((k^a[c]>>>g)>>>e),g<d2?(k=a[c]<<d2-g,g+=e,c++):(k<<=d2,g-=d2);for(;f.length&7&&!b;)f+="=";return f},toBits:function(a,b){a=a.replace(/\\s|=/g,"").toUpperCase();var c=sjcl2.codec.base32.BITS,d2=sjcl2.codec.base32.BASE,e=sjcl2.codec.base32.REMAINING,f=[],g,h=0,k=sjcl2.codec.base32.B,l=0,n,m="base32";b&&(k=sjcl2.codec.base32.X,m="base32hex");for(g=0;g<a.length;g++){n=k.indexOf(a.charAt(g));if(0>n){if(!b)try{return sjcl2.codec.base32hex.toBits(a)}catch(p){}throw new sjcl2.exception.invalid("this isn\'t "+m+"!")}h>e?(h-=e,f.push(l^n>>>h),l=n<<c-h):(h+=d2,l^=n<<c-h)}h&56&&f.push(sjcl2.bitArray.partial(h&56,l,1));return f}};sjcl2.codec.base32hex={fromBits:function(a,b){return sjcl2.codec.base32.fromBits(a,b,1)},toBits:function(a){return sjcl2.codec.base32.toBits(a,1)}};sjcl2.codec.base64={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(a,b,c){var d2="",e=0,f=sjcl2.codec.base64.B,g=0,h=sjcl2.bitArray.bitLength(a);c&&(f=f.substr(0,62)+"-_");for(c=0;6*d2.length<h;)d2+=f.charAt((g^a[c]>>>e)>>>26),6>e?(g=a[c]<<6-e,e+=26,c++):(g<<=6,e-=6);for(;d2.length&3&&!b;)d2+="=";return d2},toBits:function(a,b){a=a.replace(/\\s|=/g,"");var c=[],d2,e=0,f=sjcl2.codec.base64.B,g=0,h;b&&(f=f.substr(0,62)+"-_");for(d2=0;d2<a.length;d2++){h=f.indexOf(a.charAt(d2));if(0>h)throw new sjcl2.exception.invalid("this isn\'t base64!");26<e?(e-=26,c.push(g^h>>>e),g=h<<32-e):(e+=6,g^=h<<32-e)}e&56&&c.push(sjcl2.bitArray.partial(e&56,g,1));return c}};sjcl2.codec.base64url={fromBits:function(a){return sjcl2.codec.base64.fromBits(a,1,1)},toBits:function(a){return sjcl2.codec.base64.toBits(a,1)}};sjcl2.hash.sha256=function(a){this.b[0]||this.O();a?(this.F=a.F.slice(0),this.A=a.A.slice(0),this.l=a.l):this.reset()};sjcl2.hash.sha256.hash=function(a){return new sjcl2.hash.sha256().update(a).finalize()};sjcl2.hash.sha256.prototype={blockSize:512,reset:function(){this.F=this.Y.slice(0);this.A=[];this.l=0;return this},update:function(a){"string"===typeof a&&(a=sjcl2.codec.utf8String.toBits(a));var b,c=this.A=sjcl2.bitArray.concat(this.A,a);b=this.l;a=this.l=b+sjcl2.bitArray.bitLength(a);if(9007199254740991<a)throw new sjcl2.exception.invalid("Cannot hash more than 2^53 - 1 bits");if("undefined"!==typeof Uint32Array){var d2=new Uint32Array(c),e=0;for(b=512+b-(512+b&511);b<=a;b+=512)u(this,d2.subarray(16*e,16*(e+1))),e+=1;c.splice(0,16*e)}else for(b=512+b-(512+b&511);b<=a;b+=512)u(this,c.splice(0,16));return this},finalize:function(){var a,b=this.A,c=this.F,b=sjcl2.bitArray.concat(b,[sjcl2.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.l/4294967296));for(b.push(this.l|0);b.length;)u(this,b.splice(0,16));this.reset();return c},Y:[],b:[],O:function(){function a(a2){return 4294967296*(a2-Math.floor(a2))|0}for(var b=0,c=2,d2,e;64>b;c++){e=true;for(d2=2;d2*d2<=c;d2++)if(0===c%d2){e=false;break}e&&(8>b&&(this.Y[b]=a(Math.pow(c,.5))),this.b[b]=a(Math.pow(c,1/3)),b++)}}};function u(a,b){var c,d2,e,f=a.F,g=a.b,h=f[0],k=f[1],l=f[2],n=f[3],m=f[4],p=f[5],r=f[6],q2=f[7];for(c=0;64>c;c++)16>c?d2=b[c]:(d2=b[c+1&15],e=b[c+14&15],d2=b[c&15]=(d2>>>7^d2>>>18^d2>>>3^d2<<25^d2<<14)+(e>>>17^e>>>19^e>>>10^e<<15^e<<13)+b[c&15]+b[c+9&15]|0),d2=d2+q2+(m>>>6^m>>>11^m>>>25^m<<26^m<<21^m<<7)+(r^m&(p^r))+g[c],q2=r,r=p,p=m,m=n+d2|0,n=l,l=k,k=h,h=d2+(k&l^n&(k^l))+(k>>>2^k>>>13^k>>>22^k<<30^k<<19^k<<10)|0;f[0]=f[0]+h|0;f[1]=f[1]+k|0;f[2]=f[2]+l|0;f[3]=f[3]+n|0;f[4]=f[4]+m|0;f[5]=f[5]+p|0;f[6]=f[6]+r|0;f[7]=f[7]+q2|0}sjcl2.mode.ccm={name:"ccm",G:[],listenProgress:function(a){sjcl2.mode.ccm.G.push(a)},unListenProgress:function(a){a=sjcl2.mode.ccm.G.indexOf(a);-1<a&&sjcl2.mode.ccm.G.splice(a,1)},fa:function(a){var b=sjcl2.mode.ccm.G.slice(),c;for(c=0;c<b.length;c+=1)b[c](a)},encrypt:function(a,b,c,d2,e){var f,g=b.slice(0),h=sjcl2.bitArray,k=h.bitLength(c)/8,l=h.bitLength(g)/8;e=e||64;d2=d2||[];if(7>k)throw new sjcl2.exception.invalid("ccm: iv must be at least 7 bytes");for(f=2;4>f&&l>>>8*f;f++);f<15-k&&(f=15-k);c=h.clamp(c,8*(15-f));b=sjcl2.mode.ccm.V(a,b,c,d2,e,f);g=sjcl2.mode.ccm.C(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d2,e){e=e||64;d2=d2||[];var f=sjcl2.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),k=f.clamp(b,h-e),l=f.bitSlice(b,h-e),h=(h-e)/8;if(7>g)throw new sjcl2.exception.invalid("ccm: iv must be at least 7 bytes");for(b=2;4>b&&h>>>8*b;b++);b<15-g&&(b=15-g);c=f.clamp(c,8*(15-b));k=sjcl2.mode.ccm.C(a,k,c,l,e,b);a=sjcl2.mode.ccm.V(a,k.data,c,d2,e,b);if(!f.equal(k.tag,a))throw new sjcl2.exception.corrupt("ccm: tag doesn\'t match");return k.data},na:function(a,b,c,d2,e,f){var g=[],h=sjcl2.bitArray,k=h.i;d2=[h.partial(8,(b.length?64:0)|d2-2<<2|f-1)];d2=h.concat(d2,c);d2[3]|=e;d2=a.encrypt(d2);if(b.length)for(c=h.bitLength(b)/8,65279>=c?g=[h.partial(16,c)]:4294967295>=c&&(g=h.concat([h.partial(16,65534)],[c])),g=h.concat(g,b),b=0;b<g.length;b+=4)d2=a.encrypt(k(d2,g.slice(b,b+4).concat([0,0,0])));return d2},V:function(a,b,c,d2,e,f){var g=sjcl2.bitArray,h=g.i;e/=8;if(e%2||4>e||16<e)throw new sjcl2.exception.invalid("ccm: invalid tag length");if(4294967295<d2.length||4294967295<b.length)throw new sjcl2.exception.bug("ccm: can\'t deal with 4GiB or more data");c=sjcl2.mode.ccm.na(a,d2,c,e,g.bitLength(b)/8,f);for(d2=0;d2<b.length;d2+=4)c=a.encrypt(h(c,b.slice(d2,d2+4).concat([0,0,0])));return g.clamp(c,8*e)},C:function(a,b,c,d2,e,f){var g,h=sjcl2.bitArray;g=h.i;var k=b.length,l=h.bitLength(b),n=k/50,m=n;c=h.concat([h.partial(8,f-1)],c).concat([0,0,0]).slice(0,4);d2=h.bitSlice(g(d2,a.encrypt(c)),0,e);if(!k)return{tag:d2,data:[]};for(g=0;g<k;g+=4)g>n&&(sjcl2.mode.ccm.fa(g/k),n+=m),c[3]++,e=a.encrypt(c),b[g]^=e[0],b[g+1]^=e[1],b[g+2]^=e[2],b[g+3]^=e[3];return{tag:d2,data:h.clamp(b,l)}}};sjcl2.mode.ocb2={name:"ocb2",encrypt:function(a,b,c,d2,e,f){if(128!==sjcl2.bitArray.bitLength(c))throw new sjcl2.exception.invalid("ocb iv must be 128 bits");var g,h=sjcl2.mode.ocb2.S,k=sjcl2.bitArray,l=k.i,n=[0,0,0,0];c=h(a.encrypt(c));var m,p=[];d2=d2||[];e=e||64;for(g=0;g+4<b.length;g+=4)m=b.slice(g,g+4),n=l(n,m),p=p.concat(l(c,a.encrypt(l(c,m)))),c=h(c);m=b.slice(g);b=k.bitLength(m);g=a.encrypt(l(c,[0,0,0,b]));m=k.clamp(l(m.concat([0,0,0]),g),b);n=l(n,l(m.concat([0,0,0]),g));n=a.encrypt(l(n,l(c,h(c))));d2.length&&(n=l(n,f?d2:sjcl2.mode.ocb2.pmac(a,d2)));return p.concat(k.concat(m,k.clamp(n,e)))},decrypt:function(a,b,c,d2,e,f){if(128!==sjcl2.bitArray.bitLength(c))throw new sjcl2.exception.invalid("ocb iv must be 128 bits");e=e||64;var g=sjcl2.mode.ocb2.S,h=sjcl2.bitArray,k=h.i,l=[0,0,0,0],n=g(a.encrypt(c)),m,p,r=sjcl2.bitArray.bitLength(b)-e,q2=[];d2=d2||[];for(c=0;c+4<r/32;c+=4)m=k(n,a.decrypt(k(n,b.slice(c,c+4)))),l=k(l,m),q2=q2.concat(m),n=g(n);p=r-32*c;m=a.encrypt(k(n,[0,0,0,p]));m=k(m,h.clamp(b.slice(c),p).concat([0,0,0]));l=k(l,m);l=a.encrypt(k(l,k(n,g(n))));d2.length&&(l=k(l,f?d2:sjcl2.mode.ocb2.pmac(a,d2)));if(!h.equal(h.clamp(l,e),h.bitSlice(b,r)))throw new sjcl2.exception.corrupt("ocb: tag doesn\'t match");return q2.concat(h.clamp(m,p))},pmac:function(a,b){var c,d2=sjcl2.mode.ocb2.S,e=sjcl2.bitArray,f=e.i,g=[0,0,0,0],h=a.encrypt([0,0,0,0]),h=f(h,d2(d2(h)));for(c=0;c+4<b.length;c+=4)h=d2(h),g=f(g,a.encrypt(f(h,b.slice(c,c+4))));c=b.slice(c);128>e.bitLength(c)&&(h=f(h,d2(h)),c=e.concat(c,[-2147483648,0,0,0]));g=f(g,c);return a.encrypt(f(d2(f(h,d2(h))),g))},S:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^135*(a[0]>>>31)]}};sjcl2.mode.gcm={name:"gcm",encrypt:function(a,b,c,d2,e){var f=b.slice(0);b=sjcl2.bitArray;d2=d2||[];a=sjcl2.mode.gcm.C(true,a,f,d2,c,e||128);return b.concat(a.data,a.tag)},decrypt:function(a,b,c,d2,e){var f=b.slice(0),g=sjcl2.bitArray,h=g.bitLength(f);e=e||128;d2=d2||[];e<=h?(b=g.bitSlice(f,h-e),f=g.bitSlice(f,0,h-e)):(b=f,f=[]);a=sjcl2.mode.gcm.C(false,a,f,d2,c,e);if(!g.equal(a.tag,b))throw new sjcl2.exception.corrupt("gcm: tag doesn\'t match");return a.data},ka:function(a,b){var c,d2,e,f,g,h=sjcl2.bitArray.i;e=[0,0,0,0];f=b.slice(0);for(c=0;128>c;c++){(d2=0!==(a[Math.floor(c/32)]&1<<31-c%32))&&(e=h(e,f));g=0!==(f[3]&1);for(d2=3;0<d2;d2--)f[d2]=f[d2]>>>1|(f[d2-1]&1)<<31;f[0]>>>=1;g&&(f[0]^=-520093696)}return e},j:function(a,b,c){var d2,e=c.length;b=b.slice(0);for(d2=0;d2<e;d2+=4)b[0]^=4294967295&c[d2],b[1]^=4294967295&c[d2+1],b[2]^=4294967295&c[d2+2],b[3]^=4294967295&c[d2+3],b=sjcl2.mode.gcm.ka(b,a);return b},C:function(a,b,c,d2,e,f){var g,h,k,l,n,m,p,r,q2=sjcl2.bitArray;m=c.length;p=q2.bitLength(c);r=q2.bitLength(d2);h=q2.bitLength(e);g=b.encrypt([0,0,0,0]);96===h?(e=e.slice(0),e=q2.concat(e,[1])):(e=sjcl2.mode.gcm.j(g,[0,0,0,0],e),e=sjcl2.mode.gcm.j(g,e,[0,0,Math.floor(h/4294967296),h&4294967295]));h=sjcl2.mode.gcm.j(g,[0,0,0,0],d2);n=e.slice(0);d2=h.slice(0);a||(d2=sjcl2.mode.gcm.j(g,h,c));for(l=0;l<m;l+=4)n[3]++,k=b.encrypt(n),c[l]^=k[0],c[l+1]^=k[1],c[l+2]^=k[2],c[l+3]^=k[3];c=q2.clamp(c,p);a&&(d2=sjcl2.mode.gcm.j(g,h,c));a=[Math.floor(r/4294967296),r&4294967295,Math.floor(p/4294967296),p&4294967295];d2=sjcl2.mode.gcm.j(g,d2,a);k=b.encrypt(e);d2[0]^=k[0];d2[1]^=k[1];d2[2]^=k[2];d2[3]^=k[3];return{tag:q2.bitSlice(d2,0,f),data:c}}};sjcl2.misc.hmac=function(a,b){this.W=b=b||sjcl2.hash.sha256;var c=[[],[]],d2,e=b.prototype.blockSize/32;this.w=[new b,new b];a.length>e&&(a=b.hash(a));for(d2=0;d2<e;d2++)c[0][d2]=a[d2]^909522486,c[1][d2]=a[d2]^1549556828;this.w[0].update(c[0]);this.w[1].update(c[1]);this.R=new b(this.w[0])};sjcl2.misc.hmac.prototype.encrypt=sjcl2.misc.hmac.prototype.mac=function(a){if(this.aa)throw new sjcl2.exception.invalid("encrypt on already updated hmac called!");this.update(a);return this.digest(a)};sjcl2.misc.hmac.prototype.reset=function(){this.R=new this.W(this.w[0]);this.aa=false};sjcl2.misc.hmac.prototype.update=function(a){this.aa=true;this.R.update(a)};sjcl2.misc.hmac.prototype.digest=function(){var a=this.R.finalize(),a=new this.W(this.w[1]).update(a).finalize();this.reset();return a};sjcl2.misc.pbkdf2=function(a,b,c,d2,e){c=c||1e4;if(0>d2||0>c)throw new sjcl2.exception.invalid("invalid params to pbkdf2");"string"===typeof a&&(a=sjcl2.codec.utf8String.toBits(a));"string"===typeof b&&(b=sjcl2.codec.utf8String.toBits(b));e=e||sjcl2.misc.hmac;a=new e(a);var f,g,h,k,l=[],n=sjcl2.bitArray;for(k=1;32*l.length<(d2||1);k++){e=f=a.encrypt(n.concat(b,[k]));for(g=1;g<c;g++)for(f=a.encrypt(f),h=0;h<f.length;h++)e[h]^=f[h];l=l.concat(e)}d2&&(l=n.clamp(l,d2));return l};sjcl2.prng=function(a){this.c=[new sjcl2.hash.sha256];this.m=[0];this.P=0;this.H={};this.N=0;this.U={};this.Z=this.f=this.o=this.ha=0;this.b=[0,0,0,0,0,0,0,0];this.h=[0,0,0,0];this.L=void 0;this.M=a;this.D=false;this.K={progress:{},seeded:{}};this.u=this.ga=0;this.I=1;this.J=2;this.ca=65536;this.T=[0,48,64,96,128,192,256,384,512,768,1024];this.da=3e4;this.ba=80};sjcl2.prng.prototype={randomWords:function(a,b){var c=[],d2;d2=this.isReady(b);var e;if(d2===this.u)throw new sjcl2.exception.notReady("generator isn\'t seeded");if(d2&this.J){d2=!(d2&this.I);e=[];var f=0,g;this.Z=e[0]=new Date().valueOf()+this.da;for(g=0;16>g;g++)e.push(4294967296*Math.random()|0);for(g=0;g<this.c.length&&(e=e.concat(this.c[g].finalize()),f+=this.m[g],this.m[g]=0,d2||!(this.P&1<<g));g++);this.P>=1<<this.c.length&&(this.c.push(new sjcl2.hash.sha256),this.m.push(0));this.f-=f;f>this.o&&(this.o=f);this.P++;this.b=sjcl2.hash.sha256.hash(this.b.concat(e));this.L=new sjcl2.cipher.aes(this.b);for(d2=0;4>d2&&(this.h[d2]=this.h[d2]+1|0,!this.h[d2]);d2++);}for(d2=0;d2<a;d2+=4)0===(d2+1)%this.ca&&y(this),e=z2(this),c.push(e[0],e[1],e[2],e[3]);y(this);return c.slice(0,a)},setDefaultParanoia:function(a,b){if(0===a&&"Setting paranoia=0 will ruin your security; use it only for testing"!==b)throw new sjcl2.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");this.M=a},addEntropy:function(a,b,c){c=c||"user";var d2,e,f=new Date().valueOf(),g=this.H[c],h=this.isReady(),k=0;d2=this.U[c];void 0===d2&&(d2=this.U[c]=this.ha++);void 0===g&&(g=this.H[c]=0);this.H[c]=(this.H[c]+1)%this.c.length;switch(typeof a){case"number":void 0===b&&(b=1);this.c[g].update([d2,this.N++,1,b,f,1,a|0]);break;case"object":c=Object.prototype.toString.call(a);if("[object Uint32Array]"===c){e=[];for(c=0;c<a.length;c++)e.push(a[c]);a=e}else for("[object Array]"!==c&&(k=1),c=0;c<a.length&&!k;c++)"number"!==typeof a[c]&&(k=1);if(!k){if(void 0===b)for(c=b=0;c<a.length;c++)for(e=a[c];0<e;)b++,e=e>>>1;this.c[g].update([d2,this.N++,2,b,f,a.length].concat(a))}break;case"string":void 0===b&&(b=a.length);this.c[g].update([d2,this.N++,3,b,f,a.length]);this.c[g].update(a);break;default:k=1}if(k)throw new sjcl2.exception.bug("random: addEntropy only supports number, array of numbers or string");this.m[g]+=b;this.f+=b;h===this.u&&(this.isReady()!==this.u&&A("seeded",Math.max(this.o,this.f)),A("progress",this.getProgress()))},isReady:function(a){a=this.T[void 0!==a?a:this.M];return this.o&&this.o>=a?this.m[0]>this.ba&&new Date().valueOf()>this.Z?this.J|this.I:this.I:this.f>=a?this.J|this.u:this.u},getProgress:function(a){a=this.T[a?a:this.M];return this.o>=a?1:this.f>a?1:this.f/a},startCollectors:function(){if(!this.D){this.a={loadTimeCollector:B(this,this.ma),mouseCollector:B(this,this.oa),keyboardCollector:B(this,this.la),accelerometerCollector:B(this,this.ea),touchCollector:B(this,this.qa)};if(window.addEventListener)window.addEventListener("load",this.a.loadTimeCollector,false),window.addEventListener("mousemove",this.a.mouseCollector,false),window.addEventListener("keypress",this.a.keyboardCollector,false),window.addEventListener("devicemotion",this.a.accelerometerCollector,false),window.addEventListener("touchmove",this.a.touchCollector,false);else if(document.attachEvent)document.attachEvent("onload",this.a.loadTimeCollector),document.attachEvent("onmousemove",this.a.mouseCollector),document.attachEvent("keypress",this.a.keyboardCollector);else throw new sjcl2.exception.bug("can\'t attach event");this.D=true}},stopCollectors:function(){this.D&&(window.removeEventListener?(window.removeEventListener("load",this.a.loadTimeCollector,false),window.removeEventListener("mousemove",this.a.mouseCollector,false),window.removeEventListener("keypress",this.a.keyboardCollector,false),window.removeEventListener("devicemotion",this.a.accelerometerCollector,false),window.removeEventListener("touchmove",this.a.touchCollector,false)):document.detachEvent&&(document.detachEvent("onload",this.a.loadTimeCollector),document.detachEvent("onmousemove",this.a.mouseCollector),document.detachEvent("keypress",this.a.keyboardCollector)),this.D=false)},addEventListener:function(a,b){this.K[a][this.ga++]=b},removeEventListener:function(a,b){var c,d2,e=this.K[a],f=[];for(d2 in e)e.hasOwnProperty(d2)&&e[d2]===b&&f.push(d2);for(c=0;c<f.length;c++)d2=f[c],delete e[d2]},la:function(){C(this,1)},oa:function(a){var b,c;try{b=a.x||a.clientX||a.offsetX||0,c=a.y||a.clientY||a.offsetY||0}catch(d2){c=b=0}0!=b&&0!=c&&this.addEntropy([b,c],2,"mouse");C(this,0)},qa:function(a){a=a.touches[0]||a.changedTouches[0];this.addEntropy([a.pageX||a.clientX,a.pageY||a.clientY],1,"touch");C(this,0)},ma:function(){C(this,2)},ea:function(a){a=a.accelerationIncludingGravity.x||a.accelerationIncludingGravity.y||a.accelerationIncludingGravity.z;if(window.orientation){var b=window.orientation;"number"===typeof b&&this.addEntropy(b,1,"accelerometer")}a&&this.addEntropy(a,2,"accelerometer");C(this,0)}};function A(a,b){var c,d2=sjcl2.random.K[a],e=[];for(c in d2)d2.hasOwnProperty(c)&&e.push(d2[c]);for(c=0;c<e.length;c++)e[c](b)}function C(a,b){"undefined"!==typeof window&&window.performance&&"function"===typeof window.performance.now?a.addEntropy(window.performance.now(),b,"loadtime"):a.addEntropy(new Date().valueOf(),b,"loadtime")}function y(a){a.b=z2(a).concat(z2(a));a.L=new sjcl2.cipher.aes(a.b)}function z2(a){for(var b=0;4>b&&(a.h[b]=a.h[b]+1|0,!a.h[b]);b++);return a.L.encrypt(a.h)}function B(a,b){return function(){b.apply(a,arguments)}}sjcl2.random=new sjcl2.prng(6);a:try{if(G="undefined"!==typeof module&&module.exports){try{H2=__require2("crypto")}catch(a){H2=null}G=E=H2}if(G&&E.randomBytes)D2=E.randomBytes(128),D2=new Uint32Array(new Uint8Array(D2).buffer),sjcl2.random.addEntropy(D2,1024,"crypto[\'randomBytes\']");else if("undefined"!==typeof window&&"undefined"!==typeof Uint32Array){F2=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(F2);else if(window.msCrypto&&window.msCrypto.getRandomValues)window.msCrypto.getRandomValues(F2);else break a;sjcl2.random.addEntropy(F2,1024,"crypto[\'getRandomValues\']")}}catch(a){"undefined"!==typeof window&&window.console&&(console.log("There was an error collecting entropy from the browser:"),console.log(a))}var D2;var E;var F2;var G;var H2;sjcl2.json={defaults:{v:1,iter:1e4,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},ja:function(a,b,c,d2){c=c||{};d2=d2||{};var e=sjcl2.json,f=e.g({iv:sjcl2.random.randomWords(4,0)},e.defaults),g;e.g(f,c);c=f.adata;"string"===typeof f.salt&&(f.salt=sjcl2.codec.base64.toBits(f.salt));"string"===typeof f.iv&&(f.iv=sjcl2.codec.base64.toBits(f.iv));if(!sjcl2.mode[f.mode]||!sjcl2.cipher[f.cipher]||"string"===typeof a&&100>=f.iter||64!==f.ts&&96!==f.ts&&128!==f.ts||128!==f.ks&&192!==f.ks&&256!==f.ks||2>f.iv.length||4<f.iv.length)throw new sjcl2.exception.invalid("json encrypt: invalid parameters");"string"===typeof a?(g=sjcl2.misc.cachedPbkdf2(a,f),a=g.key.slice(0,f.ks/32),f.salt=g.salt):sjcl2.ecc&&a instanceof sjcl2.ecc.elGamal.publicKey&&(g=a.kem(),f.kemtag=g.tag,a=g.key.slice(0,f.ks/32));"string"===typeof b&&(b=sjcl2.codec.utf8String.toBits(b));"string"===typeof c&&(f.adata=c=sjcl2.codec.utf8String.toBits(c));g=new sjcl2.cipher[f.cipher](a);e.g(d2,f);d2.key=a;f.ct="ccm"===f.mode&&sjcl2.arrayBuffer&&sjcl2.arrayBuffer.ccm&&b instanceof ArrayBuffer?sjcl2.arrayBuffer.ccm.encrypt(g,b,f.iv,c,f.ts):sjcl2.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return f},encrypt:function(a,b,c,d2){var e=sjcl2.json,f=e.ja.apply(e,arguments);return e.encode(f)},ia:function(a,b,c,d2){c=c||{};d2=d2||{};var e=sjcl2.json;b=e.g(e.g(e.g({},e.defaults),b),c,true);var f,g;f=b.adata;"string"===typeof b.salt&&(b.salt=sjcl2.codec.base64.toBits(b.salt));"string"===typeof b.iv&&(b.iv=sjcl2.codec.base64.toBits(b.iv));if(!sjcl2.mode[b.mode]||!sjcl2.cipher[b.cipher]||"string"===typeof a&&100>=b.iter||64!==b.ts&&96!==b.ts&&128!==b.ts||128!==b.ks&&192!==b.ks&&256!==b.ks||!b.iv||2>b.iv.length||4<b.iv.length)throw new sjcl2.exception.invalid("json decrypt: invalid parameters");"string"===typeof a?(g=sjcl2.misc.cachedPbkdf2(a,b),a=g.key.slice(0,b.ks/32),b.salt=g.salt):sjcl2.ecc&&a instanceof sjcl2.ecc.elGamal.secretKey&&(a=a.unkem(sjcl2.codec.base64.toBits(b.kemtag)).slice(0,b.ks/32));"string"===typeof f&&(f=sjcl2.codec.utf8String.toBits(f));g=new sjcl2.cipher[b.cipher](a);f="ccm"===b.mode&&sjcl2.arrayBuffer&&sjcl2.arrayBuffer.ccm&&b.ct instanceof ArrayBuffer?sjcl2.arrayBuffer.ccm.decrypt(g,b.ct,b.iv,b.tag,f,b.ts):sjcl2.mode[b.mode].decrypt(g,b.ct,b.iv,f,b.ts);e.g(d2,b);d2.key=a;return 1===c.raw?f:sjcl2.codec.utf8String.fromBits(f)},decrypt:function(a,b,c,d2){var e=sjcl2.json;return e.ia(a,e.decode(b),c,d2)},encode:function(a){var b,c="{",d2="";for(b in a)if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i))throw new sjcl2.exception.invalid("json encode: invalid property name");c+=d2+\'"\'+b+\'":\';d2=",";switch(typeof a[b]){case"number":case"boolean":c+=a[b];break;case"string":c+=\'"\'+escape(a[b])+\'"\';break;case"object":c+=\'"\'+sjcl2.codec.base64.fromBits(a[b],0)+\'"\';break;default:throw new sjcl2.exception.bug("json encode: unsupported type")}}return c+"}"},decode:function(a){a=a.replace(/\\s/g,"");if(!a.match(/^\\{.*\\}$/))throw new sjcl2.exception.invalid("json decode: this isn\'t json!");a=a.replace(/^\\{|\\}$/g,"").split(/,/);var b={},c,d2;for(c=0;c<a.length;c++){if(!(d2=a[c].match(/^\\s*(?:(["\']?)([a-z][a-z0-9]*)\\1)\\s*:\\s*(?:(-?\\d+)|"([a-z0-9+\\/%*_.@=\\-]*)"|(true|false))$/i)))throw new sjcl2.exception.invalid("json decode: this isn\'t json!");null!=d2[3]?b[d2[2]]=parseInt(d2[3],10):null!=d2[4]?b[d2[2]]=d2[2].match(/^(ct|adata|salt|iv)$/)?sjcl2.codec.base64.toBits(d2[4]):unescape(d2[4]):null!=d2[5]&&(b[d2[2]]="true"===d2[5])}return b},g:function(a,b,c){void 0===a&&(a={});if(void 0===b)return a;for(var d2 in b)if(b.hasOwnProperty(d2)){if(c&&void 0!==a[d2]&&a[d2]!==b[d2])throw new sjcl2.exception.invalid("required parameter overridden");a[d2]=b[d2]}return a},sa:function(a,b){var c={},d2;for(d2 in a)a.hasOwnProperty(d2)&&a[d2]!==b[d2]&&(c[d2]=a[d2]);return c},ra:function(a,b){var c={},d2;for(d2=0;d2<b.length;d2++)void 0!==a[b[d2]]&&(c[b[d2]]=a[b[d2]]);return c}};sjcl2.encrypt=sjcl2.json.encrypt;sjcl2.decrypt=sjcl2.json.decrypt;sjcl2.misc.pa={};sjcl2.misc.cachedPbkdf2=function(a,b){var c=sjcl2.misc.pa,d2;b=b||{};d2=b.iter||1e3;c=c[a]=c[a]||{};d2=c[d2]=c[d2]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl2.random.randomWords(2,0)};c=void 0===b.salt?d2.firstSalt:b.salt;d2[c]=d2[c]||sjcl2.misc.pbkdf2(a,c,b.iter);return{key:d2[c].slice(0),salt:c.slice(0)}};"undefined"!==typeof module&&module.exports&&(module.exports=sjcl2);"function"===typeof define&&define([],function(){return sjcl2})}});var require_browser=__commonJS({"node_modules/web-worker/cjs/browser.js"(exports,module){module.exports=Worker}});function parseFunctionFromText(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(newFuncHead+newFuncBody+"}")}catch{}}}return newFunc}var EventHandler=class{constructor(){this.pushToState={};this.data={};this.triggers={};this.setState=updateObj=>{Object.assign(this.data,updateObj);for(const prop of Object.getOwnPropertyNames(updateObj)){if(this.triggers[prop])this.triggers[prop].forEach(obj=>obj.onchange(this.data[prop]))}return this.data};this.subscribeTrigger=(key,onchange)=>{if(key){if(!this.triggers[key]){this.triggers[key]=[]}let l=this.triggers[key].length;this.triggers[key].push({idx:l,onchange});return this.triggers[key].length-1}else return void 0};this.unsubscribeTrigger=(key,sub)=>{let triggers=this.triggers[key];if(triggers){if(!sub)delete this.triggers[key];else{let idx=void 0;let obj=triggers.find((o,i)=>{if(o.idx===sub){idx=i;return true}});if(obj)triggers.splice(idx,1);return true}}};this.subscribeTriggerOnce=(key,onchange)=>{let sub;let changed=value=>{onchange(value);this.unsubscribeTrigger(key,sub)};sub=this.subscribeTrigger(key,changed)}}};var state=new EventHandler;function addLocalState(props){if(!this._state)this._state={};for(let k in props){if(k==="_state"||k==="graph")continue;else{this._state[k]=props[k];if(k in this)this[k]=props[k];else Object.defineProperty(this,k,{get:()=>{this._state[k]},set:v=>{this._state[k]=v;if(this.state.triggers[this._unique])this.setState({[this._unique]:this._state})},enumerable:true,configurable:true})}}}var GraphNode=class{constructor(properties={},parent,graph){this.nodes=new Map;this._initial={};this._unique=`${Math.random()}`;this.state=state;this.isLooping=false;this.isAnimating=false;this.looper=void 0;this.animation=void 0;this.forward=true;this.backward=false;this.reactive=false;this.runSync=false;this.firstRun=true;this.DEBUGNODE=false;this.addLocalState=addLocalState;this.operator=(...args)=>{return args};this.runOp=(...args)=>{if(this.DEBUGNODE)console.time(this.tag);let result=this.operator(...args);if(result instanceof Promise){result.then(res=>{if(res!==void 0)this.setState({[this.tag]:res});if(this.DEBUGNODE){console.timeEnd(this.tag);if(result!==void 0)console.log(`${this.tag} result:`,result)};return res})}else{if(result!==void 0)this.setState({[this.tag]:result});if(this.DEBUGNODE){console.timeEnd(this.tag);if(result!==void 0)console.log(`${this.tag} result:`,result)};}return result};this.setOperator=operator=>{if(typeof operator!=="function")return operator;this.operator=operator.bind(this);return operator};this.runAsync=(...args)=>{return new Promise((res,rej)=>{res(this.run(...args))})};this.transformArgs=(args=[])=>args;this.isRunSync=()=>{return!(this.children&&this.forward||this.parent&&this.backward||this.repeat||this.delay||this.frame||this.recursive||this.branch)};this.run=(...args)=>{if(typeof this.transformArgs==="function")args=this.transformArgs(args,this);if(this.firstRun){this.firstRun=false;this.runSync=this.isRunSync();if(this.animate&&!this.isAnimating){this.runAnimation(this.animation,args)}if(this.loop&&typeof this.loop==="number"&&!this.isLooping){this.runLoop(this.looper,args)}if(this.loop||this.animate)return}if(this.runSync){let res=this.runOp(...args);return res}return new Promise(async resolve=>{if(this){let run=(node,tick=0,...input)=>{return new Promise(async r=>{tick++;let res=await node.runOp(...input);if(node.repeat){while(tick<node.repeat){if(node.delay){setTimeout(async()=>{r(await run(node,tick,...input))},node.delay);break}else if(node.frame&&window?.requestAnimationFrame){requestAnimationFrame(async()=>{r(await run(node,tick,...input))});break}else res=await node.runOp(...input);tick++}if(tick===node.repeat){r(res);return}}else if(node.recursive){while(tick<node.recursive){if(node.delay){setTimeout(async()=>{r(await run(node,tick,...res))},node.delay);break}else if(node.frame&&window?.requestAnimationFrame){requestAnimationFrame(async()=>{r(await run(node,tick,...res))});break}else res=await node.runOp(...res);tick++}if(tick===node.recursive){r(res);return}}else{r(res);return}})};let runnode=async()=>{let res=await run(this,void 0,...args);if(res!==void 0){if(this.backward&&this.parent instanceof GraphNode){if(Array.isArray(res))await this.runParent(this,...res);else await this.runParent(this,res)}if(this.children&&this.forward){if(Array.isArray(res))await this.runChildren(this,...res);else await this.runChildren(this,res)}if(this.branch){this.runBranch(this,res)}}return res};if(this.delay){setTimeout(async()=>{resolve(await runnode())},this.delay)}else if(this.frame&&window?.requestAnimationFrame){requestAnimationFrame(async()=>{resolve(await runnode())})}else{resolve(await runnode())}}else resolve(void 0)})};this.runParent=async(n,...args)=>{if(n.backward&&n.parent){if(typeof n.parent==="string"){if(n.graph&&n.graph?.get(n.parent)){n.parent=n.graph;if(n.parent)this.nodes.set(n.parent.tag,n.parent)}else n.parent=this.nodes.get(n.parent)}if(n.parent instanceof GraphNode)await n.parent.run(...args)}};this.runChildren=async(n,...args)=>{if(typeof n.children==="object"){for(const key in n.children){if(typeof n.children[key]==="string"){if(n.graph&&n.graph?.get(n.children[key])){n.children[key]=n.graph.get(n.children[key]);if(!n.nodes.get(n.children[key].tag))n.nodes.set(n.children[key].tag,n.children[key])}if(!n.children[key]&&n.nodes.get(n.children[key]))n.children[key]=n.nodes.get(n.children[key])}else if(typeof n.children[key]==="undefined"||n.children[key]===true){if(n.graph&&n.graph?.get(key)){n.children[key]=n.graph.get(key);if(!n.nodes.get(n.children[key].tag))n.nodes.set(n.children[key].tag,n.children[key])}if(!n.children[key]&&n.nodes.get(key))n.children[key]=n.nodes.get(key)}if(n.children[key]?.runOp)await n.children[key].run(...args)}}};this.runBranch=async(n,output)=>{if(n.branch){let keys=Object.keys(n.branch);await Promise.all(keys.map(async k=>{if(typeof n.branch[k].if==="object")n.branch[k].if=stringifyFast(n.branch[k].if);let pass=false;if(typeof n.branch[k].if==="function"){pass=n.branch[k].if(output)}else{if(typeof output==="object"){if(stringifyFast(output)===n.branch[k].if)pass=true}else if(output===n.branch[k].if)pass=true}if(pass){if(n.branch[k].then.run){if(Array.isArray(output))await n.branch[k].then.run(...output);else await n.branch[k].then.run(...output)}else if(typeof n.branch[k].then==="function"){if(Array.isArray(output))await n.branch[k].then(...output);else await n.branch[k].then(output)}else if(typeof n.branch[k].then==="string"){if(n.graph)n.branch[k].then=n.graph.nodes.get(n.branch[k].then);else n.branch[k].then=n.nodes.get(n.branch[k].then);if(n.branch[k].then.run){if(Array.isArray(output))await n.branch[k].then.run(...output);else await n.branch[k].then.run(...output)}}}return pass}))}};this.runAnimation=(animation=this.animation,args=[])=>{this.animation=animation;if(!animation)this.animation=this.operator;if(this.animate&&!this.isAnimating&&"requestAnimationFrame"in window){this.isAnimating=true;let anim=async()=>{if(this.isAnimating){if(this.DEBUGNODE)console.time(this.tag);let result=this.animation.call(this,...args);if(result instanceof Promise){result=await result}if(this.DEBUGNODE){console.timeEnd(this.tag);if(result!==void 0)console.log(`${this.tag} result:`,result)};if(result!==void 0){if(this.tag)this.setState({[this.tag]:result});if(this.backward&&this.parent?.run){if(Array.isArray(result))await this.runParent(this,...result);else await this.runParent(this,result)}if(this.children&&this.forward){if(Array.isArray(result))await this.runChildren(this,...result);else await this.runChildren(this,result)}if(this.branch){this.runBranch(this,result)}this.setState({[this.tag]:result})}requestAnimationFrame(anim)}};requestAnimationFrame(anim)}};this.runLoop=(loop=this.looper,args=[],timeout=this.loop)=>{this.looper=loop;if(!loop)this.looper=this.operator;if(typeof timeout==="number"&&!this.isLooping){this.isLooping=true;let looping=async()=>{if(this.isLooping){if(this.DEBUGNODE)console.time(this.tag);let result=this.looper.call(this,...args);if(result instanceof Promise){result=await result}if(this.DEBUGNODE){console.timeEnd(this.tag);if(result!==void 0)console.log(`${this.tag} result:`,result)};if(result!==void 0){if(this.tag)this.setState({[this.tag]:result});if(this.backward&&this.parent?.run){if(Array.isArray(result))await this.runParent(this,...result);else await this.runParent(this,result)}if(this.children&&this.forward){if(Array.isArray(result))await this.runChildren(this,...result);else await this.runChildren(this,result)}if(this.branch){this.runBranch(this,result)}this.setState({[this.tag]:result})}setTimeout(async()=>{await looping()},timeout)}};looping()}};this.setParent=parent2=>{this.parent=parent2;if(this.backward)this.runSync=false};this.setChildren=children=>{this.children=children;if(this.forward)this.runSync=false};this.add=(n={})=>{if(typeof n==="function")n={operator:n};if(n?.node instanceof GraphNode)n=n.node;if(!(n instanceof GraphNode))n=new GraphNode(n.node??n,this,this.graph);this.nodes.set(n.tag,n);if(this.graph){this.graph.nodes.set(n.tag,n);this.graph.nNodes=this.graph.nodes.size}return n};this.remove=n=>{if(typeof n==="string")n=this.nodes.get(n);if(n?.tag){this.nodes.delete(n.tag);if(this.children[n.tag])delete this.children[n.tag];if(this.graph){this.graph.nodes.delete(n.tag);this.graph.nNodes=this.graph.nodes.size}this.nodes.forEach(n2=>{if(n2.nodes.get(n2.tag)){n2.nodes.delete(n2.tag);if(n2.children[n2.tag])delete n2.children[n2.tag];if(n2.parent?.tag===n2.tag)delete n2.parent}});if(n.ondelete)n.ondelete(n)}if(typeof this._state==="object"){this.state.unsubscribeTrigger(this._unique)}};this.append=(n,parentNode=this)=>{if(typeof n==="string")n=this.nodes.get(n);if(n?.nodes){parentNode.addChildren(n);if(n.forward)n.runSync=false}};this.subscribe=(callback,tag=this.tag)=>{if(typeof callback==="string"){if(this.graph)callback=this.graph.get(callback);else callback=this.nodes.get(callback)}if(typeof callback==="function"){return this.state.subscribeTrigger(tag,callback)}else if(callback)return this.state.subscribeTrigger(tag,res=>{callback.run(res)})};this.unsubscribe=(sub,tag=this.tag)=>{return this.state.unsubscribeTrigger(tag,sub)};this.subscribeState=callback=>{if(!this.reactive){return void 0}else{if(typeof callback==="string"){if(this.graph)callback=this.graph.get(callback);else callback=this.nodes.get(callback)}if(typeof callback==="function"){return this.state.subscribeTrigger(this._unique,callback)}else if(callback)return this.state.subscribeTrigger(this._unique,_state=>{callback.run(_state)})}};this.addChildren=children=>{if(!this.children)this.children={};if(typeof children==="object"){Object.assign(this.children,children)}this.convertChildrenToNodes();if(this.forward)this.runSync=false};this.callParent=(...args)=>{if(typeof this.parent==="string"){if(this.graph&&this.graph?.get(this.parent)){this.parent=this.graph;if(this.parent)this.nodes.set(this.parent.tag,this.parent)}else this.parent=this.nodes.get(this.parent)}if(typeof this.parent?.operator==="function")return this.parent.runOp(...args)};this.callChildren=(...args)=>{let result;if(typeof this.children==="object"){for(const key in this.children){if(this.children[key]?.runOp)this.children[key].runOp(...args)}}return result};this.getProps=(n=this,getInitial=true)=>{let baseprops={tag:n.tag,operator:n.operator,graph:n.graph,children:n.children,parent:n.parent,forward:n.forward,backward:n.bacward,loop:n.loop,animate:n.animate,frame:n.frame,delay:n.delay,recursive:n.recursive,repeat:n.repeat,branch:n.branch,oncreate:n.oncreate,reactive:n.reactive,DEBUGNODE:n.DEBUGNODE};if(!getInitial){let uniqueprops={};for(const key in this._initial){uniqueprops[key]=this[key]}return Object.assign(baseprops,uniqueprops)}else return{tag:n.tag,operator:n.operator,graph:n.graph,children:n.children,parent:n.parent,forward:n.forward,backward:n.bacward,loop:n.loop,animate:n.animate,frame:n.frame,delay:n.delay,recursive:n.recursive,repeat:n.repeat,branch:n.branch,oncreate:n.oncreate,reactive:n.reactive,DEBUGNODE:n.DEBUGNODE,...this._initial}};this.setProps=(props={})=>{let tmp=Object.assign({},props);if(tmp.children){this.addChildren(props.children);delete tmp.children}if(tmp.operator){this.setOperator(props.operator);delete tmp.operator}Object.assign(tmp,props);this.runSync=this.isRunSync()};this.removeTree=n=>{if(n){if(typeof n==="string")n=this.nodes.get(n)}if(n?.nodes){let checked={};const recursivelyRemove=node=>{if(typeof node.children==="object"&&!checked[node.tag]){checked[node.tag]=true;for(const key in node.children){if(node.children[key].stopNode)node.children[key].stopNode();if(node.children[key].tag){if(this.nodes.get(node.children[key].tag))this.nodes.delete(node.children[key].tag);this.nodes.forEach(n2=>{if(n2.nodes.get(node.children[key].tag))n2.nodes.delete(node.children[key].tag);if(n2.children?.[key]instanceof GraphNode)delete n2.children[key]});if(node.children[key].ondelete&&!this.graph)node.children[key].ondelete(node.children[key]);recursivelyRemove(node.children[key])}}}};if(n.stopNode)n.stopNode();if(n.tag){this.nodes.delete(n.tag);if(this.children?.[n.tag])delete this.children[n.tag];if(this.parent?.tag===n.tag)delete this.parent;if(this[n.tag]instanceof GraphNode)delete this[n.tag];this.nodes.forEach(n2=>{if(n2?.tag){if(n2.nodes.get(n2.tag))n2.nodes.delete(n2.tag);if(n2.children?.[n2.tag]instanceof GraphNode)delete n2.children[n2.tag]}});recursivelyRemove(n);if(this.graph)this.graph.removeTree(n,checked);else if(n.ondelete)n.ondelete(n)}}};this.checkNodesHaveChildMapped=(n,child,checked={})=>{let tag=n.tag;if(!tag)tag=n.name;if(!checked[tag]){checked[tag]=true;if(n.children){if(child.tag in n.children){if(n.children[child.tag]instanceof GraphNode){if(!n.nodes.get(child.tag))n.nodes.set(child.tag,child);n.children[child.tag]=child;if(!n.firstRun)n.firstRun=true}}}if(n.parent instanceof GraphNode){if(n.nodes.get(child.tag))n.parent.nodes.set(child.tag,child);if(n.parent.children){this.checkNodesHaveChildMapped(n.parent,child,checked)}else if(n.nodes){n.nodes.forEach(n2=>{if(!checked[n2.tag]){this.checkNodesHaveChildMapped(n2,child,checked)}})}}if(n.graph){if(n.parent&&n.parent.name!==n.graph.name){n.graph.nodes.forEach(n2=>{if(!checked[n2.tag]){this.checkNodesHaveChildMapped(n2,child,checked)}})}}}};this.convertChildrenToNodes=(n=this)=>{if(n?.children){for(const key in n.children){if(!(n.children[key]instanceof GraphNode)){if(typeof n.children[key]==="object"){if(!n.children[key].tag)n.children[key].tag=key;if(!n.nodes.get(n.children[key].tag)){n.children[key]=new GraphNode(n.children[key],n,n.graph);this.checkNodesHaveChildMapped(n,n.children[key])}}else{if(typeof n.children[key]==="undefined"||n.children[key]==true){n.children[key]=n.graph.get(key);if(!n.children[key])n.children[key]=n.nodes.get(key)}else if(typeof n.children[key]==="string"){let k=n.children[key];n.children[key]=n.graph.get(k);if(!n.children[key])n.children[key]=n.nodes.get(key)}if(n.children[key]instanceof GraphNode){n.nodes.set(n.children[key].tag,n.children[key]);this.checkNodesHaveChildMapped(n,n.children[key]);if(!(n.children[key].tag in n))n[n.children[key].tag]=n.children[key]}}}}}return n.children};this.stopLooping=(n=this)=>{n.isLooping=false};this.stopAnimating=(n=this)=>{n.isAnimating=false};this.stopNode=(n=this)=>{n.stopAnimating(n);n.stopLooping(n)};this.subscribeNode=n=>{if(typeof n==="string")n=this.nodes.get(n);if(n.tag)this.nodes.set(n.tag,n);if(n)return this.state.subscribeTrigger(this.tag,res=>{if(Array.isArray(res))n.run(...res);else n.run(res)})};this.print=(n=this,printChildren=true,nodesPrinted=[])=>{let dummyNode=new GraphNode;if(typeof n==="string")n=this.nodes.get(n);if(n instanceof GraphNode){nodesPrinted.push(n.tag);let jsonToPrint={tag:n.tag,operator:n.operator.toString()};if(n.parent)jsonToPrint.parent=n.parent.tag;if(typeof n.children==="object"){for(const key in n.children){if(typeof n.children[key]==="string")return n.children[key];if(nodesPrinted.includes(n.children[key].tag))return n.children[key].tag;else if(!printChildren){return n.children[key].tag}else return n.children[key].print(n.children[key],printChildren,nodesPrinted)}}for(const prop in n){if(prop==="parent"||prop==="children")continue;if(typeof dummyNode[prop]==="undefined"){if(typeof n[prop]==="function"){jsonToPrint[prop]=n[prop].toString()}else if(typeof n[prop]==="object"){jsonToPrint[prop]=JSON.stringifyWithCircularRefs(n[prop])}else{jsonToPrint[prop]=n[prop]}}}return JSON.stringify(jsonToPrint)}};this.reconstruct=json=>{let parsed=reconstructObject(json);if(parsed)return this.add(parsed)};this.setState=data=>{this.state.setState(data)};this.DEBUGNODES=(debugging=true)=>{this.DEBUGNODE=debugging;this.nodes.forEach(n=>{if(debugging)n.DEBUGNODE=true;else n.DEBUGNODE=false})};if(typeof properties==="function"){properties={operator:properties}}if(typeof properties==="object"){if(properties instanceof GraphNode&&properties._initial)Object.assign(properties,properties._initial);if(properties instanceof Graph){let source=properties;properties={source,operator:input=>{if(typeof input==="object"){let result={};for(const key in input){if(typeof source[key]==="function"){if(Array.isArray(input[key]))result[key]=source[key](...input[key]);else result[key]=source[key](input[key])}else{source[key]=input[key];result[key]=source[key]}}return result}return source}};if(source.operator)properties.operator=source.operator;if(source.children)properties.children=source.children;if(source.forward)properties.forward=source.forward;if(source.backward)properties.backward=source.backward;if(source.repeat)properties.repeat=source.repeat;if(source.recursive)properties.recursive=source.recursive;if(source.loop)properties.loop=source.loop;if(source.animate)properties.animate=source.animate;if(source.looper)properties.looper=source.looper;if(source.animation)properties.animation=source.animation;if(source.delay)properties.delay=source.delay;if(source.oncreate)properties.oncreate=source.oncreate;if(source.node){if(source.node._initial)Object.assign(properties,source.node._initial)}if(source._initial)Object.assign(properties,source._initial);if(source.tag)properties.tag=source.tag;this.nodes=source.nodes;source.node=this;if(graph){source.nodes.forEach(n=>{if(!graph.nodes.get(n.tag)){graph.nodes.set(n.tag,n);graph.nNodes++}})}}if(typeof parent==="string"){if(graph)parent=graph.nodes.get(parent);else parent=void 0}if(properties.tag&&(graph||parent)){let hasnode;if(graph?.nodes){hasnode=graph.nodes.get(properties.tag)}if(!hasnode&&parent?.nodes){hasnode=parent.nodes.get(properties.tag)}if(hasnode){if(this.reactive){this.addLocalState(hasnode)}if(!this.source)this.source=hasnode;let props=hasnode.getProps();delete props.graph;delete props.parent;for(let k in props){const desc=Object.getOwnPropertyDescriptor(properties,k);if(desc&&desc.get&&!desc.set)properties=Object.assign({},properties);else properties[k]=props[k]}}}if(properties?.operator){properties.operator=this.setOperator(properties.operator)}if(!properties.tag&&graph){properties.tag=`node${graph.nNodes}`}else if(!properties.tag){properties.tag=`node${Math.floor(Math.random()*1e10)}`}let keys=Object.getOwnPropertyNames(this);for(const key in properties){if(!keys.includes(key))this._initial[key]=properties[key]}if(properties.children)this._initial.children=Object.assign({},properties.children);Object.assign(this,properties);if(!this.tag){if(graph){this.tag=`node${graph.nNodes}`}else{this.tag=`node${Math.floor(Math.random()*1e10)}`}}if(graph){this.graph=graph;if(graph.nodes.get(this.tag)){this.tag=`${this.tag}${graph.nNodes+1}`}graph.nodes.set(this.tag,this);graph.nNodes++;this.state=graph.state}if(this.reactive){addLocalState(properties);if(typeof this.reactive==="function"){this.state.subscribeTrigger(this._unique,this.reactive)}}if(typeof parent==="object"){this.parent=parent;if(parent instanceof GraphNode||parent instanceof Graph)parent.nodes.set(this.tag,this)}if(typeof properties.tree==="object"){for(const key in properties.tree){if(typeof properties.tree[key]==="object"){if((!properties.tree[key]).tag){properties.tree[key].tag=key}}let node=new GraphNode(properties.tree[key],this,graph);this.nodes.set(node.tag,node)}}if(this.children)this.convertChildrenToNodes(this);if(this.parent instanceof GraphNode||this.parent instanceof Graph)this.checkNodesHaveChildMapped(this.parent,this);if(typeof this.oncreate==="function")this.oncreate(this);if(!this.firstRun)this.firstRun=true;if(this.animation&&!this.animate)this.animate=true}else return properties}};var Graph=class{constructor(tree,tag,props){this.nNodes=0;this.nodes=new Map;this.state=new EventHandler;this._unique=`${Math.random()}`;this.tree={};this.addLocalState=addLocalState;this.add=(n={})=>{if(n?.node instanceof GraphNode)n=n.node;let props2=n;if(!(n instanceof GraphNode))n=new GraphNode(props2?.node??props2,this,this);else{this.nNodes=this.nodes.size;if(n.tag){this.tree[n.tag]=props2;this.nodes.set(n.tag,n)}}return n};this.setTree=(tree2=this.tree)=>{if(!tree2)return;for(const node in tree2){const n=this.nodes.get(node);if(!n){if(typeof tree2[node]==="function"){this.add({tag:node,operator:tree2[node]})}else if(typeof tree2[node]==="object"&&!Array.isArray(tree2[node])){if(!tree2[node].tag)tree2[node].tag=node;let newNode=this.add(tree2[node]);if(tree2[node].aliases){tree2[node].aliases.forEach(a=>{this.nodes.set(a,newNode)})}}else{this.add({tag:node,operator:(...args)=>{return tree2[node]}})}}else{if(typeof tree2[node]==="function"){n.setOperator(tree2[node])}else if(typeof tree2[node]==="object"){if(tree2[node]instanceof GraphNode){this.add(tree2[node])}else if(tree2[node]instanceof Graph){let source=tree2[node];let properties={};if(source.operator)properties.operator=source.operator;if(source.children)properties.children=source.children;if(source.forward)properties.forward=source.forward;if(source.backward)properties.backward=source.backward;if(source.repeat)properties.repeat=source.repeat;if(source.recursive)properties.recursive=source.recursive;if(source.loop)properties.loop=source.loop;if(source.animate)properties.animate=source.animate;if(source.looper)properties.looper=source.looper;if(source.animation)properties.animation=source.animation;if(source.delay)properties.delay=source.delay;if(source.tag)properties.tag=source.tag;if(source.oncreate)properties.oncreate=source.oncreate;if(source.node?._initial)Object.assign(properties,source.node._initial);properties.nodes=source.nodes;properties.source=source;n.setProps(properties)}else{n.setProps(tree2[node])}}}}this.nodes.forEach(node=>{if(typeof node.children==="object"){for(const key in node.children){if(typeof node.children[key]==="string"){if(this.nodes.get(node.children[key])){node.children[key]=this.nodes.get(node.children[key])}}else if(node.children[key]===true||typeof node.children[key]==="undefined"){if(this.nodes.get(key)){node.children[key]=this.nodes.get(key)}}if(node.children[key]instanceof GraphNode){node.checkNodesHaveChildMapped(node,node.children[key])}}}if(typeof node.parent==="string"){if(this.nodes.get(node.parent)){node.parent=this.nodes.get(node.parent);node.nodes.set(node.parent.tag,node.parent)}}})};this.get=tag2=>{return this.nodes.get(tag2)};this.set=n=>{return this.nodes.set(n.tag,n)};this.run=(n,...args)=>{if(typeof n==="string")n=this.nodes.get(n);if(n?.run)return n.run(...args);else return void 0};this.runAsync=(n,...args)=>{if(typeof n==="string")n=this.nodes.get(n);if(n?.run)return new Promise((res,rej)=>{res(n.run(...args))});else return new Promise((res,rej)=>{res(void 0)})};this.removeTree=(n,checked)=>{if(n){if(typeof n==="string")n=this.nodes.get(n)}if(n?.nodes){let checked2={};const recursivelyRemove=node=>{if(typeof node.children==="object"&&!checked2[node.tag]){checked2[node.tag]=true;for(const key in node.children){if(node.children[key]?.stopNode)node.children[key].stopNode();if(node.children[key]?.tag){if(this.nodes.get(node.children[key].tag))this.nodes.delete(node.children[key].tag);this.nodes.forEach(n2=>{if(n2.nodes.get(node.children[key].tag))n2.nodes.delete(node.children[key].tag);if(n2.children?.[key]instanceof GraphNode)delete n2.children[key]});if(node.children[key].ondelete)node.children[key].ondelete(node.children[key]);recursivelyRemove(node.children[key])}}}};if(n.stopNode)n.stopNode();if(n.tag){this.nodes.delete(n.tag);if(this.parent?.tag===n.tag)delete this.parent;if(this[n.tag]instanceof GraphNode)delete this[n.tag];this.nodes.forEach(n2=>{if(n2?.tag){if(n2.nodes.get(n2.tag))n2.nodes.delete(n2.tag);if(n2.children?.[n2.tag]instanceof GraphNode)delete n2.children[n2.tag]}});recursivelyRemove(n);if(n.ondelete)n.ondelete(n)}}};this.remove=n=>{if(typeof n==="string")n=this.nodes.get(n);if(n?.nodes){if(n.stopNode)n.stopNode();if(n?.tag){if(this.nodes.get(n.tag)){this.nodes.delete(n.tag);this.nodes.forEach(n2=>{if(n2.nodes.get(n2.tag))n2.nodes.delete(n2.tag)})}}if(n.ondelete)n.ondelete(n)}return n};this.append=(n,parentNode)=>{parentNode.addChildren(n)};this.callParent=async(n,...args)=>{if(n?.parent){return await n.callParent(...args)}};this.callChildren=async(n,...args)=>{if(n?.children){return await n.callChildren(...args)}};this.subscribe=(n,callback)=>{if(!callback)return;if(n?.subscribe&&typeof callback==="function"){return n.subscribe(callback)}else if(callback instanceof GraphNode||typeof callback==="string")return this.subscribeNode(n,callback);else if(typeof n=="string"){return this.state.subscribeTrigger(n,callback)}};this.unsubscribe=(tag2,sub)=>{return this.state.unsubscribeTrigger(tag2,sub)};this.subscribeState=callback=>{if(!this.reactive){return void 0}else{if(typeof callback==="string"){if(this.graph)callback=this.graph.get(callback);else callback=this.nodes.get(callback)}if(typeof callback==="function"){return this.state.subscribeTrigger(this._unique,callback)}else if(callback)return this.state.subscribeTrigger(this._unique,_state=>{callback.run(_state)})}};this.subscribeNode=(inputNode,outputNode)=>{let tag2;if(inputNode?.tag)tag2=inputNode.tag;else if(typeof inputNode==="string")tag2=inputNode;if(typeof outputNode==="string")outputNode=this.nodes.get(outputNode);if(inputNode&&outputNode){let sub=this.state.subscribeTrigger(tag2,res=>{if(Array.isArray(res))outputNode.run(...res);else outputNode.run(res)});return sub}};this.stopNode=n=>{if(typeof n==="string"){n=this.nodes.get(n)}if(n?.stopNode){n.stopNode()}};this.print=(n,printChildren=true)=>{if(n?.print)return n.print(n,printChildren);else{let printed=`{`;this.nodes.forEach(n2=>{printed+=`\n"${n2.tag}:${n2.print(n2,printChildren)}"`});return printed}};this.reconstruct=json=>{let parsed=reconstructObject(json);if(parsed)return this.add(parsed)};this.create=(operator,parentNode,props2)=>{return createNode(operator,parentNode,props2,this)};this.setState=data=>{this.state.setState(data)};this.DEBUGNODES=(debugging=true)=>{this.nodes.forEach(n=>{if(debugging)n.DEBUGNODE=true;else n.DEBUGNODE=false})};this.tag=tag?tag:`graph${Math.floor(Math.random()*1e11)}`;if(props){console.log(props,props.constructor.name);if(props.reactive){this.addLocalState(props)}else Object.assign(this,props);this._initial=props}if(tree||Object.keys(this.tree).length>0)this.setTree(tree)}};function reconstructObject(json="{}"){try{let parsed=typeof json==="string"?JSON.parse(json):json;const parseObj=obj=>{for(const prop in obj){if(typeof obj[prop]==="string"){let funcParsed=parseFunctionFromText(obj[prop]);if(typeof funcParsed==="function"){obj[prop]=funcParsed}}else if(typeof obj[prop]==="object"){parseObj(obj[prop])}}return obj};return parseObj(parsed)}catch(err){console.error(err);return void 0}}var stringifyWithCircularRefs=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx--}}}}function checkCircular(key,value){if(value!=null){if(typeof value==="object"){if(key){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}}}return value}return function stringifyWithCircularRefs2(obj,space){try{parents.push(obj);return JSON.stringify(obj,checkCircular,space)}finally{clear()}}}();if(JSON.stringifyWithCircularRefs===void 0){JSON.stringifyWithCircularRefs=stringifyWithCircularRefs}var stringifyFast=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;if(parents[idx]){var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx++}}}}}function checkValues(key,value){let val;if(value!=null){if(typeof value==="object"){let c=value.constructor.name;if(key&&c==="Object"){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}if(c==="Array"){if(value.length>20){val=value.slice(value.length-20)}else val=value}else if(c.includes("Set")){val=Array.from(value)}else if(c!=="Object"&&c!=="Number"&&c!=="String"&&c!=="Boolean"){val="instanceof_"+c}else if(c==="Object"){let obj={};for(const prop in value){if(value[prop]==null){obj[prop]=value[prop]}else if(Array.isArray(value[prop])){if(value[prop].length>20)obj[prop]=value[prop].slice(value[prop].length-20);else obj[prop]=value[prop]}else if(value[prop].constructor.name==="Object"){obj[prop]={};for(const p in value[prop]){if(Array.isArray(value[prop][p])){if(value[prop][p].length>20)obj[prop][p]=value[prop][p].slice(value[prop][p].length-20);else obj[prop][p]=value[prop][p]}else{if(value[prop][p]!=null){let con=value[prop][p].constructor.name;if(con.includes("Set")){obj[prop][p]=Array.from(value[prop][p])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop][p]="instanceof_"+con}else{obj[prop][p]=value[prop][p]}}else{obj[prop][p]=value[prop][p]}}}}else{let con=value[prop].constructor.name;if(con.includes("Set")){obj[prop]=Array.from(value[prop])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop]="instanceof_"+con}else{obj[prop]=value[prop]}}}val=obj}else{val=value}}else{val=value}}return val}return function stringifyFast2(obj,space){parents.push(obj);let res=JSON.stringify(obj,checkValues,space);clear();return res}}();if(JSON.stringifyFast===void 0){JSON.stringifyFast=stringifyFast}function createNode(operator,parentNode,props,graph){if(typeof props==="object"){props.operator=operator;return new GraphNode(props,parentNode,graph)}return new GraphNode({operator},parentNode,graph)}var Service=class extends Graph{constructor(options={}){super(void 0,options.name?options.name:`service${Math.floor(Math.random()*1e14)}`,options.props);this.routes={};this.loadDefaultRoutes=false;this.keepState=true;this.firstLoad=true;this.customRoutes={};this.customChildren={};this.init=options2=>{if(options2)options2=Object.assign({},options2);else options2={};if(options2.customRoutes)Object.assign(options2.customRoutes,this.customRoutes);else options2.customRoutes=this.customRoutes;if(options2.customChildren)Object.assign(options2.customChildren,this.customChildren);else options2.customChildren=this.customChildren;if(Array.isArray(options2.routes)){options2.routes.forEach(r=>{this.load(r,options2.includeClassName,options2.routeFormat,options2.customRoutes,options2.customChildren,options2.sharedState)})}else if(options2.routes||(Object.keys(this.routes).length>0||this.loadDefaultRoutes)&&this.firstLoad)this.load(options2.routes,options2.includeClassName,options2.routeFormat,options2.customRoutes,options2.customChildren,options2.sharedState)};this.load=(routes,includeClassName=true,routeFormat=".",customRoutes=this.customRoutes,customChildren=this.customChildren,sharedState=true)=>{if(!routes&&!this.loadDefaultRoutes&&(Object.keys(this.routes).length>0||this.firstLoad))return;if(this.firstLoad)this.firstLoad=false;if(customRoutes)customRoutes=Object.assign(this.customRoutes,customRoutes);else customRoutes=this.customRoutes;let service;let allRoutes={};if(routes){if(!(routes instanceof Graph)&&routes?.name&&!routes.setTree){if(routes.module){let mod=routes;routes={};Object.getOwnPropertyNames(routes.module).forEach(prop=>{if(includeClassName)routes[mod.name+routeFormat+prop]=routes.module[prop];else routes[prop]=routes.module[prop]})}else if(typeof routes==="function"){service=new routes({loadDefaultRoutes:this.loadDefaultRoutes});service.load();if(sharedState)service.state=this.state;routes=service.routes;if(service.customRoutes&&!this.customRoutes)this.customRoutes=service.customRoutes;else if(service.customRoutes&&this.customRoutes)Object.assign(this.customRoutes,service.customRoutes);if(service.customChildren&&!this.customChildren)this.customChildren=service.customChildren;else if(service.customChildren&&this.customChildren)Object.assign(this.customChildren,service.customChildren)}}else if(routes instanceof Graph||routes.source instanceof Graph||routes.setTree){service=routes;routes={};if(sharedState)service.state=this.state;if(includeClassName){let name=service.name;if(!name){name=service.tag;service.name=name}if(!name){name=`graph${Math.floor(Math.random()*1e15)}`;service.name=name;service.tag=name}}if(service.customRoutes&&!this.customRoutes)this.customRoutes=service.customRoutes;else if(service.customRoutes&&this.customRoutes)Object.assign(this.customRoutes,service.customRoutes);if(service.customChildren&&!this.customChildren)this.customChildren=service.customChildren;else if(service.customChildren&&this.customChildren)Object.assign(this.customChildren,service.customChildren);service.nodes.forEach(node=>{routes[node.tag]=node;let checked={};let checkChildGraphNodes=(nd,par)=>{if(!checked[nd.tag]||par&&includeClassName&&!checked[par?.tag+routeFormat+nd.tag]){if(!par)checked[nd.tag]=true;else checked[par.tag+routeFormat+nd.tag]=true;if(nd instanceof Graph||nd.source instanceof Graph||nd.setTree){if(sharedState)nd.state=this.state;if(includeClassName){let nm=nd.name;if(!nm){nm=nd.tag;nd.name=nm}if(!nm){nm=`graph${Math.floor(Math.random()*1e15)}`;nd.name=nm;nd.tag=nm}}nd.nodes.forEach(n=>{if(includeClassName&&!routes[nd.tag+routeFormat+n.tag])routes[nd.tag+routeFormat+n.tag]=n;else if(!routes[n.tag])routes[n.tag]=n;checkChildGraphNodes(n,nd)})}}};checkChildGraphNodes(node)})}else if(typeof routes==="object"){let name=routes.constructor.name;if(name==="Object"){name=Object.prototype.toString.call(routes);if(name)name=name.split(" ")[1];if(name)name=name.split("]")[0]}if(name&&name!=="Object"){let module=routes;routes={};Object.getOwnPropertyNames(module).forEach(route=>{if(includeClassName)routes[name+routeFormat+route]=module[route];else routes[route]=module[route]})}}if((service instanceof Graph||service?.setTree)&&service.name&&includeClassName){routes=Object.assign({},routes);for(const prop in routes){let route=routes[prop];delete routes[prop];routes[service.name+routeFormat+prop]=route}}}if(this.loadDefaultRoutes){let rts2=Object.assign({},this.defaultRoutes);if(routes){Object.assign(rts2,this.routes);routes=Object.assign(rts2,routes)}else routes=Object.assign(rts2,this.routes);this.loadDefaultRoutes=false}if(!routes)routes=this.routes;let incr=0;for(const tag in routes){incr++;let childrenIter=(route,routeKey)=>{if(typeof route==="object"){if(!route.tag)route.tag=routeKey;if(typeof route?.children==="object"){nested:for(const key in route.children){incr++;if(typeof route.children[key]==="object"){let rt=route.children[key];if(rt.tag&&allRoutes[rt.tag])continue;if(customChildren){for(const k2 in customChildren){rt=customChildren[k2](rt,key,route,routes,allRoutes);if(!rt)continue nested}}if(rt.id&&!rt.tag){rt.tag=rt.id}let k;if(rt.tag){if(allRoutes[rt.tag]){let randkey=`${rt.tag}${incr}`;allRoutes[randkey]=rt;rt.tag=randkey;childrenIter(allRoutes[randkey],key);k=randkey}else{allRoutes[rt.tag]=rt;childrenIter(allRoutes[rt.tag],key);k=rt.tag}}else{if(allRoutes[key]){let randkey=`${key}${incr}`;allRoutes[randkey]=rt;rt.tag=randkey;childrenIter(allRoutes[randkey],key);k=randkey}else{allRoutes[key]=rt;childrenIter(allRoutes[key],key);k=key}}if(service?.name&&includeClassName){allRoutes[service.name+routeFormat+k]=rt;delete allRoutes[k]}else allRoutes[k]=rt}}}}};allRoutes[tag]=routes[tag];childrenIter(routes[tag],tag)}top:for(const route in allRoutes){if(typeof allRoutes[route]==="object"){let r=allRoutes[route];if(typeof r==="object"){if(customRoutes){for(const key in customRoutes){r=customRoutes[key](r,route,allRoutes);if(!r)continue top}}if(r.get){if(typeof r.get=="object"){}}if(r.post){}if(r.delete){}if(r.put){}if(r.head){}if(r.patch){}if(r.options){}if(r.connect){}if(r.trace){}if(r.post&&!r.operator){allRoutes[route].operator=r.post}else if(!r.operator&&typeof r.get=="function"){allRoutes[route].operator=r.get}}}}for(const route in routes){if(typeof routes[route]==="object"){if(this.routes[route]){if(typeof this.routes[route]==="object")Object.assign(this.routes[route],routes[route]);else this.routes[route]=routes[route]}else this.routes[route]=routes[route]}else if(this.routes[route]){if(typeof this.routes[route]==="object")Object.assign(this.routes[route],routes[route]);else this.routes[route]=routes[route]}else this.routes[route]=routes[route]}if(service){for(const key in this.routes){if(this.routes[key]instanceof GraphNode||this.routes[key].constructor.name.includes("GraphNode")){this.nodes.set(key,this.routes[key]);this.nNodes=this.nodes.size}}}else this.setTree(this.routes);for(const prop in routes){if(routes[prop]?.aliases){let aliases=routes[prop].aliases;aliases.forEach(a=>{if(service?.name&&includeClassName)this.routes[service.name+routeFormat+a]=routes[prop];else this.routes[a]=routes[prop]})}}return this.routes};this.unload=(routes=this.routes)=>{if(!routes)return;let service;if(!(routes instanceof Service)&&typeof routes==="function"){service=new Service;routes=service.routes}else if(routes instanceof Service){routes=routes.routes}for(const r in routes){delete this.routes[r];if(this.nodes.get(r))this.remove(r)}return this.routes};this.handleMethod=(route,method,args)=>{let m=method.toLowerCase();let src=this.nodes.get(route);if(!src){src=this.routes[route];if(!src)src=this.tree[route]}if(src?.[m]){if(!(src[m]instanceof Function)){if(args)src[m]=args;return src[m]}else return src[m](args)}else return this.handleServiceMessage({route,args,method})};this.transmit=(...args)=>{if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.receive=(...args)=>{if(args[0]){if(typeof args[0]==="string"){let substr=args[0].substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\"))args[0]=args[0].replace(/\\\\/g,"");if(args[0][0]===\'"\'){args[0]=args[0].substring(1,args[0].length-1)};args[0]=JSON.parse(args[0])}}}if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.pipe=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode){if(callback)return source.subscribe(res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.pipeOnce=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode){if(callback)return source.state.subscribeTriggerOnce(source.tag,res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.state.subscribeTriggerOnce(source.tag,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.state.subscribeTriggerOnce(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.terminate=(...args)=>{this.nodes.forEach(n=>{n.stopNode()})};this.recursivelyAssign=(target,obj)=>{for(const key in obj){if(typeof obj[key]==="object"&&!Array.isArray(obj[key])){if(typeof target[key]==="object"&&!Array.isArray(target[key]))this.recursivelyAssign(target[key],obj[key]);else target[key]=this.recursivelyAssign({},obj[key])}else target[key]=obj[key]}return target};this.defaultRoutes={"/":{get:()=>{return this.print()},aliases:[""]},ping:()=>{console.log("ping");return"pong"},echo:(...args)=>{this.transmit(...args);return args},assign:source=>{if(typeof source==="object"){Object.assign(this,source);return true}return false},recursivelyAssign:source=>{if(typeof source==="object"){this.recursivelyAssign(this,source);return true}return false},log:{post:(...args)=>{console.log("Log: ",...args)},aliases:["info"]},error:message=>{let er=new Error(message);console.error(message);return er},state:key=>{if(key){return this.state.data[key]}else return this.state.data},printState:key=>{if(key){return stringifyWithCircularRefs(this.state.data[key])}else return stringifyWithCircularRefs(this.state.data)},spliceTypedArray:this.spliceTypedArray,transmit:this.transmit,receive:this.receive,load:this.load,unload:this.unload,pipe:this.pipe,terminate:this.terminate,run:this.run,subscribe:this.subscribe,subscribeNode:this.subscribeNode,unsubscribe:this.unsubscribe,stopNode:this.stopNode,get:this.get,add:this.add,remove:this.remove,setTree:this.setTree,setState:this.setState,print:this.print,reconstruct:this.reconstruct,handleMethod:this.handleMethod,handleServiceMessage:this.handleServiceMessage,handleGraphNodeCall:this.handleGraphNodeCall};if(options.name)this.name=options.name;else options.name=this.tag;if("loadDefaultRoutes"in options){this.loadDefaultRoutes=options.loadDefaultRoutes;this.routes=Object.assign(this.defaultRoutes,this.routes)}if(options||Object.keys(this.routes).length>0)this.init(options)}handleServiceMessage(message){let call;if(typeof message==="object"){if(message.route)call=message.route;else if(message.node)call=message.node}if(call){if(Array.isArray(message.args))return this.run(call,...message.args);else return this.run(call,message.args)}else return message}handleGraphNodeCall(route,args){if(!route)return args;if(args?.args){this.handleServiceMessage(args)}else if(Array.isArray(args))return this.run(route,...args);else return this.run(route,args)}isTypedArray(x){return ArrayBuffer.isView(x)&&Object.prototype.toString.call(x)!=="[object DataView]"}spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let n;if(s.length>0||e?.length>0)n=new arr.constructor(s.length+e.length);if(s.length>0)n.set(s);if(e&&e.length>0)n.set(e,s.length);return n}};var unsafeRoutes={setRoute:function(fn,fnName){if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;if(this.graph.get(fnName)){this.graph.get(fnName).setOperator(fn.bind(this.graph.get(fnName)))}else{let node=this.graph.add({tag:fnName,operator:fn});if(this.graph instanceof Service)this.graph.load({[fnName]:node})}return true}return false},setNode:function(fn,fnName){if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;if(this.graph.get(fnName)){this.graph.get(fnName).setOperator(fn)}else this.graph.add({tag:fnName,operator:fn});return true}return false},setMethod:function(route,fn,fnName){if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;if(this.graph.get(route)){this.graph.get(route)[fnName]=fn}else this.graph.add({tag:fnName,[fnName]:fn});return true}return false},assignRoute:function(route,source){if(this.graph.get(route)&&typeof source==="object"){Object.assign(this.graph.get(route),source)}},transferClass:(classObj,className)=>{if(typeof classObj==="object"){let str2=classObj.toString();let message={route:"receiveClass",args:[str2,className]};return message}return false},receiveClass:function(stringified,className){if(typeof stringified==="string"){if(stringified.indexOf("class")===0){let cls=(0,eval)("("+stringified+")");let name=className;if(!name)name=cls.name;this.graph[name]=cls;return true}}return false},setGlobal:(key,value)=>{globalThis[key]=value;return true},assignGlobalObject:(target,source)=>{if(!globalThis[target])return false;if(typeof source==="object")Object.assign(globalThis[target],source);return true},setValue:function(key,value){this.graph[key]=value;return true},assignObject:function(target,source){if(!this.graph[target])return false;if(typeof source==="object")Object.assign(this.graph[target],source);return true},setGlobalFunction:(fn,fnName)=>{if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;globalThis[fnName]=fn;return true}return false},assignFunctionToGlobalObject:function(globalObjectName,fn,fnName){if(!globalThis[globalObjectName])return false;if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;this.graph[globalObjectName][fnName]=fn;return true}return false},setFunction:function(fn,fnName){if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;this.graph[fnName]=fn;return true}return false},assignFunctionToObject:function(objectName,fn,fnName){if(!this.graph[objectName])return false;if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;this.graph[objectName][fnName]=fn;return true}return false}};var import_sjcl=__toESM(require_sjcl());var _HTTPfrontend=class extends Service{constructor(options,path,fetched){super(options);this.name="http";this.fetchProxied=false;this.listening={};this.GET=(url="http://localhost:8080/ping",type="",mimeType)=>{if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method:"GET",url,responseType:type,mimeType,onload:ev=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url instanceof URL)url=url.toString();this.setState({[url]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.POST=(message,url="http://localhost:8080/echo",type="",mimeType)=>{if(typeof message==="object"&&(type==="json"||type==="text"||!type)){message=JSON.stringify(message)}if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method:"POST",url,data:message,responseType:type,mimeType,onload:ev=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url instanceof URL)url=url.toString();this.setState({[url]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.transmit=(message,url)=>{let obj=message;if(typeof obj==="object"){message=JSON.stringify(obj)}if(obj?.method?.toLowerCase()=="get"||message?.toLowerCase()==="get")return this.GET(url);return this.post(message,url)};this.transponder=(url,message,type="",mimeType)=>{if(typeof message==="object")message=JSON.stringify(message);let method="GET";if(message){method="POST"}if(type==="json")mimeType="application/json";else return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method,url,data:message,responseType:type,onload:ev=>{let body=xhr.response;if(typeof body==="string"){let substr=body.substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\"))body=body.replace(/\\\\/g,"");if(body[0]===\'"\'){body=body.substring(1,body.length-1)};body=JSON.parse(body)}}if(typeof body?.method==="string"){return resolve(this.handleMethod(body.route,body.method,body.args))}else if(typeof body?.route==="string"){return resolve(this.handleServiceMessage(body))}else if(typeof body?.node==="string"||body.node instanceof GraphNode){return resolve(this.handleGraphNodeCall(body.node,body.args))}else return resolve(body)},onabort:er=>{reject(er)}})}).catch(console.error)};this.listen=(path2="0",fetched2=async(clone,args,response)=>{const result=await clone.text();const returned=this.receive(result);this.setState({[response.url]:returned})})=>{this.listening[path2]={};let listenerId=`${path2}${Math.floor(Math.random()*1e15)}`;this.listening[path2][listenerId]=fetched2;if(!this.fetchProxied){globalThis.fetch=new Proxy(globalThis.fetch,{apply(fetch,that,args){const result=fetch.apply(that,args);result.then(response=>{if(!response.ok)return;if(this.listening["0"]){for(const key in this.listeners){const clone=response.clone();this.listening["0"][key](clone,args,response)}}else{for(const key in this.listening){if(response.url.includes(key)){for(const key2 in this.listening[path2]){const clone=response.clone();this.listening[path2][key2](clone,args,response)}break}}}}).catch(er=>{console.error(er)});return result}});this.fetchProxied=true}return listenerId};this.stopListening=(path2,listener)=>{if(!path2&&path2!==0){for(const key in this.listening)delete this.listening[key]}else{if(!listener)delete this.listening[path2];else delete this.listeners[listener]}};this.routes={request:this.request,GET:this.GET,POST:this.POST,transponder:this.transponder,listen:this.listen,stopListening:this.stopListening};this.load(this.routes);this.listen(path,fetched)}};var HTTPfrontend=_HTTPfrontend;HTTPfrontend.request=options=>{const xhr=new XMLHttpRequest;if(options.responseType)xhr.responseType=options.responseType;else options.responseType="json";if(options.mimeType){xhr.overrideMimeType(options.mimeType)}if(options.onload)xhr.addEventListener("load",options.onload,false);if(options.onprogress)xhr.addEventListener("progress",options.onprogress,false);if(options.onabort)xhr.addEventListener("abort",options.onabort,false);if(options.onloadend)xhr.addEventListener("loadend",options.onloadend,false);if(options.onerror)xhr.addEventListener("error",options.onerror,false);xhr.open(options.method,options.url,true,options.user,options.pass);if(!options.onerror)xhr.onerror=function(){xhr.abort()};xhr.send(options.data);return xhr};var import_web_worker=__toESM(require_browser());var WorkerService=class extends Service{constructor(options){super(options);this.name="worker";this.workers={};this.threadRot=0;this.connections={workers:this.workers};this.customRoutes={"worker":(route,routeKey,routes)=>{let rt=route;if(rt?.worker||rt?.workerId||rt?.workerUrl){let worker=this.loadWorkerRoute(rt,routeKey);if(worker){if(!rt.parentRoute&&rt.parent?.callback)rt.parentRoute=rt.parent.callback;if(rt.parent&&!rt.portId){if(typeof rt.parent==="string"){if(rt.tag!==rt.parent&&worker._id!==rt.parent)rt.portId=this.establishMessageChannel(worker,rt.parent)}else if(rt.tag!==rt.parent.tag&&worker._id!==rt.parent.tag){rt.portId=this.establishMessageChannel(worker,rt.parent.worker)}};if(rt.parentRoute){if(!rt.stopped){if(typeof rt.parent==="string"&&rt.parent===worker._id){worker.run("subscribe",[rt.parentRoute,rt.callback])}else if(rt.tag===rt.parent?.tag||worker._id===rt.parent?.tag){worker.run("subscribe",[rt.parentRoute,rt.callback])}else worker.run("subscribeToWorker",[rt.parentRoute,rt.portId,rt.callback,rt.blocking]).then(sub=>{worker.workerSubs[rt.parentRoute+rt.portId].sub=sub})}if(!(typeof rt.parent==="string"&&rt.parent===worker._id)&&!(rt.tag===rt.parent?.tag||worker._id===rt.parent?.tag))worker.workerSubs[rt.parentRoute+rt.portId]={sub:null,route:rt.parentRoute,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.parent){if(typeof rt.parent==="string"){if(!rt.stopped){if(rt.parent===worker._id){worker.run("subscribe",[rt.parent,rt.callback])}else worker.run("subscribeToWorker",[rt.parent,rt.portId,rt.callback,rt.blocking]).then(sub=>{worker.workerSubs[rt.parentRoute+rt.portId].sub=sub})}if(!(typeof rt.parent==="string"&&rt.parent===worker._id))worker.workerSubs[rt.parentRoute+rt.portId]={sub:null,route:rt.parentRoute,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.parent?.tag){if(!rt.stopped){if(rt.tag===rt.parent?.tag||worker._id===rt.parent?.tag){worker.run("subscribe",[rt.parent.tag,rt.callback])}else worker.run("subscribeToWorker",[rt.parent.tag,rt.portId,rt.callback,rt.blocking]).then(sub=>{worker.workerSubs[rt.parentRoute+rt.portId].sub=sub})}if(!(rt.tag===rt.parent?.tag||worker._id===rt.parent?.tag))worker.workerSubs[rt.parentRoute+rt.portId]={sub:null,route:rt.parentRoute,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}}}}else if(rt.parent&&rt.parentRoute){if(typeof rt.parent==="string"&&routes[rt.parent]?.worker){routes[rt.parent].worker.subscribe(rt.parentRoute,rt.tag,rt.blocking)}else if(rt.parent?.worker){rt.parent.worker.subscribe(rt.parentRoute,rt.tag,rt.blocking)}}return rt}};this.customChildren={"worker":(child,childRouteKey,parent,routes,checked)=>{if(!child.parentRoute&&parent?.callback)child.parentRoute=parent.callback;if(!child.parent&&parent.tag)child.parent=parent.tag;return child}};this.postMessage=(message,target,transfer)=>{if(this.workers[target]){this.workers[target].send(message,transfer)}else{globalThis.postMessage(message,target,transfer)}};this.addWorker=options2=>{let worker;if(!options2._id)options2._id=`worker${Math.floor(Math.random()*1e15)}`;if(options2.url)worker=new import_web_worker.default(options2.url);else if(options2.port){worker=options2.port}else if(this.workers[options2._id]){if(this.workers[options2._id].port)worker=this.workers[options2._id].port;else worker=this.workers[options2._id].worker}if(!worker)return;let send=(message,transfer)=>{return this.transmit(message,worker,transfer)};let post=(route,args,transfer,method)=>{let message={route,args};if(method)message.method=method;return this.transmit(message,worker,transfer)};let run=(route,args,transfer,method)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[{route,args},options2._id,callbackId]};if(method)req.args[0].method=method;let onmessage=ev=>{if(typeof ev.data==="object"){if(ev.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let request=(message,transfer,method)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,options2._id,callbackId]};if(method)req.method=method;let onmessage=ev=>{if(typeof ev.data==="object"){if(ev.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let workerSubs={};let subscribe=(route,callback,blocking)=>{return this.subscribeToWorker(route,options2._id,callback,blocking)};let unsubscribe=(route,sub)=>{return run("unsubscribe",[route,sub])};let start=async(route,portId,callback,blocking)=>{if(route)await run("subscribeToWorker",[route,portId,callback,blocking]).then(sub=>{if(sub)workerSubs[route+portId]={sub,route,portId,callback,blocking}});else for(const key in workerSubs){if(typeof workerSubs[key].sub!=="number")await run("subscribeToWorker",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].callback,workerSubs[key].blocking]).then(sub=>{workerSubs[key].sub=sub})}return true};let stop=async(route,portId)=>{if(route&&portId&&workerSubs[route+portId]){await run("unsubscribe",[route,workerSubs[route+portId].sub]);workerSubs[route+portId].sub=false}else{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){await run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub])}workerSubs[key].sub=false}}return true};let terminate=()=>{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub])}workerSubs[key].sub=false}return this.terminate(options2._id)};if(!options2.onmessage)options2.onmessage=ev=>{this.receive(ev.data);this.setState({[options2._id]:ev.data})};if(!options2.onerror){options2.onerror=ev=>{console.error(ev.data)}}worker.onmessage=options2.onmessage;worker.onerror=options2.onerror;this.workers[options2._id]={worker,send,post,run,request,subscribe,unsubscribe,terminate,start,stop,postMessage:worker.postMessage,workerSubs,graph:this,...options2};return this.workers[options2._id]};this.toObjectURL=scriptTemplate=>{let blob=new Blob([scriptTemplate],{type:"text/javascript"});return URL.createObjectURL(blob)};this.transmit=(message,worker,transfer)=>{if(!transfer){transfer=this.getTransferable(message)}if(worker instanceof import_web_worker.default||worker instanceof MessagePort){worker.postMessage(message,transfer)}else if(typeof worker==="string"){if(this.workers[worker]){if(this.workers[worker].port)this.workers[worker].port.postMessage(message,transfer);else if(this.workers[worker].worker)this.workers[worker].worker.postMessage(message,transfer)}}else{let keys=Object.keys(this.workers);this.workers[keys[this.threadRot]].worker.postMessage(message,transfer);this.threadRot++;if(this.threadRot===keys.length)this.threadRot=0}return message};this.terminate=worker=>{let onclose;if(typeof worker==="string"){let obj=this.workers[worker];if(obj)delete this.workers[worker];worker=obj.worker;if(obj.onclose)onclose=obj.onclose}if(worker instanceof import_web_worker.default){worker.terminate();if(onclose)onclose(worker);return true}if(worker instanceof MessagePort){worker.close();if(onclose)onclose(worker);return true}return false};this.establishMessageChannel=(worker,worker2)=>{let workerId;if(typeof worker==="string"){workerId=worker;if(this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker2=this.workers[worker].worker}}else if(worker?.worker){worker=worker.worker}if(typeof worker2==="string"){if(this.workers[worker2]){if(this.workers[worker2].port)worker2=this.workers[worker2].port;else worker2=this.workers[worker2].worker}}else if(worker2?.worker){worker2=worker2.worker}if(worker instanceof import_web_worker.default||worker instanceof MessagePort){let channel=new MessageChannel;let portId=`port${Math.floor(Math.random()*1e15)}`;worker.postMessage({route:"addWorker",args:{port:channel.port1,_id:portId}},[channel.port1]);if(worker2 instanceof import_web_worker.default||worker2 instanceof MessagePort){worker2.postMessage({route:"addWorker",args:{port:channel.port2,_id:portId}},[channel.port2])}else if(workerId&&this.workers[workerId]){channel.port2.onmessage=this.workers[workerId].onmessage;this.workers[workerId].port=channel.port2}return portId}return false};this.request=(message,workerId,transfer,method)=>{let worker=this.workers[workerId].worker;return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,callbackId]};if(method)req.method=method;let onmessage=ev=>{if(typeof ev.data==="object"){if(ev.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};this.runRequest=(message,worker,callbackId)=>{let res=this.receive(message);if(typeof worker==="string"&&this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}if(res instanceof Promise){res.then(r=>{if(worker instanceof import_web_worker.default||worker instanceof MessagePort)worker.postMessage({args:r,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:r,callbackId})})}else{if(worker instanceof import_web_worker.default||worker instanceof MessagePort)worker.postMessage({args:res,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:res,callbackId})}return res};this.subscribeWorker=(route,worker,blocking)=>{let callback;if(blocking){let blocked=false;callback=res=>{if(!blocked){blocked=true;if(res instanceof Promise){res.then(r=>{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,r]).then(ret=>{blocked=false})})}else{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,res]).then(ret=>{blocked=false})}}}}else{callback=res=>{if(res instanceof Promise){res.then(r=>{if(worker?.postMessage)worker.postMessage({args:r,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:r,callbackId:route})})}else{if(worker?.postMessage)worker.postMessage({args:res,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:res,callbackId:route})}}}if(!blocking&&worker?.port){worker=worker.port}else if(!blocking&&worker?.worker){worker=worker.worker}else if(typeof worker==="string"&&this.workers[worker]){if(blocking)worker=this.workers[worker];else if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}return this.subscribe(route,callback)};this.subscribeToWorker=(route,workerId,callback,blocking)=>{if(typeof workerId==="string"&&this.workers[workerId]){this.subscribe(workerId,res=>{if(res?.callbackId===route){if(!callback)this.setState({[workerId]:res.args});else if(typeof callback==="string"){this.run(callback,res.args)}else callback(res.args)}});return this.workers[workerId].run("subscribeWorker",[route,workerId,blocking])}};this.triggerSubscription=async(route,workerId,result)=>{if(this.state.triggers[workerId])for(let i=0;i<this.state.triggers[workerId].length;i++){await this.state.triggers[workerId][i].onchange({args:result,callbackId:route})}return true};this.pipeWorkers=(sourceWorker,listenerWorker,sourceRoute,listenerRoute,portId,blocking)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(typeof listenerWorker==="string")listenerWorker=this.workers[listenerWorker];if(!portId){portId=this.establishMessageChannel(sourceWorker.worker,listenerWorker.worker)}return listenerWorker.run("subscribeToWorker",[sourceRoute,portId,listenerRoute,blocking])};this.unpipeWorkers=(sourceRoute,sourceWorker,sub)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(sourceWorker)return sourceWorker.run("unsubscribe",[sourceRoute,sub])};this.routes={addWorker:{operator:this.addWorker,aliases:["open"]},toObjectURL:this.toObjectURL,request:this.request,runRequest:this.runRequest,establishMessageChannel:this.establishMessageChannel,subscribeWorker:this.subscribeWorker,subscribeToWorker:this.subscribeToWorker,triggerSubscription:this.triggerSubscription,subscribe:this.subscribe,pipeWorkers:this.pipeWorkers,unpipeWorkers:this.unpipeWorkers,unsubscribe:(route,sub)=>{this.unsubscribe(route,sub)},terminate:this.terminate};this.load(this.routes);if(typeof WorkerGlobalScope!=="undefined"&&globalThis instanceof WorkerGlobalScope){this.addDefaultMessageListener()}}loadWorkerRoute(rt,routeKey){if(rt.workerUrl)rt.url=rt.workerUrl;if(rt.workerId)rt.tag=rt.workerId;if(!rt.tag)rt.tag=routeKey;rt._id=rt.tag;let worker;if(this.workers[rt._id])worker=this.workers[rt._id];else if(rt.worker)worker=rt.worker;if(!worker){worker=this.addWorker(rt);let ondelete=rt2=>{rt2.worker?.terminate()};let oldondelete;if(rt.ondelete)oldondelete=rt.ondelete;rt.ondelete=n=>{if(oldondelete)oldondelete(n);ondelete(n)}}rt.worker=worker;if(rt.transferFunctions){for(const prop in rt.transferFunctions){this.transferFunction(worker,rt.transferFunctions[prop],prop)}}if(rt.transferClasses){for(const prop in rt.transferClasses){this.transferClass(worker,rt.transferClasses[prop],prop)}}if(worker){if(!rt.operator){rt.operator=(...args)=>{if(rt.callback){if(!this.nodes.get(rt.tag)?.children)worker.post(rt.callback,args);else return worker.run(rt.callback,args)}else{if(!this.nodes.get(rt.tag)?.children)worker.send(args);else return worker.request(args)}}}if(rt.init){worker.run(rt.init,rt.initArgs,rt.initTransfer)}return worker}}addDefaultMessageListener(){globalThis.onmessage=ev=>{let result=this.receive(ev.data);if(this.keepState)this.setState({[this.name]:result})}}getTransferable(message){let transfer;if(typeof message==="object"){if(message.args){if(message.args.constructor?.name==="Object"){for(const key in message.args){if(ArrayBuffer.isView(message.args[key])){if(!transfer)transfer=[message.args[key].buffer];else transfer.push(message.args[key].buffer)}else if(message.args[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message.args[key]];else transfer.push(message.args[key])}}}else if(Array.isArray(message.args)&&message.args.length<11){message.args.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message.args)){transfer=[message.args.buffer]}else if(message.args.constructor?.name==="ArrayBuffer"){transfer=[message]}}else if(message.constructor?.name==="Object"){for(const key in message){if(ArrayBuffer.isView(message[key])){if(!transfer)transfer=[message[key].buffer];else transfer.push(message[key].buffer)}else if(message[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message[key]];else transfer.push(message[key])}}}else if(Array.isArray(message)&&message.length<11){message.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message)){transfer=[message.buffer]}else if(message.constructor?.name==="ArrayBuffer"){transfer=[message]}}return transfer}transferFunction(worker,fn,fnName){if(!fnName)fnName=fn.name;return worker.request({route:"setRoute",args:[fn.toString(),fnName]})}transferClass(worker,cls,className){if(!className)className=cls.name;return worker.request({route:"receiveClass",args:[cls.toString(),className]})}};var mouseEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","shiftKey","button","pointerType","clientX","clientY","pageX","pageY"]);var wheelEventHandlerImpl=makeSendPropertiesHandler(["deltaX","deltaY"]);var keydownEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","shiftKey","keyCode"]);function wheelEventHandler(event,sendFn){event.preventDefault();wheelEventHandlerImpl(event,sendFn)}function preventDefaultHandler(event){event.preventDefault()}function copyProperties(src,properties,dst){for(const name of properties){dst[name]=src[name]}}function makeSendPropertiesHandler(properties){return function sendProperties(event,sendFn){const data={type:event.type};copyProperties(event,properties,data);sendFn(data)}}function touchEventHandler(event,sendFn){const touches=[];const data={type:event.type,touches};for(let i=0;i<event.touches.length;++i){const touch=event.touches[i];touches.push({pageX:touch.pageX,pageY:touch.pageY})}sendFn(data)}var orbitKeys={"37":true,"38":true,"39":true,"40":true};function filteredKeydownEventHandler(event,sendFn){const{keyCode}=event;if(orbitKeys[keyCode]){event.preventDefault();keydownEventHandler(event,sendFn)}}var eventHandlers={contextmenu:preventDefaultHandler,mousedown:mouseEventHandler,mousemove:mouseEventHandler,mouseup:mouseEventHandler,pointerdown:mouseEventHandler,pointermove:mouseEventHandler,pointerup:mouseEventHandler,touchstart:touchEventHandler,touchmove:touchEventHandler,touchend:touchEventHandler,wheel:wheelEventHandler,keydown:filteredKeydownEventHandler};function initProxyElement(element,worker,id){if(!id)id="proxy"+Math.floor(Math.random()*1e15);const sendEvent=data=>{worker.postMessage({route:"handleProxyEvent",args:[data,id]})};let entries=Object.entries(eventHandlers);for(const[eventName,handler]of entries){element.addEventListener(eventName,function(event){handler(event,sendEvent)})}const sendSize=()=>{const rect=element.getBoundingClientRect();sendEvent({type:"resize",left:rect.left,top:rect.top,width:element.clientWidth,height:element.clientHeight})};sendSize();globalThis.addEventListener("resize",sendSize);return id}var EventDispatcher=class{addEventListener(type,listener){if(this._listeners===void 0)this._listeners={};const listeners=this._listeners;if(listeners[type]===void 0){listeners[type]=[]}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener)}}hasEventListener(type,listener){if(this._listeners===void 0)return false;const listeners=this._listeners;return listeners[type]!==void 0&&listeners[type].indexOf(listener)!==-1}removeEventListener(type,listener){if(this._listeners===void 0)return;const listeners=this._listeners;const listenerArray=listeners[type];if(listenerArray!==void 0){const index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1)}}}dispatchEvent(event,target){if(this._listeners===void 0)return;const listeners=this._listeners;const listenerArray=listeners[event.type];if(listenerArray!==void 0){if(!target)event.target=this;else event.target=target;const array=listenerArray.slice(0);for(let i=0,l=array.length;i<l;i++){array[i].call(this,event)}event.target=null}}};function noop(){}var ElementProxyReceiver=class extends EventDispatcher{constructor(){super();this._listeners={};this.style={};this.setPointerCapture=()=>{};this.releasePointerCapture=()=>{};this.getBoundingClientRect=()=>{return{left:this.left,top:this.top,width:this.width,height:this.height,right:this.left+this.width,bottom:this.top+this.height}};this.handleEvent=data=>{if(data.type==="resize"){this.left=data.left;this.top=data.top;this.width=data.width;this.height=data.height;if(typeof this.proxied==="object"){this.proxied.width=this.width;this.proxied.height=this.height;this.proxied.clientWidth=this.width;this.proxied.clientHeight=this.height}}data.preventDefault=noop;data.stopPropagation=noop;this.dispatchEvent(data,this.proxied)};this.style={}}get clientWidth(){return this.width}get clientHeight(){return this.height}focus(){}};var ProxyManager=class{constructor(){this.targets={};this.makeProxy=(id,addTo=void 0)=>{if(!id)id=`proxyReceiver${Math.floor(Math.random()*1e15)}`;let proxy;if(this.targets[id])proxy=this.targets[id];else{proxy=new ElementProxyReceiver;this.targets[id]=proxy}if(typeof addTo==="object"){addTo.proxy=proxy;proxy.proxied=addTo;addTo.style=proxy.style;if(proxy.width){addTo.width=proxy.width;addTo.clientWidth=proxy.width}if(proxy.height){addTo.height=proxy.height;addTo.clientHeight=proxy.height}addTo.setPointerCapture=proxy.setPointerCapture.bind(proxy);addTo.releasePointerCapture=proxy.releasePointerCapture.bind(proxy);addTo.getBoundingClientRect=proxy.getBoundingClientRect.bind(proxy);addTo.addEventListener=proxy.addEventListener.bind(proxy);addTo.removeEventListener=proxy.removeEventListener.bind(proxy);addTo.handleEvent=proxy.handleEvent.bind(proxy);addTo.dispatchEvent=proxy.dispatchEvent.bind(proxy);addTo.focus=proxy.focus.bind(proxy)}};this.getProxy=id=>{return this.targets[id]};this.handleEvent=(data,id)=>{if(!this.targets[id])this.makeProxy(id);if(this.targets[id]){this.targets[id].handleEvent(data);return true}return void 0};if(!globalThis.document)globalThis.document={}}};var proxyElementWorkerRoutes={initProxyElement,makeProxy:function(id,elm){if(!this.graph.ProxyManager)this.graph.ProxyManager=new ProxyManager;this.graph.ProxyManager.makeProxy(id,elm);return id},handleProxyEvent:function(data,id){if(!this.graph.ProxyManager)this.graph.ProxyManager=new ProxyManager;if(this.graph.ProxyManager.handleEvent(data,id))return data}};var workerCanvasRoutes={...proxyElementWorkerRoutes,transferCanvas:function(worker,options,route){if(!options)return void 0;if(!options._id)options._id=`canvas${Math.floor(Math.random()*1e15)}`;let offscreen=options.canvas.transferControlToOffscreen();let message={route:route?route:"receiveCanvas",args:{...options,canvas:offscreen}};this.graph.run("initProxyElement",options.canvas,worker,options._id);if(options.draw){if(typeof options.draw==="function")message.args.draw=options.draw.toString();else message.args.draw=options.draw}if(options.update){if(typeof options.update==="function")message.args.update=options.update.toString();else message.args.update=options.update}if(options.init){if(typeof options.init==="function")message.args.init=options.init.toString();else message.args.init=options.init}if(options.clear){if(typeof options.clear==="function")message.args.clear=options.clear.toString();else message.args.clear=options.clear}let transfer=[offscreen];if(options.transfer){transfer.push(...options.transfer);delete options.transfer}worker.postMessage(message,transfer);const workercontrols={_id:options._id,width:options.width,height:options.height,worker,draw:props=>{worker.postMessage({route:"drawFrame",args:[options._id,props]})},update:props=>{worker.postMessage({route:"updateCanvas",args:[options._id,props]})},clear:()=>{worker.postMessage({route:"clearCanvas",args:options._id})},init:()=>{worker.postMessage({route:"initCanvas",args:options._id})},stop:()=>{worker.postMessage({route:"stopAnim",args:options._id})},start:()=>{worker.postMessage({route:"startAnim",args:options._id})},set:newDrawProps=>{worker.postMessage({route:"setDraw",args:[newDrawProps,options._id]})}};return workercontrols},receiveCanvas:function(options){if(!this.graph.CANVASES)this.graph.CANVASES={};let canvasOptions=options;options._id?canvasOptions._id=options._id:canvasOptions._id=`canvas${Math.floor(Math.random()*1e15)}`;typeof options.context==="string"?canvasOptions.context=options.canvas.getContext(options.context):canvasOptions.context=options.context;"animating"in options?canvasOptions.animating=options.animating:canvasOptions.animating=true;if(this.graph.CANVASES[canvasOptions._id]){this.graph.run("setDraw",canvasOptions)}else{canvasOptions.graph=this.graph;this.graph.CANVASES[canvasOptions._id]=canvasOptions;this.graph.run("makeProxy",canvasOptions._id,canvasOptions.canvas);if(options.width)canvasOptions.canvas.width=options.width;if(options.height)canvasOptions.canvas.height=options.height;if(typeof canvasOptions.draw==="string"){canvasOptions.draw=parseFunctionFromText(canvasOptions.draw)}if(typeof canvasOptions.update==="string"){canvasOptions.update=parseFunctionFromText(canvasOptions.update)}if(typeof canvasOptions.init==="string"){canvasOptions.init=parseFunctionFromText(canvasOptions.init)}if(typeof canvasOptions.clear==="string"){canvasOptions.clear=parseFunctionFromText(canvasOptions.clear)}if(typeof canvasOptions.init==="function")canvasOptions.init(canvasOptions,canvasOptions.canvas,canvasOptions.context);if(typeof canvasOptions.draw==="function"&&canvasOptions.animating){let draw=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw(s,canvas,context)})}};draw(canvasOptions,canvasOptions.canvas,canvasOptions.context)}}return canvasOptions._id},setDraw:function(settings,_id){let canvasopts;if(_id)canvasopts=this.graph.CANVASES?.[settings._id];else if(settings._id)canvasopts=this.graph.CANVASES?.[settings._id];else canvasopts=this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];if(canvasopts){if(settings.canvas){canvasopts.canvas=settings.canvas;this.graph.run("makeProxy",canvasopts._id,canvasopts.canvas)}if(typeof settings.context==="string")canvasopts.context=canvasopts.canvas.getContext(settings.context);else if(settings.context)canvasopts.context=settings.context;if(settings.width)canvasopts.canvas.width=settings.width;if(settings.height)canvasopts.canvas.height=settings.height;if(typeof settings.draw==="string")settings.draw=parseFunctionFromText(settings.draw);if(typeof settings.draw==="function"){canvasopts.draw=settings.draw}if(typeof settings.update==="string")settings.update=parseFunctionFromText(settings.update);if(typeof settings.update==="function"){canvasopts.update=settings.update}if(typeof settings.init==="string")settings.init=parseFunctionFromText(settings.init);if(typeof settings.init==="function"){canvasopts.init=settings.init}if(typeof settings.clear==="string")settings.clear=parseFunctionFromText(settings.clear);if(typeof settings.clear==="function"){canvasopts.clear=settings.clear}return settings._id}return void 0},drawFrame:function(props,_id){let canvasopts;if(!_id)canvasopts=this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];else canvasopts=this.graph.CANVASES?.[_id];if(canvasopts){if(props)Object.assign(canvasopts,props);if(canvasopts.draw){canvasopts.draw(canvasopts,canvasopts.canvas,canvasopts.context);return _id}}return void 0},clearCanvas:function(_id){let canvasopts;if(!_id)canvasopts=this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];else canvasopts=this.graph.CANVASES?.[_id];if(canvasopts?.clear){canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0},initCanvas:function(_id){let canvasopts;if(!_id)canvasopts=this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];else canvasopts=this.graph.CANVASES?.[_id];if(canvasopts?.init){canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0},updateCanvas:function(input,_id){let canvasopts;if(!_id)canvasopts=this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];else canvasopts=this.graph.CANVASES?.[_id];if(canvasopts?.update){canvasopts.update(canvasopts,canvasopts.canvas,canvasopts.context,input);return _id}return void 0},setProps:function(props,_id){let canvasopts;if(!_id)canvasopts=this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];else canvasopts=this.graph.CANVASES?.[_id];if(canvasopts){Object.assign(canvasopts,props);if(props.width)canvasopts.canvas.width=props.width;if(props.height)canvasopts.canvas.height=props.height;return _id}return void 0},startAnim:function(_id,draw){let canvasopts;if(!_id)canvasopts=this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];else canvasopts=this.graph.CANVASES?.[_id];canvasopts.animating=true;if(canvasopts&&draw){if(typeof draw==="string")draw=parseFunctionFromText(draw);if(typeof draw==="function"){canvasopts.draw=draw}return _id}if(typeof canvasopts?.draw==="function"){let draw2=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw2(s,canvas,context)})}};if(typeof canvasopts.clear==="function")canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);if(typeof canvasopts.init==="function")canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);draw2(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0},stopAnim:function(_id){let canvasopts;if(!_id)canvasopts=this.graph.CANVASES?.[Object.keys(this.graph.CANVASES)[0]];else canvasopts=this.graph.CANVASES?.[_id];if(canvasopts){canvasopts.animating=false;if(typeof canvasopts.clear==="function")canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}};var algorithms={};var loadAlgorithms=settings=>{return Object.assign(algorithms,settings)};function createSubprocess(options,inputs){let ctx={_id:options._id?options._id:`algorithm${Math.floor(Math.random()*1e15)}`,ondata:options.ondata,run:data=>{return ctx.ondata(ctx,data)}};if(options.structs)recursivelyAssign(ctx,JSON.parse(JSON.stringify(options.structs)));if(inputs)recursivelyAssign(ctx,JSON.parse(JSON.stringify(inputs)));if(options.oncreate){ctx.oncreate=options.oncreate}if(ctx.oncreate){ctx.oncreate(ctx)}return ctx}var recursivelyAssign=(target,obj)=>{for(const key in obj){if(typeof obj[key]==="object"&&!Array.isArray(obj[key])){if(typeof target[key]==="object"&&!Array.isArray(target[key]))recursivelyAssign(target[key],obj[key]);else target[key]=recursivelyAssign({},obj[key])}else target[key]=obj[key]}return target};var subprocessRoutes={...unsafeRoutes,loadAlgorithms,"initSubprocesses":async function initSubprocesses(subprocesses,service){if(!service)service=this.graph;if(!service)return void 0;for(const p in subprocesses){let s=subprocesses[p];if(!s.worker&&s.url)s.worker=service.addWorker({url:s.url});if(!s.worker)continue;let w2=s.worker;let wpId;wpId=service.establishMessageChannel(w2.worker,s.source?.worker);if(!s.source)s.source=service;if(typeof s.subprocess==="object"){const p2=s.subprocess;if(!p2.name)continue;if(typeof p2.oncreate==="function"){p2.oncreate=p2.oncreate.toString()}if(typeof p2.ondata==="function"){p2.ondata=p2.ondata.toString()}s.worker.post("addSubprocessTemplate",[p2.name,p2.structs,p2.oncreate,p2.ondata,p2.props]);s.subprocess=p2.name}if(s.init){let r=await w2.run(s.init,s.initArgs);s.otherArgs=r}if(s.otherArgs){w2.run("setValue",["otherArgsProxy",Array.isArray(s.otherArgs)?s.otherArgs:[s.otherArgs]])}if(s.pipeTo){w2.run("setValue",["routeProxy",s.route]);w2.run("setValue",["pipeRoute",s.pipeTo.route]);if(s.url&&!s.pipeTo.worker){let w22=service.addWorker({url:s.url});s.pipeTo.portId=service.establishMessageChannel(w2.worker,w22.worker);s.pipeTo.worker=w22}if(s.pipeTo.init){s.pipeTo.otherArgs=await s.pipeTo.worker.run(s.pipeTo.init,s.pipeTo.initArgs)}w2.run("setValue",["pipePort",s.pipeTo.portId]);if(s.pipeTo.otherArgs)w2.run("setValue",["otherPipeArgs",s.pipeTo.otherArgs]);service.transferFunction(w2,function pipeResults(data){let inp=data;if(this.graph.otherArgsProxy)inp=[data,...this.graph.otherArgsProxy];let r=this.graph.run(this.graph.routeProxy,inp);if(!s.blocking)return new Promise(res=>{if(r instanceof Promise){r.then(rr=>{if(rr!==void 0){let args=rr;if(this.graph.otherPipeArgs)args=[rr,...this.graph.otherPipeArgs];if(this.workers[this.graph.pipePort]){s.blocking=true;this.workers[this.graph.pipePort].run(this.graph.pipeRoute,args).then(result=>{s.blocking=false;res(result)})}}})}else if(r!==void 0){let args=r;if(this.graph.otherPipeArgs)args=[r,...this.graph.otherPipeArgs];if(this.workers[this.graph.pipePort]){s.blocking=true;this.workers[this.graph.pipePort].run(this.graph.pipeRoute,args).then(result=>{s.blocking=false;res(result)})}}});return void 0},s.route+"_pipeResults");s.route=s.route+"_pipeResults"}else{w2.run("setValue",["routeProxy",s.route]);service.transferFunction(w2,function routeProxy(data){let r;if(this.graph.otherArgsProxy)r=this.graph.nodes.get(this.graph.routeProxy).operator(data,...this.graph.otherArgsProxy);else r=this.graph.nodes.get(this.graph.routeProxy).operator(data);if(this.graph.state.triggers[this.graph.routeProxy]){if(r instanceof Promise){r.then(rr=>{this.setState({[this.graph.routeProxy]:rr})})}else this.setState({[this.graph.routeProxy]:r})}return r},s.route+"_routeProxy");s.route=s.route+"_routeProxy";if(!s.stopped)w2.run("subscribeToWorker",[s.subscribeRoute,wpId,s.route]).then(sub=>{s.sub=sub})}s.stop=async()=>{if(s.source&&typeof s.sub==="number"){s.source.unsubscribe(s.subscribeRoute,s.sub);return true}return void 0};s.start=async()=>{if(typeof s.sub!=="number")return w2.run("subscribeToWorker",[s.subscribeRoute,wpId,s.route,s.blocking]).then(sub=>{s.sub=sub})};s.setArgs=async args=>{if(Array.isArray(args))await w2.run("setValue",["otherArgsProxy",args]);else if(typeof args==="object"){for(const key in args){await w2.run("setValue",[key,args[key]])}}return true};s.terminate=()=>{w2.terminate();if(s.source?.worker&&typeof s.sub==="number"){s.source.post("unsubscribe",s.sub)}if(s.pipeTo?.worker){s.pipeTo.worker.terminate()}};if(s.callback)w2.subscribe(s.route,res=>{if(typeof s.callback==="string")this.graph.run(s.callback,res);else s.callback(res)})}return subprocesses},"addSubprocessTemplate":function subprocesstempalte(name,structs,oncreate,ondata,props){if(typeof oncreate==="string")oncreate=parseFunctionFromText(oncreate);if(typeof ondata==="string")ondata=parseFunctionFromText(ondata);if(typeof ondata==="function"){algorithms[name]={ondata,oncreate:typeof oncreate==="function"?oncreate:null,structs};if(typeof props==="object")Object.assign(algorithms[name],props);return true}},"updateSubprocess":function updatesubprocess(structs,_id){if(!this.graph.ALGORITHMS)this.graph.ALGORITHMS={};if(!_id)_id=Object.keys(this.graph.ALGORITHMS)[0];if(!_id)return;Object.assign(this.graph.ALGORITHMS[_id],structs)},"createSubprocess":function creatsubprocess(options,inputs){if(!this.graph.ALGORITHMS)this.graph.ALGORITHMS={};if(typeof options==="string"){options=algorithms[options]}if(typeof options==="object"){if(typeof options.ondata==="string")options.ondata=parseFunctionFromText(options.ondata);let ctx;if(typeof options?.ondata==="function")ctx=createSubprocess(options,inputs);if(ctx)this.graph.ALGORITHMS[ctx._id]=ctx;if(ctx)return ctx._id}return false},"runSubprocess":function runsubprocess(data,_id){if(!this.graph.ALGORITHMS)this.graph.ALGORITHMS={};if(!_id)_id=Object.keys(this.graph.ALGORITHMS)[0];if(!_id)return;let res=this.graph.ALGORITHMS[_id].run(data);if(res!==void 0){if(Array.isArray(res)){let pass=[];res.forEach(r=>{if(r!==void 0){pass.push(r);this.graph.setState({[_id]:r})}});if(pass.length>0){return pass}}else{this.graph.setState({[_id]:res});return res}}}};var _ArrayManip=class{constructor(){this.recursivelyAssign=(target,obj)=>{for(const key in obj){if(typeof obj[key]==="object"){if(typeof target[key]==="object")this.recursivelyAssign(target[key],obj[key]);else target[key]=this.recursivelyAssign({},obj[key])}else target[key]=obj[key]}return target}}static autoscale(array,lineIdx=0,nLines=1,centerZero=false,ymin,ymax,clamp){if(array?.length===0)return array;let max=ymax?ymax:Math.max(...array);let min=ymin?ymin:Math.min(...array);let _lines=1/nLines;let scalar=1;if(centerZero){let absmax=Math.max(Math.abs(min),Math.abs(max));if(absmax!==0)scalar=_lines/absmax;return array.map(y=>{if(clamp){if(y<min)y=min;if(y>max)y=max}return y*scalar+(_lines*(lineIdx+1)*2-1-_lines)})}else{if(max===min){if(max!==0){scalar=_lines/max}else if(min!==0){scalar=_lines/Math.abs(min)}}else scalar=_lines/(max-min);return array.map(y=>{if(clamp){if(y<min)y=min;if(y>max)y=max}return 2*((y-min)*scalar-1/(2*nLines))+(_lines*(lineIdx+1)*2-1-_lines)})}}static genTimestamps(ct,sps10){let now=Date.now();let toInterp=[now-ct*1e3/sps10,now];return _ArrayManip.upsample(toInterp,ct)}static absmax(array){return Math.max(Math.abs(Math.min(...array)),Math.max(...array))}static downsample(array,fitCount,scalar=1){if(array.length>fitCount){let output=new Array(fitCount);let incr=array.length/fitCount;let lastIdx=array.length-1;let last=0;let counter=0;for(let i=incr;i<array.length;i+=incr){let rounded=Math.round(i);if(rounded>lastIdx)rounded=lastIdx;for(let j=last;j<rounded;j++){output[counter]+=array[j]}output[counter]/=(rounded-last)*scalar;counter++;last=rounded}return output}else return array}static upsample(array,fitCount,scalar=1){var linearInterpolate=function(before2,after2,atPoint2){return(before2+(after2-before2)*atPoint2)*scalar};var newData=new Array(fitCount);var springFactor=(array.length-1)/(fitCount-1);newData[0]=array[0];for(var i=1;i<fitCount-1;i++){var tmp=i*springFactor;var before=Math.floor(tmp);var after=Math.ceil(tmp);var atPoint=tmp-before;newData[i]=linearInterpolate(array[before],array[after],atPoint)}newData[fitCount-1]=array[array.length-1];return newData}static interpolate(array,fitCount,scalar=1){if(array.length>fitCount){return _ArrayManip.downsample(array,fitCount,scalar)}else if(array.length<fitCount){return _ArrayManip.upsample(array,fitCount,scalar)}return array}static HSLToRGB(h,s,l,scalar=255){s/=100;l/=100;let c=(1-Math.abs(2*l-1))*s,x=c*(1-Math.abs(h/60%2-1)),m=l-c/2,r=0,g=0,b=0;if(0<=h&&h<60){r=c;g=x;b=0}else if(60<=h&&h<120){r=x;g=c;b=0}else if(120<=h&&h<180){r=0;g=c;b=x}else if(180<=h&&h<240){r=0;g=x;b=c}else if(240<=h&&h<300){r=x;g=0;b=c}else if(300<=h&&h<360){r=c;g=0;b=x}r=(r+m)*scalar;g=(g+m)*scalar;b=(b+m)*scalar;return[r,g,b]}static circularBuffer(arr,newEntries){if(newEntries.length<arr.length){let slice=arr.slice(newEntries.length);let len=arr.length;arr.splice(0,len,...slice,...newEntries)}else if(newEntries.length>arr.length){let len=arr.length;arr.splice(0,len,newEntries.slice(len-newEntries.length))}else{arr.splice(0,arr.length,...newEntries)}return arr}static reformatData(data,key){if(Array.isArray(data)){if(Array.isArray(data[0])){let d2={};data.forEach((arr,i)=>{d2[i]=arr});data=d2;if(isNaN(data[0][0]))return void 0}else if(key){data={[key]:data};if(isNaN(data[key][0]))return void 0}else{data={0:data};if(isNaN(data[0][0]))return void 0}}else if(typeof data==="object"){for(const key2 in data){if(typeof data[key2]==="number")data[key2]=[data[key2]];else if(data[key2]?.values){if(typeof data[key2].values==="number")data[key2].values=[data[key2].values]}if(isNaN(data[key2][0]))return void 0}}else if(typeof data==="string"){let split;if(data.includes("\\r\\n")){let lines=data.split("\\r\\n");data={};lines.forEach((l,j)=>{if(l.includes("	")){split=l.split("	")}else if(l.includes(",")){split=l.split(",")}else if(l.includes("|")){split=l.split("|")}split.forEach((val,i)=>{if(val.includes(":")){let[key2,v]=val.split(":");let fl2=parseFloat(v);if(fl2)data[key2]=[fl2];else return void 0}else{let fl2=parseFloat(val);if(fl2)data[i]=[fl2];else return void 0}})})}else if(data.includes("	")){split=data.split("	")}else if(data.includes(",")){split=data.split(",")}else if(data.includes("|")){split=data.split("|")}data={};if(split){split.forEach((val,i)=>{if(val.includes(":")){let[key2,v]=val.split(":");let fl2=parseFloat(v);if(fl2)data[key2]=[fl2];else return void 0}else{let fl2=parseFloat(val);if(fl2)data[i]=[fl2];else return void 0}})}}else if(typeof data==="number"){if(key)data={[key]:[data]};else data={0:[data]}}return data}static padTime(data,lastValue,time,targetFit){let slopeIncr=(data[0]-lastValue)/time/targetFit;let padded=[...new Array(targetFit-data.length).map((_2,i)=>lastValue+slopeIncr*(i+1)),...data];return padded}static interpolateForTime(data,time,targetSPS){return _ArrayManip.interpolate(data,Math.ceil(targetSPS*time))}isTypedArray(x){return ArrayBuffer.isView(x)&&Object.prototype.toString.call(x)!=="[object DataView]"}spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let n;if(s.length>0||e?.length>0)n=new arr.constructor(s.length+e.length);if(s.length>0)n.set(s);if(e&&e.length>0)n.set(e,s.length);return n}};var ArrayManip=_ArrayManip;ArrayManip.bufferValues=(objects,property,keys,buffer)=>{if(!Array.isArray(keys)&&typeof keys==="object")keys=Object.keys(keys);if(!buffer){let object_keys=Object.keys(objects);if(keys)buffer=new Float32Array(object_keys.length*keys.length);else{if(typeof objects[object_keys[0]][property]==="object"){keys=Object.keys(objects[object_keys[0]][property]);buffer=new Float32Array(object_keys.length*keys.length)}else buffer=new Float32Array(object_keys.length)}}let i=0;for(const key in objects){if(objects[key][property]){if(keys){for(let j=0;j<keys.length;j++){buffer[i]=objects[key][property][keys[j]];i++}}else{buffer[i]=objects[key][property];i++}}}return buffer};var rechk=/^([<>])?(([1-9]\\d*)?([xcbB?hHiIfdsp]))*$/;var refmt=/([1-9]\\d*)?([xcbB?hHiIfdsp])/g;var str=(v,o,c)=>String.fromCharCode(...new Uint8Array(v.buffer,v.byteOffset+o,c));var rts=(v,o,c,s)=>new Uint8Array(v.buffer,v.byteOffset+o,c).set(s.split("").map(str2=>str2.charCodeAt(0)));var pst=(v,o,c)=>str(v,o+1,Math.min(v.getUint8(o),c-1));var tsp=(v,o,c,s)=>{v.setUint8(o,s.length);rts(v,o+1,c-1,s)};var lut=le=>({x:c=>[1,c,0],c:c=>[c,1,o=>({u:v=>str(v,o,1),p:(v,c2)=>rts(v,o,1,c2)})],"?":c=>[c,1,o=>({u:v=>Boolean(v.getUint8(o)),p:(v,B)=>v.setUint8(o,B)})],b:c=>[c,1,o=>({u:v=>v.getInt8(o),p:(v,b)=>v.setInt8(o,b)})],B:c=>[c,1,o=>({u:v=>v.getUint8(o),p:(v,B)=>v.setUint8(o,B)})],h:c=>[c,2,o=>({u:v=>v.getInt16(o,le),p:(v,h)=>v.setInt16(o,h,le)})],H:c=>[c,2,o=>({u:v=>v.getUint16(o,le),p:(v,H2)=>v.setUint16(o,H2,le)})],i:c=>[c,4,o=>({u:v=>v.getInt32(o,le),p:(v,i)=>v.setInt32(o,i,le)})],I:c=>[c,4,o=>({u:v=>v.getUint32(o,le),p:(v,I)=>v.setUint32(o,I,le)})],f:c=>[c,4,o=>({u:v=>v.getFloat32(o,le),p:(v,f)=>v.setFloat32(o,f,le)})],d:c=>[c,8,o=>({u:v=>v.getFloat64(o,le),p:(v,d2)=>v.setFloat64(o,d2,le)})],s:c=>[1,c,o=>({u:v=>str(v,o,c),p:(v,s)=>rts(v,o,c,s.slice(0,c))})],p:c=>[1,c,o=>({u:v=>pst(v,o,c),p:(v,s)=>tsp(v,o,c,s.slice(0,c-1))})]});var errbuf=new RangeError("Structure larger than remaining buffer");var errval=new RangeError("Not enough values for structure");var _ByteParser=class extends ArrayManip{static toDataView(value){if(!(value instanceof DataView)){if(typeof value==="string"&&parseInt(value))value=parseInt(value);if(typeof value==="string"){let enc=new TextEncoder;let hascodes={};for(const code in _ByteParser.codes){while(value.indexOf(code)>-1){let idx=value.indexOf(code);value=value.replace(code,"");hascodes[idx]=code}}let encoded=Array.from(enc.encode(value));for(const key in hascodes){encoded.splice(parseInt(key),0,_ByteParser.codes[hascodes[key]])}value=new DataView(new Uint8Array(encoded).buffer)}else if(typeof value==="number"){let tmp=value;if(value<256){value=new DataView(new ArrayBuffer(1));value.setUint8(0,tmp)}else if(value<65536){value=new DataView(new ArrayBuffer(2));value.setInt16(0,tmp)}else{value=new DataView(new ArrayBuffer(4));value.setUint32(0,tmp)}}else if(value instanceof ArrayBuffer||typeof SharedArrayBuffer!=="undefined"&&value instanceof SharedArrayBuffer){value=new DataView(value)}else if(Array.isArray(value)){value=new DataView(Uint8Array.from(value).buffer)}else if(typeof value==="object"){value=new TextEncoder().encode(JSON.stringify(value))}}return value}static searchBuffer(buffer,searchString,limit){var needle=searchString;var haystack=buffer;var search=_ByteParser.boyerMoore(needle);var skip=search.byteLength;var indices=[];for(var i=search(haystack);i!==-1;i=search(haystack,i+skip)){indices.push(i);if(limit){if(indices.length>=limit)break}}return indices}static bytesToInt16(x0,x1){let int16=(255&x0)<<8|255&x1;if((int16&32768)>0){int16|=4294901760}else{int16&=65535}return int16}static bytesToUInt16(x0,x1){return x0*256+x1}static Uint16ToBytes(y){return[y&255,y>>8&255]}static bytesToInt24(x0,x1,x2){let int24=(255&x0)<<16|(255&x1)<<8|255&x2;if((int24&8388608)>0){int24|=4278190080}else{int24&=16777215}return int24}static bytesToUInt24(x0,x1,x2){return x0*65536+x1*256+x2}static Uint24ToBytes(y){return[y&255,y>>8&255,y>>16&255]}static bytesToInt32(x0,x1,x2,x3){let int32=(255&x0)<<24|(255&x1)<<16|(255&x2)<<8|255&x3;if((int32&2147483648)>0){int32|=0}else{int32&=4294967295}return int32}static bytesToUInt32(x0,x1,x2,x3){return x0*16777216+x1*65536+x2*256+x3}static Uint32ToBytes(y){return[y&255,y>>8&255,y>>16&255,y>>24&255]}static get2sCompliment(val,nbits3){if(val>4294967296)return null;return val<<32-nbits3>>32-nbits3}static getSignedInt(...args){let pos=0;function getInt(size){var value=0;var first=true;while(size--){if(first){let byte=args[pos++];value+=byte&127;if(byte&128){value-=128}first=false}else{value*=256;value+=args[pos++]}}return value}return getInt(args.length)}static asUint8Array(input){if(input instanceof Uint8Array){return input}else if(typeof input==="string"){var arr=new Uint8Array(input.length);for(var i=0;i<input.length;i++){var c=input.charCodeAt(i);if(c>127){throw new TypeError("Only ASCII patterns are supported")}arr[i]=c}return arr}else{return new Uint8Array(input)}}static boyerMoore(patternBuffer){var pattern=_ByteParser.asUint8Array(patternBuffer);var M2=pattern.length;if(M2===0){throw new TypeError("patternBuffer must be at least 1 byte long")}var R2=256;var rightmost_positions=new Int32Array(R2);for(var c=0;c<R2;c++){rightmost_positions[c]=-1}for(var j=0;j<M2;j++){rightmost_positions[pattern[j]]=j}var boyerMooreSearch=(txtBuffer,start,end)=>{var txt=_ByteParser.asUint8Array(txtBuffer);if(start===void 0)start=0;if(end===void 0)end=txt.length;var pat=pattern;var right=rightmost_positions;var lastIndex=end-pat.length;var lastPatIndex=pat.length-1;var skip;for(var i=start;i<=lastIndex;i+=skip){skip=0;for(var j2=lastPatIndex;j2>=0;j2--){var c2=txt[i+j2];if(pat[j2]!==c2){skip=Math.max(1,j2-right[c2]);break}}if(skip===0){return i}}return-1};boyerMooreSearch.byteLength=pattern.byteLength;return boyerMooreSearch}static struct(format){let fns=[],size=0,m=rechk.exec(format);if(!m){throw new RangeError("Invalid format string")}const t=lut("<"===m[1]),lu=(n,c)=>t[c](n?parseInt(n,10):1);while(m=refmt.exec(format)){((r,s,f)=>{for(let i=0;i<r;++i,size+=s){if(f){fns.push(f(size))}}})(...lu(...m.slice(1)))}const unpack_from=(arrb,offs)=>{if(arrb.byteLength<(offs|0)+size){throw errbuf}let v=new DataView(arrb,offs|0);return fns.map(f=>f.u(v))};const pack_into=(arrb,offs,...values)=>{if(values.length<fns.length){throw errval}if(arrb.byteLength<offs+size){throw errbuf}const v=new DataView(arrb,offs);new Uint8Array(arrb,offs,size).fill(0);fns.forEach((f,i)=>f.p(v,values[i]))};const pack=(...values)=>{let b=new ArrayBuffer(size);pack_into(b,0,...values);return b};const unpack=arrb=>unpack_from(arrb,0);function*iter_unpack(arrb){for(let offs=0;offs+size<=arrb.byteLength;offs+=size){yield unpack_from(arrb,offs)}}return Object.freeze({unpack,pack,unpack_from,pack_into,iter_unpack,format,size})}};var ByteParser=_ByteParser;ByteParser.codes={"\\\\n":10,"\\\\r":13,"\\\\t":9,"\\\\s":32,"\\\\b":8,"\\\\f":12,"\\\\":92};var WebSerial=class extends ByteParser{constructor(){super(...arguments);this.streams={};this.createStream=options=>{let stream={_id:options._id?options._id:`stream${Math.floor(Math.random()*1e15)}`,info:options.port.getInfo(),running:false,...options};if(options.port?.readable){if(options.transforms){stream.reader=WebSerial.setStreamTransforms(options.port.readable,options.transforms).getReader()}else{stream.reader=options.port.readable.getReader()}}this.streams[stream._id]=stream;return stream}}getPorts(){return navigator.serial.getPorts()}requestPort(usbVendorId,usbProductId){let options={};if(usbVendorId){options.usbVendorId=usbVendorId}if(usbProductId){options.usbProductId=usbProductId}if(options.usbVendorId)return navigator.serial.requestPort({filters:[options]});else return navigator.serial.requestPort()}openPort(port,options){if(options)options=Object.assign({},options);if(options?.ondisconnect){port.ondisconnect=options.ondisconnect;delete options.ondisconnect}return port.open(options).then(()=>{if(options?.onconnect)options.onconnect(port)})}async readWithTimeout(port,timeout){const reader=port.readable.getReader();const timer=setTimeout(()=>{reader.releaseLock()},timeout);const result=await reader.read();clearTimeout(timer);reader.releaseLock();return result}async writePort(port,message){const writer=port.writable.getWriter();await writer.write(WebSerial.toDataView(message));writer.releaseLock();return true}getSignals(port){return port.getSignals()}setSignals(port,signals){return port.setSignals(signals)}readStream(stream){if(stream.reader&&!stream.running){let reader=stream.reader;if(stream.buffering){if(typeof stream.buffering!=="object")stream.buffering={};if(!stream.buffering.buffer){stream.buffering.buffer=[]}if(!stream.buffering.searchBytes)stream.buffering.searchBytes=new Uint8Array([13,10])}let readLoop=()=>{if(stream.port.readable&&stream.running){reader.read().then(result=>{if(result.done)reader.releaseLock();else{if(stream.buffering){stream.buffering.buffer.push(...result.value);const needle=stream.buffering.searchBytes;const haystack=stream.buffering.buffer;const search=WebSerial.boyerMoore(needle);const skip=search.byteLength;let nextIndex=-1;for(var i=search(haystack);i!==-1;i=search(haystack,i+skip)){if(!stream.buffering.locked&&!("lockIdx"in stream.buffering))stream.buffering.lockIdx=i;else{nextIndex=i;if(nextIndex>=0){if(!stream.buffering.locked){stream.ondata(new Uint8Array(stream.buffering.buffer.splice(stream.buffering.lockIdx+stream.buffering.searchBytes.length,nextIndex+stream.buffering.searchBytes.length)));stream.buffering.buffer.splice(0,stream.buffering.searchBytes.length);stream.buffering.locked=true}else if(nextIndex>0){stream.ondata(new Uint8Array(stream.buffering.buffer.splice(stream.buffering.searchBytes.length,nextIndex)))}}}}}else stream.ondata(result.value);setTimeout(()=>{readLoop()},stream.frequency)}}).catch(er=>{console.error(stream._id," Read error:",er);if(er.message.includes("overrun")||er.message.includes("framing")){delete stream.reader;this.reconnect(stream)}})}else if(!stream.running&&stream.port.readable){try{reader.releaseLock()}catch(er){console.error(er)}}};stream.running=true;readLoop();return stream}return void 0}writeStream(stream,message){if(typeof stream==="string")stream=this.streams[stream];if(stream.port.writable){let writer=stream.port.writable.getWriter();writer.write(WebSerial.toDataView(message));writer.releaseLock();return true}return void 0}closeStream(stream,onclose){if(typeof stream==="string")stream=this.streams[stream];stream.running=false;return new Promise((res,rej)=>{setTimeout(async()=>{if(stream.port.readable&&stream.reader){try{stream.reader.releaseLock()}catch(er){console.error(er)}if(stream.transforms)try{await stream.reader.cancel()}catch(err){console.error(err)}}try{await stream.port.close().then(()=>{if(onclose)onclose(this.streams[stream._id])});delete this.streams[stream._id];res(true)}catch(er){rej(er)}},300)})}reconnect(stream,options){if(typeof stream==="string")stream=this.streams[stream];return new Promise((res,rej)=>{if(typeof stream!=="object"){rej(void 0);return}let info=stream.port.getInfo();this.closeStream(stream._id).then(closed=>{setTimeout(()=>{this.getPorts().then(ports=>{for(let i=0;i<ports.length;i++){if(ports[i].getInfo().usbVendorId===info.usbVendorId&&ports[i].getInfo().usbProductId===info.usbProductId){if(!options)options=stream;else options._id=stream._id;delete options.port;this.openPort(ports[i],options.settings).then(()=>{const stream2=this.createStream({...options,port:ports[i]});this.readStream(stream2);res(stream2)}).catch(rej)}}}).catch(rej)},100)})})}static setStreamTransforms(stream,transforms){let transform=[];Object.keys(transforms).forEach(t=>{let opt=transforms[t];if(opt instanceof TransformStream){transform.push(opt)}else{if(!opt.start)opt.start=function start(){};if(!opt.flush)opt.flush=function flush(){};let transformer=new TransformStream({start:opt.start,transform:opt.transform,flush:opt.flush},opt.writableStrategy,opt.readableStrategy);transform.push(transformer)}});let str2=stream;transform.forEach(transform2=>{str2=str2.pipeThrough(transform2)});return str2}};function ads131m08codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array(9),1:new Array(9),2:new Array(9),3:new Array(9),4:new Array(9),5:new Array(9),6:new Array(9),7:new Array(9),timestamp:Date.now()};for(let i=0;i<9;i++){let j=i*25;output[0][i]=ByteParser.bytesToInt24(arr[j],arr[j+1],arr[j+2]);output[1][i]=ByteParser.bytesToInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i]=ByteParser.bytesToInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i]=ByteParser.bytesToInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i]=ByteParser.bytesToInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i]=ByteParser.bytesToInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i]=ByteParser.bytesToInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i]=ByteParser.bytesToInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var decoder=new TextDecoder;function ads131m08_arduinocodec(data){const parsed=decoder.decode(data);let split;if(parsed.includes("|"))split=parsed.split("|");else if(split.includes(","))split=parsed.split(",");else split=parsed.split("	");return{"0":parseInt(split[0]),"1":parseInt(split[1]),"2":parseInt(split[2]),"3":parseInt(split[3]),"4":parseInt(split[4]),"5":parseInt(split[5]),"6":parseInt(split[6]),"7":parseInt(split[7]),timestamp:Date.now()}}var sps=250;var defaultChartSetting={nSec:10,sps,units:"mV"};var ads131m08ChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting)),"1":JSON.parse(JSON.stringify(defaultChartSetting)),"2":JSON.parse(JSON.stringify(defaultChartSetting)),"3":JSON.parse(JSON.stringify(defaultChartSetting)),"4":JSON.parse(JSON.stringify(defaultChartSetting)),"5":JSON.parse(JSON.stringify(defaultChartSetting)),"6":JSON.parse(JSON.stringify(defaultChartSetting)),"7":JSON.parse(JSON.stringify(defaultChartSetting))}};var gain=32;var nbits=24;var vref=1.2;var defaultsetting={sps,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref/(gain*(Math.pow(2,nbits)-1))};var ads131m08FilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting)),"1":JSON.parse(JSON.stringify(defaultsetting)),"2":JSON.parse(JSON.stringify(defaultsetting)),"3":JSON.parse(JSON.stringify(defaultsetting)),"4":JSON.parse(JSON.stringify(defaultsetting)),"5":JSON.parse(JSON.stringify(defaultsetting)),"6":JSON.parse(JSON.stringify(defaultsetting)),"7":JSON.parse(JSON.stringify(defaultsetting))};function cytoncodec(data){let arr;if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i=0;i<8;i++){let idx=1+3*i;output[i]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=25;output.ax=ByteParser.bytesToInt16(arr[accIdx],arr[accIdx+1]);output.ay=ByteParser.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output.az=ByteParser.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output.gx=ByteParser.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output.gy=ByteParser.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output.gz=ByteParser.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps2=250;var cytonSerialSettings={baudRate:115200,codec:cytoncodec,sps:sps2};var defaultChartSetting2={nSec:10,sps:sps2,units:"mV"};var cytonChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting2)),"1":JSON.parse(JSON.stringify(defaultChartSetting2)),"2":JSON.parse(JSON.stringify(defaultChartSetting2)),"3":JSON.parse(JSON.stringify(defaultChartSetting2)),"4":JSON.parse(JSON.stringify(defaultChartSetting2)),"5":JSON.parse(JSON.stringify(defaultChartSetting2)),"6":JSON.parse(JSON.stringify(defaultChartSetting2)),"7":JSON.parse(JSON.stringify(defaultChartSetting2)),"ax":JSON.parse(JSON.stringify(defaultChartSetting2)),"ay":JSON.parse(JSON.stringify(defaultChartSetting2)),"az":JSON.parse(JSON.stringify(defaultChartSetting2)),"gx":JSON.parse(JSON.stringify(defaultChartSetting2)),"gy":JSON.parse(JSON.stringify(defaultChartSetting2)),"gz":JSON.parse(JSON.stringify(defaultChartSetting2))},generateNewLines:true};var defaultsetting2={sps:sps2,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*4.5/(24*(Math.pow(2,23)-1))};var cytonFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting2)),"1":JSON.parse(JSON.stringify(defaultsetting2)),"2":JSON.parse(JSON.stringify(defaultsetting2)),"3":JSON.parse(JSON.stringify(defaultsetting2)),"4":JSON.parse(JSON.stringify(defaultsetting2)),"5":JSON.parse(JSON.stringify(defaultsetting2)),"6":JSON.parse(JSON.stringify(defaultsetting2)),"7":JSON.parse(JSON.stringify(defaultsetting2)),"8":JSON.parse(JSON.stringify(defaultsetting2)),"9":JSON.parse(JSON.stringify(defaultsetting2)),"10":JSON.parse(JSON.stringify(defaultsetting2)),"11":JSON.parse(JSON.stringify(defaultsetting2)),"12":JSON.parse(JSON.stringify(defaultsetting2)),"13":JSON.parse(JSON.stringify(defaultsetting2)),"14":JSON.parse(JSON.stringify(defaultsetting2)),"15":JSON.parse(JSON.stringify(defaultsetting2))};function freeeeg128codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i=0;i<128;i++){let idx=i*3+1;output[i]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=385;output["ax"]=ByteParser.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps3=250;var freeeeg128SerialSettings={baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg128codec,sps:sps3};var freeeeg128ChartSettings={lines:{"ax":{nSec:10,sps:sps3},"ay":{nSec:10,sps:sps3},"az":{nSec:10,sps:sps3},"gx":{nSec:10,sps:sps3},"gy":{nSec:10,sps:sps3},"gz":{nSec:10,sps:sps3}}};var freeeeg128FilterSettings={};for(let i=0;i<128;i++){freeeeg128ChartSettings.lines[i]={sps:sps3,nSec:10,units:"mV"};freeeeg128FilterSettings[i]={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,scalar:1e3*2.5/(32*(Math.pow(2,24)-1))}}function freeeeg32codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i=0;i<32;i++){let idx=i*3+1;output[i]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=97;output["ax"]=ByteParser.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps4=512;var freeeeg32SerialSettings={baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec,sps:sps4};var freeeeg32_optical_SerialSettings={baudRate:1e6,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec,sps:sps4};var defaultChartSetting3={nSec:10,sps:sps4};var freeeeg32ChartSettings={lines:{"ax":JSON.parse(JSON.stringify(defaultChartSetting3)),"ay":JSON.parse(JSON.stringify(defaultChartSetting3)),"az":JSON.parse(JSON.stringify(defaultChartSetting3)),"gx":JSON.parse(JSON.stringify(defaultChartSetting3)),"gy":JSON.parse(JSON.stringify(defaultChartSetting3)),"gz":JSON.parse(JSON.stringify(defaultChartSetting3))}};var freeeeg32FilterSettings={};for(let i=0;i<32;i++){freeeeg32ChartSettings.lines[i]={sps:sps4,nSec:10,units:"mV"};freeeeg32FilterSettings[i]={sps:sps4,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*2.5/(8*(Math.pow(2,24)-1))}}var textdecoder=new TextDecoder;function hegduinocodec(value){let output={timestamp:0,red:0,infrared:0,heg:0,ambient:0,temperature:0};let txt=textdecoder.decode(value);let line=txt.split("|");if(line.length===3){output.timestamp=Date.now();output.red=parseInt(line[0]);output.infrared=parseInt(line[1]);output.heg=parseFloat(line[2])}else if(line.length>=5){output.timestamp=Date.now();output.red=parseInt(line[1]);output.infrared=parseInt(line[2]);output.heg=parseFloat(line[3]);output.ambient=parseFloat(line[4]);output.temperature=parseFloat(line[5]);return output}else return txt}var sps5=40;var hegduinoSerialSettings={baudRate:115200,write:"t\\n",codec:hegduinocodec,sps:sps5};var hegduinoV1SerialSettings=Object.assign({},hegduinoSerialSettings);hegduinoV1SerialSettings.sps=19;var hegduinoBLESettings={sps:sps5,services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:hegduinocodec,sps:sps5}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};var hegduinoV1BLESettings=Object.assign({},hegduinoSerialSettings);hegduinoV1BLESettings.sps=19;function max3010xcodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;const output={"red":new Array(32),"ir":new Array(32),"max_dietemp":ByteParser.get2sCompliment(arr[193],8)+.0625*arr[194],"timestamp":Date.now()};let i=0;while(i<32){let idx=i*6;if(i%2===0){output["ir"][i]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["ir"][i+1]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}else{output["red"][i-1]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["red"][i]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}i++}return output}function mpu6050codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={"ax":new Array(20),"ay":new Array(20),"az":new Array(20),"gx":new Array(20),"gy":new Array(20),"gz":new Array(20),"mpu_dietemp":(ByteParser.bytesToInt16(arr[241],arr[242])+521)/340+35,timestamp:Date.now()};for(let i=0;i<20;i++){let idx=i*12;output.ax[i]=ByteParser.bytesToInt16(arr[idx+1],arr[idx+2]);output.ay[i]=ByteParser.bytesToInt16(arr[idx+3],arr[idx+4]);output.az[i]=ByteParser.bytesToInt16(arr[idx+5],arr[idx+6]);output.gx[i]=ByteParser.bytesToInt16(arr[idx+7],arr[idx+8]);output.gy[i]=ByteParser.bytesToInt16(arr[idx+9],arr[idx+10]);output.gz[i]=ByteParser.bytesToInt16(arr[idx+11],arr[idx+12])}return output}function cognixionONE_EEG_codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array,1:new Array,2:new Array,3:new Array,4:new Array,5:new Array,6:new Array,7:new Array,timestamp:Date.now()};for(let i=0;i<7;i++){let j=i*26+1;if(!arr[j+23])break;output[0][i]=ByteParser.bytesToUInt24(arr[j],arr[j+1],arr[j+2]);output[1][i]=ByteParser.bytesToUInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i]=ByteParser.bytesToUInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i]=ByteParser.bytesToUInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i]=ByteParser.bytesToUInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i]=ByteParser.bytesToUInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i]=ByteParser.bytesToUInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i]=ByteParser.bytesToUInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var sps6=250;var cognixionONEBLESettings={services:{["82046698-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{["8204669A-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{notify:true,notifyCallback:void 0,codec:cognixionONE_EEG_codec,sps:sps6}},["82E12914-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{["82E12915-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{write:void 0},["82E12916-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{read:true}}},sps:sps6};var defaultChartSetting4={nSec:10,sps:sps6,units:"mV"};var cognixionONEChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting4)),"1":JSON.parse(JSON.stringify(defaultChartSetting4)),"2":JSON.parse(JSON.stringify(defaultChartSetting4)),"3":JSON.parse(JSON.stringify(defaultChartSetting4)),"4":JSON.parse(JSON.stringify(defaultChartSetting4)),"5":JSON.parse(JSON.stringify(defaultChartSetting4)),"6":JSON.parse(JSON.stringify(defaultChartSetting4)),"7":JSON.parse(JSON.stringify(defaultChartSetting4))}};var PeanutCodes={2:{type:"POOR_SIGNAL",format:"<B",byteLength:1},144:{type:"heg",format:"<i",byteLength:4},145:{type:"filteredHEG",format:"<i",byteLength:4},147:{type:"rawdata4",format:"<iiii",byteLength:4*4},148:{type:"rawdata6",format:"<iiiiii",byteLength:4*6},160:{type:"sampleNumber",format:"<i",byteLength:4},176:{type:"debug0",format:"<i",byteLength:4},177:{type:"debug1",format:"<i",byteLength:4},178:{type:"debug2",format:"<i",byteLength:4},179:{type:"debug3",format:"<i",byteLength:4},180:{type:"debug4",format:"<iiiiii",byteLength:4*6},181:{type:"debug4",format:"<iiiiii",byteLength:4*6},182:{type:"rawdata27",format:"<B"+"i".repeat(26),byteLength:1+4*26}};function peanutcodec(data){let result={};let i=0;while(i<data.length){if(PeanutCodes[data[i]]&&i+1+PeanutCodes[data[i]].byteLength<=data.length){let slice=data.slice(i+1,i+1+PeanutCodes[data[i]].byteLength).buffer;let unpacked=ByteParser.struct(PeanutCodes[data[i]].format).unpack(slice);let code=PeanutCodes[data[i]].type;if(code==="unfilteredHEG"||code==="heg")unpacked=unpacked[0]/256;else if(code==="POOR_SIGNAL"||code==="sampleNumber"||code==="debug0"||code==="debug1"||code==="debug2"||code==="debug3")unpacked=unpacked[0];if(!result[PeanutCodes[data[i]].type]){if(Array.isArray(unpacked))result[PeanutCodes[data[i]].type]=unpacked;else result[PeanutCodes[data[i]].type]=[unpacked]}else{if(Array.isArray(unpacked))result[PeanutCodes[data[i]].type].push(...unpacked);else result[PeanutCodes[data[i]].type].push(unpacked)}i+=PeanutCodes[data[i]].byteLength+1}else i++}result.timestamp=Date.now();return result}var peanutSerialSettings={baudRate:38400,bufferSize:400,write:"protocol 3\\n",buffering:{searchBytes:new Uint8Array([170,170])},codec:peanutcodec,sps:10.101};var sealevel_hpa=1013.25;var bme280codec=data=>{let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={temp:[],pressure:[],humidity:[],altitude:[]};for(let j=0;j<3;j++){let i=j*24;let tint=ByteParser.bytesToUInt32(arr[0+i],arr[1+i],arr[2+i],arr[3+i]);let tfrac=ByteParser.bytesToUInt32(arr[4+i],arr[5+i],arr[6+i],arr[7+i]);output.temp.push(tint+tfrac/Math.pow(10,Math.ceil(Math.log10(tfrac))));let pint=ByteParser.bytesToUInt32(arr[8+i],arr[9+i],arr[10+i],arr[11+i]);let pfrac=ByteParser.bytesToUInt32(arr[12+i],arr[13+i],arr[14+i],arr[15+i]);output.pressure.push(pint+pfrac/Math.pow(10,Math.ceil(Math.log10(pfrac))));let hint=ByteParser.bytesToUInt32(arr[16+i],arr[17+i],arr[18+i],arr[19+i]);let hfrac=ByteParser.bytesToUInt32(arr[20+i],arr[21+i],arr[22+i],arr[23+i]);output.humidity.push(hint+hfrac/Math.pow(10,Math.ceil(Math.log10(hfrac))));output.altitude.push(altitude(output.pressure[j],output.temp[j]))}return output};var exponent=1/5.257;var denom=1/.0065;function altitude(pressure,temperature){return(Math.pow(sealevel_hpa/pressure,exponent)-1)*(temperature+273.15)*denom}function nrf5x_usbcodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;const output={};if(arr[0]===2){Object.assign(output,ads131m08codec(arr.subarray(2)))}else if(arr[0]===3){let result=ads131m08codec(arr.subarray(2));Object.keys(result).forEach((key,i)=>{output[i+8]=result[key]})}else if(arr[0]===4){Object.assign(output,mpu6050codec(arr.subarray(2)))}else if(arr[0]===5){Object.assign(output,max3010xcodec(arr.subarray(2)))}else if(arr[0]===6){Object.assign(output,bme280codec(arr.subarray(2)))}else{Object.assign(output,ads131m08codec(arr))}return output}var nrf5xSerialSettings={baudRate:115200,buffering:{searchBytes:new Uint8Array([240,240])},codec:nrf5x_usbcodec,sps:250};var nrf5xBLESettings={sps:250,services:{"0000cafe-b0ba-8bad-f00d-deadbeef0000":{"0001cafe-b0ba-8bad-f00d-deadbeef0000":{write:void 0},"0002cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec,sps:250},"0003cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:max3010xcodec,sps:100},"0004cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:mpu6050codec,sps:100},"0005cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec,sps:250},"0006cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:bme280codec,sps:3.33}}}};var defaultChartSetting5={nSec:10,sps:250,units:"mV"};var nrf5x_usbChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting5)),"1":JSON.parse(JSON.stringify(defaultChartSetting5)),"2":JSON.parse(JSON.stringify(defaultChartSetting5)),"3":JSON.parse(JSON.stringify(defaultChartSetting5)),"4":JSON.parse(JSON.stringify(defaultChartSetting5)),"5":JSON.parse(JSON.stringify(defaultChartSetting5)),"6":JSON.parse(JSON.stringify(defaultChartSetting5)),"7":JSON.parse(JSON.stringify(defaultChartSetting5))},generateNewLines:true,cleanGeneration:false};var gain2=32;var nbits2=24;var vref2=1.2;var defaultsetting3={sps:250,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref2/(gain2*(Math.pow(2,nbits2)-1))};var nrf5x_usbFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting3)),"1":JSON.parse(JSON.stringify(defaultsetting3)),"2":JSON.parse(JSON.stringify(defaultsetting3)),"3":JSON.parse(JSON.stringify(defaultsetting3)),"4":JSON.parse(JSON.stringify(defaultsetting3)),"5":JSON.parse(JSON.stringify(defaultsetting3)),"6":JSON.parse(JSON.stringify(defaultsetting3)),"7":JSON.parse(JSON.stringify(defaultsetting3)),"8":JSON.parse(JSON.stringify(defaultsetting3)),"9":JSON.parse(JSON.stringify(defaultsetting3)),"10":JSON.parse(JSON.stringify(defaultsetting3)),"11":JSON.parse(JSON.stringify(defaultsetting3)),"12":JSON.parse(JSON.stringify(defaultsetting3)),"13":JSON.parse(JSON.stringify(defaultsetting3)),"14":JSON.parse(JSON.stringify(defaultsetting3)),"15":JSON.parse(JSON.stringify(defaultsetting3))};var textdecoder2=new TextDecoder;function statechangercodec(value){let output={timestamp:0,left_red:0,left_infrared:0,left_heg:0,center_red:0,center_infrared:0,center_heg:0,right_red:0,right_infrared:0,right_heg:0};let txt=textdecoder2.decode(value);let line=txt.split("|");if(line.length>=5){output.timestamp=Date.now();output.left_red=parseInt(line[1]);output.left_infrared=parseInt(line[2]);output.left_heg=parseFloat(line[3]);output.center_red=parseInt(line[4]);output.center_infrared=parseInt(line[5]);output.center_heg=parseFloat(line[6]);output.right_red=parseInt(line[7]);output.right_infrared=parseInt(line[8]);output.right_heg=parseFloat(line[9]);return output}else return txt}var statechangerSerialSettings={baudRate:115200,codec:statechangercodec};var statechangerBLESettings={services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:statechangercodec}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};function blueberrycodec(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.red/(.5*(output.ir+output.ir2));return output}var sps7=40;var blueberryBLESettings={namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"3f3e3d3c-3b3a-3938-3736-353433323130":{notify:true,notifyCallback:void 0,codec:blueberrycodec,sps:sps7}}},sps:sps7};function blueberryshortcodec(value){let output={sred:value.getInt32(2),sir:value.getInt32(6),sir2:value.getInt32(10),timestamp:Date.now()};output.sheg=output.sred/(.5*(output.sir+output.sir2));return output}function blueberrylongcodec(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.sred/(.5*(output.ir+output.ir2));return output}var sps8=40;var blueberry2BLESettings={namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"4f4e4d4c-4b6a-6968-6766-656463426160":{notify:true,notifyCallback:void 0,codec:blueberrylongcodec,sps:sps8},"4f4e4d4c-4b5a-5958-5756-555453425150":{notify:true,notifyCallback:void 0,codec:blueberryshortcodec,sps:sps8}}},sps:sps8};var Po=Object.create;var Ee=Object.defineProperty;var Do=Object.getOwnPropertyDescriptor;var Ao=Object.getOwnPropertyNames;var Eo=Object.getPrototypeOf;var ve=Object.prototype.hasOwnProperty;var vo=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var To=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of Ao(t))!ve.call(e,a)&&a!==n&&Ee(e,a,{get:()=>t[a],enumerable:!(r=Do(t,a))||r.enumerable});return e};var Ro=(e,t,n)=>(n=e!=null?Po(Eo(e)):{},To(t||!e||!e.__esModule?Ee(n,"default",{value:e,enumerable:true}):n,e));var jt=vo((ll,he)=>{var At,Et,vt,Tt,Rt,Nt,_t,Ft,Mt,Ce,Te,Gt,Ut,Lt,L,Ht,zt,Vt,Qt,Wt,qt,Yt,$t,Zt,pe;(function(e){var t=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(r){e(n(t,n(r)))}):typeof he=="object"&&typeof he.exports=="object"?e(n(t,n(he.exports))):e(n(t));function n(r,a){return r!==t&&(typeof Object.create=="function"?Object.defineProperty(r,"__esModule",{value:true}):r.__esModule=true),function(i,c){return r[i]=a?a(i,c):c}}})(function(e){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,a){r.__proto__=a}||function(r,a){for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(r[i]=a[i])};At=function(r,a){if(typeof a!="function"&&a!==null)throw new TypeError("Class extends value "+String(a)+" is not a constructor or null");t(r,a);function i(){this.constructor=r}r.prototype=a===null?Object.create(a):(i.prototype=a.prototype,new i)},Et=Object.assign||function(r){for(var a,i=1,c=arguments.length;i<c;i++){a=arguments[i];for(var s in a)Object.prototype.hasOwnProperty.call(a,s)&&(r[s]=a[s])}return r},vt=function(r,a){var i={};for(var c in r)Object.prototype.hasOwnProperty.call(r,c)&&a.indexOf(c)<0&&(i[c]=r[c]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var s=0,c=Object.getOwnPropertySymbols(r);s<c.length;s++)a.indexOf(c[s])<0&&Object.prototype.propertyIsEnumerable.call(r,c[s])&&(i[c[s]]=r[c[s]]);return i},Tt=function(r,a,i,c){var s=arguments.length,l=s<3?a:c===null?c=Object.getOwnPropertyDescriptor(a,i):c,u;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")l=Reflect.decorate(r,a,i,c);else for(var f=r.length-1;f>=0;f--)(u=r[f])&&(l=(s<3?u(l):s>3?u(a,i,l):u(a,i))||l);return s>3&&l&&Object.defineProperty(a,i,l),l},Rt=function(r,a){return function(i,c){a(i,c,r)}},Nt=function(r,a){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(r,a)},_t=function(r,a,i,c){function s(l){return l instanceof i?l:new i(function(u){u(l)})}return new(i||(i=Promise))(function(l,u){function f(p){try{m(c.next(p))}catch(B){u(B)}}function b(p){try{m(c.throw(p))}catch(B){u(B)}}function m(p){p.done?l(p.value):s(p.value).then(f,b)}m((c=c.apply(r,a||[])).next())})},Ft=function(r,a){var i={label:0,sent:function(){if(l[0]&1)throw l[1];return l[1]},trys:[],ops:[]},c,s,l,u;return u={next:f(0),throw:f(1),return:f(2)},typeof Symbol=="function"&&(u[Symbol.iterator]=function(){return this}),u;function f(m){return function(p){return b([m,p])}}function b(m){if(c)throw new TypeError("Generator is already executing.");for(;i;)try{if(c=1,s&&(l=m[0]&2?s.return:m[0]?s.throw||((l=s.return)&&l.call(s),0):s.next)&&!(l=l.call(s,m[1])).done)return l;switch(s=0,l&&(m=[m[0]&2,l.value]),m[0]){case 0:case 1:l=m;break;case 4:return i.label++,{value:m[1],done:false};case 5:i.label++,s=m[1],m=[0];continue;case 7:m=i.ops.pop(),i.trys.pop();continue;default:if(l=i.trys,!(l=l.length>0&&l[l.length-1])&&(m[0]===6||m[0]===2)){i=0;continue}if(m[0]===3&&(!l||m[1]>l[0]&&m[1]<l[3])){i.label=m[1];break}if(m[0]===6&&i.label<l[1]){i.label=l[1],l=m;break}if(l&&i.label<l[2]){i.label=l[2],i.ops.push(m);break}l[2]&&i.ops.pop(),i.trys.pop();continue}m=a.call(r,i)}catch(p){m=[6,p],s=0}finally{c=l=0}if(m[0]&5)throw m[1];return{value:m[0]?m[1]:void 0,done:true}}},Mt=function(r,a){for(var i in r)i!=="default"&&!Object.prototype.hasOwnProperty.call(a,i)&&pe(a,r,i)},pe=Object.create?function(r,a,i,c){c===void 0&&(c=i);var s=Object.getOwnPropertyDescriptor(a,i);(!s||("get"in s?!a.__esModule:s.writable||s.configurable))&&(s={enumerable:true,get:function(){return a[i]}}),Object.defineProperty(r,c,s)}:function(r,a,i,c){c===void 0&&(c=i),r[c]=a[i]},Ce=function(r){var a=typeof Symbol=="function"&&Symbol.iterator,i=a&&r[a],c=0;if(i)return i.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&c>=r.length&&(r=void 0),{value:r&&r[c++],done:!r}}};throw new TypeError(a?"Object is not iterable.":"Symbol.iterator is not defined.")},Te=function(r,a){var i=typeof Symbol=="function"&&r[Symbol.iterator];if(!i)return r;var c=i.call(r),s,l=[],u;try{for(;(a===void 0||a-- >0)&&!(s=c.next()).done;)l.push(s.value)}catch(f){u={error:f}}finally{try{s&&!s.done&&(i=c.return)&&i.call(c)}finally{if(u)throw u.error}}return l},Gt=function(){for(var r=[],a=0;a<arguments.length;a++)r=r.concat(Te(arguments[a]));return r},Ut=function(){for(var r=0,a=0,i=arguments.length;a<i;a++)r+=arguments[a].length;for(var c=Array(r),s=0,a=0;a<i;a++)for(var l=arguments[a],u=0,f=l.length;u<f;u++,s++)c[s]=l[u];return c},Lt=function(r,a,i){if(i||arguments.length===2)for(var c=0,s=a.length,l;c<s;c++)(l||!(c in a))&&(l||(l=Array.prototype.slice.call(a,0,c)),l[c]=a[c]);return r.concat(l||Array.prototype.slice.call(a))},L=function(r){return this instanceof L?(this.v=r,this):new L(r)},Ht=function(r,a,i){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var c=i.apply(r,a||[]),s,l=[];return s={},u("next"),u("throw"),u("return"),s[Symbol.asyncIterator]=function(){return this},s;function u(C){c[C]&&(s[C]=function(x){return new Promise(function(h,T){l.push([C,x,h,T])>1||f(C,x)})})}function f(C,x){try{b(c[C](x))}catch(h){B(l[0][3],h)}}function b(C){C.value instanceof L?Promise.resolve(C.value.v).then(m,p):B(l[0][2],C)}function m(C){f("next",C)}function p(C){f("throw",C)}function B(C,x){C(x),l.shift(),l.length&&f(l[0][0],l[0][1])}},zt=function(r){var a,i;return a={},c("next"),c("throw",function(s){throw s}),c("return"),a[Symbol.iterator]=function(){return this},a;function c(s,l){a[s]=r[s]?function(u){return(i=!i)?{value:L(r[s](u)),done:s==="return"}:l?l(u):u}:l}},Vt=function(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var a=r[Symbol.asyncIterator],i;return a?a.call(r):(r=typeof Ce=="function"?Ce(r):r[Symbol.iterator](),i={},c("next"),c("throw"),c("return"),i[Symbol.asyncIterator]=function(){return this},i);function c(l){i[l]=r[l]&&function(u){return new Promise(function(f,b){u=r[l](u),s(f,b,u.done,u.value)})}}function s(l,u,f,b){Promise.resolve(b).then(function(m){l({value:m,done:f})},u)}},Qt=function(r,a){return Object.defineProperty?Object.defineProperty(r,"raw",{value:a}):r.raw=a,r};var n=Object.create?function(r,a){Object.defineProperty(r,"default",{enumerable:true,value:a})}:function(r,a){r.default=a};Wt=function(r){if(r&&r.__esModule)return r;var a={};if(r!=null)for(var i in r)i!=="default"&&Object.prototype.hasOwnProperty.call(r,i)&&pe(a,r,i);return n(a,r),a},qt=function(r){return r&&r.__esModule?r:{default:r}},Yt=function(r,a,i,c){if(i==="a"&&!c)throw new TypeError("Private accessor was defined without a getter");if(typeof a=="function"?r!==a||!c:!a.has(r))throw new TypeError("Cannot read private member from an object whose class did not declare it");return i==="m"?c:i==="a"?c.call(r):c?c.value:a.get(r)},$t=function(r,a,i,c,s){if(c==="m")throw new TypeError("Private method is not writable");if(c==="a"&&!s)throw new TypeError("Private accessor was defined without a setter");if(typeof a=="function"?r!==a||!s:!a.has(r))throw new TypeError("Cannot write private member to an object whose class did not declare it");return c==="a"?s.call(r,i):s?s.value=i:a.set(r,i),i},Zt=function(r,a){if(a===null||typeof a!="object"&&typeof a!="function")throw new TypeError("Cannot use \'in\' operator on non-object");return typeof r=="function"?a===r:r.has(a)},e("__extends",At),e("__assign",Et),e("__rest",vt),e("__decorate",Tt),e("__param",Rt),e("__metadata",Nt),e("__awaiter",_t),e("__generator",Ft),e("__exportStar",Mt),e("__createBinding",pe),e("__values",Ce),e("__read",Te),e("__spread",Gt),e("__spreadArrays",Ut),e("__spreadArray",Lt),e("__await",L),e("__asyncGenerator",Ht),e("__asyncDelegator",zt),e("__asyncValues",Vt),e("__makeTemplateObject",Qt),e("__importStar",Wt),e("__importDefault",qt),e("__classPrivateFieldGet",Yt),e("__classPrivateFieldSet",$t),e("__classPrivateFieldIn",Zt)})});var Xt=Ro(jt(),1);var{__extends:w,__assign:ul,__rest:ml,__decorate:fl,__param:dl,__metadata:Cl,__awaiter:Kt,__generator:be,__exportStar:pl,__createBinding:hl,__values:_,__read:D,__spread:bl,__spreadArrays:Sl,__spreadArray:R,__await:Se,__asyncGenerator:Jt,__asyncDelegator:yl,__asyncValues:en,__makeTemplateObject:Il,__importStar:Bl,__importDefault:Ol,__classPrivateFieldGet:gl,__classPrivateFieldSet:xl,__classPrivateFieldIn:Pl}=Xt.default;function d(e){return typeof e=="function"}function H(e){var t=function(r){Error.call(r),r.stack=new Error().stack},n=e(t);return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var ye=H(function(e){return function(n){e(this),this.message=n?n.length+` errors occurred during unsubscription:\n`+n.map(function(r,a){return a+1+") "+r.toString()}).join(`\n  `):"",this.name="UnsubscriptionError",this.errors=n}});function K(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var z=function(){function e(t){this.initialTeardown=t,this.closed=false,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var t,n,r,a,i;if(!this.closed){this.closed=true;var c=this._parentage;if(c)if(this._parentage=null,Array.isArray(c))try{for(var s=_(c),l=s.next();!l.done;l=s.next()){var u=l.value;u.remove(this)}}catch(C){t={error:C}}finally{try{l&&!l.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}else c.remove(this);var f=this.initialTeardown;if(d(f))try{f()}catch(C){i=C instanceof ye?C.errors:[C]}var b=this._finalizers;if(b){this._finalizers=null;try{for(var m=_(b),p=m.next();!p.done;p=m.next()){var B=p.value;try{tn(B)}catch(C){i=i??[],C instanceof ye?i=R(R([],D(i)),D(C.errors)):i.push(C)}}}catch(C){r={error:C}}finally{try{p&&!p.done&&(a=m.return)&&a.call(m)}finally{if(r)throw r.error}}}if(i)throw new ye(i)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)tn(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=(n=this._finalizers)!==null&&n!==void 0?n:[]).push(t)}},e.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},e.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},e.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&K(n,t)},e.prototype.remove=function(t){var n=this._finalizers;n&&K(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=function(){var t=new e;return t.closed=true,t}(),e}();var Re=z.EMPTY;function Ie(e){return e instanceof z||e&&"closed"in e&&d(e.remove)&&d(e.add)&&d(e.unsubscribe)}function tn(e){d(e)?e():e.unsubscribe()}var P={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:false,useDeprecatedNextContext:false};var V={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var a=V.delegate;return a?.setTimeout?a.setTimeout.apply(a,R([e,t],D(n))):setTimeout.apply(void 0,R([e,t],D(n)))},clearTimeout:function(e){var t=V.delegate;return(t?.clearTimeout||clearTimeout)(e)},delegate:void 0};function Be(e){V.setTimeout(function(){var t=P.onUnhandledError;if(t)t(e);else throw e})}function J(){}var nn=function(){return Ne("C",void 0,void 0)}();function rn(e){return Ne("E",void 0,e)}function an(e){return Ne("N",e,void 0)}function Ne(e,t,n){return{kind:e,value:t,error:n}}var F=null;function Q(e){if(P.useDeprecatedSynchronousErrorHandling){var t=!F;if(t&&(F={errorThrown:false,error:null}),e(),t){var n=F,r=n.errorThrown,a=n.error;if(F=null,r)throw a}}else e()}function on(e){P.useDeprecatedSynchronousErrorHandling&&F&&(F.errorThrown=true,F.error=e)}var ee=function(e){w(t,e);function t(n){var r=e.call(this)||this;return r.isStopped=false,n?(r.destination=n,Ie(n)&&n.add(r)):r.destination=Mo,r}return t.create=function(n,r,a){return new ge(n,r,a)},t.prototype.next=function(n){this.isStopped?Fe(an(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?Fe(rn(n),this):(this.isStopped=true,this._error(n))},t.prototype.complete=function(){this.isStopped?Fe(nn,this):(this.isStopped=true,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=true,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(z);var No=Function.prototype.bind;function _e(e,t){return No.call(e,t)}var _o=function(){function e(t){this.partialObserver=t}return e.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(r){Oe(r)}},e.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(r){Oe(r)}else Oe(t)},e.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(n){Oe(n)}},e}();var ge=function(e){w(t,e);function t(n,r,a){var i=e.call(this)||this,c;if(d(n)||!n)c={next:n??void 0,error:r??void 0,complete:a??void 0};else{var s;i&&P.useDeprecatedNextContext?(s=Object.create(n),s.unsubscribe=function(){return i.unsubscribe()},c={next:n.next&&_e(n.next,s),error:n.error&&_e(n.error,s),complete:n.complete&&_e(n.complete,s)}):c=n}return i.destination=new _o(c),i}return t}(ee);function Oe(e){P.useDeprecatedSynchronousErrorHandling?on(e):Be(e)}function Fo(e){throw e}function Fe(e,t){var n=P.onStoppedNotification;n&&V.setTimeout(function(){return n(e,t)})}var Mo={closed:true,next:J,error:Fo,complete:J};var W=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}();function q(e){return e}function cn(e){return e.length===0?q:e.length===1?e[0]:function(n){return e.reduce(function(r,a){return a(r)},n)}}var O=function(){function e(t){t&&(this._subscribe=t)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(t,n,r){var a=this,i=Uo(t)?t:new ge(t,n,r);return Q(function(){var c=a,s=c.operator,l=c.source;i.add(s?s.call(i,l):l?a._subscribe(i):a._trySubscribe(i))}),i},e.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},e.prototype.forEach=function(t,n){var r=this;return n=sn(n),new n(function(a,i){var c=new ge({next:function(s){try{t(s)}catch(l){i(l),c.unsubscribe()}},error:i,complete:a});r.subscribe(c)})},e.prototype._subscribe=function(t){var n;return(n=this.source)===null||n===void 0?void 0:n.subscribe(t)},e.prototype[W]=function(){return this},e.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return cn(t)(this)},e.prototype.toPromise=function(t){var n=this;return t=sn(t),new t(function(r,a){var i;n.subscribe(function(c){return i=c},function(c){return a(c)},function(){return r(i)})})},e.create=function(t){return new e(t)},e}();function sn(e){var t;return(t=e??P.Promise)!==null&&t!==void 0?t:Promise}function Go(e){return e&&d(e.next)&&d(e.error)&&d(e.complete)}function Uo(e){return e&&e instanceof ee||Go(e)&&Ie(e)}var Ho=function(e){w(t,e);function t(n,r,a,i,c,s){var l=e.call(this,n)||this;return l.onFinalize=c,l.shouldUnsubscribe=s,l._next=r?function(u){try{r(u)}catch(f){n.error(f)}}:e.prototype._next,l._error=i?function(u){try{i(u)}catch(f){n.error(f)}finally{this.unsubscribe()}}:e.prototype._error,l._complete=a?function(){try{a()}catch(u){n.error(u)}finally{this.unsubscribe()}}:e.prototype._complete,l}return t.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),!r&&((n=this.onFinalize)===null||n===void 0||n.call(this))}},t}(ee);var ln=H(function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}});var M=function(e){w(t,e);function t(){var n=e.call(this)||this;return n.closed=false,n.currentObservers=null,n.observers=[],n.isStopped=false,n.hasError=false,n.thrownError=null,n}return t.prototype.lift=function(n){var r=new un(this,this);return r.operator=n,r},t.prototype._throwIfClosed=function(){if(this.closed)throw new ln},t.prototype.next=function(n){var r=this;Q(function(){var a,i;if(r._throwIfClosed(),!r.isStopped){r.currentObservers||(r.currentObservers=Array.from(r.observers));try{for(var c=_(r.currentObservers),s=c.next();!s.done;s=c.next()){var l=s.value;l.next(n)}}catch(u){a={error:u}}finally{try{s&&!s.done&&(i=c.return)&&i.call(c)}finally{if(a)throw a.error}}}})},t.prototype.error=function(n){var r=this;Q(function(){if(r._throwIfClosed(),!r.isStopped){r.hasError=r.isStopped=true,r.thrownError=n;for(var a=r.observers;a.length;)a.shift().error(n)}})},t.prototype.complete=function(){var n=this;Q(function(){if(n._throwIfClosed(),!n.isStopped){n.isStopped=true;for(var r=n.observers;r.length;)r.shift().complete()}})},t.prototype.unsubscribe=function(){this.isStopped=this.closed=true,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var n;return((n=this.observers)===null||n===void 0?void 0:n.length)>0},enumerable:false,configurable:true}),t.prototype._trySubscribe=function(n){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,n)},t.prototype._subscribe=function(n){return this._throwIfClosed(),this._checkFinalizedStatuses(n),this._innerSubscribe(n)},t.prototype._innerSubscribe=function(n){var r=this,a=this,i=a.hasError,c=a.isStopped,s=a.observers;return i||c?Re:(this.currentObservers=null,s.push(n),new z(function(){r.currentObservers=null,K(s,n)}))},t.prototype._checkFinalizedStatuses=function(n){var r=this,a=r.hasError,i=r.thrownError,c=r.isStopped;a?n.error(i):c&&n.complete()},t.prototype.asObservable=function(){var n=new O;return n.source=this,n},t.create=function(n,r){return new un(n,r)},t}(O);var un=function(e){w(t,e);function t(n,r){var a=e.call(this)||this;return a.destination=n,a.source=r,a}return t.prototype.next=function(n){var r,a;(a=(r=this.destination)===null||r===void 0?void 0:r.next)===null||a===void 0||a.call(r,n)},t.prototype.error=function(n){var r,a;(a=(r=this.destination)===null||r===void 0?void 0:r.error)===null||a===void 0||a.call(r,n)},t.prototype.complete=function(){var n,r;(r=(n=this.destination)===null||n===void 0?void 0:n.complete)===null||r===void 0||r.call(n)},t.prototype._subscribe=function(n){var r,a;return(a=(r=this.source)===null||r===void 0?void 0:r.subscribe(n))!==null&&a!==void 0?a:Re},t}(M);var Me=function(e){w(t,e);function t(n){var r=e.call(this)||this;return r._value=n,r}return Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:false,configurable:true}),t.prototype._subscribe=function(n){var r=e.prototype._subscribe.call(this,n);return!r.closed&&n.next(this._value),r},t.prototype.getValue=function(){var n=this,r=n.hasError,a=n.thrownError,i=n._value;if(r)throw a;return this._throwIfClosed(),i},t.prototype.next=function(n){e.prototype.next.call(this,this._value=n)},t}(M);var mn=new O(function(e){return e.complete()});function zo(){return typeof Symbol!="function"||!Symbol.iterator?"@@iterator":Symbol.iterator}var hn=zo();var Pe=H(function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}});var Zo=Array.isArray;var Va=51;var Qa=1.2;var Yc=Qa/(8388607*Va*1.5);var Ct=`\nLIS3DH Registers\n0x07.0\n0x08.0\n0x09.0\n0x0A.0\n0x0B.0\n0x0C.0\n0x0D.0\n0x0E.0\n0x0F.33\n\n0x1F.0\n0x20.8\n0x21.0\n0x22.0\n0x23.18\n0x24.0\n0x25.0\n0x26.0\n0x27.0\n0x28.0\n0x29.0\n0x2A.0\n0x2B.0\n0x2C.0\n0x2D.0\n0x2E.0\n0x2F.20\n0x30.0\n0x31.0\n0x32.0\n0x33.0\n\n0x38.0\n0x39.0\n0x3A.0\n0x3B.0\n0x3C.0\n0x3D.0\n`;var pt=`\nLIS3DH Registers\n0x07 00\n0x08 00\n0x09 00\n0x0A 00\n0x0B 00\n0x0C 00\n0x0D 00\n0x0E 00\n0x0F 33\n\n0x1F 00\n0x20 08\n0x21 00\n0x22 00\n0x23 18\n0x24 00\n0x25 00\n0x26 00\n0x27 00\n0x28 00\n0x29 00\n0x2A 00\n0x2B 00\n0x2C 00\n0x2D 00\n0x2E 00\n0x2F 20\n0x30 00\n0x31 00\n0x32 00\n0x33 00\n\n0x38 00\n0x39 00\n0x3A 00\n0x3B 00\n0x3C 00\n0x3D 00\n`;var ie=`\nBoard ADS Registers\nADS_ID, 00, 3E, 0, 0, 1, 1, 1, 1, 1, 0\nCONFIG1, 01, 96, 1, 0, 0, 1, 0, 1, 1, 0\nCONFIG2, 02, C0, 1, 1, 0, 0, 0, 0, 0, 0\nCONFIG3, 03, EC, 1, 1, 1, 0, 1, 1, 0, 0\nLOFF, 04, 02, 0, 0, 0, 0, 0, 0, 1, 0\nCH1SET, 05, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH2SET, 06, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH3SET, 07, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH4SET, 08, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH5SET, 09, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH6SET, 0A, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH7SET, 0B, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH8SET, 0C, 68, 0, 1, 1, 0, 1, 0, 0, 0\nBIAS_SENSP, 0D, FF, 1, 1, 1, 1, 1, 1, 1, 1\nBIAS_SENSN, 0E, FF, 1, 1, 1, 1, 1, 1, 1, 1\nLOFF_SENSP, 0F, 00, 0, 0, 0, 0, 0, 0, 0, 0\nLOFF_SENSN, 10, 00, 0, 0, 0, 0, 0, 0, 0, 0\nLOFF_FLIP, 11, 00, 0, 0, 0, 0, 0, 0, 0, 0\nLOFF_STATP, 12, 00, 0, 0, 0, 0, 0, 0, 0, 0\nLOFF_STATN, 13, 00, 0, 0, 0, 0, 0, 0, 0, 0\nGPIO, 14, 0F, 0, 0, 0, 0, 1, 1, 1, 1\nMISC1, 15, 00, 0, 0, 0, 0, 0, 0, 0, 0\nMISC2, 16, 00, 0, 0, 0, 0, 0, 0, 0, 0\nCONFIG4, 17, 00, 0, 0, 0, 0, 0, 0, 0, 0\n`;var ht=`\nDaisy ADS Registers\nADS_ID, 00, 3E, 0, 0, 1, 1, 1, 1, 1, 0\nCONFIG1, 01, 96, 1, 0, 0, 1, 0, 1, 1, 0\nCONFIG2, 02, C0, 1, 1, 0, 0, 0, 0, 0, 0\nCONFIG3, 03, EC, 1, 1, 1, 0, 1, 1, 0, 0\nLOFF, 04, 02, 0, 0, 0, 0, 0, 0, 1, 0\nCH1SET, 05, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH2SET, 06, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH3SET, 07, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH4SET, 08, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH5SET, 09, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH6SET, 0A, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH7SET, 0B, 68, 0, 1, 1, 0, 1, 0, 0, 0\nCH8SET, 0C, 68, 0, 1, 1, 0, 1, 0, 0, 0\nBIAS_SENSP, 0D, FF, 1, 1, 1, 1, 1, 1, 1, 1\nBIAS_SENSN, 0E, FF, 1, 1, 1, 1, 1, 1, 1, 1\nLOFF_SENSP, 0F, 00, 0, 0, 0, 0, 0, 0, 0, 0\nLOFF_SENSN, 10, 00, 0, 0, 0, 0, 0, 0, 0, 0\nLOFF_FLIP, 11, 00, 0, 0, 0, 0, 0, 0, 0, 0\nLOFF_STATP, 12, 00, 0, 0, 0, 0, 0, 0, 0, 0\nLOFF_STATN, 13, 00, 0, 0, 0, 0, 0, 0, 0, 0\nGPIO, 14, 0F, 0, 0, 0, 0, 1, 1, 1, 1\nMISC1, 15, 00, 0, 0, 0, 0, 0, 0, 0, 0\nMISC2, 16, 00, 0, 0, 0, 0, 0, 0, 0, 0\nCONFIG4, 17, 00, 0, 0, 0, 0, 0, 0, 0, 0\n`;var Is=ie.length+Ct.length;var Bs=ie.length+ht.length+Ct.length;var Os=ie.length+pt.length;var gs=ie.length+ht.length+pt.length;var $=.002/Math.pow(2,4);var sps9=250;var defaultsetting4={sps:sps9,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45};var ganglionFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting4)),"1":JSON.parse(JSON.stringify(defaultsetting4)),"2":JSON.parse(JSON.stringify(defaultsetting4)),"3":JSON.parse(JSON.stringify(defaultsetting4))};var defaultChartSetting6={nSec:10,sps:sps9,units:"mV"};var ganglionChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting6)),"1":JSON.parse(JSON.stringify(defaultChartSetting6)),"2":JSON.parse(JSON.stringify(defaultChartSetting6)),"3":JSON.parse(JSON.stringify(defaultChartSetting6)),"ax":JSON.parse(JSON.stringify(defaultChartSetting6)),"ay":JSON.parse(JSON.stringify(defaultChartSetting6)),"az":JSON.parse(JSON.stringify(defaultChartSetting6))},generateNewLines:true};function hrcodec(data){return{hr:data.getInt8(1),timestamp:Date.now()}}var heartRateBLESettings={services:{"heart_rate":{"heart_rate_measurement":{notify:true,notifyCallback:void 0,codec:hrcodec}}}};var Devices={BLE:{"nrf5x":nrf5xBLESettings,"hegduino":hegduinoBLESettings,"hegduinoV1":hegduinoV1BLESettings,"cognixionONE":cognixionONEBLESettings,"statechanger":statechangerBLESettings,"blueberry":blueberryBLESettings,"blueberry2":blueberry2BLESettings,"heart_rate":heartRateBLESettings},USB:{"nrf5x":nrf5xSerialSettings,"freeEEG32":freeeeg32SerialSettings,"freeEEG32_optical":freeeeg32_optical_SerialSettings,"freeEEG128":freeeeg128SerialSettings,"hegduino":hegduinoSerialSettings,"hegduinoV1":hegduinoV1SerialSettings,"cyton":cytonSerialSettings,"cyton_daisy":cytonSerialSettings,"peanut":peanutSerialSettings,"statechanger":statechangerSerialSettings,"cognixionONE":cytonSerialSettings},BLE_OTHER:{},USB_OTHER:{},OTHER:{}};var textdecoder3=new TextDecoder;var decoders={"raw":data=>{if(data?.buffer)return Array.from(new Uint8Array(data));else return data},"utf8":data=>{return textdecoder3.decode(data)},"console-f12":data=>{if(data?.buffer)data=Array.from(new Uint8Array(data));console.log(data);return data},"debug":(data,debugmessage)=>{if(data?.buffer)data=Array.from(new Uint8Array(data));console.log(debugmessage,data);return data},"ads131m08":ads131m08codec,"arduino_ads131m08":ads131m08_arduinocodec,"max3010x":max3010xcodec,"mpu6050":mpu6050codec,"bme280":bme280codec,"freeeeg32":freeeeg32codec,"freeeeg128":freeeeg128codec,"cyton":cytoncodec,"cognixionONE_BLE":cognixionONE_EEG_codec,"hegduino":hegduinocodec,"nrf5x":nrf5x_usbcodec,"peanut":peanutcodec,"statechanger":statechangercodec,"blueberry":blueberrycodec,"heart_rate":hrcodec};var BiquadChannelFilterer=class{constructor(options={sps:512,useSMA4:false,useNotch50:true,useNotch60:true,useLowpass:false,lowpassHz:100,useBandpass:false,bandpassLower:3,bandpassUpper:45,useDCBlock:true,DCBresonance:.995,trimOutliers:false,outlierTolerance:.2,useScaling:false,scalar:1}){this.idx=0;this.sps=options.sps;this.bandpassLower=options.bandpassLower?options.bandpassLower:3;this.bandpassUpper=options.bandpassUpper?options.bandpassUpper:45;this.useSMA4=options.useSMA4;this.last4=[];this.useNotch50=options.useNotch50;this.useNotch60=options.useNotch60;this.useLowpass=options.useLowpass;this.lowpassHz=options.lowpassHz?options.lowpassHz:100;this.useBandpass=options.useBandpass;this.useDCBlock=options.useDCBlock;this.DCBresonance=options.DCBresonance?options.DCBresonance:.995;this.useScaling=options.useScaling;this.scalar=options.scalar;this.trimOutliers=options.trimOutliers;this.outlierTolerance=options.outlierTolerance;let sps10=this.sps;this.notch50=[makeNotchFilter(50,sps10,2),makeNotchFilter(100,sps10,2)];this.notch60=[makeNotchFilter(60,sps10,2),makeNotchFilter(120,sps10,2)];this.lp1=[new Biquad("lowpass",this.lowpassHz,sps10),new Biquad("lowpass",this.lowpassHz,sps10),new Biquad("lowpass",this.lowpassHz,sps10),new Biquad("lowpass",this.lowpassHz,sps10)];this.bp1=[makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1)];this.dcb=new DCBlocker(options.DCBresonance?options.DCBresonance:.995)}reset(sps10=this.sps){this.notch50=[makeNotchFilter(50,sps10,2),makeNotchFilter(100,sps10,2)];this.notch60=[makeNotchFilter(60,sps10,2),makeNotchFilter(120,sps10,2)];this.lp1=[new Biquad("lowpass",this.lowpassHz,sps10),new Biquad("lowpass",this.lowpassHz,sps10),new Biquad("lowpass",this.lowpassHz,sps10),new Biquad("lowpass",this.lowpassHz,sps10)];this.bp1=[makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1)];this.dcb=new DCBlocker(this.DCBresonance)}setBandpass(bandpassLower=this.bandpassLower,bandpassUpper=this.bandpassUpper,sps10=this.sps){this.bandpassLower=bandpassLower;this.bandpassUpper=bandpassUpper;this.bp1=[makeBandpassFilter(bandpassLower,bandpassUpper,sps10),makeBandpassFilter(bandpassLower,bandpassUpper,sps10),makeBandpassFilter(bandpassLower,bandpassUpper,sps10),makeBandpassFilter(bandpassLower,bandpassUpper,sps10)]}apply(latestData=0){let out=latestData;if(this.useScaling===true){out*=this.scalar}if(this.filtered&&this.trimOutliers&&this.outlierTolerance){if(Math.abs(out-this.filtered)>this.outlierTolerance){out=this.filtered}}if(this.useDCBlock===true){out=this.dcb.applyFilter(out)}if(this.useSMA4===true){if(this.last4.length<4){this.last4.push(out)}else{out=this.last4.reduce((accumulator,currentValue)=>accumulator+currentValue)/this.last4.length;this.last4.shift();this.last4.push(out)}}if(this.useNotch50===true){this.notch50.forEach((f,i)=>{out=f.applyFilter(out)})}if(this.useNotch60===true){this.notch60.forEach((f,i)=>{out=f.applyFilter(out)})}if(this.useLowpass===true){this.lp1.forEach((f,i)=>{out=f.applyFilter(out)})}if(this.useBandpass===true){this.bp1.forEach((f,i)=>{out=f.applyFilter(out)})}this.filtered=out;this.idx++;return out}};var Biquad=class{constructor(type,freq,sps10,Q2=1/Math.sqrt(2),dbGain=0){this.a0=0;this.a1=0;this.a2=0;this.b0=0;this.b1=0;this.b2=0;this.x1=0;this.x2=0;this.y1=0;this.y2=0;let types=["lowpass","highpass","bandpass","notch","peak","lowshelf","highshelf"];if(types.indexOf(type)<0){console.error("Valid types: \'lowpass\',\'highpass\',\'bandpass\',\'notch\',\'peak\',\'lowshelf\',\'highshelf\'");return}this.type=type;this.freq=freq;this.sps=sps10;this.Q=Q2;this.dbGain=dbGain;let A=Math.pow(10,dbGain/40);let omega=2*Math.PI*freq/sps10;let sn2=Math.sin(omega);let cs=Math.cos(omega);let alpha=sn2/(2*Q2);let beta=Math.sqrt(A+A);this[type](A,sn2,cs,alpha,beta);this.b0/=this.a0;this.b1/=this.a0;this.b2/=this.a0;this.a1/=this.a0;this.a2/=this.a0}lowpass(A,sn2,cs,alpha,beta){this.b0=(1-cs)*.5;this.b1=1-cs;this.b2=(1-cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}highpass(A,sn2,cs,alpha,beta){this.b0=(1+cs)*.5;this.b1=-(1+cs);this.b2=(1+cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}bandpass(A,sn2,cs,alpha,beta){this.b0=alpha;this.b1=0;this.b2=-alpha;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}notch(A,sn2,cs,alpha,beta){this.b0=1;this.b1=-2*cs;this.b2=1;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}peak(A,sn2,cs,alpha,beta){this.b0=1+alpha*A;this.b1=-2*cs;this.b2=1-alpha*A;this.a0=1+alpha/A;this.a1=-2*cs;this.a2=1-alpha/A}lowshelf(A,sn2,cs,alpha,beta){this.b0=A*(A+1-(A-1)*cs+beta*sn2);this.b1=2*A*(A-1-(A+1)*cs);this.b2=A*(A+1-(A-1)*cs-beta*sn2);this.a0=A+1+(A+1)*cs+beta*sn2;this.a1=2*(A-1+(A+1)*cs);this.a2=A+1+(A-1)*cs-beta*sn2}highshelf(A,sn2,cs,alpha,beta){this.b0=A*(A+1+(A-1)*cs+beta*sn2);this.b1=2*A*(A-1+(A+1)*cs);this.b2=A*(A+1-(A-1)*cs-beta*sn2);this.a0=A+1-(A+1)*cs-beta*sn2;this.a1=2*(A-1-(A+1)*cs);this.a2=A+1-(A-1)*cs-beta*sn2}applyFilter(signal_step){let y=this.b0*signal_step+this.b1*this.x1+this.b2*this.x2-this.a1*this.y1-this.a2*this.y2;this.x2=this.x1;this.x1=signal_step;this.y2=this.y1;this.y1=y;return y}zResult(freq){try{let phi=Math.pow(Math.sin(Math.PI*freq*2/(2*this.sps)),2);let result=(Math.pow(this.b0+this.b1+this.b2,2)-4*(this.b0*this.b1+4*this.b0*this.b2+this.b1*this.b2)*phi+16*this.b0*this.b2*phi*phi)/(Math.pow(1+this.a1+this.a2,2)-4*(this.a1+4*this.a2+this.a1*this.a2)*phi+16*this.a2*phi*phi);return result}catch(err){return-200}}static calcCenterFrequency(freqStart,freqEnd){return(freqStart+freqEnd)/2}static calcBandwidth(freqStart,freqEnd){return freqEnd-this.calcCenterFrequency(freqStart,freqEnd)}static calcBandpassQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q2=resonance*Math.sqrt((frequency-bandwidth)*(frequency+bandwidth))/(2*bandwidth);return Q2}static calcNotchQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q2=resonance*frequency*bandwidth/Math.sqrt((frequency-bandwidth)*(frequency+bandwidth));return Q2}};var DCBlocker=class{constructor(r=.995){this.r=r;this.y1=this.y2=this.x1=this.x2=0}applyFilter(signal_step){this.x2=this.x1;this.x1=signal_step;let y=this.x1-this.x2+this.r*this.y1;this.y2=this.y1;this.y1=y;return y}};var makeNotchFilter=(frequency,sps10,bandwidth)=>{return new Biquad("notch",frequency,sps10,Biquad.calcNotchQ(frequency,bandwidth),0)};var makeBandpassFilter=(freqStart,freqEnd,sps10,resonance=Math.pow(10,Math.floor(Math.log10(Biquad.calcCenterFrequency(freqStart,freqEnd)))))=>{return new Biquad("bandpass",Biquad.calcCenterFrequency(freqStart,freqEnd),sps10,Biquad.calcBandpassQ(Biquad.calcCenterFrequency(freqStart,freqEnd),Biquad.calcBandwidth(freqStart,freqEnd),resonance),0)};function loadStreamWorkerGlobals(){globalThis.WebSerial=WebSerial;globalThis.decoders=decoders;globalThis.decoder="raw";globalThis.ByteParser=ByteParser;globalThis.Devices=Devices;globalThis.filtering=true;globalThis.filters={};globalThis.BiquadChannelFilterer=BiquadChannelFilterer;globalThis.ArrayManip=ArrayManip}if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope){loadStreamWorkerGlobals()}var streamWorkerRoutes={"receiveDecoder":function receiveDecoder(decoder2,decoderName){globalThis.decoders[decoderName]=(0,eval)("("+decoder2+")")},"receiveCodec":function receiveDeviceCodec(decoder2,deviceType,device,service,characteristic){let codec=parseFunctionFromText(decoder2);if(codec){if(deviceType==="BLE"&&service&&characteristic){if(globalThis.Devices[deviceType][device]){if(globalThis.Devices[deviceType][device][service]){if(globalThis.Devices[deviceType][device][characteristic]){globalThis.Devices[deviceType][device][characteristic].codec=codec}else{globalThis.Devices[deviceType][device][characteristic]={codec}}}else{globalThis.Devices[deviceType][device]={[characteristic]:{codec}}}}}else if(globalThis.Devices[deviceType][device]?.codec){if(globalThis.Devices[deviceType][device])globalThis.Devices[deviceType][device].codec=codec;else{globalThis.Devices[deviceType][device]={codec}}}}},"decode":function decode(data){return globalThis.decoder(data)},"decodeAndParse":function decodeAndParse(data){let decoded=this.graph.run("decode",data);if(decoded){let parsed=globalThis.ArrayManip.reformatData(decoded);if(parsed){if(globalThis.filtering){for(const prop in parsed){if(globalThis.filters[prop]){let filter=globalThis.filters[prop];if(Array.isArray(parsed[prop])){parsed[prop]=parsed[prop].map(v=>filter.apply(v))}else if(parsed[prop]?.values){parsed[prop].values=parsed[prop].values.map(v=>filter.apply(v))}}}}return parsed}}return decoded},"setActiveDecoder":function setActiveDecoder(deviceType,device,service,characteristic){if(globalThis.Devices[deviceType][device]?.codec)globalThis.decoder=globalThis.Devices[deviceType][device]?.codec;else if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][device]?.[service]?.[characteristic]?.codec)globalThis.decoder=globalThis.Devices[deviceType][device][service][characteristic].codec;return true},"decodeDevice":function decodeDevice(data,deviceType,device,service,characteristic){if(globalThis.Devices[deviceType][device]?.codec)return globalThis.Devices[deviceType][device].codec(data);else if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][device]?.[service]?.[characteristic]?.codec)return globalThis.Devices[deviceType][device][service][characteristic].codec(data)},"decodeAndParseDevice":function decodeAndParseDevice(data,deviceType,deviceName,service,characteristic){let decoded;if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][deviceName]?.services[service]?.[characteristic]?.codec)decoded=globalThis.Devices[deviceType][deviceName].services[service][characteristic].codec(data);else if(globalThis.Devices[deviceType][deviceName]?.codec)decoded=globalThis.Devices[deviceType][deviceName].codec(data);else decoded=data;if(decoded){let parsed=globalThis.ArrayManip.reformatData(decoded);if(parsed){if(globalThis.filtering){for(const prop in parsed){if(globalThis.filters[prop]){let filter=globalThis.filters[prop];if(Array.isArray(parsed[prop])){parsed[prop]=parsed[prop].map(v=>filter.apply(v))}else if(parsed[prop]?.values){parsed[prop].values=parsed[prop].values.map(v=>filter.apply(v))}else if(typeof parsed[prop]==="number"){parsed[prop]=filter.apply(parsed[prop])}}}}return parsed}}return decoded},"toggleAnim":function toggleAnim(){globalThis.runningAnim=!globalThis.runningAnim;return globalThis.runningAnim},"setFilters":function setFilters(filters,clearFilters=false){if(!globalThis.filters||clearFilters)globalThis.filters={};for(const key in filters){globalThis.filters[key]=new BiquadChannelFilterer(filters[key])}return true},"getFilterSettings":function getFilterSettings(){if(globalThis.filters){let filters={};for(const key in globalThis.filters){filters[key]={sps:globalThis.filters[key].sps,useScaling:globalThis.filters[key].useScaling,scalar:globalThis.filters[key].scalar,useNotch50:globalThis.filters[key].useNotch50,useNotch60:globalThis.filters[key].useNotch60,useDCBlock:globalThis.filters[key].useDCBlock,useLowpass:globalThis.filters[key].useLowpass,lowpassHz:globalThis.filters[key].lowpassHz,useBandpass:globalThis.filters[key].useBandpass,bandpassLower:globalThis.filters[key].bandpassLower,bandpassUpper:globalThis.filters[key].bandpassUpper}}return filters}return void 0},"setupSerial":function setupSerial(){globalThis.Serial=new globalThis.WebSerial;globalThis.decoder="raw";console.log("worker: Setting up Serial",globalThis.Serial);return true},"openPort":function openPort(settings){const WorkerService2=this.graph;if(!globalThis.Serial)WorkerService2.run("setupSerial");return new Promise((res,rej)=>{globalThis.Serial.getPorts().then(ports=>{const Serial=globalThis.Serial;let port=ports.find(port2=>{return port2.getInfo().usbVendorId===settings.usbVendorId&&port2.getInfo().usbProductId===settings.usbProductId});if(port){Serial.openPort(port,settings).then(()=>{const stream=Serial.createStream({port,settings,frequency:settings.frequency?settings.frequency:10,buffering:settings.buffering,ondata:value=>{if(stream.settings.pipeTo){if(typeof stream.settings.pipeTo==="string")WorkerService2.transmit(value,stream.settings.pipeTo,[value.buffer]);else if(stream.settings.pipeTo?.route){let args=value;if(stream.settings.pipeTo.extraArgs)args=[value,...stream.settings.pipeTo.extraArgs];WorkerService2.transmit({route:stream.settings.pipeTo.route,args},stream.settings.pipeTo._id,[value.buffer])}}else{WorkerService2.transmit(value,void 0,[value.buffer])}}});Serial.readStream(stream);port.ondisconnect=()=>{postMessage(`${stream._id} disconnected`)};res({_id:stream._id,settings,info:stream.info})}).catch(()=>{postMessage(`disconnected`)});;}else{rej(false)}})})},"closeStream":function closeStream(streamId){return new Promise((res,rej)=>{const Serial=globalThis.Serial;let ondisconnect;if(Serial.streams[streamId].port?.ondisconnect)ondisconnect=Serial.streams[streamId].port.ondisconnect;Serial.closeStream(Serial.streams[streamId]).then(resolved=>{if(ondisconnect)ondisconnect(void 0);res(resolved)}).catch(rej)})},"writeStream":function writeStream(streamId,message){globalThis.Serial.writeStream(globalThis.Serial.streams[streamId],message);return true},"updateStreamSettings":function updateStreamSettings(streamId,settings){if(globalThis.Serial?.streams[streamId]){for(const key in settings){if(typeof settings[key]==="object"){Object.assign(globalThis.Serial.streams[streamId].settings[key],settings[key])}else globalThis.Serial.streams[streamId][key]=settings[key]}}}};if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope){const worker=new WorkerService({routes:[workerCanvasRoutes,subprocessRoutes,streamWorkerRoutes],includeClassName:false})}var stream_worker_default=self;})();\n')], { type: "text/javascript" }));
var stream_worker_default = url;
var _ArrayManip = class {
  constructor() {
    this.recursivelyAssign = (target, obj) => {
      for (const key in obj) {
        if (typeof obj[key] === "object") {
          if (typeof target[key] === "object")
            this.recursivelyAssign(target[key], obj[key]);
          else
            target[key] = this.recursivelyAssign({}, obj[key]);
        } else
          target[key] = obj[key];
      }
      return target;
    };
  }
  static autoscale(array, lineIdx = 0, nLines = 1, centerZero = false, ymin, ymax, clamp) {
    if (array?.length === 0)
      return array;
    let max = ymax ? ymax : Math.max(...array);
    let min = ymin ? ymin : Math.min(...array);
    let _lines = 1 / nLines;
    let scalar = 1;
    if (centerZero) {
      let absmax = Math.max(Math.abs(min), Math.abs(max));
      if (absmax !== 0)
        scalar = _lines / absmax;
      return array.map((y) => {
        if (clamp) {
          if (y < min)
            y = min;
          if (y > max)
            y = max;
        }
        return y * scalar + (_lines * (lineIdx + 1) * 2 - 1 - _lines);
      });
    } else {
      if (max === min) {
        if (max !== 0) {
          scalar = _lines / max;
        } else if (min !== 0) {
          scalar = _lines / Math.abs(min);
        }
      } else
        scalar = _lines / (max - min);
      return array.map((y) => {
        if (clamp) {
          if (y < min)
            y = min;
          if (y > max)
            y = max;
        }
        return 2 * ((y - min) * scalar - 1 / (2 * nLines)) + (_lines * (lineIdx + 1) * 2 - 1 - _lines);
      });
    }
  }
  static genTimestamps(ct, sps11) {
    let now = Date.now();
    let toInterp = [now - ct * 1e3 / sps11, now];
    return _ArrayManip.upsample(toInterp, ct);
  }
  static absmax(array) {
    return Math.max(Math.abs(Math.min(...array)), Math.max(...array));
  }
  static downsample(array, fitCount, scalar = 1) {
    if (array.length > fitCount) {
      let output = new Array(fitCount);
      let incr = array.length / fitCount;
      let lastIdx = array.length - 1;
      let last = 0;
      let counter = 0;
      for (let i = incr; i < array.length; i += incr) {
        let rounded = Math.round(i);
        if (rounded > lastIdx)
          rounded = lastIdx;
        for (let j = last; j < rounded; j++) {
          output[counter] += array[j];
        }
        output[counter] /= (rounded - last) * scalar;
        counter++;
        last = rounded;
      }
      return output;
    } else
      return array;
  }
  static upsample(array, fitCount, scalar = 1) {
    var linearInterpolate = function(before2, after2, atPoint2) {
      return (before2 + (after2 - before2) * atPoint2) * scalar;
    };
    var newData = new Array(fitCount);
    var springFactor = (array.length - 1) / (fitCount - 1);
    newData[0] = array[0];
    for (var i = 1; i < fitCount - 1; i++) {
      var tmp = i * springFactor;
      var before = Math.floor(tmp);
      var after = Math.ceil(tmp);
      var atPoint = tmp - before;
      newData[i] = linearInterpolate(array[before], array[after], atPoint);
    }
    newData[fitCount - 1] = array[array.length - 1];
    return newData;
  }
  static interpolate(array, fitCount, scalar = 1) {
    if (array.length > fitCount) {
      return _ArrayManip.downsample(array, fitCount, scalar);
    } else if (array.length < fitCount) {
      return _ArrayManip.upsample(array, fitCount, scalar);
    }
    return array;
  }
  static HSLToRGB(h, s, l, scalar = 255) {
    s /= 100;
    l /= 100;
    let c = (1 - Math.abs(2 * l - 1)) * s, x = c * (1 - Math.abs(h / 60 % 2 - 1)), m = l - c / 2, r = 0, g = 0, b = 0;
    if (0 <= h && h < 60) {
      r = c;
      g = x;
      b = 0;
    } else if (60 <= h && h < 120) {
      r = x;
      g = c;
      b = 0;
    } else if (120 <= h && h < 180) {
      r = 0;
      g = c;
      b = x;
    } else if (180 <= h && h < 240) {
      r = 0;
      g = x;
      b = c;
    } else if (240 <= h && h < 300) {
      r = x;
      g = 0;
      b = c;
    } else if (300 <= h && h < 360) {
      r = c;
      g = 0;
      b = x;
    }
    r = (r + m) * scalar;
    g = (g + m) * scalar;
    b = (b + m) * scalar;
    return [r, g, b];
  }
  static circularBuffer(arr, newEntries) {
    if (newEntries.length < arr.length) {
      let slice = arr.slice(newEntries.length);
      let len = arr.length;
      arr.splice(0, len, ...slice, ...newEntries);
    } else if (newEntries.length > arr.length) {
      let len = arr.length;
      arr.splice(0, len, newEntries.slice(len - newEntries.length));
    } else {
      arr.splice(0, arr.length, ...newEntries);
    }
    return arr;
  }
  static reformatData(data, key) {
    if (Array.isArray(data)) {
      if (Array.isArray(data[0])) {
        let d2 = {};
        data.forEach((arr, i) => {
          d2[i] = arr;
        });
        data = d2;
        if (isNaN(data[0][0]))
          return void 0;
      } else if (key) {
        data = { [key]: data };
        if (isNaN(data[key][0]))
          return void 0;
      } else {
        data = { 0: data };
        if (isNaN(data[0][0]))
          return void 0;
      }
    } else if (typeof data === "object") {
      for (const key2 in data) {
        if (typeof data[key2] === "number")
          data[key2] = [data[key2]];
        else if (data[key2]?.values) {
          if (typeof data[key2].values === "number")
            data[key2].values = [data[key2].values];
        }
        if (isNaN(data[key2][0]))
          return void 0;
      }
    } else if (typeof data === "string") {
      let split;
      if (data.includes("\r\n")) {
        let lines = data.split("\r\n");
        data = {};
        lines.forEach((l, j) => {
          if (l.includes("	")) {
            split = l.split("	");
          } else if (l.includes(",")) {
            split = l.split(",");
          } else if (l.includes("|")) {
            split = l.split("|");
          }
          split.forEach((val, i) => {
            if (val.includes(":")) {
              let [key2, v] = val.split(":");
              let fl2 = parseFloat(v);
              if (fl2)
                data[key2] = [fl2];
              else
                return void 0;
            } else {
              let fl2 = parseFloat(val);
              if (fl2)
                data[i] = [fl2];
              else
                return void 0;
            }
          });
        });
      } else if (data.includes("	")) {
        split = data.split("	");
      } else if (data.includes(",")) {
        split = data.split(",");
      } else if (data.includes("|")) {
        split = data.split("|");
      }
      data = {};
      if (split) {
        split.forEach((val, i) => {
          if (val.includes(":")) {
            let [key2, v] = val.split(":");
            let fl2 = parseFloat(v);
            if (fl2)
              data[key2] = [fl2];
            else
              return void 0;
          } else {
            let fl2 = parseFloat(val);
            if (fl2)
              data[i] = [fl2];
            else
              return void 0;
          }
        });
      }
    } else if (typeof data === "number") {
      if (key)
        data = { [key]: [data] };
      else
        data = { 0: [data] };
    }
    return data;
  }
  static padTime(data, lastValue, time, targetFit) {
    let slopeIncr = (data[0] - lastValue) / time / targetFit;
    let padded = [...new Array(targetFit - data.length).map((_2, i) => lastValue + slopeIncr * (i + 1)), ...data];
    return padded;
  }
  static interpolateForTime(data, time, targetSPS) {
    return _ArrayManip.interpolate(data, Math.ceil(targetSPS * time));
  }
  isTypedArray(x) {
    return ArrayBuffer.isView(x) && Object.prototype.toString.call(x) !== "[object DataView]";
  }
  spliceTypedArray(arr, start, end) {
    let s = arr.subarray(0, start);
    let e;
    if (end) {
      e = arr.subarray(end + 1);
    }
    let n;
    if (s.length > 0 || e?.length > 0)
      n = new arr.constructor(s.length + e.length);
    if (s.length > 0)
      n.set(s);
    if (e && e.length > 0)
      n.set(e, s.length);
    return n;
  }
};
var ArrayManip = _ArrayManip;
ArrayManip.bufferValues = (objects, property, keys, buffer) => {
  if (!Array.isArray(keys) && typeof keys === "object")
    keys = Object.keys(keys);
  if (!buffer) {
    let object_keys = Object.keys(objects);
    if (keys)
      buffer = new Float32Array(object_keys.length * keys.length);
    else {
      if (typeof objects[object_keys[0]][property] === "object") {
        keys = Object.keys(objects[object_keys[0]][property]);
        buffer = new Float32Array(object_keys.length * keys.length);
      } else
        buffer = new Float32Array(object_keys.length);
    }
  }
  let i = 0;
  for (const key in objects) {
    if (objects[key][property]) {
      if (keys) {
        for (let j = 0; j < keys.length; j++) {
          buffer[i] = objects[key][property][keys[j]];
          i++;
        }
      } else {
        buffer[i] = objects[key][property];
        i++;
      }
    }
  }
  return buffer;
};
var rechk = /^([<>])?(([1-9]\d*)?([xcbB?hHiIfdsp]))*$/;
var refmt = /([1-9]\d*)?([xcbB?hHiIfdsp])/g;
var str = (v, o, c) => String.fromCharCode(...new Uint8Array(v.buffer, v.byteOffset + o, c));
var rts = (v, o, c, s) => new Uint8Array(v.buffer, v.byteOffset + o, c).set(s.split("").map((str2) => str2.charCodeAt(0)));
var pst = (v, o, c) => str(v, o + 1, Math.min(v.getUint8(o), c - 1));
var tsp = (v, o, c, s) => {
  v.setUint8(o, s.length);
  rts(v, o + 1, c - 1, s);
};
var lut = (le) => ({ x: (c) => [1, c, 0], c: (c) => [c, 1, (o) => ({ u: (v) => str(v, o, 1), p: (v, c2) => rts(v, o, 1, c2) })], "?": (c) => [c, 1, (o) => ({ u: (v) => Boolean(v.getUint8(o)), p: (v, B) => v.setUint8(o, B) })], b: (c) => [c, 1, (o) => ({ u: (v) => v.getInt8(o), p: (v, b) => v.setInt8(o, b) })], B: (c) => [c, 1, (o) => ({ u: (v) => v.getUint8(o), p: (v, B) => v.setUint8(o, B) })], h: (c) => [c, 2, (o) => ({ u: (v) => v.getInt16(o, le), p: (v, h) => v.setInt16(o, h, le) })], H: (c) => [c, 2, (o) => ({ u: (v) => v.getUint16(o, le), p: (v, H2) => v.setUint16(o, H2, le) })], i: (c) => [c, 4, (o) => ({ u: (v) => v.getInt32(o, le), p: (v, i) => v.setInt32(o, i, le) })], I: (c) => [c, 4, (o) => ({ u: (v) => v.getUint32(o, le), p: (v, I) => v.setUint32(o, I, le) })], f: (c) => [c, 4, (o) => ({ u: (v) => v.getFloat32(o, le), p: (v, f) => v.setFloat32(o, f, le) })], d: (c) => [c, 8, (o) => ({ u: (v) => v.getFloat64(o, le), p: (v, d2) => v.setFloat64(o, d2, le) })], s: (c) => [1, c, (o) => ({ u: (v) => str(v, o, c), p: (v, s) => rts(v, o, c, s.slice(0, c)) })], p: (c) => [1, c, (o) => ({ u: (v) => pst(v, o, c), p: (v, s) => tsp(v, o, c, s.slice(0, c - 1)) })] });
var errbuf = new RangeError("Structure larger than remaining buffer");
var errval = new RangeError("Not enough values for structure");
var _ByteParser = class extends ArrayManip {
  static toDataView(value) {
    if (!(value instanceof DataView)) {
      if (typeof value === "string" && parseInt(value))
        value = parseInt(value);
      if (typeof value === "string") {
        let enc2 = new TextEncoder();
        let hascodes = {};
        for (const code in _ByteParser.codes) {
          while (value.indexOf(code) > -1) {
            let idx = value.indexOf(code);
            value = value.replace(code, "");
            hascodes[idx] = code;
          }
        }
        let encoded = Array.from(enc2.encode(value));
        for (const key in hascodes) {
          encoded.splice(parseInt(key), 0, _ByteParser.codes[hascodes[key]]);
        }
        value = new DataView(new Uint8Array(encoded).buffer);
      } else if (typeof value === "number") {
        let tmp = value;
        if (value < 256) {
          value = new DataView(new ArrayBuffer(1));
          value.setUint8(0, tmp);
        } else if (value < 65536) {
          value = new DataView(new ArrayBuffer(2));
          value.setInt16(0, tmp);
        } else {
          value = new DataView(new ArrayBuffer(4));
          value.setUint32(0, tmp);
        }
      } else if (value instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && value instanceof SharedArrayBuffer) {
        value = new DataView(value);
      } else if (Array.isArray(value)) {
        value = new DataView(Uint8Array.from(value).buffer);
      } else if (typeof value === "object") {
        value = new TextEncoder().encode(JSON.stringify(value));
      }
    }
    return value;
  }
  static searchBuffer(buffer, searchString, limit) {
    var needle = searchString;
    var haystack = buffer;
    var search = _ByteParser.boyerMoore(needle);
    var skip = search.byteLength;
    var indices = [];
    for (var i = search(haystack); i !== -1; i = search(haystack, i + skip)) {
      indices.push(i);
      if (limit) {
        if (indices.length >= limit)
          break;
      }
    }
    return indices;
  }
  static bytesToInt16(x0, x1) {
    let int16 = (255 & x0) << 8 | 255 & x1;
    if ((int16 & 32768) > 0) {
      int16 |= 4294901760;
    } else {
      int16 &= 65535;
    }
    return int16;
  }
  static bytesToUInt16(x0, x1) {
    return x0 * 256 + x1;
  }
  static Uint16ToBytes(y) {
    return [y & 255, y >> 8 & 255];
  }
  static bytesToInt24(x0, x1, x2) {
    let int24 = (255 & x0) << 16 | (255 & x1) << 8 | 255 & x2;
    if ((int24 & 8388608) > 0) {
      int24 |= 4278190080;
    } else {
      int24 &= 16777215;
    }
    return int24;
  }
  static bytesToUInt24(x0, x1, x2) {
    return x0 * 65536 + x1 * 256 + x2;
  }
  static Uint24ToBytes(y) {
    return [y & 255, y >> 8 & 255, y >> 16 & 255];
  }
  static bytesToInt32(x0, x1, x2, x3) {
    let int32 = (255 & x0) << 24 | (255 & x1) << 16 | (255 & x2) << 8 | 255 & x3;
    if ((int32 & 2147483648) > 0) {
      int32 |= 0;
    } else {
      int32 &= 4294967295;
    }
    return int32;
  }
  static bytesToUInt32(x0, x1, x2, x3) {
    return x0 * 16777216 + x1 * 65536 + x2 * 256 + x3;
  }
  static Uint32ToBytes(y) {
    return [y & 255, y >> 8 & 255, y >> 16 & 255, y >> 24 & 255];
  }
  static get2sCompliment(val, nbits3) {
    if (val > 4294967296)
      return null;
    return val << 32 - nbits3 >> 32 - nbits3;
  }
  static getSignedInt(...args) {
    let pos = 0;
    function getInt(size) {
      var value = 0;
      var first = true;
      while (size--) {
        if (first) {
          let byte = args[pos++];
          value += byte & 127;
          if (byte & 128) {
            value -= 128;
          }
          first = false;
        } else {
          value *= 256;
          value += args[pos++];
        }
      }
      return value;
    }
    return getInt(args.length);
  }
  static asUint8Array(input) {
    if (input instanceof Uint8Array) {
      return input;
    } else if (typeof input === "string") {
      var arr = new Uint8Array(input.length);
      for (var i = 0; i < input.length; i++) {
        var c = input.charCodeAt(i);
        if (c > 127) {
          throw new TypeError("Only ASCII patterns are supported");
        }
        arr[i] = c;
      }
      return arr;
    } else {
      return new Uint8Array(input);
    }
  }
  static boyerMoore(patternBuffer) {
    var pattern = _ByteParser.asUint8Array(patternBuffer);
    var M2 = pattern.length;
    if (M2 === 0) {
      throw new TypeError("patternBuffer must be at least 1 byte long");
    }
    var R2 = 256;
    var rightmost_positions = new Int32Array(R2);
    for (var c = 0; c < R2; c++) {
      rightmost_positions[c] = -1;
    }
    for (var j = 0; j < M2; j++) {
      rightmost_positions[pattern[j]] = j;
    }
    var boyerMooreSearch = (txtBuffer, start, end) => {
      var txt = _ByteParser.asUint8Array(txtBuffer);
      if (start === void 0)
        start = 0;
      if (end === void 0)
        end = txt.length;
      var pat = pattern;
      var right = rightmost_positions;
      var lastIndex = end - pat.length;
      var lastPatIndex = pat.length - 1;
      var skip;
      for (var i = start; i <= lastIndex; i += skip) {
        skip = 0;
        for (var j2 = lastPatIndex; j2 >= 0; j2--) {
          var c2 = txt[i + j2];
          if (pat[j2] !== c2) {
            skip = Math.max(1, j2 - right[c2]);
            break;
          }
        }
        if (skip === 0) {
          return i;
        }
      }
      return -1;
    };
    boyerMooreSearch.byteLength = pattern.byteLength;
    return boyerMooreSearch;
  }
  static struct(format) {
    let fns = [], size = 0, m = rechk.exec(format);
    if (!m) {
      throw new RangeError("Invalid format string");
    }
    const t = lut("<" === m[1]), lu = (n, c) => t[c](n ? parseInt(n, 10) : 1);
    while (m = refmt.exec(format)) {
      ((r, s, f) => {
        for (let i = 0; i < r; ++i, size += s) {
          if (f) {
            fns.push(f(size));
          }
        }
      })(...lu(...m.slice(1)));
    }
    const unpack_from = (arrb, offs) => {
      if (arrb.byteLength < (offs | 0) + size) {
        throw errbuf;
      }
      let v = new DataView(arrb, offs | 0);
      return fns.map((f) => f.u(v));
    };
    const pack_into = (arrb, offs, ...values) => {
      if (values.length < fns.length) {
        throw errval;
      }
      if (arrb.byteLength < offs + size) {
        throw errbuf;
      }
      const v = new DataView(arrb, offs);
      new Uint8Array(arrb, offs, size).fill(0);
      fns.forEach((f, i) => f.p(v, values[i]));
    };
    const pack = (...values) => {
      let b = new ArrayBuffer(size);
      pack_into(b, 0, ...values);
      return b;
    };
    const unpack = (arrb) => unpack_from(arrb, 0);
    function* iter_unpack(arrb) {
      for (let offs = 0; offs + size <= arrb.byteLength; offs += size) {
        yield unpack_from(arrb, offs);
      }
    }
    return Object.freeze({ unpack, pack, unpack_from, pack_into, iter_unpack, format, size });
  }
};
var ByteParser = _ByteParser;
ByteParser.codes = { "\\n": 10, "\\r": 13, "\\t": 9, "\\s": 32, "\\b": 8, "\\f": 12, "\\": 92 };
var ScanMode;
(function(ScanMode2) {
  ScanMode2[ScanMode2["SCAN_MODE_LOW_POWER"] = 0] = "SCAN_MODE_LOW_POWER";
  ScanMode2[ScanMode2["SCAN_MODE_BALANCED"] = 1] = "SCAN_MODE_BALANCED";
  ScanMode2[ScanMode2["SCAN_MODE_LOW_LATENCY"] = 2] = "SCAN_MODE_LOW_LATENCY";
})(ScanMode || (ScanMode = {}));
init_dist();
init_conversion();
init_dist();
var BluetoothLe = registerPlugin("BluetoothLe", { web: () => Promise.resolve().then(() => (init_web(), web_exports)).then((m) => new m.BluetoothLeWeb()) });
var import_throat = __toESM2(require_throat());
function getQueue(enabled) {
  if (enabled) {
    return (0, import_throat.default)(1);
  } else {
    return (fn) => fn();
  }
}
function validateUUID(uuid) {
  if (typeof uuid !== "string") {
    throw new Error(`Invalid UUID type ${typeof uuid}. Expected string.`);
  }
  uuid = uuid.toLowerCase();
  const is128BitUuid = uuid.search(/^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$/) >= 0;
  if (!is128BitUuid) {
    throw new Error(`Invalid UUID format ${uuid}. Expected 128 bit string (e.g. "0000180d-0000-1000-8000-00805f9b34fb").`);
  }
  return uuid;
}
var BleClientClass = class {
  constructor() {
    this.scanListener = null;
    this.eventListeners = /* @__PURE__ */ new Map();
    this.queue = getQueue(true);
  }
  enableQueue() {
    this.queue = getQueue(true);
  }
  disableQueue() {
    this.queue = getQueue(false);
  }
  async initialize(options2) {
    await this.queue(async () => {
      await BluetoothLe.initialize(options2);
    });
  }
  async getEnabled() {
    return this.isEnabled();
  }
  async isEnabled() {
    const enabled = await this.queue(async () => {
      const result = await BluetoothLe.isEnabled();
      return result.value;
    });
    return enabled;
  }
  async enable() {
    await this.queue(async () => {
      await BluetoothLe.enable();
    });
  }
  async disable() {
    await this.queue(async () => {
      await BluetoothLe.disable();
    });
  }
  async startEnabledNotifications(callback) {
    await this.queue(async () => {
      var _a;
      const key = `onEnabledChanged`;
      await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
      const listener = await BluetoothLe.addListener(key, (result) => {
        callback(result.value);
      });
      this.eventListeners.set(key, listener);
      await BluetoothLe.startEnabledNotifications();
    });
  }
  async stopEnabledNotifications() {
    await this.queue(async () => {
      var _a;
      const key = `onEnabledChanged`;
      await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
      this.eventListeners.delete(key);
      await BluetoothLe.stopEnabledNotifications();
    });
  }
  async isLocationEnabled() {
    const enabled = await this.queue(async () => {
      const result = await BluetoothLe.isLocationEnabled();
      return result.value;
    });
    return enabled;
  }
  async openLocationSettings() {
    await this.queue(async () => {
      await BluetoothLe.openLocationSettings();
    });
  }
  async openBluetoothSettings() {
    await this.queue(async () => {
      await BluetoothLe.openBluetoothSettings();
    });
  }
  async openAppSettings() {
    await this.queue(async () => {
      await BluetoothLe.openAppSettings();
    });
  }
  async setDisplayStrings(displayStrings) {
    await this.queue(async () => {
      await BluetoothLe.setDisplayStrings(displayStrings);
    });
  }
  async requestDevice(options2) {
    const result = await this.queue(async () => {
      const device = await BluetoothLe.requestDevice(options2);
      return device;
    });
    return result;
  }
  async requestLEScan(options2, callback) {
    await this.queue(async () => {
      var _a;
      await ((_a = this.scanListener) === null || _a === void 0 ? void 0 : _a.remove());
      this.scanListener = await BluetoothLe.addListener("onScanResult", (resultInternal) => {
        const result = Object.assign(Object.assign({}, resultInternal), { manufacturerData: this.convertObject(resultInternal.manufacturerData), serviceData: this.convertObject(resultInternal.serviceData), rawAdvertisement: resultInternal.rawAdvertisement ? this.convertValue(resultInternal.rawAdvertisement) : void 0 });
        callback(result);
      });
      await BluetoothLe.requestLEScan(options2);
    });
  }
  async stopLEScan() {
    await this.queue(async () => {
      var _a;
      await ((_a = this.scanListener) === null || _a === void 0 ? void 0 : _a.remove());
      this.scanListener = null;
      await BluetoothLe.stopLEScan();
    });
  }
  async getDevices(deviceIds) {
    return this.queue(async () => {
      const result = await BluetoothLe.getDevices({ deviceIds });
      return result.devices;
    });
  }
  async getConnectedDevices(services) {
    return this.queue(async () => {
      const result = await BluetoothLe.getConnectedDevices({ services });
      return result.devices;
    });
  }
  async connect(deviceId, onDisconnect, options2) {
    await this.queue(async () => {
      var _a;
      if (onDisconnect) {
        const key = `disconnected|${deviceId}`;
        await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
        const listener = await BluetoothLe.addListener(key, () => {
          onDisconnect(deviceId);
        });
        this.eventListeners.set(key, listener);
      }
      await BluetoothLe.connect(Object.assign({ deviceId }, options2));
    });
  }
  async createBond(deviceId) {
    await this.queue(async () => {
      await BluetoothLe.createBond({ deviceId });
    });
  }
  async isBonded(deviceId) {
    const isBonded = await this.queue(async () => {
      const result = await BluetoothLe.isBonded({ deviceId });
      return result.value;
    });
    return isBonded;
  }
  async disconnect(deviceId) {
    await this.queue(async () => {
      await BluetoothLe.disconnect({ deviceId });
    });
  }
  async getServices(deviceId) {
    const services = await this.queue(async () => {
      const result = await BluetoothLe.getServices({ deviceId });
      return result.services;
    });
    return services;
  }
  async readRssi(deviceId) {
    const value = await this.queue(async () => {
      const result = await BluetoothLe.readRssi({ deviceId });
      return parseFloat(result.value);
    });
    return value;
  }
  async read(deviceId, service, characteristic, options2) {
    service = validateUUID(service);
    characteristic = validateUUID(characteristic);
    const value = await this.queue(async () => {
      const result = await BluetoothLe.read(Object.assign({ deviceId, service, characteristic }, options2));
      return this.convertValue(result.value);
    });
    return value;
  }
  async write(deviceId, service, characteristic, value, options2) {
    service = validateUUID(service);
    characteristic = validateUUID(characteristic);
    return this.queue(async () => {
      if (!(value === null || value === void 0 ? void 0 : value.buffer)) {
        throw new Error("Invalid data.");
      }
      let writeValue = value;
      if (Capacitor.getPlatform() !== "web") {
        writeValue = dataViewToHexString(value);
      }
      await BluetoothLe.write(Object.assign({ deviceId, service, characteristic, value: writeValue }, options2));
    });
  }
  async writeWithoutResponse(deviceId, service, characteristic, value, options2) {
    service = validateUUID(service);
    characteristic = validateUUID(characteristic);
    await this.queue(async () => {
      if (!(value === null || value === void 0 ? void 0 : value.buffer)) {
        throw new Error("Invalid data.");
      }
      let writeValue = value;
      if (Capacitor.getPlatform() !== "web") {
        writeValue = dataViewToHexString(value);
      }
      await BluetoothLe.writeWithoutResponse(Object.assign({ deviceId, service, characteristic, value: writeValue }, options2));
    });
  }
  async readDescriptor(deviceId, service, characteristic, descriptor, options2) {
    service = validateUUID(service);
    characteristic = validateUUID(characteristic);
    descriptor = validateUUID(descriptor);
    const value = await this.queue(async () => {
      const result = await BluetoothLe.readDescriptor(Object.assign({ deviceId, service, characteristic, descriptor }, options2));
      return this.convertValue(result.value);
    });
    return value;
  }
  async writeDescriptor(deviceId, service, characteristic, descriptor, value, options2) {
    service = validateUUID(service);
    characteristic = validateUUID(characteristic);
    descriptor = validateUUID(descriptor);
    return this.queue(async () => {
      if (!(value === null || value === void 0 ? void 0 : value.buffer)) {
        throw new Error("Invalid data.");
      }
      let writeValue = value;
      if (Capacitor.getPlatform() !== "web") {
        writeValue = dataViewToHexString(value);
      }
      await BluetoothLe.writeDescriptor(Object.assign({ deviceId, service, characteristic, descriptor, value: writeValue }, options2));
    });
  }
  async startNotifications(deviceId, service, characteristic, callback) {
    service = validateUUID(service);
    characteristic = validateUUID(characteristic);
    await this.queue(async () => {
      var _a;
      const key = `notification|${deviceId}|${service}|${characteristic}`;
      await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
      const listener = await BluetoothLe.addListener(key, (event) => {
        callback(this.convertValue(event === null || event === void 0 ? void 0 : event.value));
      });
      this.eventListeners.set(key, listener);
      await BluetoothLe.startNotifications({ deviceId, service, characteristic });
    });
  }
  async stopNotifications(deviceId, service, characteristic) {
    service = validateUUID(service);
    characteristic = validateUUID(characteristic);
    await this.queue(async () => {
      var _a;
      const key = `notification|${deviceId}|${service}|${characteristic}`;
      await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
      this.eventListeners.delete(key);
      await BluetoothLe.stopNotifications({ deviceId, service, characteristic });
    });
  }
  convertValue(value) {
    if (typeof value === "string") {
      return hexStringToDataView(value);
    } else if (value === void 0) {
      return new DataView(new ArrayBuffer(0));
    }
    return value;
  }
  convertObject(obj) {
    if (obj === void 0) {
      return void 0;
    }
    const result = {};
    for (const key of Object.keys(obj)) {
      result[key] = this.convertValue(obj[key]);
    }
    return result;
  }
};
var BleClient = new BleClientClass();
init_conversion();
var BLEClient = class extends ByteParser {
  constructor(options2, location) {
    super();
    this.client = BleClient;
    this.devices = {};
    this.location = false;
    this.initialized = false;
    this.setupDevice = (device, options3) => {
      return new Promise(async (res, rej) => {
        this.devices[device.deviceId] = { device, deviceId: device.deviceId, ...options3 };
        this.client.connect(device.deviceId, (deviceId) => {
          if (this.devices[device.deviceId]?.ondisconnect)
            this.devices[device.deviceId].ondisconnect(deviceId);
        }, options3?.connectOptions).then(async () => {
          let services = await this.getServices(device.deviceId);
          for (const service in options3?.services) {
            let svc = services.find((o) => {
              if (o.uuid === service)
                return true;
            });
            if (svc)
              for (const characteristic in options3.services[service]) {
                if (!svc.characteristics.find((o) => {
                  if (o.uuid === characteristic)
                    return true;
                }))
                  continue;
                let opt = options3.services[service][characteristic];
                if (opt.write) {
                  await this.write(device, service, characteristic, opt.write, opt.writeCallback, opt.writeOptions);
                }
                if (opt.read) {
                  await this.read(device, service, characteristic, opt.readCallback, opt.readOptions);
                }
                if (opt.notify && opt.notifyCallback) {
                  await this.subscribe(device, service, characteristic, opt.notifyCallback);
                  opt.notifying = true;
                }
              }
          }
        }).catch(rej);
        res(this.devices[device.deviceId]);
      });
    };
    this.triangulate = (device, duration = 1500, sampleRate = 60) => {
      return new Promise((res, rej) => {
        if ("Accelerometer" in globalThis) {
          if (typeof globalThis.Accelerometer === "function") {
            let acl = new globalThis.Accelerometer({ frequency: sampleRate });
            let start = performance.now();
            let now = start;
            let result = { samples: [], vector: {} };
            let onread = () => {
              if (now - start < duration) {
                this.readRssi(device).then((rssi) => {
                  let x = acl.x;
                  let y = acl.y;
                  let z2 = acl.z;
                  now = performance.now();
                  result.samples.push({ x, y, z: z2, rssi, timestamp: now });
                });
              } else {
                let vector = { x: 0, y: 0, z: 0, rssiAvg: 0 };
                result.samples.forEach((s) => {
                });
                acl.removeEventListener("reading", onread);
              }
            };
            acl.addEventListener("reading", onread);
          }
        } else
          rej(new Error("No Accelerometer API detected"));
      });
    };
    if (location)
      this.location = location;
    if (options2) {
      this.setup(options2);
    }
  }
  setup(options2, location = this.location) {
    let services = [];
    if (options2) {
      for (const serviceuuid in options2.services) {
        services.push(serviceuuid);
      }
    }
    let opts = {};
    if (!location)
      opts.androidNeverForLocation = false;
    return new Promise(async (res, rej) => {
      if (!this.initialized) {
        await this.client.initialize(opts);
        this.initialized = true;
      }
      if (options2?.deviceId) {
        res(await this.reconnect(options2.deviceId));
      } else {
        if (options2) {
          let deviceRequest = { filters: [{ services }] };
          if (!this.isMobile())
            deviceRequest.optionalServices = services;
          if (options2?.namePrefix)
            deviceRequest.filters[0].namePrefix = options2.namePrefix;
          if (options2?.name)
            deviceRequest.filters[0].name = options2.name;
          this.client.requestDevice(deviceRequest).then((device) => {
            res(this.setupDevice(device, options2));
          }).catch(rej);
        } else {
          this.client.requestDevice().then((device) => {
            res(this.setupDevice(device, options2));
          }).catch(rej);
        }
      }
    });
  }
  initialize(options2) {
    return new Promise((res, rej) => {
      this.client.initialize(options2).then(() => {
        res(true);
      }).catch(rej);
    });
  }
  requestDevice(request, options2) {
    return new Promise((res, rej) => {
      this.client.requestDevice(request).then((device) => {
        this.devices[device.deviceId] = { device, deviceId: device.deviceId, ...options2 };
        res(device);
      }).catch(rej);
    });
  }
  getServices(deviceId) {
    return this.client.getServices(deviceId);
  }
  connect(device, options2) {
    return new Promise((res, rej) => {
      this.client.connect(device.deviceId, (deviceId) => {
        if (options2?.ondisconnect)
          options2.ondisconnect(deviceId);
      }, options2?.connectOptions).then((connected) => {
        res(device);
      }).catch(rej);
    });
  }
  reconnect(deviceId, options2) {
    return new Promise((res, rej) => {
      let android = this.isAndroid();
      let mobile = this.isMobile();
      console.log(deviceId);
      let opts = options2;
      if (this.devices[deviceId])
        opts = Object.assign(Object.assign({}, this.devices[deviceId]), opts);
      if (opts?.deviceId)
        delete opts.deviceId;
      if (!mobile && !navigator.bluetooth?.getDevices) {
        this.setup(opts).then((device) => {
          res(device);
        });
      }
      if (android) {
        this.client.getDevices([deviceId]).then((devices) => {
          this.setupDevice(devices[0], opts).then((device) => {
            res(device);
          });
        }).catch(rej);
      }
    });
  }
  disconnect(device) {
    if (typeof device === "object")
      device = device.deviceId;
    delete this.devices[device];
    return this.client.disconnect(device);
  }
  write(device, service, characteristic, value, callback, options2) {
    if (typeof device === "object")
      device = device.deviceId;
    if (callback) {
      return this.client.write(device, service, characteristic, BLEClient.toDataView(value)).then(callback);
    } else
      return this.client.writeWithoutResponse(device, service, characteristic, BLEClient.toDataView(value), options2);
  }
  read(device, service, characteristic, ondata, options2) {
    if (typeof device === "object")
      device = device.deviceId;
    if (ondata)
      return this.client.read(device, service, characteristic, options2).then(ondata);
    else
      return this.client.read(device, service, characteristic, options2);
  }
  subscribe(device, service, characteristic, ondata) {
    if (typeof device === "object")
      device = device.deviceId;
    return this.client.startNotifications(device, service, characteristic, ondata);
  }
  unsubscribe(device, service, characteristic) {
    if (typeof device === "object")
      device = device.deviceId;
    return this.client.stopNotifications(device, service, characteristic);
  }
  scan(options2, callback) {
    return this.client.requestLEScan(options2, callback);
  }
  stopScanning() {
    return this.client.stopLEScan();
  }
  readDescriptor(device, service, characteristic, descriptor, options2) {
    return this.client.readDescriptor(device.deviceId, service, characteristic, descriptor, options2);
  }
  writeDescriptor(device, service, characteristic, descriptor, value, options2) {
    return this.client.writeDescriptor(device.deviceId, service, characteristic, descriptor, BLEClient.toDataView(value), options2);
  }
  readRssi(device) {
    return this.client.readRssi(device.deviceId);
  }
  isMobile() {
    let check = false;
    (function(a) {
      if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
        check = true;
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
  }
  isAndroid() {
    const device = navigator.userAgent.toLowerCase();
    return device.indexOf("android") > -1;
  }
  async distance(device, txPower, x, exp, c) {
    let rssi = await this.readRssi(device);
    if (rssi == 0)
      return void 0;
    let ratio = rssi / txPower;
    if (ratio < 1) {
      return Math.pow(ratio, 10);
    } else {
      return x * Math.pow(ratio, exp) + c;
    }
  }
  async distanceFromPhone(device, txPower, model) {
    let x, exp, c;
    if (model) {
      if (model === "nexus5") {
        x = 0.42093;
        exp = 6.9476;
        c = 0.54992;
      } else if (model === "motoX") {
        x = 0.9401940951;
        exp = 6.170094565;
        c = 0;
      } else if (model === "iphone5") {
        x = 0.89976;
        exp = 7.7095;
        c = 0.111;
      }
    }
    return await this.distance(device, txPower, x, exp, c);
  }
};
var WebSerial = class extends ByteParser {
  constructor() {
    super(...arguments);
    this.streams = {};
    this.createStream = (options2) => {
      let stream = { _id: options2._id ? options2._id : `stream${Math.floor(Math.random() * 1e15)}`, info: options2.port.getInfo(), running: false, ...options2 };
      if (options2.port?.readable) {
        if (options2.transforms) {
          stream.reader = WebSerial.setStreamTransforms(options2.port.readable, options2.transforms).getReader();
        } else {
          stream.reader = options2.port.readable.getReader();
        }
      }
      this.streams[stream._id] = stream;
      return stream;
    };
  }
  getPorts() {
    return navigator.serial.getPorts();
  }
  requestPort(usbVendorId, usbProductId) {
    let options2 = {};
    if (usbVendorId) {
      options2.usbVendorId = usbVendorId;
    }
    if (usbProductId) {
      options2.usbProductId = usbProductId;
    }
    if (options2.usbVendorId)
      return navigator.serial.requestPort({ filters: [options2] });
    else
      return navigator.serial.requestPort();
  }
  openPort(port, options2) {
    if (options2)
      options2 = Object.assign({}, options2);
    if (options2?.ondisconnect) {
      port.ondisconnect = options2.ondisconnect;
      delete options2.ondisconnect;
    }
    return port.open(options2).then(() => {
      if (options2?.onconnect)
        options2.onconnect(port);
    });
  }
  async readWithTimeout(port, timeout) {
    const reader = port.readable.getReader();
    const timer = setTimeout(() => {
      reader.releaseLock();
    }, timeout);
    const result = await reader.read();
    clearTimeout(timer);
    reader.releaseLock();
    return result;
  }
  async writePort(port, message) {
    const writer = port.writable.getWriter();
    await writer.write(WebSerial.toDataView(message));
    writer.releaseLock();
    return true;
  }
  getSignals(port) {
    return port.getSignals();
  }
  setSignals(port, signals) {
    return port.setSignals(signals);
  }
  readStream(stream) {
    if (stream.reader && !stream.running) {
      let reader = stream.reader;
      if (stream.buffering) {
        if (typeof stream.buffering !== "object")
          stream.buffering = {};
        if (!stream.buffering.buffer) {
          stream.buffering.buffer = [];
        }
        if (!stream.buffering.searchBytes)
          stream.buffering.searchBytes = new Uint8Array([13, 10]);
      }
      let readLoop = () => {
        if (stream.port.readable && stream.running) {
          reader.read().then((result) => {
            if (result.done)
              reader.releaseLock();
            else {
              if (stream.buffering) {
                stream.buffering.buffer.push(...result.value);
                const needle = stream.buffering.searchBytes;
                const haystack = stream.buffering.buffer;
                const search = WebSerial.boyerMoore(needle);
                const skip = search.byteLength;
                let nextIndex = -1;
                for (var i = search(haystack); i !== -1; i = search(haystack, i + skip)) {
                  if (!stream.buffering.locked && !("lockIdx" in stream.buffering))
                    stream.buffering.lockIdx = i;
                  else {
                    nextIndex = i;
                    if (nextIndex >= 0) {
                      if (!stream.buffering.locked) {
                        stream.ondata(new Uint8Array(stream.buffering.buffer.splice(stream.buffering.lockIdx + stream.buffering.searchBytes.length, nextIndex + stream.buffering.searchBytes.length)));
                        stream.buffering.buffer.splice(0, stream.buffering.searchBytes.length);
                        stream.buffering.locked = true;
                      } else if (nextIndex > 0) {
                        stream.ondata(new Uint8Array(stream.buffering.buffer.splice(stream.buffering.searchBytes.length, nextIndex)));
                      }
                    }
                  }
                }
              } else
                stream.ondata(result.value);
              setTimeout(() => {
                readLoop();
              }, stream.frequency);
            }
          }).catch((er) => {
            console.error(stream._id, " Read error:", er);
            if (er.message.includes("overrun") || er.message.includes("framing")) {
              delete stream.reader;
              this.reconnect(stream);
            }
          });
        } else if (!stream.running && stream.port.readable) {
          try {
            reader.releaseLock();
          } catch (er) {
            console.error(er);
          }
        }
      };
      stream.running = true;
      readLoop();
      return stream;
    }
    return void 0;
  }
  writeStream(stream, message) {
    if (typeof stream === "string")
      stream = this.streams[stream];
    if (stream.port.writable) {
      let writer = stream.port.writable.getWriter();
      writer.write(WebSerial.toDataView(message));
      writer.releaseLock();
      return true;
    }
    return void 0;
  }
  closeStream(stream, onclose) {
    if (typeof stream === "string")
      stream = this.streams[stream];
    stream.running = false;
    return new Promise((res, rej) => {
      setTimeout(async () => {
        if (stream.port.readable && stream.reader) {
          try {
            stream.reader.releaseLock();
          } catch (er) {
            console.error(er);
          }
          if (stream.transforms)
            try {
              await stream.reader.cancel();
            } catch (err) {
              console.error(err);
            }
        }
        try {
          await stream.port.close().then(() => {
            if (onclose)
              onclose(this.streams[stream._id]);
          });
          delete this.streams[stream._id];
          res(true);
        } catch (er) {
          rej(er);
        }
      }, 300);
    });
  }
  reconnect(stream, options2) {
    if (typeof stream === "string")
      stream = this.streams[stream];
    return new Promise((res, rej) => {
      if (typeof stream !== "object") {
        rej(void 0);
        return;
      }
      let info = stream.port.getInfo();
      this.closeStream(stream._id).then((closed) => {
        setTimeout(() => {
          this.getPorts().then((ports) => {
            for (let i = 0; i < ports.length; i++) {
              if (ports[i].getInfo().usbVendorId === info.usbVendorId && ports[i].getInfo().usbProductId === info.usbProductId) {
                if (!options2)
                  options2 = stream;
                else
                  options2._id = stream._id;
                delete options2.port;
                this.openPort(ports[i], options2.settings).then(() => {
                  const stream2 = this.createStream({ ...options2, port: ports[i] });
                  this.readStream(stream2);
                  res(stream2);
                }).catch(rej);
              }
            }
          }).catch(rej);
        }, 100);
      });
    });
  }
  static setStreamTransforms(stream, transforms) {
    let transform = [];
    Object.keys(transforms).forEach((t) => {
      let opt = transforms[t];
      if (opt instanceof TransformStream) {
        transform.push(opt);
      } else {
        if (!opt.start)
          opt.start = function start() {
          };
        if (!opt.flush)
          opt.flush = function flush() {
          };
        let transformer = new TransformStream({ start: opt.start, transform: opt.transform, flush: opt.flush }, opt.writableStrategy, opt.readableStrategy);
        transform.push(transformer);
      }
    });
    let str2 = stream;
    transform.forEach((transform2) => {
      str2 = str2.pipeThrough(transform2);
    });
    return str2;
  }
};
function ads131m08codec(data) {
  let arr;
  if (data.getInt8)
    arr = new Uint8Array(data.buffer);
  else if (!data.buffer)
    arr = new Uint8Array(data);
  else
    arr = data;
  let output = { 0: new Array(9), 1: new Array(9), 2: new Array(9), 3: new Array(9), 4: new Array(9), 5: new Array(9), 6: new Array(9), 7: new Array(9), timestamp: Date.now() };
  for (let i = 0; i < 9; i++) {
    let j = i * 25;
    output[0][i] = ByteParser.bytesToInt24(arr[j], arr[j + 1], arr[j + 2]);
    output[1][i] = ByteParser.bytesToInt24(arr[j + 3], arr[j + 4], arr[j + 5]);
    output[2][i] = ByteParser.bytesToInt24(arr[j + 6], arr[j + 7], arr[j + 8]);
    output[3][i] = ByteParser.bytesToInt24(arr[j + 9], arr[j + 10], arr[j + 11]);
    output[4][i] = ByteParser.bytesToInt24(arr[j + 12], arr[j + 13], arr[j + 14]);
    output[5][i] = ByteParser.bytesToInt24(arr[j + 15], arr[j + 16], arr[j + 17]);
    output[6][i] = ByteParser.bytesToInt24(arr[j + 18], arr[j + 19], arr[j + 20]);
    output[7][i] = ByteParser.bytesToInt24(arr[j + 21], arr[j + 22], arr[j + 23]);
  }
  return output;
}
var decoder = new TextDecoder();
var sps = 250;
var defaultChartSetting = { nSec: 10, sps, units: "mV" };
var ads131m08ChartSettings = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting)), "1": JSON.parse(JSON.stringify(defaultChartSetting)), "2": JSON.parse(JSON.stringify(defaultChartSetting)), "3": JSON.parse(JSON.stringify(defaultChartSetting)), "4": JSON.parse(JSON.stringify(defaultChartSetting)), "5": JSON.parse(JSON.stringify(defaultChartSetting)), "6": JSON.parse(JSON.stringify(defaultChartSetting)), "7": JSON.parse(JSON.stringify(defaultChartSetting)) } };
var gain = 32;
var nbits = 24;
var vref = 1.2;
var defaultsetting = { sps, useDCBlock: false, useBandpass: false, bandpassLower: 3, bandpassUpper: 45, useScaling: true, scalar: 0.96 * 1e3 * vref / (gain * (Math.pow(2, nbits) - 1)) };
var ads131m08FilterSettings = { "0": JSON.parse(JSON.stringify(defaultsetting)), "1": JSON.parse(JSON.stringify(defaultsetting)), "2": JSON.parse(JSON.stringify(defaultsetting)), "3": JSON.parse(JSON.stringify(defaultsetting)), "4": JSON.parse(JSON.stringify(defaultsetting)), "5": JSON.parse(JSON.stringify(defaultsetting)), "6": JSON.parse(JSON.stringify(defaultsetting)), "7": JSON.parse(JSON.stringify(defaultsetting)) };
function cytoncodec(data) {
  let arr;
  if (!data.buffer)
    arr = new Uint8Array(data);
  else
    arr = data;
  let output = {};
  for (let i = 0; i < 8; i++) {
    let idx = 1 + 3 * i;
    output[i] = ByteParser.bytesToInt24(arr[idx], arr[idx + 1], arr[idx + 2]);
  }
  let accIdx = 25;
  output.ax = ByteParser.bytesToInt16(arr[accIdx], arr[accIdx + 1]);
  output.ay = ByteParser.bytesToInt16(arr[accIdx + 2], arr[accIdx + 3]);
  output.az = ByteParser.bytesToInt16(arr[accIdx + 4], arr[accIdx + 5]);
  output.gx = ByteParser.bytesToInt16(arr[accIdx + 6], arr[accIdx + 7]);
  output.gy = ByteParser.bytesToInt16(arr[accIdx + 8], arr[accIdx + 9]);
  output.gz = ByteParser.bytesToInt16(arr[accIdx + 10], arr[accIdx + 11]);
  output.timestamp = Date.now();
  return output;
}
var sps2 = 250;
var cytonSerialSettings = { baudRate: 115200, codec: cytoncodec, sps: sps2 };
var defaultChartSetting2 = { nSec: 10, sps: sps2, units: "mV" };
var cytonChartSettings = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting2)), "1": JSON.parse(JSON.stringify(defaultChartSetting2)), "2": JSON.parse(JSON.stringify(defaultChartSetting2)), "3": JSON.parse(JSON.stringify(defaultChartSetting2)), "4": JSON.parse(JSON.stringify(defaultChartSetting2)), "5": JSON.parse(JSON.stringify(defaultChartSetting2)), "6": JSON.parse(JSON.stringify(defaultChartSetting2)), "7": JSON.parse(JSON.stringify(defaultChartSetting2)), "ax": JSON.parse(JSON.stringify(defaultChartSetting2)), "ay": JSON.parse(JSON.stringify(defaultChartSetting2)), "az": JSON.parse(JSON.stringify(defaultChartSetting2)), "gx": JSON.parse(JSON.stringify(defaultChartSetting2)), "gy": JSON.parse(JSON.stringify(defaultChartSetting2)), "gz": JSON.parse(JSON.stringify(defaultChartSetting2)) }, generateNewLines: true };
var defaultsetting2 = { sps: sps2, useDCBlock: true, useBandpass: true, bandpassLower: 3, bandpassUpper: 45, useScaling: true, scalar: 1e3 * 4.5 / (24 * (Math.pow(2, 23) - 1)) };
var cytonFilterSettings = { "0": JSON.parse(JSON.stringify(defaultsetting2)), "1": JSON.parse(JSON.stringify(defaultsetting2)), "2": JSON.parse(JSON.stringify(defaultsetting2)), "3": JSON.parse(JSON.stringify(defaultsetting2)), "4": JSON.parse(JSON.stringify(defaultsetting2)), "5": JSON.parse(JSON.stringify(defaultsetting2)), "6": JSON.parse(JSON.stringify(defaultsetting2)), "7": JSON.parse(JSON.stringify(defaultsetting2)), "8": JSON.parse(JSON.stringify(defaultsetting2)), "9": JSON.parse(JSON.stringify(defaultsetting2)), "10": JSON.parse(JSON.stringify(defaultsetting2)), "11": JSON.parse(JSON.stringify(defaultsetting2)), "12": JSON.parse(JSON.stringify(defaultsetting2)), "13": JSON.parse(JSON.stringify(defaultsetting2)), "14": JSON.parse(JSON.stringify(defaultsetting2)), "15": JSON.parse(JSON.stringify(defaultsetting2)) };
function freeeeg128codec(data) {
  let arr;
  if (data.getInt8)
    arr = new Uint8Array(data.buffer);
  else if (!data.buffer)
    arr = new Uint8Array(data);
  else
    arr = data;
  let output = {};
  for (let i = 0; i < 128; i++) {
    let idx = i * 3 + 1;
    output[i] = ByteParser.bytesToInt24(arr[idx], arr[idx + 1], arr[idx + 2]);
  }
  let accIdx = 385;
  output["ax"] = ByteParser.bytesToInt16(arr[accIdx], arr[accIdx + 1]);
  output["ay"] = ByteParser.bytesToInt16(arr[accIdx + 2], arr[accIdx + 3]);
  output["az"] = ByteParser.bytesToInt16(arr[accIdx + 4], arr[accIdx + 5]);
  output["gx"] = ByteParser.bytesToInt16(arr[accIdx + 6], arr[accIdx + 7]);
  output["gy"] = ByteParser.bytesToInt16(arr[accIdx + 8], arr[accIdx + 9]);
  output["gz"] = ByteParser.bytesToInt16(arr[accIdx + 10], arr[accIdx + 11]);
  output.timestamp = Date.now();
  return output;
}
var sps3 = 250;
var freeeeg128SerialSettings = { baudRate: 921600, bufferSize: 2e3, frequency: 1.9, codec: freeeeg128codec, sps: sps3 };
var freeeeg128ChartSettings = { lines: { "ax": { nSec: 10, sps: sps3 }, "ay": { nSec: 10, sps: sps3 }, "az": { nSec: 10, sps: sps3 }, "gx": { nSec: 10, sps: sps3 }, "gy": { nSec: 10, sps: sps3 }, "gz": { nSec: 10, sps: sps3 } } };
var freeeeg128FilterSettings = {};
for (let i = 0; i < 128; i++) {
  freeeeg128ChartSettings.lines[i] = { sps: sps3, nSec: 10, units: "mV" };
  freeeeg128FilterSettings[i] = { sps: 250, useDCBlock: true, useBandpass: true, bandpassLower: 3, bandpassUpper: 45, scalar: 1e3 * 2.5 / (32 * (Math.pow(2, 24) - 1)) };
}
function freeeeg32codec(data) {
  let arr;
  if (data.getInt8)
    arr = new Uint8Array(data.buffer);
  else if (!data.buffer)
    arr = new Uint8Array(data);
  else
    arr = data;
  let output = {};
  for (let i = 0; i < 32; i++) {
    let idx = i * 3 + 1;
    output[i] = ByteParser.bytesToInt24(arr[idx], arr[idx + 1], arr[idx + 2]);
  }
  let accIdx = 97;
  output["ax"] = ByteParser.bytesToInt16(arr[accIdx], arr[accIdx + 1]);
  output["ay"] = ByteParser.bytesToInt16(arr[accIdx + 2], arr[accIdx + 3]);
  output["az"] = ByteParser.bytesToInt16(arr[accIdx + 4], arr[accIdx + 5]);
  output["gx"] = ByteParser.bytesToInt16(arr[accIdx + 6], arr[accIdx + 7]);
  output["gy"] = ByteParser.bytesToInt16(arr[accIdx + 8], arr[accIdx + 9]);
  output["gz"] = ByteParser.bytesToInt16(arr[accIdx + 10], arr[accIdx + 11]);
  output.timestamp = Date.now();
  return output;
}
var sps4 = 512;
var freeeeg32SerialSettings = { baudRate: 921600, bufferSize: 2e3, frequency: 1.9, codec: freeeeg32codec, sps: sps4 };
var freeeeg32_optical_SerialSettings = { baudRate: 1e6, bufferSize: 2e3, frequency: 1.9, codec: freeeeg32codec, sps: sps4 };
var defaultChartSetting3 = { nSec: 10, sps: sps4 };
var freeeeg32ChartSettings = { lines: { "ax": JSON.parse(JSON.stringify(defaultChartSetting3)), "ay": JSON.parse(JSON.stringify(defaultChartSetting3)), "az": JSON.parse(JSON.stringify(defaultChartSetting3)), "gx": JSON.parse(JSON.stringify(defaultChartSetting3)), "gy": JSON.parse(JSON.stringify(defaultChartSetting3)), "gz": JSON.parse(JSON.stringify(defaultChartSetting3)) } };
var freeeeg32FilterSettings = {};
for (let i = 0; i < 32; i++) {
  freeeeg32ChartSettings.lines[i] = { sps: sps4, nSec: 10, units: "mV" };
  freeeeg32FilterSettings[i] = { sps: sps4, useDCBlock: true, useBandpass: true, bandpassLower: 3, bandpassUpper: 45, useScaling: true, scalar: 1e3 * 2.5 / (8 * (Math.pow(2, 24) - 1)) };
}
var textdecoder = new TextDecoder();
function hegduinocodec(value) {
  let output = { timestamp: 0, red: 0, infrared: 0, heg: 0, ambient: 0, temperature: 0 };
  let txt = textdecoder.decode(value);
  let line = txt.split("|");
  if (line.length === 3) {
    output.timestamp = Date.now();
    output.red = parseInt(line[0]);
    output.infrared = parseInt(line[1]);
    output.heg = parseFloat(line[2]);
  } else if (line.length >= 5) {
    output.timestamp = Date.now();
    output.red = parseInt(line[1]);
    output.infrared = parseInt(line[2]);
    output.heg = parseFloat(line[3]);
    output.ambient = parseFloat(line[4]);
    output.temperature = parseFloat(line[5]);
    return output;
  } else
    return txt;
}
var sps5 = 40;
var hegduinoSerialSettings = { baudRate: 115200, write: "t\n", codec: hegduinocodec, sps: sps5 };
var hegduinoV1SerialSettings = Object.assign({}, hegduinoSerialSettings);
hegduinoV1SerialSettings.sps = 19;
var hegduinoBLESettings = { sps: sps5, services: { ["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { "6e400002-b5a3-f393-e0a9-e50e24dcca9e": { write: "t" }, "6e400003-b5a3-f393-e0a9-e50e24dcca9e": { notify: true, notifyCallback: void 0, codec: hegduinocodec, sps: sps5 } }, ["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { ["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { read: true }, ["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { write: void 0, notify: true, notifyCallback: void 0 }, ["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { read: true } } }, androidWebBLE: "o" };
var hegduinoV1BLESettings = Object.assign({}, hegduinoSerialSettings);
hegduinoV1BLESettings.sps = 19;
function max3010xcodec(data) {
  let arr;
  if (data.getInt8)
    arr = new Uint8Array(data.buffer);
  else if (!data.buffer)
    arr = new Uint8Array(data);
  else
    arr = data;
  const output = { "red": new Array(32), "ir": new Array(32), "max_dietemp": ByteParser.get2sCompliment(arr[193], 8) + 0.0625 * arr[194], "timestamp": Date.now() };
  let i = 0;
  while (i < 32) {
    let idx = i * 6;
    if (i % 2 === 0) {
      output["ir"][i] = (arr[idx + 1] << 16 | arr[idx + 2] << 8 | arr[idx + 3]) & 524287;
      output["ir"][i + 1] = (arr[idx + 4] << 16 | arr[idx + 5] << 8 | arr[idx + 6]) & 524287;
    } else {
      output["red"][i - 1] = (arr[idx + 1] << 16 | arr[idx + 2] << 8 | arr[idx + 3]) & 524287;
      output["red"][i] = (arr[idx + 4] << 16 | arr[idx + 5] << 8 | arr[idx + 6]) & 524287;
    }
    i++;
  }
  return output;
}
function mpu6050codec(data) {
  let arr;
  if (data.getInt8)
    arr = new Uint8Array(data.buffer);
  else if (!data.buffer)
    arr = new Uint8Array(data);
  else
    arr = data;
  let output = { "ax": new Array(20), "ay": new Array(20), "az": new Array(20), "gx": new Array(20), "gy": new Array(20), "gz": new Array(20), "mpu_dietemp": (ByteParser.bytesToInt16(arr[241], arr[242]) + 521) / 340 + 35, timestamp: Date.now() };
  for (let i = 0; i < 20; i++) {
    let idx = i * 12;
    output.ax[i] = ByteParser.bytesToInt16(arr[idx + 1], arr[idx + 2]);
    output.ay[i] = ByteParser.bytesToInt16(arr[idx + 3], arr[idx + 4]);
    output.az[i] = ByteParser.bytesToInt16(arr[idx + 5], arr[idx + 6]);
    output.gx[i] = ByteParser.bytesToInt16(arr[idx + 7], arr[idx + 8]);
    output.gy[i] = ByteParser.bytesToInt16(arr[idx + 9], arr[idx + 10]);
    output.gz[i] = ByteParser.bytesToInt16(arr[idx + 11], arr[idx + 12]);
  }
  return output;
}
function cognixionONE_EEG_codec(data) {
  let arr;
  if (data.getInt8)
    arr = new Uint8Array(data.buffer);
  else if (!data.buffer)
    arr = new Uint8Array(data);
  else
    arr = data;
  let output = { 0: new Array(), 1: new Array(), 2: new Array(), 3: new Array(), 4: new Array(), 5: new Array(), 6: new Array(), 7: new Array(), timestamp: Date.now() };
  for (let i = 0; i < 7; i++) {
    let j = i * 26 + 1;
    if (!arr[j + 23])
      break;
    output[0][i] = ByteParser.bytesToUInt24(arr[j], arr[j + 1], arr[j + 2]);
    output[1][i] = ByteParser.bytesToUInt24(arr[j + 3], arr[j + 4], arr[j + 5]);
    output[2][i] = ByteParser.bytesToUInt24(arr[j + 6], arr[j + 7], arr[j + 8]);
    output[3][i] = ByteParser.bytesToUInt24(arr[j + 9], arr[j + 10], arr[j + 11]);
    output[4][i] = ByteParser.bytesToUInt24(arr[j + 12], arr[j + 13], arr[j + 14]);
    output[5][i] = ByteParser.bytesToUInt24(arr[j + 15], arr[j + 16], arr[j + 17]);
    output[6][i] = ByteParser.bytesToUInt24(arr[j + 18], arr[j + 19], arr[j + 20]);
    output[7][i] = ByteParser.bytesToUInt24(arr[j + 21], arr[j + 22], arr[j + 23]);
  }
  return output;
}
var sps7 = 250;
var cognixionONEBLESettings = { services: { ["82046698-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]: { ["8204669A-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]: { notify: true, notifyCallback: void 0, codec: cognixionONE_EEG_codec, sps: sps7 } }, ["82E12914-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]: { ["82E12915-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]: { write: void 0 }, ["82E12916-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]: { read: true } } }, sps: sps7 };
var defaultChartSetting4 = { nSec: 10, sps: sps7, units: "mV" };
var cognixionONEChartSettings = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting4)), "1": JSON.parse(JSON.stringify(defaultChartSetting4)), "2": JSON.parse(JSON.stringify(defaultChartSetting4)), "3": JSON.parse(JSON.stringify(defaultChartSetting4)), "4": JSON.parse(JSON.stringify(defaultChartSetting4)), "5": JSON.parse(JSON.stringify(defaultChartSetting4)), "6": JSON.parse(JSON.stringify(defaultChartSetting4)), "7": JSON.parse(JSON.stringify(defaultChartSetting4)) } };
var PeanutCodes = { 2: { type: "POOR_SIGNAL", format: "<B", byteLength: 1 }, 144: { type: "heg", format: "<i", byteLength: 4 }, 145: { type: "filteredHEG", format: "<i", byteLength: 4 }, 147: { type: "rawdata4", format: "<iiii", byteLength: 4 * 4 }, 148: { type: "rawdata6", format: "<iiiiii", byteLength: 4 * 6 }, 160: { type: "sampleNumber", format: "<i", byteLength: 4 }, 176: { type: "debug0", format: "<i", byteLength: 4 }, 177: { type: "debug1", format: "<i", byteLength: 4 }, 178: { type: "debug2", format: "<i", byteLength: 4 }, 179: { type: "debug3", format: "<i", byteLength: 4 }, 180: { type: "debug4", format: "<iiiiii", byteLength: 4 * 6 }, 181: { type: "debug4", format: "<iiiiii", byteLength: 4 * 6 }, 182: { type: "rawdata27", format: "<B" + "i".repeat(26), byteLength: 1 + 4 * 26 } };
function peanutcodec(data) {
  let result = {};
  let i = 0;
  while (i < data.length) {
    if (PeanutCodes[data[i]] && i + 1 + PeanutCodes[data[i]].byteLength <= data.length) {
      let slice = data.slice(i + 1, i + 1 + PeanutCodes[data[i]].byteLength).buffer;
      let unpacked = ByteParser.struct(PeanutCodes[data[i]].format).unpack(slice);
      let code = PeanutCodes[data[i]].type;
      if (code === "unfilteredHEG" || code === "heg")
        unpacked = unpacked[0] / 256;
      else if (code === "POOR_SIGNAL" || code === "sampleNumber" || code === "debug0" || code === "debug1" || code === "debug2" || code === "debug3")
        unpacked = unpacked[0];
      if (!result[PeanutCodes[data[i]].type]) {
        if (Array.isArray(unpacked))
          result[PeanutCodes[data[i]].type] = unpacked;
        else
          result[PeanutCodes[data[i]].type] = [unpacked];
      } else {
        if (Array.isArray(unpacked))
          result[PeanutCodes[data[i]].type].push(...unpacked);
        else
          result[PeanutCodes[data[i]].type].push(unpacked);
      }
      i += PeanutCodes[data[i]].byteLength + 1;
    } else
      i++;
  }
  result.timestamp = Date.now();
  return result;
}
var peanutSerialSettings = { baudRate: 38400, bufferSize: 400, write: "protocol 3\n", buffering: { searchBytes: new Uint8Array([170, 170]) }, codec: peanutcodec, sps: 10.101 };
var sealevel_hpa = 1013.25;
var bme280codec = (data) => {
  let arr;
  if (data.getInt8)
    arr = new Uint8Array(data.buffer);
  else if (!data.buffer)
    arr = new Uint8Array(data);
  else
    arr = data;
  let output = { temp: [], pressure: [], humidity: [], altitude: [] };
  for (let j = 0; j < 3; j++) {
    let i = j * 24;
    let tint = ByteParser.bytesToUInt32(arr[0 + i], arr[1 + i], arr[2 + i], arr[3 + i]);
    let tfrac = ByteParser.bytesToUInt32(arr[4 + i], arr[5 + i], arr[6 + i], arr[7 + i]);
    output.temp.push(tint + tfrac / Math.pow(10, Math.ceil(Math.log10(tfrac))));
    let pint = ByteParser.bytesToUInt32(arr[8 + i], arr[9 + i], arr[10 + i], arr[11 + i]);
    let pfrac = ByteParser.bytesToUInt32(arr[12 + i], arr[13 + i], arr[14 + i], arr[15 + i]);
    output.pressure.push(pint + pfrac / Math.pow(10, Math.ceil(Math.log10(pfrac))));
    let hint = ByteParser.bytesToUInt32(arr[16 + i], arr[17 + i], arr[18 + i], arr[19 + i]);
    let hfrac = ByteParser.bytesToUInt32(arr[20 + i], arr[21 + i], arr[22 + i], arr[23 + i]);
    output.humidity.push(hint + hfrac / Math.pow(10, Math.ceil(Math.log10(hfrac))));
    output.altitude.push(altitude(output.pressure[j], output.temp[j]));
  }
  return output;
};
var exponent = 1 / 5.257;
var denom = 1 / 65e-4;
function altitude(pressure, temperature) {
  return (Math.pow(sealevel_hpa / pressure, exponent) - 1) * (temperature + 273.15) * denom;
}
function nrf5x_usbcodec(data) {
  let arr;
  if (data.getInt8)
    arr = new Uint8Array(data.buffer);
  else if (!data.buffer)
    arr = new Uint8Array(data);
  else
    arr = data;
  const output = {};
  if (arr[0] === 2) {
    Object.assign(output, ads131m08codec(arr.subarray(2)));
  } else if (arr[0] === 3) {
    let result = ads131m08codec(arr.subarray(2));
    Object.keys(result).forEach((key, i) => {
      output[i + 8] = result[key];
    });
  } else if (arr[0] === 4) {
    Object.assign(output, mpu6050codec(arr.subarray(2)));
  } else if (arr[0] === 5) {
    Object.assign(output, max3010xcodec(arr.subarray(2)));
  } else if (arr[0] === 6) {
    Object.assign(output, bme280codec(arr.subarray(2)));
  } else {
    Object.assign(output, ads131m08codec(arr));
  }
  return output;
}
var nrf5xSerialSettings = { baudRate: 115200, buffering: { searchBytes: new Uint8Array([240, 240]) }, codec: nrf5x_usbcodec, sps: 250 };
var nrf5xBLESettings = { sps: 250, services: { "0000cafe-b0ba-8bad-f00d-deadbeef0000": { "0001cafe-b0ba-8bad-f00d-deadbeef0000": { write: void 0 }, "0002cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: ads131m08codec, sps: 250 }, "0003cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: max3010xcodec, sps: 100 }, "0004cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: mpu6050codec, sps: 100 }, "0005cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: ads131m08codec, sps: 250 }, "0006cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: bme280codec, sps: 3.33 } } } };
var defaultChartSetting5 = { nSec: 10, sps: 250, units: "mV" };
var nrf5x_usbChartSettings = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting5)), "1": JSON.parse(JSON.stringify(defaultChartSetting5)), "2": JSON.parse(JSON.stringify(defaultChartSetting5)), "3": JSON.parse(JSON.stringify(defaultChartSetting5)), "4": JSON.parse(JSON.stringify(defaultChartSetting5)), "5": JSON.parse(JSON.stringify(defaultChartSetting5)), "6": JSON.parse(JSON.stringify(defaultChartSetting5)), "7": JSON.parse(JSON.stringify(defaultChartSetting5)) }, generateNewLines: true, cleanGeneration: false };
var gain2 = 32;
var nbits2 = 24;
var vref2 = 1.2;
var defaultsetting3 = { sps: 250, useDCBlock: false, useBandpass: false, bandpassLower: 3, bandpassUpper: 45, useScaling: true, scalar: 0.96 * 1e3 * vref2 / (gain2 * (Math.pow(2, nbits2) - 1)) };
var nrf5x_usbFilterSettings = { "0": JSON.parse(JSON.stringify(defaultsetting3)), "1": JSON.parse(JSON.stringify(defaultsetting3)), "2": JSON.parse(JSON.stringify(defaultsetting3)), "3": JSON.parse(JSON.stringify(defaultsetting3)), "4": JSON.parse(JSON.stringify(defaultsetting3)), "5": JSON.parse(JSON.stringify(defaultsetting3)), "6": JSON.parse(JSON.stringify(defaultsetting3)), "7": JSON.parse(JSON.stringify(defaultsetting3)), "8": JSON.parse(JSON.stringify(defaultsetting3)), "9": JSON.parse(JSON.stringify(defaultsetting3)), "10": JSON.parse(JSON.stringify(defaultsetting3)), "11": JSON.parse(JSON.stringify(defaultsetting3)), "12": JSON.parse(JSON.stringify(defaultsetting3)), "13": JSON.parse(JSON.stringify(defaultsetting3)), "14": JSON.parse(JSON.stringify(defaultsetting3)), "15": JSON.parse(JSON.stringify(defaultsetting3)) };
var textdecoder2 = new TextDecoder();
function statechangercodec(value) {
  let output = { timestamp: 0, left_red: 0, left_infrared: 0, left_heg: 0, center_red: 0, center_infrared: 0, center_heg: 0, right_red: 0, right_infrared: 0, right_heg: 0 };
  let txt = textdecoder2.decode(value);
  let line = txt.split("|");
  if (line.length >= 5) {
    output.timestamp = Date.now();
    output.left_red = parseInt(line[1]);
    output.left_infrared = parseInt(line[2]);
    output.left_heg = parseFloat(line[3]);
    output.center_red = parseInt(line[4]);
    output.center_infrared = parseInt(line[5]);
    output.center_heg = parseFloat(line[6]);
    output.right_red = parseInt(line[7]);
    output.right_infrared = parseInt(line[8]);
    output.right_heg = parseFloat(line[9]);
    return output;
  } else
    return txt;
}
var statechangerSerialSettings = { baudRate: 115200, codec: statechangercodec };
var statechangerBLESettings = { services: { ["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { "6e400002-b5a3-f393-e0a9-e50e24dcca9e": { write: "t" }, "6e400003-b5a3-f393-e0a9-e50e24dcca9e": { notify: true, notifyCallback: void 0, codec: statechangercodec } }, ["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { ["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { read: true }, ["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { write: void 0, notify: true, notifyCallback: void 0 }, ["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { read: true } } }, androidWebBLE: "o" };
function blueberrycodec(value) {
  let output = { red: value.getInt32(2), ir: value.getInt32(6), ir2: value.getInt32(10), timestamp: Date.now() };
  output.heg = output.red / (0.5 * (output.ir + output.ir2));
  return output;
}
var sps8 = 40;
var blueberryBLESettings = { namePrefix: "blueberry", services: { "0f0e0d0c-0b0a-0908-0706-050403020100": { "1f1e1d1c-1b1a-1918-1716-151413121110": { write: void 0 }, "3f3e3d3c-3b3a-3938-3736-353433323130": { notify: true, notifyCallback: void 0, codec: blueberrycodec, sps: sps8 } } }, sps: sps8 };
function blueberryshortcodec(value) {
  let output = { sred: value.getInt32(2), sir: value.getInt32(6), sir2: value.getInt32(10), timestamp: Date.now() };
  output.sheg = output.sred / (0.5 * (output.sir + output.sir2));
  return output;
}
function blueberrylongcodec(value) {
  let output = { red: value.getInt32(2), ir: value.getInt32(6), ir2: value.getInt32(10), timestamp: Date.now() };
  output.heg = output.sred / (0.5 * (output.ir + output.ir2));
  return output;
}
var sps9 = 40;
var blueberry2BLESettings = { namePrefix: "blueberry", services: { "0f0e0d0c-0b0a-0908-0706-050403020100": { "1f1e1d1c-1b1a-1918-1716-151413121110": { write: void 0 }, "4f4e4d4c-4b6a-6968-6766-656463426160": { notify: true, notifyCallback: void 0, codec: blueberrylongcodec, sps: sps9 }, "4f4e4d4c-4b5a-5958-5756-555453425150": { notify: true, notifyCallback: void 0, codec: blueberryshortcodec, sps: sps9 } } }, sps: sps9 };
var Po = Object.create;
var Ee = Object.defineProperty;
var Do = Object.getOwnPropertyDescriptor;
var Ao = Object.getOwnPropertyNames;
var Eo = Object.getPrototypeOf;
var ve = Object.prototype.hasOwnProperty;
var vo = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);
var To = (e, t, n, r) => {
  if (t && typeof t == "object" || typeof t == "function")
    for (let a of Ao(t))
      !ve.call(e, a) && a !== n && Ee(e, a, { get: () => t[a], enumerable: !(r = Do(t, a)) || r.enumerable });
  return e;
};
var Ro = (e, t, n) => (n = e != null ? Po(Eo(e)) : {}, To(t || !e || !e.__esModule ? Ee(n, "default", { value: e, enumerable: true }) : n, e));
var jt = vo((ll, he) => {
  var At, Et, vt, Tt, Rt, Nt, _t, Ft, Mt, Ce, Te, Gt, Ut, Lt, L, Ht, zt, Vt, Qt, Wt, qt, Yt, $t, Zt, pe;
  (function(e) {
    var t = typeof global == "object" ? global : typeof self == "object" ? self : typeof this == "object" ? this : {};
    typeof define == "function" && define.amd ? define("tslib", ["exports"], function(r) {
      e(n(t, n(r)));
    }) : typeof he == "object" && typeof he.exports == "object" ? e(n(t, n(he.exports))) : e(n(t));
    function n(r, a) {
      return r !== t && (typeof Object.create == "function" ? Object.defineProperty(r, "__esModule", { value: true }) : r.__esModule = true), function(i, c) {
        return r[i] = a ? a(i, c) : c;
      };
    }
  })(function(e) {
    var t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(r, a) {
      r.__proto__ = a;
    } || function(r, a) {
      for (var i in a)
        Object.prototype.hasOwnProperty.call(a, i) && (r[i] = a[i]);
    };
    At = function(r, a) {
      if (typeof a != "function" && a !== null)
        throw new TypeError("Class extends value " + String(a) + " is not a constructor or null");
      t(r, a);
      function i() {
        this.constructor = r;
      }
      r.prototype = a === null ? Object.create(a) : (i.prototype = a.prototype, new i());
    }, Et = Object.assign || function(r) {
      for (var a, i = 1, c = arguments.length; i < c; i++) {
        a = arguments[i];
        for (var s in a)
          Object.prototype.hasOwnProperty.call(a, s) && (r[s] = a[s]);
      }
      return r;
    }, vt = function(r, a) {
      var i = {};
      for (var c in r)
        Object.prototype.hasOwnProperty.call(r, c) && a.indexOf(c) < 0 && (i[c] = r[c]);
      if (r != null && typeof Object.getOwnPropertySymbols == "function")
        for (var s = 0, c = Object.getOwnPropertySymbols(r); s < c.length; s++)
          a.indexOf(c[s]) < 0 && Object.prototype.propertyIsEnumerable.call(r, c[s]) && (i[c[s]] = r[c[s]]);
      return i;
    }, Tt = function(r, a, i, c) {
      var s = arguments.length, l = s < 3 ? a : c === null ? c = Object.getOwnPropertyDescriptor(a, i) : c, u;
      if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
        l = Reflect.decorate(r, a, i, c);
      else
        for (var f = r.length - 1; f >= 0; f--)
          (u = r[f]) && (l = (s < 3 ? u(l) : s > 3 ? u(a, i, l) : u(a, i)) || l);
      return s > 3 && l && Object.defineProperty(a, i, l), l;
    }, Rt = function(r, a) {
      return function(i, c) {
        a(i, c, r);
      };
    }, Nt = function(r, a) {
      if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
        return Reflect.metadata(r, a);
    }, _t = function(r, a, i, c) {
      function s(l) {
        return l instanceof i ? l : new i(function(u) {
          u(l);
        });
      }
      return new (i || (i = Promise))(function(l, u) {
        function f(p) {
          try {
            m(c.next(p));
          } catch (B) {
            u(B);
          }
        }
        function b(p) {
          try {
            m(c.throw(p));
          } catch (B) {
            u(B);
          }
        }
        function m(p) {
          p.done ? l(p.value) : s(p.value).then(f, b);
        }
        m((c = c.apply(r, a || [])).next());
      });
    }, Ft = function(r, a) {
      var i = { label: 0, sent: function() {
        if (l[0] & 1)
          throw l[1];
        return l[1];
      }, trys: [], ops: [] }, c, s, l, u;
      return u = { next: f(0), throw: f(1), return: f(2) }, typeof Symbol == "function" && (u[Symbol.iterator] = function() {
        return this;
      }), u;
      function f(m) {
        return function(p) {
          return b([m, p]);
        };
      }
      function b(m) {
        if (c)
          throw new TypeError("Generator is already executing.");
        for (; i; )
          try {
            if (c = 1, s && (l = m[0] & 2 ? s.return : m[0] ? s.throw || ((l = s.return) && l.call(s), 0) : s.next) && !(l = l.call(s, m[1])).done)
              return l;
            switch (s = 0, l && (m = [m[0] & 2, l.value]), m[0]) {
              case 0:
              case 1:
                l = m;
                break;
              case 4:
                return i.label++, { value: m[1], done: false };
              case 5:
                i.label++, s = m[1], m = [0];
                continue;
              case 7:
                m = i.ops.pop(), i.trys.pop();
                continue;
              default:
                if (l = i.trys, !(l = l.length > 0 && l[l.length - 1]) && (m[0] === 6 || m[0] === 2)) {
                  i = 0;
                  continue;
                }
                if (m[0] === 3 && (!l || m[1] > l[0] && m[1] < l[3])) {
                  i.label = m[1];
                  break;
                }
                if (m[0] === 6 && i.label < l[1]) {
                  i.label = l[1], l = m;
                  break;
                }
                if (l && i.label < l[2]) {
                  i.label = l[2], i.ops.push(m);
                  break;
                }
                l[2] && i.ops.pop(), i.trys.pop();
                continue;
            }
            m = a.call(r, i);
          } catch (p) {
            m = [6, p], s = 0;
          } finally {
            c = l = 0;
          }
        if (m[0] & 5)
          throw m[1];
        return { value: m[0] ? m[1] : void 0, done: true };
      }
    }, Mt = function(r, a) {
      for (var i in r)
        i !== "default" && !Object.prototype.hasOwnProperty.call(a, i) && pe(a, r, i);
    }, pe = Object.create ? function(r, a, i, c) {
      c === void 0 && (c = i);
      var s = Object.getOwnPropertyDescriptor(a, i);
      (!s || ("get" in s ? !a.__esModule : s.writable || s.configurable)) && (s = { enumerable: true, get: function() {
        return a[i];
      } }), Object.defineProperty(r, c, s);
    } : function(r, a, i, c) {
      c === void 0 && (c = i), r[c] = a[i];
    }, Ce = function(r) {
      var a = typeof Symbol == "function" && Symbol.iterator, i = a && r[a], c = 0;
      if (i)
        return i.call(r);
      if (r && typeof r.length == "number")
        return { next: function() {
          return r && c >= r.length && (r = void 0), { value: r && r[c++], done: !r };
        } };
      throw new TypeError(a ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }, Te = function(r, a) {
      var i = typeof Symbol == "function" && r[Symbol.iterator];
      if (!i)
        return r;
      var c = i.call(r), s, l = [], u;
      try {
        for (; (a === void 0 || a-- > 0) && !(s = c.next()).done; )
          l.push(s.value);
      } catch (f) {
        u = { error: f };
      } finally {
        try {
          s && !s.done && (i = c.return) && i.call(c);
        } finally {
          if (u)
            throw u.error;
        }
      }
      return l;
    }, Gt = function() {
      for (var r = [], a = 0; a < arguments.length; a++)
        r = r.concat(Te(arguments[a]));
      return r;
    }, Ut = function() {
      for (var r = 0, a = 0, i = arguments.length; a < i; a++)
        r += arguments[a].length;
      for (var c = Array(r), s = 0, a = 0; a < i; a++)
        for (var l = arguments[a], u = 0, f = l.length; u < f; u++, s++)
          c[s] = l[u];
      return c;
    }, Lt = function(r, a, i) {
      if (i || arguments.length === 2)
        for (var c = 0, s = a.length, l; c < s; c++)
          (l || !(c in a)) && (l || (l = Array.prototype.slice.call(a, 0, c)), l[c] = a[c]);
      return r.concat(l || Array.prototype.slice.call(a));
    }, L = function(r) {
      return this instanceof L ? (this.v = r, this) : new L(r);
    }, Ht = function(r, a, i) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var c = i.apply(r, a || []), s, l = [];
      return s = {}, u("next"), u("throw"), u("return"), s[Symbol.asyncIterator] = function() {
        return this;
      }, s;
      function u(C) {
        c[C] && (s[C] = function(x) {
          return new Promise(function(h, T) {
            l.push([C, x, h, T]) > 1 || f(C, x);
          });
        });
      }
      function f(C, x) {
        try {
          b(c[C](x));
        } catch (h) {
          B(l[0][3], h);
        }
      }
      function b(C) {
        C.value instanceof L ? Promise.resolve(C.value.v).then(m, p) : B(l[0][2], C);
      }
      function m(C) {
        f("next", C);
      }
      function p(C) {
        f("throw", C);
      }
      function B(C, x) {
        C(x), l.shift(), l.length && f(l[0][0], l[0][1]);
      }
    }, zt = function(r) {
      var a, i;
      return a = {}, c("next"), c("throw", function(s) {
        throw s;
      }), c("return"), a[Symbol.iterator] = function() {
        return this;
      }, a;
      function c(s, l) {
        a[s] = r[s] ? function(u) {
          return (i = !i) ? { value: L(r[s](u)), done: s === "return" } : l ? l(u) : u;
        } : l;
      }
    }, Vt = function(r) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var a = r[Symbol.asyncIterator], i;
      return a ? a.call(r) : (r = typeof Ce == "function" ? Ce(r) : r[Symbol.iterator](), i = {}, c("next"), c("throw"), c("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function c(l) {
        i[l] = r[l] && function(u) {
          return new Promise(function(f, b) {
            u = r[l](u), s(f, b, u.done, u.value);
          });
        };
      }
      function s(l, u, f, b) {
        Promise.resolve(b).then(function(m) {
          l({ value: m, done: f });
        }, u);
      }
    }, Qt = function(r, a) {
      return Object.defineProperty ? Object.defineProperty(r, "raw", { value: a }) : r.raw = a, r;
    };
    var n = Object.create ? function(r, a) {
      Object.defineProperty(r, "default", { enumerable: true, value: a });
    } : function(r, a) {
      r.default = a;
    };
    Wt = function(r) {
      if (r && r.__esModule)
        return r;
      var a = {};
      if (r != null)
        for (var i in r)
          i !== "default" && Object.prototype.hasOwnProperty.call(r, i) && pe(a, r, i);
      return n(a, r), a;
    }, qt = function(r) {
      return r && r.__esModule ? r : { default: r };
    }, Yt = function(r, a, i, c) {
      if (i === "a" && !c)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof a == "function" ? r !== a || !c : !a.has(r))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return i === "m" ? c : i === "a" ? c.call(r) : c ? c.value : a.get(r);
    }, $t = function(r, a, i, c, s) {
      if (c === "m")
        throw new TypeError("Private method is not writable");
      if (c === "a" && !s)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof a == "function" ? r !== a || !s : !a.has(r))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return c === "a" ? s.call(r, i) : s ? s.value = i : a.set(r, i), i;
    }, Zt = function(r, a) {
      if (a === null || typeof a != "object" && typeof a != "function")
        throw new TypeError("Cannot use 'in' operator on non-object");
      return typeof r == "function" ? a === r : r.has(a);
    }, e("__extends", At), e("__assign", Et), e("__rest", vt), e("__decorate", Tt), e("__param", Rt), e("__metadata", Nt), e("__awaiter", _t), e("__generator", Ft), e("__exportStar", Mt), e("__createBinding", pe), e("__values", Ce), e("__read", Te), e("__spread", Gt), e("__spreadArrays", Ut), e("__spreadArray", Lt), e("__await", L), e("__asyncGenerator", Ht), e("__asyncDelegator", zt), e("__asyncValues", Vt), e("__makeTemplateObject", Qt), e("__importStar", Wt), e("__importDefault", qt), e("__classPrivateFieldGet", Yt), e("__classPrivateFieldSet", $t), e("__classPrivateFieldIn", Zt);
  });
});
var Xt = Ro(jt(), 1);
var { __extends: w, __assign: ul, __rest: ml, __decorate: fl, __param: dl, __metadata: Cl, __awaiter: Kt, __generator: be, __exportStar: pl, __createBinding: hl, __values: _, __read: D, __spread: bl, __spreadArrays: Sl, __spreadArray: R, __await: Se, __asyncGenerator: Jt, __asyncDelegator: yl, __asyncValues: en, __makeTemplateObject: Il, __importStar: Bl, __importDefault: Ol, __classPrivateFieldGet: gl, __classPrivateFieldSet: xl, __classPrivateFieldIn: Pl } = Xt.default;
function d(e) {
  return typeof e == "function";
}
function H(e) {
  var t = function(r) {
    Error.call(r), r.stack = new Error().stack;
  }, n = e(t);
  return n.prototype = Object.create(Error.prototype), n.prototype.constructor = n, n;
}
var ye = H(function(e) {
  return function(n) {
    e(this), this.message = n ? n.length + ` errors occurred during unsubscription:
` + n.map(function(r, a) {
      return a + 1 + ") " + r.toString();
    }).join(`
  `) : "", this.name = "UnsubscriptionError", this.errors = n;
  };
});
function K(e, t) {
  if (e) {
    var n = e.indexOf(t);
    0 <= n && e.splice(n, 1);
  }
}
var z = function() {
  function e(t) {
    this.initialTeardown = t, this.closed = false, this._parentage = null, this._finalizers = null;
  }
  return e.prototype.unsubscribe = function() {
    var t, n, r, a, i;
    if (!this.closed) {
      this.closed = true;
      var c = this._parentage;
      if (c)
        if (this._parentage = null, Array.isArray(c))
          try {
            for (var s = _(c), l = s.next(); !l.done; l = s.next()) {
              var u = l.value;
              u.remove(this);
            }
          } catch (C) {
            t = { error: C };
          } finally {
            try {
              l && !l.done && (n = s.return) && n.call(s);
            } finally {
              if (t)
                throw t.error;
            }
          }
        else
          c.remove(this);
      var f = this.initialTeardown;
      if (d(f))
        try {
          f();
        } catch (C) {
          i = C instanceof ye ? C.errors : [C];
        }
      var b = this._finalizers;
      if (b) {
        this._finalizers = null;
        try {
          for (var m = _(b), p = m.next(); !p.done; p = m.next()) {
            var B = p.value;
            try {
              tn(B);
            } catch (C) {
              i = i ?? [], C instanceof ye ? i = R(R([], D(i)), D(C.errors)) : i.push(C);
            }
          }
        } catch (C) {
          r = { error: C };
        } finally {
          try {
            p && !p.done && (a = m.return) && a.call(m);
          } finally {
            if (r)
              throw r.error;
          }
        }
      }
      if (i)
        throw new ye(i);
    }
  }, e.prototype.add = function(t) {
    var n;
    if (t && t !== this)
      if (this.closed)
        tn(t);
      else {
        if (t instanceof e) {
          if (t.closed || t._hasParent(this))
            return;
          t._addParent(this);
        }
        (this._finalizers = (n = this._finalizers) !== null && n !== void 0 ? n : []).push(t);
      }
  }, e.prototype._hasParent = function(t) {
    var n = this._parentage;
    return n === t || Array.isArray(n) && n.includes(t);
  }, e.prototype._addParent = function(t) {
    var n = this._parentage;
    this._parentage = Array.isArray(n) ? (n.push(t), n) : n ? [n, t] : t;
  }, e.prototype._removeParent = function(t) {
    var n = this._parentage;
    n === t ? this._parentage = null : Array.isArray(n) && K(n, t);
  }, e.prototype.remove = function(t) {
    var n = this._finalizers;
    n && K(n, t), t instanceof e && t._removeParent(this);
  }, e.EMPTY = function() {
    var t = new e();
    return t.closed = true, t;
  }(), e;
}();
var Re = z.EMPTY;
function Ie(e) {
  return e instanceof z || e && "closed" in e && d(e.remove) && d(e.add) && d(e.unsubscribe);
}
function tn(e) {
  d(e) ? e() : e.unsubscribe();
}
var P = { onUnhandledError: null, onStoppedNotification: null, Promise: void 0, useDeprecatedSynchronousErrorHandling: false, useDeprecatedNextContext: false };
var V = { setTimeout: function(e, t) {
  for (var n = [], r = 2; r < arguments.length; r++)
    n[r - 2] = arguments[r];
  var a = V.delegate;
  return a?.setTimeout ? a.setTimeout.apply(a, R([e, t], D(n))) : setTimeout.apply(void 0, R([e, t], D(n)));
}, clearTimeout: function(e) {
  var t = V.delegate;
  return (t?.clearTimeout || clearTimeout)(e);
}, delegate: void 0 };
function Be(e) {
  V.setTimeout(function() {
    var t = P.onUnhandledError;
    if (t)
      t(e);
    else
      throw e;
  });
}
function J() {
}
var nn = function() {
  return Ne("C", void 0, void 0);
}();
function rn(e) {
  return Ne("E", void 0, e);
}
function an(e) {
  return Ne("N", e, void 0);
}
function Ne(e, t, n) {
  return { kind: e, value: t, error: n };
}
var F = null;
function Q(e) {
  if (P.useDeprecatedSynchronousErrorHandling) {
    var t = !F;
    if (t && (F = { errorThrown: false, error: null }), e(), t) {
      var n = F, r = n.errorThrown, a = n.error;
      if (F = null, r)
        throw a;
    }
  } else
    e();
}
function on(e) {
  P.useDeprecatedSynchronousErrorHandling && F && (F.errorThrown = true, F.error = e);
}
var ee = function(e) {
  w(t, e);
  function t(n) {
    var r = e.call(this) || this;
    return r.isStopped = false, n ? (r.destination = n, Ie(n) && n.add(r)) : r.destination = Mo, r;
  }
  return t.create = function(n, r, a) {
    return new ge(n, r, a);
  }, t.prototype.next = function(n) {
    this.isStopped ? Fe(an(n), this) : this._next(n);
  }, t.prototype.error = function(n) {
    this.isStopped ? Fe(rn(n), this) : (this.isStopped = true, this._error(n));
  }, t.prototype.complete = function() {
    this.isStopped ? Fe(nn, this) : (this.isStopped = true, this._complete());
  }, t.prototype.unsubscribe = function() {
    this.closed || (this.isStopped = true, e.prototype.unsubscribe.call(this), this.destination = null);
  }, t.prototype._next = function(n) {
    this.destination.next(n);
  }, t.prototype._error = function(n) {
    try {
      this.destination.error(n);
    } finally {
      this.unsubscribe();
    }
  }, t.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  }, t;
}(z);
var No = Function.prototype.bind;
function _e(e, t) {
  return No.call(e, t);
}
var _o = function() {
  function e(t) {
    this.partialObserver = t;
  }
  return e.prototype.next = function(t) {
    var n = this.partialObserver;
    if (n.next)
      try {
        n.next(t);
      } catch (r) {
        Oe(r);
      }
  }, e.prototype.error = function(t) {
    var n = this.partialObserver;
    if (n.error)
      try {
        n.error(t);
      } catch (r) {
        Oe(r);
      }
    else
      Oe(t);
  }, e.prototype.complete = function() {
    var t = this.partialObserver;
    if (t.complete)
      try {
        t.complete();
      } catch (n) {
        Oe(n);
      }
  }, e;
}();
var ge = function(e) {
  w(t, e);
  function t(n, r, a) {
    var i = e.call(this) || this, c;
    if (d(n) || !n)
      c = { next: n ?? void 0, error: r ?? void 0, complete: a ?? void 0 };
    else {
      var s;
      i && P.useDeprecatedNextContext ? (s = Object.create(n), s.unsubscribe = function() {
        return i.unsubscribe();
      }, c = { next: n.next && _e(n.next, s), error: n.error && _e(n.error, s), complete: n.complete && _e(n.complete, s) }) : c = n;
    }
    return i.destination = new _o(c), i;
  }
  return t;
}(ee);
function Oe(e) {
  P.useDeprecatedSynchronousErrorHandling ? on(e) : Be(e);
}
function Fo(e) {
  throw e;
}
function Fe(e, t) {
  var n = P.onStoppedNotification;
  n && V.setTimeout(function() {
    return n(e, t);
  });
}
var Mo = { closed: true, next: J, error: Fo, complete: J };
var W = function() {
  return typeof Symbol == "function" && Symbol.observable || "@@observable";
}();
function q(e) {
  return e;
}
function cn(e) {
  return e.length === 0 ? q : e.length === 1 ? e[0] : function(n) {
    return e.reduce(function(r, a) {
      return a(r);
    }, n);
  };
}
var O = function() {
  function e(t) {
    t && (this._subscribe = t);
  }
  return e.prototype.lift = function(t) {
    var n = new e();
    return n.source = this, n.operator = t, n;
  }, e.prototype.subscribe = function(t, n, r) {
    var a = this, i = Uo(t) ? t : new ge(t, n, r);
    return Q(function() {
      var c = a, s = c.operator, l = c.source;
      i.add(s ? s.call(i, l) : l ? a._subscribe(i) : a._trySubscribe(i));
    }), i;
  }, e.prototype._trySubscribe = function(t) {
    try {
      return this._subscribe(t);
    } catch (n) {
      t.error(n);
    }
  }, e.prototype.forEach = function(t, n) {
    var r = this;
    return n = sn(n), new n(function(a, i) {
      var c = new ge({ next: function(s) {
        try {
          t(s);
        } catch (l) {
          i(l), c.unsubscribe();
        }
      }, error: i, complete: a });
      r.subscribe(c);
    });
  }, e.prototype._subscribe = function(t) {
    var n;
    return (n = this.source) === null || n === void 0 ? void 0 : n.subscribe(t);
  }, e.prototype[W] = function() {
    return this;
  }, e.prototype.pipe = function() {
    for (var t = [], n = 0; n < arguments.length; n++)
      t[n] = arguments[n];
    return cn(t)(this);
  }, e.prototype.toPromise = function(t) {
    var n = this;
    return t = sn(t), new t(function(r, a) {
      var i;
      n.subscribe(function(c) {
        return i = c;
      }, function(c) {
        return a(c);
      }, function() {
        return r(i);
      });
    });
  }, e.create = function(t) {
    return new e(t);
  }, e;
}();
function sn(e) {
  var t;
  return (t = e ?? P.Promise) !== null && t !== void 0 ? t : Promise;
}
function Go(e) {
  return e && d(e.next) && d(e.error) && d(e.complete);
}
function Uo(e) {
  return e && e instanceof ee || Go(e) && Ie(e);
}
var Ho = function(e) {
  w(t, e);
  function t(n, r, a, i, c, s) {
    var l = e.call(this, n) || this;
    return l.onFinalize = c, l.shouldUnsubscribe = s, l._next = r ? function(u) {
      try {
        r(u);
      } catch (f) {
        n.error(f);
      }
    } : e.prototype._next, l._error = i ? function(u) {
      try {
        i(u);
      } catch (f) {
        n.error(f);
      } finally {
        this.unsubscribe();
      }
    } : e.prototype._error, l._complete = a ? function() {
      try {
        a();
      } catch (u) {
        n.error(u);
      } finally {
        this.unsubscribe();
      }
    } : e.prototype._complete, l;
  }
  return t.prototype.unsubscribe = function() {
    var n;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var r = this.closed;
      e.prototype.unsubscribe.call(this), !r && ((n = this.onFinalize) === null || n === void 0 || n.call(this));
    }
  }, t;
}(ee);
var ln = H(function(e) {
  return function() {
    e(this), this.name = "ObjectUnsubscribedError", this.message = "object unsubscribed";
  };
});
var M = function(e) {
  w(t, e);
  function t() {
    var n = e.call(this) || this;
    return n.closed = false, n.currentObservers = null, n.observers = [], n.isStopped = false, n.hasError = false, n.thrownError = null, n;
  }
  return t.prototype.lift = function(n) {
    var r = new un(this, this);
    return r.operator = n, r;
  }, t.prototype._throwIfClosed = function() {
    if (this.closed)
      throw new ln();
  }, t.prototype.next = function(n) {
    var r = this;
    Q(function() {
      var a, i;
      if (r._throwIfClosed(), !r.isStopped) {
        r.currentObservers || (r.currentObservers = Array.from(r.observers));
        try {
          for (var c = _(r.currentObservers), s = c.next(); !s.done; s = c.next()) {
            var l = s.value;
            l.next(n);
          }
        } catch (u) {
          a = { error: u };
        } finally {
          try {
            s && !s.done && (i = c.return) && i.call(c);
          } finally {
            if (a)
              throw a.error;
          }
        }
      }
    });
  }, t.prototype.error = function(n) {
    var r = this;
    Q(function() {
      if (r._throwIfClosed(), !r.isStopped) {
        r.hasError = r.isStopped = true, r.thrownError = n;
        for (var a = r.observers; a.length; )
          a.shift().error(n);
      }
    });
  }, t.prototype.complete = function() {
    var n = this;
    Q(function() {
      if (n._throwIfClosed(), !n.isStopped) {
        n.isStopped = true;
        for (var r = n.observers; r.length; )
          r.shift().complete();
      }
    });
  }, t.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true, this.observers = this.currentObservers = null;
  }, Object.defineProperty(t.prototype, "observed", { get: function() {
    var n;
    return ((n = this.observers) === null || n === void 0 ? void 0 : n.length) > 0;
  }, enumerable: false, configurable: true }), t.prototype._trySubscribe = function(n) {
    return this._throwIfClosed(), e.prototype._trySubscribe.call(this, n);
  }, t.prototype._subscribe = function(n) {
    return this._throwIfClosed(), this._checkFinalizedStatuses(n), this._innerSubscribe(n);
  }, t.prototype._innerSubscribe = function(n) {
    var r = this, a = this, i = a.hasError, c = a.isStopped, s = a.observers;
    return i || c ? Re : (this.currentObservers = null, s.push(n), new z(function() {
      r.currentObservers = null, K(s, n);
    }));
  }, t.prototype._checkFinalizedStatuses = function(n) {
    var r = this, a = r.hasError, i = r.thrownError, c = r.isStopped;
    a ? n.error(i) : c && n.complete();
  }, t.prototype.asObservable = function() {
    var n = new O();
    return n.source = this, n;
  }, t.create = function(n, r) {
    return new un(n, r);
  }, t;
}(O);
var un = function(e) {
  w(t, e);
  function t(n, r) {
    var a = e.call(this) || this;
    return a.destination = n, a.source = r, a;
  }
  return t.prototype.next = function(n) {
    var r, a;
    (a = (r = this.destination) === null || r === void 0 ? void 0 : r.next) === null || a === void 0 || a.call(r, n);
  }, t.prototype.error = function(n) {
    var r, a;
    (a = (r = this.destination) === null || r === void 0 ? void 0 : r.error) === null || a === void 0 || a.call(r, n);
  }, t.prototype.complete = function() {
    var n, r;
    (r = (n = this.destination) === null || n === void 0 ? void 0 : n.complete) === null || r === void 0 || r.call(n);
  }, t.prototype._subscribe = function(n) {
    var r, a;
    return (a = (r = this.source) === null || r === void 0 ? void 0 : r.subscribe(n)) !== null && a !== void 0 ? a : Re;
  }, t;
}(M);
var Me = function(e) {
  w(t, e);
  function t(n) {
    var r = e.call(this) || this;
    return r._value = n, r;
  }
  return Object.defineProperty(t.prototype, "value", { get: function() {
    return this.getValue();
  }, enumerable: false, configurable: true }), t.prototype._subscribe = function(n) {
    var r = e.prototype._subscribe.call(this, n);
    return !r.closed && n.next(this._value), r;
  }, t.prototype.getValue = function() {
    var n = this, r = n.hasError, a = n.thrownError, i = n._value;
    if (r)
      throw a;
    return this._throwIfClosed(), i;
  }, t.prototype.next = function(n) {
    e.prototype.next.call(this, this._value = n);
  }, t;
}(M);
var mn = new O(function(e) {
  return e.complete();
});
function zo() {
  return typeof Symbol != "function" || !Symbol.iterator ? "@@iterator" : Symbol.iterator;
}
var hn = zo();
var Pe = H(function(e) {
  return function() {
    e(this), this.name = "EmptyError", this.message = "no elements in sequence";
  };
});
var Zo = Array.isArray;
var Va = 51;
var Qa = 1.2;
var Yc = Qa / (8388607 * Va * 1.5);
var Ct = `
LIS3DH Registers
0x07.0
0x08.0
0x09.0
0x0A.0
0x0B.0
0x0C.0
0x0D.0
0x0E.0
0x0F.33

0x1F.0
0x20.8
0x21.0
0x22.0
0x23.18
0x24.0
0x25.0
0x26.0
0x27.0
0x28.0
0x29.0
0x2A.0
0x2B.0
0x2C.0
0x2D.0
0x2E.0
0x2F.20
0x30.0
0x31.0
0x32.0
0x33.0

0x38.0
0x39.0
0x3A.0
0x3B.0
0x3C.0
0x3D.0
`;
var pt = `
LIS3DH Registers
0x07 00
0x08 00
0x09 00
0x0A 00
0x0B 00
0x0C 00
0x0D 00
0x0E 00
0x0F 33

0x1F 00
0x20 08
0x21 00
0x22 00
0x23 18
0x24 00
0x25 00
0x26 00
0x27 00
0x28 00
0x29 00
0x2A 00
0x2B 00
0x2C 00
0x2D 00
0x2E 00
0x2F 20
0x30 00
0x31 00
0x32 00
0x33 00

0x38 00
0x39 00
0x3A 00
0x3B 00
0x3C 00
0x3D 00
`;
var ie = `
Board ADS Registers
ADS_ID, 00, 3E, 0, 0, 1, 1, 1, 1, 1, 0
CONFIG1, 01, 96, 1, 0, 0, 1, 0, 1, 1, 0
CONFIG2, 02, C0, 1, 1, 0, 0, 0, 0, 0, 0
CONFIG3, 03, EC, 1, 1, 1, 0, 1, 1, 0, 0
LOFF, 04, 02, 0, 0, 0, 0, 0, 0, 1, 0
CH1SET, 05, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH2SET, 06, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH3SET, 07, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH4SET, 08, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH5SET, 09, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH6SET, 0A, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH7SET, 0B, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH8SET, 0C, 68, 0, 1, 1, 0, 1, 0, 0, 0
BIAS_SENSP, 0D, FF, 1, 1, 1, 1, 1, 1, 1, 1
BIAS_SENSN, 0E, FF, 1, 1, 1, 1, 1, 1, 1, 1
LOFF_SENSP, 0F, 00, 0, 0, 0, 0, 0, 0, 0, 0
LOFF_SENSN, 10, 00, 0, 0, 0, 0, 0, 0, 0, 0
LOFF_FLIP, 11, 00, 0, 0, 0, 0, 0, 0, 0, 0
LOFF_STATP, 12, 00, 0, 0, 0, 0, 0, 0, 0, 0
LOFF_STATN, 13, 00, 0, 0, 0, 0, 0, 0, 0, 0
GPIO, 14, 0F, 0, 0, 0, 0, 1, 1, 1, 1
MISC1, 15, 00, 0, 0, 0, 0, 0, 0, 0, 0
MISC2, 16, 00, 0, 0, 0, 0, 0, 0, 0, 0
CONFIG4, 17, 00, 0, 0, 0, 0, 0, 0, 0, 0
`;
var ht = `
Daisy ADS Registers
ADS_ID, 00, 3E, 0, 0, 1, 1, 1, 1, 1, 0
CONFIG1, 01, 96, 1, 0, 0, 1, 0, 1, 1, 0
CONFIG2, 02, C0, 1, 1, 0, 0, 0, 0, 0, 0
CONFIG3, 03, EC, 1, 1, 1, 0, 1, 1, 0, 0
LOFF, 04, 02, 0, 0, 0, 0, 0, 0, 1, 0
CH1SET, 05, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH2SET, 06, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH3SET, 07, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH4SET, 08, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH5SET, 09, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH6SET, 0A, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH7SET, 0B, 68, 0, 1, 1, 0, 1, 0, 0, 0
CH8SET, 0C, 68, 0, 1, 1, 0, 1, 0, 0, 0
BIAS_SENSP, 0D, FF, 1, 1, 1, 1, 1, 1, 1, 1
BIAS_SENSN, 0E, FF, 1, 1, 1, 1, 1, 1, 1, 1
LOFF_SENSP, 0F, 00, 0, 0, 0, 0, 0, 0, 0, 0
LOFF_SENSN, 10, 00, 0, 0, 0, 0, 0, 0, 0, 0
LOFF_FLIP, 11, 00, 0, 0, 0, 0, 0, 0, 0, 0
LOFF_STATP, 12, 00, 0, 0, 0, 0, 0, 0, 0, 0
LOFF_STATN, 13, 00, 0, 0, 0, 0, 0, 0, 0, 0
GPIO, 14, 0F, 0, 0, 0, 0, 1, 1, 1, 1
MISC1, 15, 00, 0, 0, 0, 0, 0, 0, 0, 0
MISC2, 16, 00, 0, 0, 0, 0, 0, 0, 0, 0
CONFIG4, 17, 00, 0, 0, 0, 0, 0, 0, 0, 0
`;
var Is = ie.length + Ct.length;
var Bs = ie.length + ht.length + Ct.length;
var Os = ie.length + pt.length;
var gs = ie.length + ht.length + pt.length;
var $ = 2e-3 / Math.pow(2, 4);
var sps10 = 250;
var defaultsetting4 = { sps: sps10, useDCBlock: true, useBandpass: true, bandpassLower: 3, bandpassUpper: 45 };
var ganglionFilterSettings = { "0": JSON.parse(JSON.stringify(defaultsetting4)), "1": JSON.parse(JSON.stringify(defaultsetting4)), "2": JSON.parse(JSON.stringify(defaultsetting4)), "3": JSON.parse(JSON.stringify(defaultsetting4)) };
var defaultChartSetting6 = { nSec: 10, sps: sps10, units: "mV" };
var ganglionChartSettings = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting6)), "1": JSON.parse(JSON.stringify(defaultChartSetting6)), "2": JSON.parse(JSON.stringify(defaultChartSetting6)), "3": JSON.parse(JSON.stringify(defaultChartSetting6)), "ax": JSON.parse(JSON.stringify(defaultChartSetting6)), "ay": JSON.parse(JSON.stringify(defaultChartSetting6)), "az": JSON.parse(JSON.stringify(defaultChartSetting6)) }, generateNewLines: true };
function hrcodec(data) {
  return { hr: data.getInt8(1), timestamp: Date.now() };
}
var heartRateBLESettings = { services: { "heart_rate": { "heart_rate_measurement": { notify: true, notifyCallback: void 0, codec: hrcodec } } } };
var Devices = { BLE: { "nrf5x": nrf5xBLESettings, "hegduino": hegduinoBLESettings, "hegduinoV1": hegduinoV1BLESettings, "cognixionONE": cognixionONEBLESettings, "statechanger": statechangerBLESettings, "blueberry": blueberryBLESettings, "blueberry2": blueberry2BLESettings, "heart_rate": heartRateBLESettings }, USB: { "nrf5x": nrf5xSerialSettings, "freeEEG32": freeeeg32SerialSettings, "freeEEG32_optical": freeeeg32_optical_SerialSettings, "freeEEG128": freeeeg128SerialSettings, "hegduino": hegduinoSerialSettings, "hegduinoV1": hegduinoV1SerialSettings, "cyton": cytonSerialSettings, "cyton_daisy": cytonSerialSettings, "peanut": peanutSerialSettings, "statechanger": statechangerSerialSettings, "cognixionONE": cytonSerialSettings }, BLE_OTHER: {}, USB_OTHER: {}, OTHER: {} };
var textdecoder3 = new TextDecoder();
var BLE = new BLEClient();
var workers = new WorkerService({ routes: [workerCanvasRoutes, subprocessRoutes] });
function initDevice(deviceType, deviceName, options2) {
  let settings = Devices[deviceType][deviceName];
  if (!settings)
    return void 0;
  if (!options2.workerUrl)
    options2.workerUrl = stream_worker_default;
  if (!options2.service)
    options2.service = workers;
  let streamworker = options2.service.addWorker({ url: options2.workerUrl });
  if (options2.routes) {
    for (const key in options2.routes) {
      options2.routes[key].parent = { callback: "decodeAndParseDevice", worker: streamworker };
    }
    options2.service.load(options2.routes);
  }
  if (deviceType.includes("OTHER")) {
    if (typeof options2.ondecoded === "function") {
      settings.ondata = (data) => {
        streamworker.run("decodeAndParseDevice", [data, deviceType, deviceName]).then(options2.ondecoded);
      };
    }
    return new Promise((res, rej) => {
      settings.ondisconnect = () => {
        options2.service.terminate(streamworker._id);
        if (options2.routes) {
          for (const key in options2.routes) {
            options2.service.removeTree(options2.routes[key].tag);
          }
        }
      };
      let init = settings.connect(settings);
      let info = { workers: { streamworker }, disconnect: () => {
        settings.disconnect(settings);
        if (options2.ondisconnect)
          options2.ondisconnect(info);
      }, device: init, options: options2, read: (command) => {
        if (settings.read)
          return new Promise((res2, rej2) => {
            res2(settings.read(settings, command));
          });
      }, write: (command) => {
        if (settings.write)
          return new Promise((res2, rej2) => {
            res2(settings.write(settings, command));
          });
      }, routes: options2.routes };
      if (options2.onconnect)
        options2.onconnect(info);
      res(info);
    }).catch((er) => {
      console.error(er);
      options2.service.terminate(streamworker._id);
      if (options2.routes) {
        for (const key in options2.routes) {
          options2.service.removeTree(options2.routes[key].tag);
        }
      }
    });
  } else if (deviceType === "BLE") {
    for (const primaryUUID in settings.services) {
      for (const characteristic in settings.services[primaryUUID]) {
        if (typeof options2.ondecoded === "function") {
          if (settings.services?.[primaryUUID]?.[characteristic]?.notify) {
            settings.services[primaryUUID][characteristic].notifyCallback = (data) => {
              streamworker.run("decodeAndParseDevice", [data, deviceType, deviceName, primaryUUID, characteristic], [data.buffer]).then(options2.ondecoded);
            };
            break;
          }
        } else if (typeof options2.ondecoded === "object") {
          if (options2.ondecoded[characteristic]) {
            if (settings.services?.[primaryUUID]?.[characteristic]?.notify) {
              settings.services[primaryUUID][characteristic].notifyCallback = (data) => {
                streamworker.run("decodeAndParseDevice", [data, deviceType, deviceName, primaryUUID, characteristic], [data.buffer]).then(options2.ondecoded[characteristic]);
              };
            }
            if (settings.services?.[primaryUUID]?.[characteristic]?.read) {
              settings.services[characteristic].readCallback = (data) => {
                streamworker.run("decodeAndParseDevice", [data, deviceType, deviceName, primaryUUID, characteristic], [data.buffer]).then(options2.ondecoded[characteristic]);
              };
            }
          }
        }
      }
    }
    return new Promise((res, rej) => {
      BLE.setup(settings).then((result) => {
        let info = { workers: { streamworker }, options: options2, device: result, disconnect: async () => {
          await BLE.disconnect(result.deviceId);
          if (options2.ondisconnect)
            options2.ondisconnect(info);
          streamworker.terminate();
          if (options2.routes) {
            for (const key in options2.routes) {
              options2.service.removeTree(options2.routes[key].tag);
            }
          }
        }, read: (command) => {
          return BLE.read(result.device, command.service, command.characteristic, command.ondata, command.timeout);
        }, write: (command) => {
          return BLE.write(result.device, command.service, command.characteristic, command.data, command.callback, command.timeout);
        }, routes: options2.routes };
        if (options2.onconnect)
          options2.onconnect(info);
        res(info);
      }).catch((er) => {
        console.error(er);
        streamworker.terminate();
        if (options2.routes) {
          console.log(options2.routes);
          for (const key in options2.routes) {
            options2.service.removeTree(options2.routes[key].tag);
          }
        }
        rej(er);
      });
    });
  } else if (deviceType === "USB") {
    let serialworker = options2.service.addWorker({ url: options2.workerUrl });
    serialworker.worker.addEventListener("message", (ev) => {
      if (typeof ev.data === "string") {
        if (ev.data.includes("disconnected")) {
          options2.service.terminate(serialworker._id);
          options2.service.terminate(streamworker._id);
          if (options2.routes) {
            for (const key in options2.routes) {
              options2.service.removeTree(options2.routes[key].tag);
            }
          }
        }
      }
    });
    serialworker.post("setupSerial");
    let portId = options2.service.establishMessageChannel(streamworker.worker, serialworker.worker);
    const WS = new WebSerial();
    return new Promise((res, rej) => {
      WS.requestPort(settings.usbVendorId, settings.usbProductId).then((port) => {
        let info = port.getInfo();
        serialworker.run("openPort", { baudRate: settings.baudRate, usbVendorId: info.usbVendorId, usbProductId: info.usbProductId, bufferSize: settings.bufferSize, buffering: settings.buffering ? settings.buffering : void 0, frequency: settings.frequency ? settings.frequency : void 0, pipeTo: { route: "decodeAndParseDevice", _id: portId, extraArgs: [deviceType, deviceName] } }).then((result) => {
          if (settings.write)
            serialworker.post("writeStream", [result._id, settings.write]);
          if (typeof options2.ondecoded === "function")
            streamworker.subscribe("decodeAndParseDevice", options2.ondecoded);
          let info2 = { workers: { streamworker, serialworker }, device: result, options: options2, disconnect: () => {
            serialworker.post("closeStream", result._id);
            if (options2.ondisconnect)
              options2.ondisconnect(info2);
          }, read: () => {
            return new Promise((res2, rej2) => {
              let sub;
              sub = streamworker.subscribe("decodeAndParseDevice", (result2) => {
                serialworker.unsubscribe("decodeAndParseDevice", sub);
                res2(result2);
              });
            });
          }, write: (command) => {
            return serialworker.run("writeStream", [result._id, command]);
          }, routes: options2.routes };
          if (options2.onconnect)
            options2.onconnect(info2);
          res(info2);
        });
      }).catch((er) => {
        console.error(er);
        options2.service.terminate(serialworker._id);
        options2.service.terminate(streamworker._id);
        if (options2.routes) {
          for (const key in options2.routes) {
            options2.service.removeTree(options2.routes[key].tag);
            console.log("removing route", options2.routes[key]);
          }
        }
        rej(er);
      });
    });
  } else
    return void 0;
}

// ../graphscript/examples/audiofeedback/src/plugins/connect/device.js
var tagName8 = "button";
var attributes4 = {
  innerHTML: "Connect Device",
  onclick: (ev) => {
    let mode = document.getElementById("connectmode").value;
    let selected;
    if (mode === "BLE")
      selected = document.getElementById("selectBLE").value;
    else if (mode === "USB")
      selected = document.getElementById("selectUSB").value;
    console.log(selected, ",", mode, ", sps:", Devices[mode][selected].sps);
    let info = initDevice(mode, selected, {
      ondecoded: (data) => {
        gameState_default.raw = data;
        if (data.heg) {
          let heg = Array.isArray(data.heg) ? data.heg[data.heg.length - 1] : data.heg;
          gameState_default.currentHEG = heg;
          gameState_default.lastTimestamp = gameState_default.currentTimestamp;
          gameState_default.currentTimestamp = Array.isArray(data.timestamp) ? data.timestamp[data.timestamp.length - 1] : data.timestamp;
          gameState_default.dataFrameTime = gameState_default.currentTimestamp - gameState_default.lastTimestamp;
          if (!gameState_default.baselineHEG)
            gameState_default.baselineHEG = heg;
          else {
            gameState_default.shortChange = gameState_default.baselineHEG * 0.1 + heg * 0.9 - gameState_default.baselineHEG;
            gameState_default.longChange = gameState_default.baselineHEG * 0.99 + heg * 0.01 - gameState_default.baselineHEG;
            gameState_default.baselineHEG = gameState_default.baselineHEG * 0.9999 + heg * 1e-4;
            let newLocalMax = false;
            if (heg > gameState_default.localMax) {
              gameState_default.localMax = heg;
              newLocalMax = true;
            }
            let shifted = gameState_default.hegDataBuffer.shift();
            gameState_default.hegDataBuffer.push(heg);
            if (gameState_default.localMax === shifted && !newLocalMax) {
              gameState_default.localMax = Math.max(...gameState_default.hegDataBuffer);
            }
            if (gameState_default.playing) {
              let newVol = gameState_default.playing.volume() + gameState_default.longChange / gameState_default.baselineHEG;
              if (newVol < 0)
                newVol = 0;
              if (newVol > 1)
                newVol = 1;
              gameState_default.playing.volume(newVol);
            }
          }
        }
      },
      subprocesses: {
        hr: {
          init: "createSubprocess",
          initArgs: [
            "heartrate",
            {
              sps: Devices[mode][selected].sps
            }
          ],
          route: "runSubprocess",
          callback: (heartbeat) => {
            console.log("heartrate result", heartbeat);
          }
        },
        breath: {
          init: "createSubprocess",
          initArgs: [
            "breath",
            {
              sps: Devices[mode][selected].sps
            }
          ],
          route: "runSubprocess",
          callback: (breath) => {
            console.log("breath detect result", breath);
          }
        },
        csv: {
          route: "appendCSV",
          otherArgs: [`data/${new Date().toISOString()}_${selected}_${mode}.csv`],
          stopped: true
        }
      }
    });
    if (info) {
      info.then((result) => {
        console.log("session", result);
        let cap;
        let csvmenu;
        if (typeof result.subprocesses === "object") {
          if (result.subprocesses.csv) {
            csvmenu = document.getElementById("csvmenu");
            cap = document.createElement("button");
            cap.innerHTML = `Record ${selected} (${mode})`;
            cap.onclick = () => {
              result.subprocesses.csv.setArgs([`data/${new Date().toISOString()}_${selected}_${mode}.csv`]);
              result.subprocesses.csv.start();
              cap.innerHTML = `Stop recording ${selected} (${mode})`;
              cap.onclick = () => {
                result.subprocesses.csv.stop();
                visualizeDirectory("data", csvmenu);
                cap.innerHTML = `Record ${selected} (${mode})`;
              };
            };
            ev.target.parentNode.appendChild(cap);
          }
        }
        result.options.ondisconnect = () => {
          visualizeDirectory("data", csvmenu);
        };
        let disc = document.createElement("button");
        disc.innerHTML = `Disconnect ${selected} (${mode})`;
        disc.onclick = () => {
          result.disconnect();
          disc.remove();
          if (cap)
            cap.remove();
        };
        ev.target.parentNode.appendChild(disc);
      });
    }
  }
};
var device_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/select/ble.js
var ble_exports = {};
__export(ble_exports, {
  default: () => ble_default,
  onrender: () => onrender3,
  tagName: () => tagName9
});
var BLE2 = {
  hegduino: "HEGduino (BLE)",
  blueberry2: "Blueberry (BLE)",
  blueberry: "Blueberry_Legacy (BLE)"
};
var tagName9 = "select";
var onrender3 = (self2) => {
  for (const key in BLE2) {
    self2.innerHTML += `<option value='${key}'>${BLE2[key]}</option>`;
  }
};
var ble_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/select/usb.js
var usb_exports = {};
__export(usb_exports, {
  default: () => usb_default,
  onrender: () => onrender4,
  style: () => style2,
  tagName: () => tagName10
});
var USB = {
  peanut: "Biocomp Peanut HEG (USB)",
  hegduino: "HEGduino (USB)"
};
var tagName10 = "select";
var style2 = { display: "none" };
var onrender4 = (self2) => {
  for (const key in USB) {
    self2.innerHTML += `<option value='${key}'>${USB[key]}</option>`;
  }
};
var usb_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/connect/mode.js
var mode_exports = {};
__export(mode_exports, {
  attributes: () => attributes5,
  default: () => mode_default,
  tagName: () => tagName11
});
var tagName11 = "select";
var attributes5 = {
  innerHTML: `
        <option value='BLE' selected>BLE</option>
        <option value='USB'>USB</option>
    `,
  onchange: (ev) => {
    if (ev.target.value === "BLE") {
      ev.target.parentNode.querySelector("#selectUSB").style.display = "none";
      ev.target.parentNode.querySelector("#selectBLE").style.display = "";
    } else if (ev.target.value === "USB") {
      ev.target.parentNode.querySelector("#selectUSB").style.display = "";
      ev.target.parentNode.querySelector("#selectBLE").style.display = "none";
    }
  }
};
var mode_default = (...input) => input;

// ../graphscript/examples/audiofeedback/src/plugins/connect/header.js
var header_exports2 = {};
__export(header_exports2, {
  default: () => header_default2,
  innerHTML: () => innerHTML3,
  tagName: () => tagName12
});
var tagName12 = "h4";
var innerHTML3 = "Connect to an HEG device";
var header_default2 = (...input) => input;

// demos/audiofeedback.js
var path = "";
var options = {
  filesystem: {
    "package.json": package_default,
    "src/plugins/output/stats/start.js": start_default,
    "src/plugins/output/stats/reset.js": reset_exports,
    "src/plugins/output/waveform.js": waveform_exports,
    "src/plugins/output/csv/menu.js": menu_exports,
    "src/plugins/output/sound/stop.js": stop_exports,
    "src/plugins/output/sound/play.js": play_exports,
    "src/plugins/output/sound/dropdown.js": dropdown_exports,
    "src/plugins/output/sound/header.js": header_exports,
    "src/plugins/connect/device.js": device_exports,
    "src/plugins/select/ble.js": ble_exports,
    "src/plugins/select/usb.js": usb_exports,
    "src/plugins/connect/mode.js": mode_exports,
    "src/plugins/connect/header.js": header_exports2
  }
};

// index.js
var useHTML = false;
var printError = (arr, type, severity = "Error") => {
  arr.forEach((e) => {
    const log = severity === "Warning" ? console.warn : console.error;
    log(`${severity} (${type})`, e);
  });
};
var referenceDiv = document.getElementById("reference");
var importDiv = document.getElementById("import");
var htmlDiv = document.getElementById("html");
var generatedDiv = document.getElementById("generated");
var startExecution = async () => {
  options.path = path;
  options.activate = true;
  options.wasl = core_default;
  options.forceImportFromText = true;
  options.debug = true;
  options.relativeTo = import.meta.url;
  options.callbacks = {
    sourceProgress: (label, i, total) => {
      console.log("Source", label, i, total);
    },
    componentProgress: (label, i, graph) => {
      console.log("Remote Component", label, i, graph);
    },
    progress: (label, i, total) => {
      console.log("Fetch", label, i, total);
    }
  };
  let imported = await runMode(path, options, "import");
  let ref = await runMode(index_wasl_default, options, "reference");
  let info = [
    { wasl: imported, div: importDiv, name: "Import" },
    { wasl: ref, div: referenceDiv, name: "Reference" }
  ];
  const generationContainer = document.getElementById("generatedcontainer");
  if (useHTML) {
    const copy = Object.assign({}, options);
    copy.parentNode = generationContainer;
    to(index_wasl_default, copy);
    let generated = await runMode(generationContainer, options, "generated");
    info.push({ wasl: generated, div: generatedDiv, name: "HTML" });
  } else
    generationContainer.parentNode.remove();
  let refArr = [];
  for (let i in info) {
    let o = info[i];
    console.log("info", o);
    if (o.wasl) {
      console.log(`------------------ ${o.name.toUpperCase()} MODE ------------------`);
      await o.wasl.init();
      await o.wasl.start();
      console.log("Original", o.wasl.original);
      console.log("Resolved", o.wasl.resolved);
      try {
        const str2 = JSON.stringify(o.wasl.original, null, 2);
        o.div.value = str2;
      } catch {
        o.div.value = o.wasl.original;
      }
      refArr.push(o.wasl.original);
    } else
      o.div.value = void 0;
  }
  if (refArr[0] && refArr[1] && refArr[2])
    console.warn("One of the modes has failed for this example!");
};
startExecution();
async function runMode(input, options2, name2 = "import") {
  let wasl;
  if (input) {
    console.log(`Starting ${name2} mode`);
    const optionsCopy = Object.assign({ errors: [], warnings: [] }, options2);
    optionsCopy.parentNode = document.getElementById(`${name2}container`);
    const res = await validate_default(input, optionsCopy);
    console.log(`validate (${name2})`, res);
    if (res) {
      wasl = new core_default(input, optionsCopy);
      console.log(`load (${name2})`, wasl);
      optionsCopy.errors = wasl.errors;
      optionsCopy.warnings = wasl.warnings;
    }
    printError(optionsCopy.errors, "import");
    printError(optionsCopy.warnings, "import", "Warning");
  }
  return wasl;
}
/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.2.3
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
/*!
 *  howler.js v2.2.3
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
/*!
* The buffer module from node.js, for the browser.
*
* @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
* @license  MIT
*/
/*! Capacitor: https://capacitorjs.com/ - MIT License */
/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
